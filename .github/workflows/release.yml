name: release
on:
  push:
    tags:
      - v*.*.*
      - '!v*.*.*-**'
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PROVIDER: kubernetes-the-hard-way
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_REGISTRY_URL: https://registry.npmjs.org
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_API_KEY }}
  NUGET_FEED_URL: https://api.nuget.org/v3/index.json
  PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
  PYPI_USERNAME: "__token__"
  GOVERSION: 1.21.x
  NODEVERSION: 16.x
  PYTHONVERSION: "3.11"
  DOTNETVERSION: |
    6.0.x
    3.1.301
  JAVAVERSION: "11"
jobs:
  prerequisites:
    name: prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}

      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.11.0
        with:
          repo: pulumi/pulumictl

      - name: Install Pulumi CLI
        uses: pulumi/actions@v5

      - name: Build codegen binaries
        run: make codegen

      - name: Build Provider
        run: make provider

      - name: Check worktree clean
        uses: ./.github/actions/check-worktree-clean

      - run: git status --porcelain

      - name: Tar provider binaries
        run: tar -zcf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
          github.workspace }}/bin/ pulumi-resource-${{ env.PROVIDER }}
          pulumi-gen-${{ env.PROVIDER }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pulumi-${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin/provider.tar.gz

  #      - name: Test Provider Library
  #        run: make test_provider

  #      - name: Upload coverage reports to Codecov
  #        uses: codecov/codecov-action@v4
  #        env:
  #          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build_sdks:
    name: build_sdks
    needs: prerequisites
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        language:
          - nodejs
          - python
          - dotnet
          - go
          - java
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}

      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.11.0
        with:
          repo: pulumi/pulumictl

      - name: Install Pulumi CLI
        uses: pulumi/actions@v5

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}
          registry-url: https://registry.npmjs.org

      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVAVERSION }}
          distribution: temurin
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: "7.6"

      - run: make ensure

      - name: Download provider + codegen binaries
        uses: actions/download-artifact@v4
        with:
          name: pulumi-${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin

      - name: UnTar provider binaries
        run: tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
          github.workspace }}/bin

      - name: Restore Binary Permissions
        run: find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;

      - name: Mark prerequisites as up-to-date
        run: make --touch codegen provider

      - name: Generate SDK
        run: make generate_${{ matrix.language }}

      - name: Build SDK
        run: make build_${{ matrix.language }}

      - name: Check worktree clean
        uses: ./.github/actions/check-worktree-clean

      - run: git status --porcelain

      - name: Tar SDK folder
        run: tar -zcf sdk/${{ matrix.language }}.tar.gz -C sdk/${{ matrix.language }} .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.language }}-sdk.tar.gz
          path: ${{ github.workspace }}/sdk/${{ matrix.language }}.tar.gz

  test:
    name: test
    runs-on: ubuntu-latest
    needs:
      - build_sdks
    strategy:
      fail-fast: true
      matrix:
        language:
          - nodejs
          - python
          - dotnet
          - go
          - java
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVERSION }}

      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.11.0
        with:
          repo: pulumi/pulumictl

      - name: Install Pulumi CLI
        uses: pulumi/actions@v5

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}
          registry-url: https://registry.npmjs.org

      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVAVERSION }}
          distribution: temurin
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: "7.6"

      - name: Download provider + codegen binaries
        uses: actions/download-artifact@v4
        with:
          name: pulumi-${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin

      - name: UnTar provider binaries
        run: tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
          github.workspace }}/bin

      - name: Restore Binary Permissions
        run: find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print
          -exec chmod +x {} \;

      - name: Download SDK
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.language }}-sdk.tar.gz
          path: ${{ github.workspace }}/sdk/

      - name: UnTar SDK folder
        run: tar -zxf ${{ github.workspace}}/sdk/${{ matrix.language }}.tar.gz -C ${{
          github.workspace }}/sdk/${{ matrix.language }}

      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

      - name: Install Node dependencies
        run: yarn global add typescript

      - run: dotnet nuget add source ${{ github.workspace }}/nuget

      - name: Install Python deps
        run: |-
          pip3 install virtualenv==20.0.23
          pip3 install pipenv

      - name: Install dependencies
        run: make install_${{ matrix.language}}_sdk

      - name: Install gotestfmt
        uses: GoTestTools/gotestfmt-action@v2
        with:
          version: v2.5.0
          token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Run tests
#        run: >-
#          set -euo pipefail
#
#          cd examples && go test -v -json -count=1 -cover -timeout 2h -tags=${{ matrix.language }} -parallel 4 . 2>&1 | tee /tmp/gotest.log | gotestfmt

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      fail-fast: true
      matrix:
        goversion:
          - ${{ env.GOVERSION }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.goversion }}

      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.11.0
        with:
          repo: pulumi/pulumictl

      - name: Install Pulumi CLI
        uses: pulumi/actions@v5

      - name: Set PreRelease Version
        run: echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version --language generic)"
          >> $GITHUB_ENV

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          args: -p 3 release --rm-dist
          version: latest

  publish_sdk:
    name: Publish SDKs
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.goversion }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVAVERSION }}
          distribution: temurin
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: "7.6"

      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.11.0
        with:
          repo: pulumi/pulumictl

      - name: Install pulumi
        uses: pulumi/actions@v5

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEVERSION }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}

      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHONVERSION }}

      - name: Download python SDK
        uses: actions/download-artifact@v4
        with:
          name: python-sdk.tar.gz
          path: ${{ github.workspace }}/sdk/

      - name: Uncompress python SDK
        run: tar -zxf ${{ github.workspace }}/sdk/python.tar.gz -C
          ${{ github.workspace }}/sdk/python

      - name: Download dotnet SDK
        uses: actions/download-artifact@v4
        with:
          name: dotnet-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/

      - name: Uncompress dotnet SDK
        run: tar -zxf ${{ github.workspace }}/sdk/dotnet.tar.gz -C
          ${{ github.workspace }}/sdk/dotnet

      - name: Download nodejs SDK
        uses: actions/download-artifact@v4
        with:
          name: nodejs-sdk.tar.gz
          path: ${{ github.workspace }}/sdk/

      - name: Uncompress nodejs SDK
        run: tar -zxf ${{ github.workspace }}/sdk/nodejs.tar.gz -C
          ${{ github.workspace }}/sdk/nodejs

      - name: Download java SDK
        uses: actions/download-artifact@v4
        with:
          name: java-sdk.tar.gz
          path: ${{ github.workspace }}/sdk/

      - name: Uncompress java SDK
        run: tar -zxf ${{ github.workspace }}/sdk/java.tar.gz -C
          ${{ github.workspace }}/sdk/java

      - name: Check worktree clean
        uses: ./.github/actions/check-worktree-clean

      - name: Install Twine
        run: python -m pip install pip twine

      - name: Publish PyPi Package
        run: >
          twine upload
          -u "${PYPI_USERNAME}"
          -p "${PYPI_PASSWORD}"
          "${{ github.workspace }}/sdk/python/bin/dist/*"
          --skip-existing
          --verbose

      - uses: JS-DevTools/npm-publish@v3
        with:
          access: "public"
          token: ${{ env.NPM_TOKEN }}
          package: ${{ github.workspace }}/sdk/nodejs/bin/package.json

      - name: publish nuget package
        run: |
          dotnet nuget push ${{ github.workspace }}/sdk/dotnet/bin/Debug/*.nupkg -s ${{ env.NUGET_FEED_URL }} -k ${{ env.NUGET_PUBLISH_KEY }}

      - name: Set PACKAGE_VERSION to Env
        run: echo "PACKAGE_VERSION=$(pulumictl get version --language generic)" >>
          $GITHUB_ENV

      - name: Publish Java SDK
        uses: gradle/gradle-build-action@v3
        with:
          arguments: publishToSonatype closeAndReleaseSonatypeStagingRepository
          build-root-directory: ./sdk/java
          gradle-version: 7.4.1
