// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace UnMango.KubernetesTheHardWay
{
    /// <summary>
    /// TODO
    /// </summary>
    [EnumType]
    public readonly struct Algorithm : IEquatable<Algorithm>
    {
        private readonly string _value;

        private Algorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Algorithm RSA { get; } = new Algorithm("RSA");
        public static Algorithm ECDSA { get; } = new Algorithm("ECDSA");
        public static Algorithm ED25519 { get; } = new Algorithm("ED25519");

        public static bool operator ==(Algorithm left, Algorithm right) => left.Equals(right);
        public static bool operator !=(Algorithm left, Algorithm right) => !left.Equals(right);

        public static explicit operator string(Algorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Algorithm other && Equals(other);
        public bool Equals(Algorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// TODO
    /// </summary>
    [EnumType]
    public readonly struct AllowedUsage : IEquatable<AllowedUsage>
    {
        private readonly string _value;

        private AllowedUsage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AllowedUsage Cert_signing { get; } = new AllowedUsage("cert_signing");
        public static AllowedUsage Client_auth { get; } = new AllowedUsage("client_auth");
        public static AllowedUsage Crl_signing { get; } = new AllowedUsage("crl_signing");
        public static AllowedUsage Digital_signature { get; } = new AllowedUsage("digital_signature");
        public static AllowedUsage Key_encipherment { get; } = new AllowedUsage("key_encipherment");
        public static AllowedUsage Server_auth { get; } = new AllowedUsage("server_auth");

        public static bool operator ==(AllowedUsage left, AllowedUsage right) => left.Equals(right);
        public static bool operator !=(AllowedUsage left, AllowedUsage right) => !left.Equals(right);

        public static explicit operator string(AllowedUsage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowedUsage other && Equals(other);
        public bool Equals(AllowedUsage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// TODO
    /// </summary>
    [EnumType]
    public readonly struct EcdsaCurve : IEquatable<EcdsaCurve>
    {
        private readonly string _value;

        private EcdsaCurve(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EcdsaCurve P224 { get; } = new EcdsaCurve("P224");
        public static EcdsaCurve P256 { get; } = new EcdsaCurve("P256");
        public static EcdsaCurve P384 { get; } = new EcdsaCurve("P384");
        public static EcdsaCurve P521 { get; } = new EcdsaCurve("P521");

        public static bool operator ==(EcdsaCurve left, EcdsaCurve right) => left.Equals(right);
        public static bool operator !=(EcdsaCurve left, EcdsaCurve right) => !left.Equals(right);

        public static explicit operator string(EcdsaCurve value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EcdsaCurve other && Equals(other);
        public bool Equals(EcdsaCurve other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
