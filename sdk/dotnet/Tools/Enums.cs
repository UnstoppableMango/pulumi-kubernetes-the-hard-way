// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace UnMango.KubernetesTheHardWay.Tools
{
    [EnumType]
    public readonly struct CommandLifecycle : IEquatable<CommandLifecycle>
    {
        private readonly string _value;

        private CommandLifecycle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CommandLifecycle Create { get; } = new CommandLifecycle("create");
        public static CommandLifecycle Update { get; } = new CommandLifecycle("update");
        public static CommandLifecycle Delete { get; } = new CommandLifecycle("delete");

        public static bool operator ==(CommandLifecycle left, CommandLifecycle right) => left.Equals(right);
        public static bool operator !=(CommandLifecycle left, CommandLifecycle right) => !left.Equals(right);

        public static explicit operator string(CommandLifecycle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CommandLifecycle other && Equals(other);
        public bool Equals(CommandLifecycle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CurlCertType : IEquatable<CurlCertType>
    {
        private readonly string _value;

        private CurlCertType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CurlCertType PEM { get; } = new CurlCertType("PEM");
        public static CurlCertType DER { get; } = new CurlCertType("DER");
        public static CurlCertType ENG { get; } = new CurlCertType("ENG");
        public static CurlCertType P12 { get; } = new CurlCertType("P12");

        public static bool operator ==(CurlCertType left, CurlCertType right) => left.Equals(right);
        public static bool operator !=(CurlCertType left, CurlCertType right) => !left.Equals(right);

        public static explicit operator string(CurlCertType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CurlCertType other && Equals(other);
        public bool Equals(CurlCertType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CurlDelegationLevel : IEquatable<CurlDelegationLevel>
    {
        private readonly string _value;

        private CurlDelegationLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CurlDelegationLevel None { get; } = new CurlDelegationLevel("none");
        public static CurlDelegationLevel Policy { get; } = new CurlDelegationLevel("policy");
        public static CurlDelegationLevel Always { get; } = new CurlDelegationLevel("always");

        public static bool operator ==(CurlDelegationLevel left, CurlDelegationLevel right) => left.Equals(right);
        public static bool operator !=(CurlDelegationLevel left, CurlDelegationLevel right) => !left.Equals(right);

        public static explicit operator string(CurlDelegationLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CurlDelegationLevel other && Equals(other);
        public bool Equals(CurlDelegationLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EtcdctlCommand : IEquatable<EtcdctlCommand>
    {
        private readonly string _value;

        private EtcdctlCommand(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EtcdctlCommand Member { get; } = new EtcdctlCommand("member");
        public static EtcdctlCommand List { get; } = new EtcdctlCommand("list");
        public static EtcdctlCommand Version { get; } = new EtcdctlCommand("version");

        public static bool operator ==(EtcdctlCommand left, EtcdctlCommand right) => left.Equals(right);
        public static bool operator !=(EtcdctlCommand left, EtcdctlCommand right) => !left.Equals(right);

        public static explicit operator string(EtcdctlCommand value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EtcdctlCommand other && Equals(other);
        public bool Equals(EtcdctlCommand other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct HostnamectlCommand : IEquatable<HostnamectlCommand>
    {
        private readonly string _value;

        private HostnamectlCommand(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Show system hostname and related information. If no command is specified, this is the implied default.
        /// </summary>
        public static HostnamectlCommand Status { get; } = new HostnamectlCommand("status");
        /// <summary>
        /// If no argument is given, print the system hostname. If an optional argument NAME is provided then the command changes the system hostname to NAME.
        /// </summary>
        public static HostnamectlCommand Hostname { get; } = new HostnamectlCommand("hostname");
        /// <summary>
        /// If no argument is given, print the icon name of the system. If an optional argument NAME is provided then the command changes the icon name to NAME.
        /// </summary>
        public static HostnamectlCommand Icon_name { get; } = new HostnamectlCommand("icon-name");
        /// <summary>
        /// If no argument is given, print the chassis type. If an optional argument TYPE is provided then the command changes the chassis type to TYPE.
        /// </summary>
        public static HostnamectlCommand Chassis { get; } = new HostnamectlCommand("chassis");
        /// <summary>
        /// If no argument is given, print the deployment environment. If an optional argument ENVIRONMENT is provided then the command changes the deployment environment to ENVIRONMENT.
        /// </summary>
        public static HostnamectlCommand Deployment { get; } = new HostnamectlCommand("deployment");
        /// <summary>
        /// If no argument is given, print the location string for the system. If an optional argument LOCATION is provided then the command changes the location string for the system to LOCATION.
        /// </summary>
        public static HostnamectlCommand Location { get; } = new HostnamectlCommand("location");

        public static bool operator ==(HostnamectlCommand left, HostnamectlCommand right) => left.Equals(right);
        public static bool operator !=(HostnamectlCommand left, HostnamectlCommand right) => !left.Equals(right);

        public static explicit operator string(HostnamectlCommand value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostnamectlCommand other && Equals(other);
        public bool Equals(HostnamectlCommand other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct HostnamectlJsonMode : IEquatable<HostnamectlJsonMode>
    {
        private readonly string _value;

        private HostnamectlJsonMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HostnamectlJsonMode @Short { get; } = new HostnamectlJsonMode("short");
        public static HostnamectlJsonMode Pretty { get; } = new HostnamectlJsonMode("pretty");
        public static HostnamectlJsonMode Off { get; } = new HostnamectlJsonMode("off");

        public static bool operator ==(HostnamectlJsonMode left, HostnamectlJsonMode right) => left.Equals(right);
        public static bool operator !=(HostnamectlJsonMode left, HostnamectlJsonMode right) => !left.Equals(right);

        public static explicit operator string(HostnamectlJsonMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostnamectlJsonMode other && Equals(other);
        public bool Equals(HostnamectlJsonMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SystemctlCommand : IEquatable<SystemctlCommand>
    {
        private readonly string _value;

        private SystemctlCommand(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemctlCommand Bind { get; } = new SystemctlCommand("bind");
        public static SystemctlCommand Cat { get; } = new SystemctlCommand("cat");
        public static SystemctlCommand Clean { get; } = new SystemctlCommand("clean");
        public static SystemctlCommand Daemon_reload { get; } = new SystemctlCommand("daemon-reload");
        public static SystemctlCommand Disable { get; } = new SystemctlCommand("disable");
        public static SystemctlCommand Enable { get; } = new SystemctlCommand("enable");
        public static SystemctlCommand Freeze { get; } = new SystemctlCommand("freeze");
        public static SystemctlCommand Is_active { get; } = new SystemctlCommand("is-active");
        public static SystemctlCommand Is_enabled { get; } = new SystemctlCommand("is-enabled");
        public static SystemctlCommand Is_failed { get; } = new SystemctlCommand("is-failed");
        public static SystemctlCommand Isolate { get; } = new SystemctlCommand("isolate");
        public static SystemctlCommand Kill { get; } = new SystemctlCommand("kill");
        public static SystemctlCommand List_automounts { get; } = new SystemctlCommand("list-automounts");
        public static SystemctlCommand List_dependencies { get; } = new SystemctlCommand("list-dependencies");
        public static SystemctlCommand List_paths { get; } = new SystemctlCommand("list-paths");
        public static SystemctlCommand List_sockets { get; } = new SystemctlCommand("list-sockets");
        public static SystemctlCommand List_timers { get; } = new SystemctlCommand("list-timers");
        public static SystemctlCommand List_units { get; } = new SystemctlCommand("list-units");
        public static SystemctlCommand Mask { get; } = new SystemctlCommand("mask");
        public static SystemctlCommand Mount_image { get; } = new SystemctlCommand("mount-image");
        public static SystemctlCommand Reenable { get; } = new SystemctlCommand("reenable");
        public static SystemctlCommand Reload { get; } = new SystemctlCommand("reload");
        public static SystemctlCommand Reload_or_restart { get; } = new SystemctlCommand("reload-or-restart");
        public static SystemctlCommand Restart { get; } = new SystemctlCommand("restart");
        public static SystemctlCommand Set_property { get; } = new SystemctlCommand("set-property");
        public static SystemctlCommand Show { get; } = new SystemctlCommand("show");
        public static SystemctlCommand Start { get; } = new SystemctlCommand("start");
        public static SystemctlCommand Status { get; } = new SystemctlCommand("status");
        public static SystemctlCommand Stop { get; } = new SystemctlCommand("stop");
        public static SystemctlCommand Thaw { get; } = new SystemctlCommand("thaw");
        public static SystemctlCommand Try_reload_or_restart { get; } = new SystemctlCommand("try-reload-or-restart");
        public static SystemctlCommand Try_restart { get; } = new SystemctlCommand("try-restart");
        public static SystemctlCommand Unmask { get; } = new SystemctlCommand("unmask");

        public static bool operator ==(SystemctlCommand left, SystemctlCommand right) => left.Equals(right);
        public static bool operator !=(SystemctlCommand left, SystemctlCommand right) => !left.Equals(right);

        public static explicit operator string(SystemctlCommand value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemctlCommand other && Equals(other);
        public bool Equals(SystemctlCommand other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TeeMode : IEquatable<TeeMode>
    {
        private readonly string _value;

        private TeeMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TeeMode Warn { get; } = new TeeMode("warn");
        public static TeeMode Warn_nopipe { get; } = new TeeMode("warn-nopipe");
        public static TeeMode Exit { get; } = new TeeMode("exit");
        public static TeeMode Exit_nopipe { get; } = new TeeMode("exit-nopipe");

        public static bool operator ==(TeeMode left, TeeMode right) => left.Equals(right);
        public static bool operator !=(TeeMode left, TeeMode right) => !left.Equals(right);

        public static explicit operator string(TeeMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TeeMode other && Equals(other);
        public bool Equals(TeeMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
