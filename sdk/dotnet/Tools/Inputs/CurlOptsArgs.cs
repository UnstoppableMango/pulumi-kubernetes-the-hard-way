// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.KubernetesTheHardWay.Tools.Inputs
{

    /// <summary>
    /// Abstraction over the `curl` utility on a remote system. Transfer a URL.
    /// </summary>
    public sealed class CurlOptsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
        /// </summary>
        [Input("abstractUnixSocket")]
        public Input<string>? AbstractUnixSocket { get; set; }

        /// <summary>
        /// (HTTPS)  This  option enables the alt-svc parser in curl.
        /// </summary>
        [Input("altSvc")]
        public Input<string>? AltSvc { get; set; }

        /// <summary>
        /// (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
        /// </summary>
        [Input("anyAuth")]
        public Input<bool>? AnyAuth { get; set; }

        /// <summary>
        /// (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
        /// </summary>
        [Input("append")]
        public Input<bool>? Append { get; set; }

        /// <summary>
        /// Use AWS V4 signature authentication in the transfer.
        /// </summary>
        [Input("awsSigv4")]
        public Input<string>? AwsSigv4 { get; set; }

        /// <summary>
        /// (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
        /// </summary>
        [Input("basic")]
        public Input<bool>? Basic { get; set; }

        /// <summary>
        /// (TLS)  Tells curl to use the specified certificate file to verify the peer.
        /// </summary>
        [Input("cacert")]
        public Input<string>? Cacert { get; set; }

        /// <summary>
        /// (TLS) Tells curl to use the specified certificate directory to verify the peer.
        /// </summary>
        [Input("capath")]
        public Input<string>? Capath { get; set; }

        /// <summary>
        /// (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        /// <summary>
        /// (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
        /// </summary>
        [Input("certStatus")]
        public Input<bool>? CertStatus { get; set; }

        /// <summary>
        /// (TLS) Tells curl what type the provided client certificate is using.
        /// </summary>
        [Input("certType")]
        public Input<UnMango.KubernetesTheHardWay.Tools.CurlCertType>? CertType { get; set; }

        /// <summary>
        /// (TLS) Specifies which ciphers to use in the connection.
        /// </summary>
        [Input("ciphers")]
        public Input<string>? Ciphers { get; set; }

        /// <summary>
        /// (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
        /// </summary>
        [Input("compressed")]
        public Input<bool>? Compressed { get; set; }

        /// <summary>
        /// (SCP SFTP) Enables built-in SSH compression.
        /// </summary>
        [Input("compressedSsh")]
        public Input<bool>? CompressedSsh { get; set; }

        /// <summary>
        /// Specify a text file to read curl arguments from.
        /// </summary>
        [Input("config")]
        public Input<string>? Config { get; set; }

        /// <summary>
        /// Maximum  time  in seconds that you allow curl's connection to take.
        /// </summary>
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        /// <summary>
        /// For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
        /// </summary>
        [Input("connectTo")]
        public Input<string>? ConnectTo { get; set; }

        /// <summary>
        /// Continue/Resume a previous file transfer at the given offset.
        /// </summary>
        [Input("continueAt")]
        public Input<string>? ContinueAt { get; set; }

        /// <summary>
        /// (HTTP) Pass the data to the HTTP server in the Cookie header.
        /// </summary>
        [Input("cookie")]
        public Input<string>? Cookie { get; set; }

        /// <summary>
        /// (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
        /// </summary>
        [Input("cookieJar")]
        public Input<string>? CookieJar { get; set; }

        /// <summary>
        /// When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
        /// </summary>
        [Input("createDirs")]
        public Input<bool>? CreateDirs { get; set; }

        /// <summary>
        /// (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644.
        /// </summary>
        [Input("createFileMode")]
        public Input<string>? CreateFileMode { get; set; }

        /// <summary>
        /// (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
        /// </summary>
        [Input("crlf")]
        public Input<bool>? Crlf { get; set; }

        /// <summary>
        /// (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
        /// </summary>
        [Input("crlfFile")]
        public Input<string>? CrlfFile { get; set; }

        /// <summary>
        /// (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
        /// </summary>
        [Input("curves")]
        public Input<string>? Curves { get; set; }

        /// <summary>
        /// (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
        /// </summary>
        [Input("data")]
        public Input<string>? Data { get; set; }

        /// <summary>
        /// (HTTP) This is just an alias for -d, --data.
        /// </summary>
        [Input("dataAscii")]
        public Input<string>? DataAscii { get; set; }

        /// <summary>
        /// (HTTP) This posts data exactly as specified with no extra processing whatsoever.
        /// </summary>
        [Input("dataBinary")]
        public Input<string>? DataBinary { get; set; }

        /// <summary>
        /// (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
        /// </summary>
        [Input("dataRaw")]
        public Input<string>? DataRaw { get; set; }

        /// <summary>
        /// (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
        /// </summary>
        [Input("dataUrlEncode")]
        public Input<string>? DataUrlEncode { get; set; }

        /// <summary>
        /// (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
        /// </summary>
        [Input("delegation")]
        public Input<UnMango.KubernetesTheHardWay.Tools.CurlDelegationLevel>? Delegation { get; set; }

        /// <summary>
        /// (HTTP) Enables HTTP Digest authentication.
        /// </summary>
        [Input("digest")]
        public Input<bool>? Digest { get; set; }

        /// <summary>
        /// If used as the first parameter on the command line, the curlrc config file will not be read and used.
        /// </summary>
        [Input("disable")]
        public Input<bool>? Disable { get; set; }

        /// <summary>
        /// (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
        /// </summary>
        [Input("disableEprt")]
        public Input<bool>? DisableEprt { get; set; }

        /// <summary>
        /// (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
        /// </summary>
        [Input("disableEpsv")]
        public Input<bool>? DisableEpsv { get; set; }

        /// <summary>
        /// (HTTP) This tells curl to exit if passed a url containing a username.
        /// </summary>
        [Input("disallowUsernameInUrl")]
        public Input<bool>? DisallowUsernameInUrl { get; set; }

        /// <summary>
        /// (DNS)  Tell  curl  to send outgoing DNS requests through &lt;interface&gt;.
        /// </summary>
        [Input("dnsInterface")]
        public Input<string>? DnsInterface { get; set; }

        /// <summary>
        /// (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address.
        /// </summary>
        [Input("dnsIpv4Addr")]
        public Input<string>? DnsIpv4Addr { get; set; }

        /// <summary>
        /// (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address.
        /// </summary>
        [Input("dnsIpv6Addr")]
        public Input<string>? DnsIpv6Addr { get; set; }

        /// <summary>
        /// Set the list of DNS servers to be used instead of the system default.
        /// </summary>
        [Input("dnsServers")]
        public Input<string>? DnsServers { get; set; }

        /// <summary>
        /// Same as --cert-status but used for DoH (DNS-over-HTTPS).
        /// </summary>
        [Input("dohCertStatus")]
        public Input<bool>? DohCertStatus { get; set; }

        /// <summary>
        /// Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
        /// </summary>
        [Input("dohInsecure")]
        public Input<bool>? DohInsecure { get; set; }

        /// <summary>
        /// Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
        /// </summary>
        [Input("dohUrl")]
        public Input<string>? DohUrl { get; set; }

        /// <summary>
        /// (HTTP FTP) Write the received protocol headers to the specified file.
        /// </summary>
        [Input("dumpHeader")]
        public Input<string>? DumpHeader { get; set; }

        /// <summary>
        /// (TLS) Specify the path name to the Entropy Gathering Daemon socket.
        /// </summary>
        [Input("egdFile")]
        public Input<string>? EgdFile { get; set; }

        /// <summary>
        /// (TLS) Select the OpenSSL crypto engine to use for cipher operations.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
        /// </summary>
        [Input("etagCompare")]
        public Input<string>? EtagCompare { get; set; }

        /// <summary>
        /// (HTTP) This option saves an HTTP ETag to the specified file.
        /// </summary>
        [Input("etagSave")]
        public Input<string>? EtagSave { get; set; }

        /// <summary>
        /// (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
        /// </summary>
        [Input("expect100Timeout")]
        public Input<int>? Expect100Timeout { get; set; }

        /// <summary>
        /// (HTTP) Fail silently (no output at all) on server errors.
        /// </summary>
        [Input("fail")]
        public Input<bool>? Fail { get; set; }

        /// <summary>
        /// Fail and exit on the first detected transfer error.
        /// </summary>
        [Input("failEarly")]
        public Input<bool>? FailEarly { get; set; }

        /// <summary>
        /// (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
        /// </summary>
        [Input("failWithBody")]
        public Input<bool>? FailWithBody { get; set; }

        /// <summary>
        /// (TLS) Tells curl to use false start during the TLS handshake.
        /// </summary>
        [Input("falseStart")]
        public Input<bool>? FalseStart { get; set; }

        /// <summary>
        /// (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
        /// </summary>
        [Input("form")]
        public Input<string>? Form { get; set; }

        /// <summary>
        /// (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
        /// </summary>
        [Input("formEscape")]
        public Input<bool>? FormEscape { get; set; }

        /// <summary>
        /// (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
        /// </summary>
        [Input("formName")]
        public Input<string>? FormName { get; set; }

        /// <summary>
        /// (FTP) When an FTP server asks for 'account data' after user name and password has been provided, this data is sent off using the ACCT command.
        /// </summary>
        [Input("ftpAccount")]
        public Input<string>? FtpAccount { get; set; }

        /// <summary>
        /// (FTP) If authenticating with the USER and PASS commands fails, send this command.
        /// </summary>
        [Input("ftpAlternativeUser")]
        public Input<string>? FtpAlternativeUser { get; set; }

        /// <summary>
        /// (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
        /// </summary>
        [Input("ftpCreateDirs")]
        public Input<bool>? FtpCreateDirs { get; set; }

        /// <summary>
        /// (FTP) Control what method curl should use to reach a file on an FTP(S) server.
        /// </summary>
        [Input("ftpMethod")]
        public Input<string>? FtpMethod { get; set; }

        /// <summary>
        /// (FTP) Use passive mode for the data connection.
        /// </summary>
        [Input("ftpPasv")]
        public Input<bool>? FtpPasv { get; set; }

        /// <summary>
        /// (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
        /// </summary>
        [Input("ftpPort")]
        public Input<string>? FtpPort { get; set; }

        /// <summary>
        /// (FTP) Tell curl to send a PRET command before PASV (and EPSV).
        /// </summary>
        [Input("ftpPret")]
        public Input<bool>? FtpPret { get; set; }

        /// <summary>
        /// (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection.
        /// </summary>
        [Input("ftpSkipPasvIp")]
        public Input<bool>? FtpSkipPasvIp { get; set; }

        /// <summary>
        /// (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
        /// </summary>
        [Input("ftpSslCccMode")]
        public Input<string>? FtpSslCccMode { get; set; }

        [Input("urls", required: true)]
        private InputList<string>? _urls;

        /// <summary>
        /// Corresponds to the URLs argument.
        /// </summary>
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        public CurlOptsArgs()
        {
        }
        public static new CurlOptsArgs Empty => new CurlOptsArgs();
    }
}
