// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.KubernetesTheHardWay.Remote
{
    /// <summary>
    /// A Kubernetes worker node.
    /// </summary>
    [KubernetesTheHardWayResourceType("kubernetes-the-hard-way:remote:WorkerNode")]
    public partial class WorkerNode : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// The CPU architecture of the node.
        /// </summary>
        [Output("architecture")]
        public Output<UnMango.KubernetesTheHardWay.Remote.Architecture> Architecture { get; private set; } = null!;

        /// <summary>
        /// The path to the cluster certificate authority file.
        /// </summary>
        [Output("caPath")]
        public Output<string> CaPath { get; private set; } = null!;

        /// <summary>
        /// The CIDR to use for the cluster.
        /// </summary>
        [Output("clusterCIDR")]
        public Output<string?> ClusterCIDR { get; private set; } = null!;

        /// <summary>
        /// The domain for the cluster to use. Defaults to cluster.local.
        /// </summary>
        [Output("clusterDomain")]
        public Output<string?> ClusterDomain { get; private set; } = null!;

        /// <summary>
        /// The CNI bridge plugin configuration.
        /// </summary>
        [Output("cniBridgeConfiguration")]
        public Output<UnMango.KubernetesTheHardWay.Config.CniBridgePluginConfiguration> CniBridgeConfiguration { get; private set; } = null!;

        /// <summary>
        /// The CNI bridge plugin configuration file.
        /// </summary>
        [Output("cniBridgeConfigurationFile")]
        public Output<UnMango.KubernetesTheHardWay.Remote.File> CniBridgeConfigurationFile { get; private set; } = null!;

        /// <summary>
        /// The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
        /// </summary>
        [Output("cniConfigurationDirectory")]
        public Output<string?> CniConfigurationDirectory { get; private set; } = null!;

        /// <summary>
        /// The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
        /// </summary>
        [Output("cniInstallDirectory")]
        public Output<string?> CniInstallDirectory { get; private set; } = null!;

        /// <summary>
        /// The CNI loopback plugin configuration.
        /// </summary>
        [Output("cniLoopbackConfiguration")]
        public Output<UnMango.KubernetesTheHardWay.Config.CniLoopbackPluginConfiguration> CniLoopbackConfiguration { get; private set; } = null!;

        /// <summary>
        /// The CNI loopback plugin configuration file.
        /// </summary>
        [Output("cniLoopbackConfigurationFile")]
        public Output<UnMango.KubernetesTheHardWay.Remote.File> CniLoopbackConfigurationFile { get; private set; } = null!;

        /// <summary>
        /// The CNI configuration mkdir operation.
        /// </summary>
        [Output("cniMkdir")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mkdir> CniMkdir { get; private set; } = null!;

        /// <summary>
        /// The CNI plugin install.
        /// </summary>
        [Output("cniPluginsInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.CniPluginsInstall?> CniPluginsInstall { get; private set; } = null!;

        /// <summary>
        /// The CNI version to use.
        /// </summary>
        [Output("cniVersion")]
        public Output<string?> CniVersion { get; private set; } = null!;

        /// <summary>
        /// The parameters with which to connect to the remote host.
        /// </summary>
        [Output("connection")]
        public Output<Pulumi.Command.Remote.Outputs.Connection> Connection { get; private set; } = null!;

        /// <summary>
        /// The containerd configuration.
        /// </summary>
        [Output("containerdConfiguration")]
        public Output<UnMango.KubernetesTheHardWay.Config.ContainerdConfiguration> ContainerdConfiguration { get; private set; } = null!;

        /// <summary>
        /// The directory to store containerd configuration files. Defaults to /etc/containerd.
        /// </summary>
        [Output("containerdConfigurationDirectory")]
        public Output<string?> ContainerdConfigurationDirectory { get; private set; } = null!;

        /// <summary>
        /// The containerd configuration file.
        /// </summary>
        [Output("containerdConfigurationFile")]
        public Output<UnMango.KubernetesTheHardWay.Remote.File> ContainerdConfigurationFile { get; private set; } = null!;

        /// <summary>
        /// The containerd install.
        /// </summary>
        [Output("containerdInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.ContainerdInstall> ContainerdInstall { get; private set; } = null!;

        /// <summary>
        /// The directory to store the containerd binary. Defaults to /bin.
        /// </summary>
        [Output("containerdInstallDirectory")]
        public Output<string?> ContainerdInstallDirectory { get; private set; } = null!;

        /// <summary>
        /// The containerd configuration mkdir operation.
        /// </summary>
        [Output("containerdMkdir")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mkdir> ContainerdMkdir { get; private set; } = null!;

        /// <summary>
        /// The containerd systemd service.
        /// </summary>
        [Output("containerdService")]
        public Output<UnMango.KubernetesTheHardWay.Remote.ContainerdService> ContainerdService { get; private set; } = null!;

        /// <summary>
        /// The containerd version to use.
        /// </summary>
        [Output("containerdVersion")]
        public Output<string?> ContainerdVersion { get; private set; } = null!;

        /// <summary>
        /// The crictl install.
        /// </summary>
        [Output("crictlInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.CrictlInstall> CrictlInstall { get; private set; } = null!;

        /// <summary>
        /// The directory to store the crictl binary. Defaults to /usr/local/bin.
        /// </summary>
        [Output("crictlInstallDirectory")]
        public Output<string?> CrictlInstallDirectory { get; private set; } = null!;

        /// <summary>
        /// The kube-proxy configuration
        /// </summary>
        [Output("kubeProxyConfiguration")]
        public Output<UnMango.KubernetesTheHardWay.Config.KubeProxyConfiguration> KubeProxyConfiguration { get; private set; } = null!;

        /// <summary>
        /// The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
        /// </summary>
        [Output("kubeProxyConfigurationDirectory")]
        public Output<string?> KubeProxyConfigurationDirectory { get; private set; } = null!;

        /// <summary>
        /// The kube-proxy configuration file.
        /// </summary>
        [Output("kubeProxyConfigurationFile")]
        public Output<UnMango.KubernetesTheHardWay.Remote.File> KubeProxyConfigurationFile { get; private set; } = null!;

        /// <summary>
        /// The kube-proxy install.
        /// </summary>
        [Output("kubeProxyInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.KubeProxyInstall?> KubeProxyInstall { get; private set; } = null!;

        /// <summary>
        /// The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
        /// </summary>
        [Output("kubeProxyInstallDirectory")]
        public Output<string?> KubeProxyInstallDirectory { get; private set; } = null!;

        /// <summary>
        /// The path to the kube-proxy's kubeconfig file.
        /// </summary>
        [Output("kubeProxyKubeconfigPath")]
        public Output<string?> KubeProxyKubeconfigPath { get; private set; } = null!;

        /// <summary>
        /// The kube-proxy configuration mkdir operation.
        /// </summary>
        [Output("kubeProxyMkdir")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mkdir> KubeProxyMkdir { get; private set; } = null!;

        /// <summary>
        /// The kubelet systemd service.
        /// </summary>
        [Output("kubeProxyService")]
        public Output<UnMango.KubernetesTheHardWay.Remote.KubeProxyService> KubeProxyService { get; private set; } = null!;

        /// <summary>
        /// The kubectl install.
        /// </summary>
        [Output("kubectlInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.KubectlInstall> KubectlInstall { get; private set; } = null!;

        /// <summary>
        /// The directory to store the kubectl binary. Defaults to /usr/local/bin.
        /// </summary>
        [Output("kubectlInstallDirectory")]
        public Output<string?> KubectlInstallDirectory { get; private set; } = null!;

        /// <summary>
        /// The path to the kubelet certificate.
        /// </summary>
        [Output("kubeletCertificatePath")]
        public Output<string> KubeletCertificatePath { get; private set; } = null!;

        /// <summary>
        /// The kubelet configuration
        /// </summary>
        [Output("kubeletConfiguration")]
        public Output<UnMango.KubernetesTheHardWay.Config.KubeletConfiguration> KubeletConfiguration { get; private set; } = null!;

        /// <summary>
        /// The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
        /// </summary>
        [Output("kubeletConfigurationDirectory")]
        public Output<string?> KubeletConfigurationDirectory { get; private set; } = null!;

        /// <summary>
        /// The kubelet configuration file.
        /// </summary>
        [Output("kubeletConfigurationFile")]
        public Output<UnMango.KubernetesTheHardWay.Remote.File> KubeletConfigurationFile { get; private set; } = null!;

        /// <summary>
        /// The kubelet install.
        /// </summary>
        [Output("kubeletInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.KubeletInstall> KubeletInstall { get; private set; } = null!;

        /// <summary>
        /// The directory to store the kubelet binary. Defaults to /usr/local/bin.
        /// </summary>
        [Output("kubeletInstallDirectory")]
        public Output<string?> KubeletInstallDirectory { get; private set; } = null!;

        /// <summary>
        /// The path to the kubelet's kubeconfig file.
        /// </summary>
        [Output("kubeletKubeconfigPath")]
        public Output<string?> KubeletKubeconfigPath { get; private set; } = null!;

        /// <summary>
        /// The kubelet configuration mkdir operation.
        /// </summary>
        [Output("kubeletMkdir")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mkdir> KubeletMkdir { get; private set; } = null!;

        /// <summary>
        /// The path to the kubelet private key file.
        /// </summary>
        [Output("kubeletPrivateKeyPath")]
        public Output<string> KubeletPrivateKeyPath { get; private set; } = null!;

        /// <summary>
        /// The kubelet systemd service.
        /// </summary>
        [Output("kubeletService")]
        public Output<UnMango.KubernetesTheHardWay.Remote.KubeletService> KubeletService { get; private set; } = null!;

        /// <summary>
        /// The kubernetes version to use.
        /// </summary>
        [Output("kubernetesVersion")]
        public Output<string?> KubernetesVersion { get; private set; } = null!;

        /// <summary>
        /// The runc install.
        /// </summary>
        [Output("runcInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.RuncInstall?> RuncInstall { get; private set; } = null!;

        /// <summary>
        /// The subnet for the cluster.
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// The /var/lib/kubernetes mkdir operation.
        /// </summary>
        [Output("varLibKubernetesMkdir")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mkdir> VarLibKubernetesMkdir { get; private set; } = null!;

        /// <summary>
        /// The /var/run/kubernetes mkdir operation.
        /// </summary>
        [Output("varRunKubernetesMkdir")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mkdir> VarRunKubernetesMkdir { get; private set; } = null!;


        /// <summary>
        /// Create a WorkerNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkerNode(string name, WorkerNodeArgs args, ComponentResourceOptions? options = null)
            : base("kubernetes-the-hard-way:remote:WorkerNode", name, args ?? new WorkerNodeArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UnstoppableMango",
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class WorkerNodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CPU architecture of the node.
        /// </summary>
        [Input("architecture", required: true)]
        public Input<UnMango.KubernetesTheHardWay.Remote.Architecture> Architecture { get; set; } = null!;

        /// <summary>
        /// The path to the cluster certificate authority file.
        /// </summary>
        [Input("caPath", required: true)]
        public Input<string> CaPath { get; set; } = null!;

        /// <summary>
        /// The CIDR to use for the cluster.
        /// </summary>
        [Input("clusterCIDR")]
        public Input<string>? ClusterCIDR { get; set; }

        /// <summary>
        /// The domain for the cluster to use. Defaults to cluster.local.
        /// </summary>
        [Input("clusterDomain")]
        public Input<string>? ClusterDomain { get; set; }

        /// <summary>
        /// The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
        /// </summary>
        [Input("cniConfigurationDirectory")]
        public Input<string>? CniConfigurationDirectory { get; set; }

        /// <summary>
        /// The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
        /// </summary>
        [Input("cniInstallDirectory")]
        public Input<string>? CniInstallDirectory { get; set; }

        /// <summary>
        /// The CNI version to use.
        /// </summary>
        [Input("cniVersion")]
        public Input<string>? CniVersion { get; set; }

        /// <summary>
        /// The parameters with which to connect to the remote host.
        /// </summary>
        [Input("connection", required: true)]
        public Input<Pulumi.Command.Remote.Inputs.ConnectionArgs> Connection { get; set; } = null!;

        /// <summary>
        /// The directory to store containerd configuration files. Defaults to /etc/containerd.
        /// </summary>
        [Input("containerdConfigurationDirectory")]
        public Input<string>? ContainerdConfigurationDirectory { get; set; }

        /// <summary>
        /// The directory to store the containerd binary. Defaults to /bin.
        /// </summary>
        [Input("containerdInstallDirectory")]
        public Input<string>? ContainerdInstallDirectory { get; set; }

        /// <summary>
        /// The containerd version to use.
        /// </summary>
        [Input("containerdVersion")]
        public Input<string>? ContainerdVersion { get; set; }

        /// <summary>
        /// The directory to store the crictl binary. Defaults to /usr/local/bin.
        /// </summary>
        [Input("crictlInstallDirectory")]
        public Input<string>? CrictlInstallDirectory { get; set; }

        /// <summary>
        /// The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
        /// </summary>
        [Input("kubeProxyConfigurationDirectory")]
        public Input<string>? KubeProxyConfigurationDirectory { get; set; }

        /// <summary>
        /// The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
        /// </summary>
        [Input("kubeProxyInstallDirectory")]
        public Input<string>? KubeProxyInstallDirectory { get; set; }

        /// <summary>
        /// The path to the kube-proxy's kubeconfig file.
        /// </summary>
        [Input("kubeProxyKubeconfigPath")]
        public Input<string>? KubeProxyKubeconfigPath { get; set; }

        /// <summary>
        /// The directory to store the kubectl binary. Defaults to /usr/local/bin.
        /// </summary>
        [Input("kubectlInstallDirectory")]
        public Input<string>? KubectlInstallDirectory { get; set; }

        /// <summary>
        /// The path to the kubelet certificate.
        /// </summary>
        [Input("kubeletCertificatePath", required: true)]
        public Input<string> KubeletCertificatePath { get; set; } = null!;

        /// <summary>
        /// The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
        /// </summary>
        [Input("kubeletConfigurationDirectory")]
        public Input<string>? KubeletConfigurationDirectory { get; set; }

        /// <summary>
        /// The directory to store the kubelet binary. Defaults to /usr/local/bin.
        /// </summary>
        [Input("kubeletInstallDirectory")]
        public Input<string>? KubeletInstallDirectory { get; set; }

        /// <summary>
        /// The path to the kubelet's kubeconfig file.
        /// </summary>
        [Input("kubeletKubeconfigPath")]
        public Input<string>? KubeletKubeconfigPath { get; set; }

        /// <summary>
        /// The path to the kubelet private key file.
        /// </summary>
        [Input("kubeletPrivateKeyPath", required: true)]
        public Input<string> KubeletPrivateKeyPath { get; set; } = null!;

        /// <summary>
        /// The kubernetes version to use.
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// The subnet for the cluster.
        /// </summary>
        [Input("subnet", required: true)]
        public Input<string> Subnet { get; set; } = null!;

        public WorkerNodeArgs()
        {
        }
        public static new WorkerNodeArgs Empty => new WorkerNodeArgs();
    }
}
