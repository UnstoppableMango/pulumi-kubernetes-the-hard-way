// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.KubernetesTheHardWay.Remote.Outputs
{

    /// <summary>
    /// https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#
    /// </summary>
    [OutputType]
    public sealed class SystemdServiceSection
    {
        /// <summary>
        /// Commands that are executed when this service is started.
        /// </summary>
        public readonly string? ExecStart;
        /// <summary>
        /// Specifies when the manager should consider the service to be finished.
        /// </summary>
        public readonly UnMango.KubernetesTheHardWay.Remote.SystemdServiceExitType? ExitType;
        /// <summary>
        /// Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
        /// </summary>
        public readonly UnMango.KubernetesTheHardWay.Remote.SystemdServiceRestart? Restart;
        /// <summary>
        /// Configures the time to sleep before restarting a service (as configured with Restart=).
        /// </summary>
        public readonly string? RestartSec;
        /// <summary>
        /// Configures the mechanism via which the service notifies the manager that the service start-up has finished.
        /// </summary>
        public readonly UnMango.KubernetesTheHardWay.Remote.SystemdServiceType? Type;

        [OutputConstructor]
        private SystemdServiceSection(
            string? execStart,

            UnMango.KubernetesTheHardWay.Remote.SystemdServiceExitType? exitType,

            UnMango.KubernetesTheHardWay.Remote.SystemdServiceRestart? restart,

            string? restartSec,

            UnMango.KubernetesTheHardWay.Remote.SystemdServiceType? type)
        {
            ExecStart = execStart;
            ExitType = exitType;
            Restart = restart;
            RestartSec = restartSec;
            Type = type;
        }
    }
}
