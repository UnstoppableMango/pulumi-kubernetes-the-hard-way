// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace UnMango.KubernetesTheHardWay.Remote
{
    /// <summary>
    /// CPU architecture
    /// </summary>
    [EnumType]
    public readonly struct Architecture : IEquatable<Architecture>
    {
        private readonly string _value;

        private Architecture(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Architecture Amd64 { get; } = new Architecture("amd64");
        public static Architecture Arm64 { get; } = new Architecture("arm64");

        public static bool operator ==(Architecture left, Architecture right) => left.Equals(right);
        public static bool operator !=(Architecture left, Architecture right) => !left.Equals(right);

        public static explicit operator string(Architecture value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Architecture other && Equals(other);
        public bool Equals(Architecture other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// https://www.man7.org/linux/man-pages/man5/systemd.resource-control.5.html
    /// </summary>
    [EnumType]
    public readonly struct SystemdDelegate : IEquatable<SystemdDelegate>
    {
        private readonly string _value;

        private SystemdDelegate(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemdDelegate Yes { get; } = new SystemdDelegate("yes");
        public static SystemdDelegate No { get; } = new SystemdDelegate("no");
        public static SystemdDelegate Cpu { get; } = new SystemdDelegate("cpu");
        public static SystemdDelegate Cpuacct { get; } = new SystemdDelegate("cpuacct");
        public static SystemdDelegate Cpuset { get; } = new SystemdDelegate("cpuset");
        public static SystemdDelegate Io { get; } = new SystemdDelegate("io");
        public static SystemdDelegate Blkio { get; } = new SystemdDelegate("blkio");
        public static SystemdDelegate Memory { get; } = new SystemdDelegate("memory");
        public static SystemdDelegate Devices { get; } = new SystemdDelegate("devices");
        public static SystemdDelegate Pids { get; } = new SystemdDelegate("pids");
        public static SystemdDelegate Bpf_firewall { get; } = new SystemdDelegate("bpf-firewall");
        public static SystemdDelegate Bpf_devices { get; } = new SystemdDelegate("bpf-devices");

        public static bool operator ==(SystemdDelegate left, SystemdDelegate right) => left.Equals(right);
        public static bool operator !=(SystemdDelegate left, SystemdDelegate right) => !left.Equals(right);

        public static explicit operator string(SystemdDelegate value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemdDelegate other && Equals(other);
        public bool Equals(SystemdDelegate other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// https://www.freedesktop.org/software/systemd/man/latest/systemd.kill.html#Description
    /// </summary>
    [EnumType]
    public readonly struct SystemdKillMode : IEquatable<SystemdKillMode>
    {
        private readonly string _value;

        private SystemdKillMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemdKillMode Control_group { get; } = new SystemdKillMode("control-group");
        public static SystemdKillMode Mixed { get; } = new SystemdKillMode("mixed");
        public static SystemdKillMode Process { get; } = new SystemdKillMode("process");
        public static SystemdKillMode None { get; } = new SystemdKillMode("none");

        public static bool operator ==(SystemdKillMode left, SystemdKillMode right) => left.Equals(right);
        public static bool operator !=(SystemdKillMode left, SystemdKillMode right) => !left.Equals(right);

        public static explicit operator string(SystemdKillMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemdKillMode other && Equals(other);
        public bool Equals(SystemdKillMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Systemd service exit type.
    /// </summary>
    [EnumType]
    public readonly struct SystemdServiceExitType : IEquatable<SystemdServiceExitType>
    {
        private readonly string _value;

        private SystemdServiceExitType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemdServiceExitType Main { get; } = new SystemdServiceExitType("main");
        public static SystemdServiceExitType Cgroup { get; } = new SystemdServiceExitType("cgroup");

        public static bool operator ==(SystemdServiceExitType left, SystemdServiceExitType right) => left.Equals(right);
        public static bool operator !=(SystemdServiceExitType left, SystemdServiceExitType right) => !left.Equals(right);

        public static explicit operator string(SystemdServiceExitType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemdServiceExitType other && Equals(other);
        public bool Equals(SystemdServiceExitType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Systemd service restart behavior.
    /// </summary>
    [EnumType]
    public readonly struct SystemdServiceRestart : IEquatable<SystemdServiceRestart>
    {
        private readonly string _value;

        private SystemdServiceRestart(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemdServiceRestart No { get; } = new SystemdServiceRestart("no");
        public static SystemdServiceRestart On_success { get; } = new SystemdServiceRestart("on-success");
        public static SystemdServiceRestart On_failure { get; } = new SystemdServiceRestart("on-failure");
        public static SystemdServiceRestart On_abnormal { get; } = new SystemdServiceRestart("on-abnormal");
        public static SystemdServiceRestart On_watchdog { get; } = new SystemdServiceRestart("on-watchdog");
        public static SystemdServiceRestart On_abort { get; } = new SystemdServiceRestart("on-abort");
        public static SystemdServiceRestart Always { get; } = new SystemdServiceRestart("always");

        public static bool operator ==(SystemdServiceRestart left, SystemdServiceRestart right) => left.Equals(right);
        public static bool operator !=(SystemdServiceRestart left, SystemdServiceRestart right) => !left.Equals(right);

        public static explicit operator string(SystemdServiceRestart value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemdServiceRestart other && Equals(other);
        public bool Equals(SystemdServiceRestart other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Systemd service type.
    /// </summary>
    [EnumType]
    public readonly struct SystemdServiceType : IEquatable<SystemdServiceType>
    {
        private readonly string _value;

        private SystemdServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemdServiceType Simple { get; } = new SystemdServiceType("simple");
        public static SystemdServiceType Exec { get; } = new SystemdServiceType("exec");
        public static SystemdServiceType Forking { get; } = new SystemdServiceType("forking");
        public static SystemdServiceType Oneshot { get; } = new SystemdServiceType("oneshot");
        public static SystemdServiceType Dbus { get; } = new SystemdServiceType("dbus");
        public static SystemdServiceType Notify { get; } = new SystemdServiceType("notify");
        public static SystemdServiceType Notify_reload { get; } = new SystemdServiceType("notify-reload");
        public static SystemdServiceType Idle { get; } = new SystemdServiceType("idle");

        public static bool operator ==(SystemdServiceType left, SystemdServiceType right) => left.Equals(right);
        public static bool operator !=(SystemdServiceType left, SystemdServiceType right) => !left.Equals(right);

        public static explicit operator string(SystemdServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemdServiceType other && Equals(other);
        public bool Equals(SystemdServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
