// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.KubernetesTheHardWay.Remote
{
    /// <summary>
    /// Installs cni-plugins on a remote system.
    /// </summary>
    [KubernetesTheHardWayResourceType("kubernetes-the-hard-way:remote:CniPluginsInstall")]
    public partial class CniPluginsInstall : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// The CPU architecture.
        /// </summary>
        [Output("architecture")]
        public Output<UnMango.KubernetesTheHardWay.Remote.Architecture> Architecture { get; private set; } = null!;

        [Output("archiveName")]
        public Output<string> ArchiveName { get; private set; } = null!;

        [Output("bandwidthPath")]
        public Output<string> BandwidthPath { get; private set; } = null!;

        [Output("bridgePath")]
        public Output<string> BridgePath { get; private set; } = null!;

        /// <summary>
        /// The connection details.
        /// </summary>
        [Output("connection")]
        public Output<Pulumi.Command.Remote.Outputs.Connection> Connection { get; private set; } = null!;

        [Output("dhcpPath")]
        public Output<string> DhcpPath { get; private set; } = null!;

        /// <summary>
        /// Directory to install the binary.
        /// </summary>
        [Output("directory")]
        public Output<string> Directory { get; private set; } = null!;

        [Output("download")]
        public Output<UnMango.KubernetesTheHardWay.Remote.Download> Download { get; private set; } = null!;

        [Output("dummyPath")]
        public Output<string> DummyPath { get; private set; } = null!;

        [Output("firewallPath")]
        public Output<string> FirewallPath { get; private set; } = null!;

        [Output("hostDevicePath")]
        public Output<string> HostDevicePath { get; private set; } = null!;

        [Output("hostLocalPath")]
        public Output<string> HostLocalPath { get; private set; } = null!;

        [Output("ipvlanPath")]
        public Output<string> IpvlanPath { get; private set; } = null!;

        [Output("loopbackPath")]
        public Output<string> LoopbackPath { get; private set; } = null!;

        [Output("macvlanPath")]
        public Output<string> MacvlanPath { get; private set; } = null!;

        [Output("mkdir")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mkdir> Mkdir { get; private set; } = null!;

        [Output("mktemp")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mktemp> Mktemp { get; private set; } = null!;

        [Output("mv")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mv> Mv { get; private set; } = null!;

        [Output("portmapPath")]
        public Output<string> PortmapPath { get; private set; } = null!;

        [Output("ptpPath")]
        public Output<string> PtpPath { get; private set; } = null!;

        [Output("rm")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Rm> Rm { get; private set; } = null!;

        [Output("sbrPath")]
        public Output<string> SbrPath { get; private set; } = null!;

        [Output("staticPath")]
        public Output<string> StaticPath { get; private set; } = null!;

        [Output("tapPath")]
        public Output<string> TapPath { get; private set; } = null!;

        [Output("tar")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Tar> Tar { get; private set; } = null!;

        [Output("tuningPath")]
        public Output<string> TuningPath { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// The version to install.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        [Output("vlanPath")]
        public Output<string> VlanPath { get; private set; } = null!;

        [Output("vrfPath")]
        public Output<string> VrfPath { get; private set; } = null!;


        /// <summary>
        /// Create a CniPluginsInstall resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CniPluginsInstall(string name, CniPluginsInstallArgs args, ComponentResourceOptions? options = null)
            : base("kubernetes-the-hard-way:remote:CniPluginsInstall", name, args ?? new CniPluginsInstallArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UnstoppableMango",
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class CniPluginsInstallArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CPU architecture.
        /// </summary>
        [Input("architecture")]
        public Input<UnMango.KubernetesTheHardWay.Remote.Architecture>? Architecture { get; set; }

        /// <summary>
        /// The connection details.
        /// </summary>
        [Input("connection", required: true)]
        public Input<Pulumi.Command.Remote.Inputs.ConnectionArgs> Connection { get; set; } = null!;

        /// <summary>
        /// Directory to install the binary.
        /// </summary>
        [Input("directory")]
        public Input<string>? Directory { get; set; }

        /// <summary>
        /// The version of to install.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public CniPluginsInstallArgs()
        {
            Directory = "/usr/local/bin";
        }
        public static new CniPluginsInstallArgs Empty => new CniPluginsInstallArgs();
    }
}
