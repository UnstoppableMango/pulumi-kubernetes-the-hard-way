// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.KubernetesTheHardWay.Remote
{
    /// <summary>
    /// A kubernetes control plane node.
    /// </summary>
    [KubernetesTheHardWayResourceType("kubernetes-the-hard-way:remote:ControlPlaneNode")]
    public partial class ControlPlaneNode : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// The path to the root certificate authority certificate.
        /// </summary>
        [Output("caCertificatePath")]
        public Output<string?> CaCertificatePath { get; private set; } = null!;

        /// <summary>
        /// The path to the root certificate authority private key.
        /// </summary>
        [Output("caPrivateKeyPath")]
        public Output<string?> CaPrivateKeyPath { get; private set; } = null!;

        /// <summary>
        /// The parameters with which to connect to the remote host.
        /// </summary>
        [Output("connection")]
        public Output<Pulumi.Command.Remote.Outputs.Connection> Connection { get; private set; } = null!;

        /// <summary>
        /// The v1/EncryptionConfig yaml.
        /// </summary>
        [Output("encryptionConfigYaml")]
        public Output<string?> EncryptionConfigYaml { get; private set; } = null!;

        /// <summary>
        /// The path to the kube-apiserver certificate.
        /// </summary>
        [Output("kubeApiServerCertificatePath")]
        public Output<string?> KubeApiServerCertificatePath { get; private set; } = null!;

        /// <summary>
        /// The kube-apiserver install.
        /// </summary>
        [Output("kubeApiServerInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.KubeApiServerInstall> KubeApiServerInstall { get; private set; } = null!;

        /// <summary>
        /// The path to the kube-apiserver private key.
        /// </summary>
        [Output("kubeApiServerPrivateKeyPath")]
        public Output<string?> KubeApiServerPrivateKeyPath { get; private set; } = null!;

        /// <summary>
        /// The kube-apiserver systemd service.
        /// </summary>
        [Output("kubeApiServerService")]
        public Output<UnMango.KubernetesTheHardWay.Remote.SystemdService?> KubeApiServerService { get; private set; } = null!;

        /// <summary>
        /// The kube-controller-manager install.
        /// </summary>
        [Output("kubeControllerManagerInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.KubeControllerManagerInstall> KubeControllerManagerInstall { get; private set; } = null!;

        /// <summary>
        /// The path to the kube-controller-manager kubeconfig file.
        /// </summary>
        [Output("kubeControllerManagerKubeconfigPath")]
        public Output<string?> KubeControllerManagerKubeconfigPath { get; private set; } = null!;

        /// <summary>
        /// The kube-controller-manager systemd service.
        /// </summary>
        [Output("kubeControllerManagerService")]
        public Output<UnMango.KubernetesTheHardWay.Remote.SystemdService?> KubeControllerManagerService { get; private set; } = null!;

        /// <summary>
        /// The kube-scheduler config yaml.
        /// </summary>
        [Output("kubeSchedulerConfigYaml")]
        public Output<string?> KubeSchedulerConfigYaml { get; private set; } = null!;

        /// <summary>
        /// The kube-scheduler isntall.
        /// </summary>
        [Output("kubeSchedulerInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.KubeSchedulerInstall> KubeSchedulerInstall { get; private set; } = null!;

        /// <summary>
        /// The path to the kube-scheduler kubeconfig file.
        /// </summary>
        [Output("kubeSchedulerKubeconfigPath")]
        public Output<string?> KubeSchedulerKubeconfigPath { get; private set; } = null!;

        /// <summary>
        /// The kube-scheduler systemd service.
        /// </summary>
        [Output("kubeSchedulerService")]
        public Output<UnMango.KubernetesTheHardWay.Remote.SystemdService?> KubeSchedulerService { get; private set; } = null!;

        /// <summary>
        /// The kubectl install.
        /// </summary>
        [Output("kubectlInstall")]
        public Output<UnMango.KubernetesTheHardWay.Remote.KubectlInstall> KubectlInstall { get; private set; } = null!;

        /// <summary>
        /// The kubernetes configuration mkdir operation.
        /// </summary>
        [Output("kubernetesConfigurationMkdir")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mkdir> KubernetesConfigurationMkdir { get; private set; } = null!;

        /// <summary>
        /// The path to the service accounts certificate.
        /// </summary>
        [Output("serviceAccountsCertificatePath")]
        public Output<string?> ServiceAccountsCertificatePath { get; private set; } = null!;

        /// <summary>
        /// The path to the service accounts private key.
        /// </summary>
        [Output("serviceAccountsPrivateKeyPath")]
        public Output<string?> ServiceAccountsPrivateKeyPath { get; private set; } = null!;

        /// <summary>
        /// The /var/lib/kubernetes mkdir operation.
        /// </summary>
        [Output("varLibKubernetesMkdir")]
        public Output<UnMango.KubernetesTheHardWay.Tools.Mkdir> VarLibKubernetesMkdir { get; private set; } = null!;


        /// <summary>
        /// Create a ControlPlaneNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ControlPlaneNode(string name, ControlPlaneNodeArgs args, ComponentResourceOptions? options = null)
            : base("kubernetes-the-hard-way:remote:ControlPlaneNode", name, args ?? new ControlPlaneNodeArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UnstoppableMango",
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ControlPlaneNodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path to the root certificate authority certificate.
        /// </summary>
        [Input("caCertificatePath")]
        public Input<string>? CaCertificatePath { get; set; }

        /// <summary>
        /// The path to the root certificate authority private key.
        /// </summary>
        [Input("caPrivateKeyPath")]
        public Input<string>? CaPrivateKeyPath { get; set; }

        /// <summary>
        /// The parameters with which to connect to the remote host.
        /// </summary>
        [Input("connection", required: true)]
        public Input<Pulumi.Command.Remote.Inputs.ConnectionArgs> Connection { get; set; } = null!;

        /// <summary>
        /// The v1/EncryptionConfig yaml.
        /// </summary>
        [Input("encryptionConfigYaml")]
        public Input<string>? EncryptionConfigYaml { get; set; }

        /// <summary>
        /// The path to the kube-apiserver certificate.
        /// </summary>
        [Input("kubeApiServerCertificatePath")]
        public Input<string>? KubeApiServerCertificatePath { get; set; }

        /// <summary>
        /// The path to the kube-apiserver private key.
        /// </summary>
        [Input("kubeApiServerPrivateKeyPath")]
        public Input<string>? KubeApiServerPrivateKeyPath { get; set; }

        /// <summary>
        /// The path to the kube-controller-manager kubeconfig file.
        /// </summary>
        [Input("kubeControllerManagerKubeconfigPath")]
        public Input<string>? KubeControllerManagerKubeconfigPath { get; set; }

        /// <summary>
        /// The kube-scheduler config yaml.
        /// </summary>
        [Input("kubeSchedulerConfigYaml")]
        public Input<string>? KubeSchedulerConfigYaml { get; set; }

        /// <summary>
        /// The path to the kube-scheduler kubeconfig file.
        /// </summary>
        [Input("kubeSchedulerKubeconfigPath")]
        public Input<string>? KubeSchedulerKubeconfigPath { get; set; }

        /// <summary>
        /// The path to the service accounts certificate.
        /// </summary>
        [Input("serviceAccountsCertificatePath")]
        public Input<string>? ServiceAccountsCertificatePath { get; set; }

        /// <summary>
        /// The path to the service accounts private key.
        /// </summary>
        [Input("serviceAccountsPrivateKeyPath")]
        public Input<string>? ServiceAccountsPrivateKeyPath { get; set; }

        public ControlPlaneNodeArgs()
        {
        }
        public static new ControlPlaneNodeArgs Empty => new ControlPlaneNodeArgs();
    }
}
