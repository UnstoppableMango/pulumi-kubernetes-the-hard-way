// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.KubernetesTheHardWay.Tls
{
    public static class NewCertificate
    {
        /// <summary>
        /// Creates a Certificate configured for the current authority.
        /// </summary>
        public static Task<NewCertificateResult> InvokeAsync(NewCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<NewCertificateResult>("kubernetes-the-hard-way:tls:newCertificate", args ?? new NewCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Creates a Certificate configured for the current authority.
        /// </summary>
        public static Output<NewCertificateResult> Invoke(NewCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<NewCertificateResult>("kubernetes-the-hard-way:tls:newCertificate", args ?? new NewCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class NewCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the algorithm to use when generating the private key.
        /// </summary>
        [Input("algorithm", required: true)]
        public UnMango.KubernetesTheHardWay.Tls.Algorithm Algorithm { get; set; }

        [Input("allowedUses", required: true)]
        private List<UnMango.KubernetesTheHardWay.Tls.AllowedUsage>? _allowedUses;
        public List<UnMango.KubernetesTheHardWay.Tls.AllowedUsage> AllowedUses
        {
            get => _allowedUses ?? (_allowedUses = new List<UnMango.KubernetesTheHardWay.Tls.AllowedUsage>());
            set => _allowedUses = value;
        }

        /// <summary>
        /// The certificate authority to issue the certificate.
        /// </summary>
        [Input("ca", required: true)]
        public UnMango.KubernetesTheHardWay.Tls.RootCa Ca { get; set; } = null!;

        [Input("dnsNames")]
        private List<string>? _dnsNames;

        /// <summary>
        /// List of DNS names for which a certificate is being requested.
        /// </summary>
        public List<string> DnsNames
        {
            get => _dnsNames ?? (_dnsNames = new List<string>());
            set => _dnsNames = value;
        }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("earlyRenewalHours")]
        public int? EarlyRenewalHours { get; set; }

        /// <summary>
        /// When `algorithm` is `ECDSA`, the name of the elliptic curve to use.
        /// </summary>
        [Input("ecdsaCurve")]
        public UnMango.KubernetesTheHardWay.Tls.EcdsaCurve? EcdsaCurve { get; set; }

        [Input("ipAddresses")]
        private List<string>? _ipAddresses;

        /// <summary>
        /// List of IP addresses for which a certificate is being requested.
        /// </summary>
        public List<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new List<string>());
            set => _ipAddresses = value;
        }

        [Input("isCaCertificate")]
        public bool? IsCaCertificate { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("options")]
        public UnMango.KubernetesTheHardWay.Inputs.ResourceOptions? Options { get; set; }

        /// <summary>
        /// When `algorithm` is `RSA`, the size of the generated RSA key, in bits.
        /// </summary>
        [Input("rsaBits")]
        public int? RsaBits { get; set; }

        /// <summary>
        /// Should the generated certificate include an authority key identifier.
        /// </summary>
        [Input("setAuthorityKeyId")]
        public bool? SetAuthorityKeyId { get; set; }

        /// <summary>
        /// Should the generated certificate include a subject key identifier.
        /// </summary>
        [Input("setSubjectKeyId")]
        public bool? SetSubjectKeyId { get; set; }

        [Input("subject")]
        public UnMango.KubernetesTheHardWay.Inputs.CertRequestSubject? Subject { get; set; }

        [Input("uris")]
        private List<string>? _uris;

        /// <summary>
        /// List of URIs for which a certificate is being requested.
        /// </summary>
        public List<string> Uris
        {
            get => _uris ?? (_uris = new List<string>());
            set => _uris = value;
        }

        /// <summary>
        /// Number of hours, after initial issuing, that the certificate will remain valid.
        /// </summary>
        [Input("validityPeriodHours", required: true)]
        public int ValidityPeriodHours { get; set; }

        public NewCertificateArgs()
        {
        }
        public static new NewCertificateArgs Empty => new NewCertificateArgs();
    }

    public sealed class NewCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the algorithm to use when generating the private key.
        /// </summary>
        [Input("algorithm", required: true)]
        public Input<UnMango.KubernetesTheHardWay.Tls.Algorithm> Algorithm { get; set; } = null!;

        [Input("allowedUses", required: true)]
        private InputList<UnMango.KubernetesTheHardWay.Tls.AllowedUsage>? _allowedUses;
        public InputList<UnMango.KubernetesTheHardWay.Tls.AllowedUsage> AllowedUses
        {
            get => _allowedUses ?? (_allowedUses = new InputList<UnMango.KubernetesTheHardWay.Tls.AllowedUsage>());
            set => _allowedUses = value;
        }

        /// <summary>
        /// The certificate authority to issue the certificate.
        /// </summary>
        [Input("ca", required: true)]
        public Input<UnMango.KubernetesTheHardWay.Tls.RootCa> Ca { get; set; } = null!;

        [Input("dnsNames")]
        private InputList<string>? _dnsNames;

        /// <summary>
        /// List of DNS names for which a certificate is being requested.
        /// </summary>
        public InputList<string> DnsNames
        {
            get => _dnsNames ?? (_dnsNames = new InputList<string>());
            set => _dnsNames = value;
        }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("earlyRenewalHours")]
        public Input<int>? EarlyRenewalHours { get; set; }

        /// <summary>
        /// When `algorithm` is `ECDSA`, the name of the elliptic curve to use.
        /// </summary>
        [Input("ecdsaCurve")]
        public Input<UnMango.KubernetesTheHardWay.Tls.EcdsaCurve>? EcdsaCurve { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// List of IP addresses for which a certificate is being requested.
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("isCaCertificate")]
        public Input<bool>? IsCaCertificate { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("options")]
        public UnMango.KubernetesTheHardWay.Inputs.ResourceOptionsArgs? Options { get; set; }

        /// <summary>
        /// When `algorithm` is `RSA`, the size of the generated RSA key, in bits.
        /// </summary>
        [Input("rsaBits")]
        public Input<int>? RsaBits { get; set; }

        /// <summary>
        /// Should the generated certificate include an authority key identifier.
        /// </summary>
        [Input("setAuthorityKeyId")]
        public Input<bool>? SetAuthorityKeyId { get; set; }

        /// <summary>
        /// Should the generated certificate include a subject key identifier.
        /// </summary>
        [Input("setSubjectKeyId")]
        public Input<bool>? SetSubjectKeyId { get; set; }

        [Input("subject")]
        public Input<UnMango.KubernetesTheHardWay.Inputs.CertRequestSubjectArgs>? Subject { get; set; }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// List of URIs for which a certificate is being requested.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set => _uris = value;
        }

        /// <summary>
        /// Number of hours, after initial issuing, that the certificate will remain valid.
        /// </summary>
        [Input("validityPeriodHours", required: true)]
        public Input<int> ValidityPeriodHours { get; set; } = null!;

        public NewCertificateInvokeArgs()
        {
        }
        public static new NewCertificateInvokeArgs Empty => new NewCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class NewCertificateResult
    {
        public readonly UnMango.KubernetesTheHardWay.Tls.Certificate Result;

        [OutputConstructor]
        private NewCertificateResult(UnMango.KubernetesTheHardWay.Tls.Certificate result)
        {
            Result = result;
        }
    }
}
