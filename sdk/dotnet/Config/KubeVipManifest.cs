// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace UnMango.KubernetesTheHardWay.Config
{
    /// <summary>
    /// Gets the static pod manifests for KubeVip.
    /// </summary>
    [KubernetesTheHardWayResourceType("kubernetes-the-hard-way:config:KubeVipManifest")]
    public partial class KubeVipManifest : global::Pulumi.ComponentResource
    {
        [Output("result")]
        public Output<Outputs.PodManifest> Result { get; private set; } = null!;

        /// <summary>
        /// The yaml representation of the manifest.
        /// </summary>
        [Output("yaml")]
        public Output<string> Yaml { get; private set; } = null!;


        /// <summary>
        /// Create a KubeVipManifest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubeVipManifest(string name, KubeVipManifestArgs args, ComponentResourceOptions? options = null)
            : base("kubernetes-the-hard-way:config:KubeVipManifest", name, args ?? new KubeVipManifestArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/UnstoppableMango",
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class KubeVipManifestArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// TODO
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// TODO
        /// </summary>
        [Input("bgpAs")]
        public Input<int>? BgpAs { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("bgpEnable")]
        public Input<bool>? BgpEnable { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("bgpPeerAddress")]
        public Input<string>? BgpPeerAddress { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("bgpPeerAs")]
        public Input<int>? BgpPeerAs { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("bgpPeerPass")]
        public Input<string>? BgpPeerPass { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("bgpPeers")]
        public Input<string>? BgpPeers { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("bgpRouterId")]
        public Input<string>? BgpRouterId { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("cpEnable")]
        public Input<bool>? CpEnable { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("cpNamespace")]
        public Input<string>? CpNamespace { get; set; }

        /// <summary>
        /// Override the kube-vip image.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Path to the kubeconfig on the remote host.
        /// </summary>
        [Input("kubeconfigPath", required: true)]
        public Input<string> KubeconfigPath { get; set; } = null!;

        /// <summary>
        /// Name of the static pod. Defaults to kube-vip.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Namespace for the static pod. Defaults to kube-system.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("svcEnable")]
        public Input<bool>? SvcEnable { get; set; }

        /// <summary>
        /// Version of kube-vip to use.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("vipArp")]
        public Input<bool>? VipArp { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("vipCidr", required: true)]
        public Input<int> VipCidr { get; set; } = null!;

        /// <summary>
        /// TODO
        /// </summary>
        [Input("vipDdns")]
        public Input<bool>? VipDdns { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("vipInterface")]
        public Input<string>? VipInterface { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("vipLeaderElection")]
        public Input<bool>? VipLeaderElection { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("vipLeaseDuration")]
        public Input<int>? VipLeaseDuration { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("vipRenewDeadline")]
        public Input<int>? VipRenewDeadline { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Input("vipRetryPeriod")]
        public Input<int>? VipRetryPeriod { get; set; }

        public KubeVipManifestArgs()
        {
            Name = "kube-vip";
            Namespace = "kube-system";
            Port = 6443;
        }
        public static new KubeVipManifestArgs Empty => new KubeVipManifestArgs();
    }
}
