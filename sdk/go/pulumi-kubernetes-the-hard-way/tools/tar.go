// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/internal"
)

// Abstraction over the `rm` utility on a remote system.
type Tar struct {
	pulumi.ResourceState

	// Corresponds to the [ARCHIVE] argument.
	Archive pulumi.StringOutput `pulumi:"archive"`
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringOutput `pulumi:"binaryPath"`
	// The underlying command
	Command pulumiCommand.CommandOutput `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// Corresponds to the `--directory` option.
	Directory pulumi.StringPtrOutput `pulumi:"directory"`
	// Environment variables
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// Corresponds to the `--extract` option.
	Extract pulumi.BoolOutput `pulumi:"extract"`
	// Corresponds to the [FILE] argument.
	Files pulumi.AnyOutput `pulumi:"files"`
	// Corresponds to the `--gzip` option.
	Gzip pulumi.BoolPtrOutput `pulumi:"gzip"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle CommandLifecyclePtrOutput `pulumi:"lifecycle"`
	// Whether rm should be run when the resource is created or deleted.
	OnDelete pulumi.BoolPtrOutput `pulumi:"onDelete"`
	// Corresponds to the `--strip-components` option.
	Recursive pulumi.IntPtrOutput `pulumi:"recursive"`
	// TODO
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// TODO
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// TODO
	Stdout pulumi.StringOutput `pulumi:"stdout"`
	// TODO
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
}

// NewTar registers a new resource with the given unique name, arguments, and options.
func NewTar(ctx *pulumi.Context,
	name string, args *TarArgs, opts ...pulumi.ResourceOption) (*Tar, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Archive == nil {
		return nil, errors.New("invalid value for required argument 'Archive'")
	}
	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tar
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:tools:Tar", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type tarArgs struct {
	// Corresponds to the [ARCHIVE] argument.
	Archive string `pulumi:"archive"`
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath *string `pulumi:"binaryPath"`
	// Connection details for the remote system
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// Corresponds to the `--directory` option.
	Directory *string `pulumi:"directory"`
	// Environment variables
	Environment map[string]string `pulumi:"environment"`
	// Corresponds to the `--extract` option.
	Extract *bool `pulumi:"extract"`
	// Corresponds to the [FILE] argument.
	Files interface{} `pulumi:"files"`
	// Corresponds to the `--gzip` option.
	Gzip *bool `pulumi:"gzip"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle `pulumi:"lifecycle"`
	// Whether rm should be run when the resource is created or deleted.
	OnDelete *bool `pulumi:"onDelete"`
	// Corresponds to the `--strip-components` option.
	Recursive *int `pulumi:"recursive"`
	// TODO
	Stdin *string `pulumi:"stdin"`
	// TODO
	Triggers []interface{} `pulumi:"triggers"`
}

// The set of arguments for constructing a Tar resource.
type TarArgs struct {
	// Corresponds to the [ARCHIVE] argument.
	Archive pulumi.StringInput
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringPtrInput
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionInput
	// Corresponds to the `--directory` option.
	Directory pulumi.StringPtrInput
	// Environment variables
	Environment pulumi.StringMapInput
	// Corresponds to the `--extract` option.
	Extract pulumi.BoolPtrInput
	// Corresponds to the [FILE] argument.
	Files pulumi.Input
	// Corresponds to the `--gzip` option.
	Gzip pulumi.BoolPtrInput
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle
	// Whether rm should be run when the resource is created or deleted.
	OnDelete pulumi.BoolPtrInput
	// Corresponds to the `--strip-components` option.
	Recursive pulumi.IntPtrInput
	// TODO
	Stdin pulumi.StringPtrInput
	// TODO
	Triggers pulumi.ArrayInput
}

func (TarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tarArgs)(nil)).Elem()
}

type TarInput interface {
	pulumi.Input

	ToTarOutput() TarOutput
	ToTarOutputWithContext(ctx context.Context) TarOutput
}

func (*Tar) ElementType() reflect.Type {
	return reflect.TypeOf((**Tar)(nil)).Elem()
}

func (i *Tar) ToTarOutput() TarOutput {
	return i.ToTarOutputWithContext(context.Background())
}

func (i *Tar) ToTarOutputWithContext(ctx context.Context) TarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarOutput)
}

// TarArrayInput is an input type that accepts TarArray and TarArrayOutput values.
// You can construct a concrete instance of `TarArrayInput` via:
//
//	TarArray{ TarArgs{...} }
type TarArrayInput interface {
	pulumi.Input

	ToTarArrayOutput() TarArrayOutput
	ToTarArrayOutputWithContext(context.Context) TarArrayOutput
}

type TarArray []TarInput

func (TarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tar)(nil)).Elem()
}

func (i TarArray) ToTarArrayOutput() TarArrayOutput {
	return i.ToTarArrayOutputWithContext(context.Background())
}

func (i TarArray) ToTarArrayOutputWithContext(ctx context.Context) TarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarArrayOutput)
}

// TarMapInput is an input type that accepts TarMap and TarMapOutput values.
// You can construct a concrete instance of `TarMapInput` via:
//
//	TarMap{ "key": TarArgs{...} }
type TarMapInput interface {
	pulumi.Input

	ToTarMapOutput() TarMapOutput
	ToTarMapOutputWithContext(context.Context) TarMapOutput
}

type TarMap map[string]TarInput

func (TarMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tar)(nil)).Elem()
}

func (i TarMap) ToTarMapOutput() TarMapOutput {
	return i.ToTarMapOutputWithContext(context.Background())
}

func (i TarMap) ToTarMapOutputWithContext(ctx context.Context) TarMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarMapOutput)
}

type TarOutput struct{ *pulumi.OutputState }

func (TarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tar)(nil)).Elem()
}

func (o TarOutput) ToTarOutput() TarOutput {
	return o
}

func (o TarOutput) ToTarOutputWithContext(ctx context.Context) TarOutput {
	return o
}

// Corresponds to the [ARCHIVE] argument.
func (o TarOutput) Archive() pulumi.StringOutput {
	return o.ApplyT(func(v *Tar) pulumi.StringOutput { return v.Archive }).(pulumi.StringOutput)
}

// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
func (o TarOutput) BinaryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Tar) pulumi.StringOutput { return v.BinaryPath }).(pulumi.StringOutput)
}

// The underlying command
func (o TarOutput) Command() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *Tar) pulumiCommand.CommandOutput { return v.Command }).(pulumiCommand.CommandOutput)
}

// Connection details for the remote system
func (o TarOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *Tar) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// Corresponds to the `--directory` option.
func (o TarOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tar) pulumi.StringPtrOutput { return v.Directory }).(pulumi.StringPtrOutput)
}

// Environment variables
func (o TarOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tar) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// Corresponds to the `--extract` option.
func (o TarOutput) Extract() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tar) pulumi.BoolOutput { return v.Extract }).(pulumi.BoolOutput)
}

// Corresponds to the [FILE] argument.
func (o TarOutput) Files() pulumi.AnyOutput {
	return o.ApplyT(func(v *Tar) pulumi.AnyOutput { return v.Files }).(pulumi.AnyOutput)
}

// Corresponds to the `--gzip` option.
func (o TarOutput) Gzip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tar) pulumi.BoolPtrOutput { return v.Gzip }).(pulumi.BoolPtrOutput)
}

// At what stage(s) in the resource lifecycle should the command be run
func (o TarOutput) Lifecycle() CommandLifecyclePtrOutput {
	return o.ApplyT(func(v *Tar) CommandLifecyclePtrOutput { return v.Lifecycle }).(CommandLifecyclePtrOutput)
}

// Whether rm should be run when the resource is created or deleted.
func (o TarOutput) OnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tar) pulumi.BoolPtrOutput { return v.OnDelete }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--strip-components` option.
func (o TarOutput) Recursive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Tar) pulumi.IntPtrOutput { return v.Recursive }).(pulumi.IntPtrOutput)
}

// TODO
func (o TarOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Tar) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// TODO
func (o TarOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tar) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// TODO
func (o TarOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Tar) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

// TODO
func (o TarOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Tar) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

type TarArrayOutput struct{ *pulumi.OutputState }

func (TarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tar)(nil)).Elem()
}

func (o TarArrayOutput) ToTarArrayOutput() TarArrayOutput {
	return o
}

func (o TarArrayOutput) ToTarArrayOutputWithContext(ctx context.Context) TarArrayOutput {
	return o
}

func (o TarArrayOutput) Index(i pulumi.IntInput) TarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tar {
		return vs[0].([]*Tar)[vs[1].(int)]
	}).(TarOutput)
}

type TarMapOutput struct{ *pulumi.OutputState }

func (TarMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tar)(nil)).Elem()
}

func (o TarMapOutput) ToTarMapOutput() TarMapOutput {
	return o
}

func (o TarMapOutput) ToTarMapOutputWithContext(ctx context.Context) TarMapOutput {
	return o
}

func (o TarMapOutput) MapIndex(k pulumi.StringInput) TarOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tar {
		return vs[0].(map[string]*Tar)[vs[1].(string)]
	}).(TarOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TarInput)(nil)).Elem(), &Tar{})
	pulumi.RegisterInputType(reflect.TypeOf((*TarArrayInput)(nil)).Elem(), TarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TarMapInput)(nil)).Elem(), TarMap{})
	pulumi.RegisterOutputType(TarOutput{})
	pulumi.RegisterOutputType(TarArrayOutput{})
	pulumi.RegisterOutputType(TarMapOutput{})
}
