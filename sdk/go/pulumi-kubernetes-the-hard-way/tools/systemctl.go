// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/internal"
)

// Abstraction over the `systemctl` utility on a remote system.
type Systemctl struct {
	pulumi.ResourceState

	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringOutput `pulumi:"binaryPath"`
	// The underlying command
	Command pulumiCommand.CommandOutput `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// Environment variables
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle CommandLifecyclePtrOutput `pulumi:"lifecycle"`
	// Corresponds to the [PATTERN] argument
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// TODO
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// TODO
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// TODO
	Stdout pulumi.StringOutput `pulumi:"stdout"`
	// Corresponds to the COMMAND argument.
	SystemctlCommand SystemctlCommandOutput `pulumi:"systemctlCommand"`
	// TODO
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// Corresponds to the [UNIT...] argument.
	Unit pulumi.StringOutput `pulumi:"unit"`
}

// NewSystemctl registers a new resource with the given unique name, arguments, and options.
func NewSystemctl(ctx *pulumi.Context,
	name string, args *SystemctlArgs, opts ...pulumi.ResourceOption) (*Systemctl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Unit == nil {
		return nil, errors.New("invalid value for required argument 'Unit'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Systemctl
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:tools:Systemctl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type systemctlArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath *string `pulumi:"binaryPath"`
	// Corresponds to the COMMAND argument.
	Command SystemctlCommand `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// Environment variables
	Environment map[string]string `pulumi:"environment"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle `pulumi:"lifecycle"`
	// Corresponds to the [PATTERN] argument
	Pattern *string `pulumi:"pattern"`
	// TODO
	Stdin *string `pulumi:"stdin"`
	// TODO
	Triggers []interface{} `pulumi:"triggers"`
	// Corresponds to the [UNIT...] argument.
	Unit string `pulumi:"unit"`
}

// The set of arguments for constructing a Systemctl resource.
type SystemctlArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringPtrInput
	// Corresponds to the COMMAND argument.
	Command SystemctlCommand
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionInput
	// Environment variables
	Environment pulumi.StringMapInput
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle
	// Corresponds to the [PATTERN] argument
	Pattern pulumi.StringPtrInput
	// TODO
	Stdin pulumi.StringPtrInput
	// TODO
	Triggers pulumi.ArrayInput
	// Corresponds to the [UNIT...] argument.
	Unit pulumi.StringInput
}

func (SystemctlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemctlArgs)(nil)).Elem()
}

type SystemctlInput interface {
	pulumi.Input

	ToSystemctlOutput() SystemctlOutput
	ToSystemctlOutputWithContext(ctx context.Context) SystemctlOutput
}

func (*Systemctl) ElementType() reflect.Type {
	return reflect.TypeOf((**Systemctl)(nil)).Elem()
}

func (i *Systemctl) ToSystemctlOutput() SystemctlOutput {
	return i.ToSystemctlOutputWithContext(context.Background())
}

func (i *Systemctl) ToSystemctlOutputWithContext(ctx context.Context) SystemctlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemctlOutput)
}

// SystemctlArrayInput is an input type that accepts SystemctlArray and SystemctlArrayOutput values.
// You can construct a concrete instance of `SystemctlArrayInput` via:
//
//	SystemctlArray{ SystemctlArgs{...} }
type SystemctlArrayInput interface {
	pulumi.Input

	ToSystemctlArrayOutput() SystemctlArrayOutput
	ToSystemctlArrayOutputWithContext(context.Context) SystemctlArrayOutput
}

type SystemctlArray []SystemctlInput

func (SystemctlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Systemctl)(nil)).Elem()
}

func (i SystemctlArray) ToSystemctlArrayOutput() SystemctlArrayOutput {
	return i.ToSystemctlArrayOutputWithContext(context.Background())
}

func (i SystemctlArray) ToSystemctlArrayOutputWithContext(ctx context.Context) SystemctlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemctlArrayOutput)
}

// SystemctlMapInput is an input type that accepts SystemctlMap and SystemctlMapOutput values.
// You can construct a concrete instance of `SystemctlMapInput` via:
//
//	SystemctlMap{ "key": SystemctlArgs{...} }
type SystemctlMapInput interface {
	pulumi.Input

	ToSystemctlMapOutput() SystemctlMapOutput
	ToSystemctlMapOutputWithContext(context.Context) SystemctlMapOutput
}

type SystemctlMap map[string]SystemctlInput

func (SystemctlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Systemctl)(nil)).Elem()
}

func (i SystemctlMap) ToSystemctlMapOutput() SystemctlMapOutput {
	return i.ToSystemctlMapOutputWithContext(context.Background())
}

func (i SystemctlMap) ToSystemctlMapOutputWithContext(ctx context.Context) SystemctlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemctlMapOutput)
}

type SystemctlOutput struct{ *pulumi.OutputState }

func (SystemctlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Systemctl)(nil)).Elem()
}

func (o SystemctlOutput) ToSystemctlOutput() SystemctlOutput {
	return o
}

func (o SystemctlOutput) ToSystemctlOutputWithContext(ctx context.Context) SystemctlOutput {
	return o
}

// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
func (o SystemctlOutput) BinaryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Systemctl) pulumi.StringOutput { return v.BinaryPath }).(pulumi.StringOutput)
}

// The underlying command
func (o SystemctlOutput) Command() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *Systemctl) pulumiCommand.CommandOutput { return v.Command }).(pulumiCommand.CommandOutput)
}

// Connection details for the remote system
func (o SystemctlOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *Systemctl) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// Environment variables
func (o SystemctlOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Systemctl) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// At what stage(s) in the resource lifecycle should the command be run
func (o SystemctlOutput) Lifecycle() CommandLifecyclePtrOutput {
	return o.ApplyT(func(v *Systemctl) CommandLifecyclePtrOutput { return v.Lifecycle }).(CommandLifecyclePtrOutput)
}

// Corresponds to the [PATTERN] argument
func (o SystemctlOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Systemctl) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

// TODO
func (o SystemctlOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Systemctl) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// TODO
func (o SystemctlOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Systemctl) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// TODO
func (o SystemctlOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Systemctl) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

// Corresponds to the COMMAND argument.
func (o SystemctlOutput) SystemctlCommand() SystemctlCommandOutput {
	return o.ApplyT(func(v *Systemctl) SystemctlCommandOutput { return v.SystemctlCommand }).(SystemctlCommandOutput)
}

// TODO
func (o SystemctlOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Systemctl) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// Corresponds to the [UNIT...] argument.
func (o SystemctlOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v *Systemctl) pulumi.StringOutput { return v.Unit }).(pulumi.StringOutput)
}

type SystemctlArrayOutput struct{ *pulumi.OutputState }

func (SystemctlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Systemctl)(nil)).Elem()
}

func (o SystemctlArrayOutput) ToSystemctlArrayOutput() SystemctlArrayOutput {
	return o
}

func (o SystemctlArrayOutput) ToSystemctlArrayOutputWithContext(ctx context.Context) SystemctlArrayOutput {
	return o
}

func (o SystemctlArrayOutput) Index(i pulumi.IntInput) SystemctlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Systemctl {
		return vs[0].([]*Systemctl)[vs[1].(int)]
	}).(SystemctlOutput)
}

type SystemctlMapOutput struct{ *pulumi.OutputState }

func (SystemctlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Systemctl)(nil)).Elem()
}

func (o SystemctlMapOutput) ToSystemctlMapOutput() SystemctlMapOutput {
	return o
}

func (o SystemctlMapOutput) ToSystemctlMapOutputWithContext(ctx context.Context) SystemctlMapOutput {
	return o
}

func (o SystemctlMapOutput) MapIndex(k pulumi.StringInput) SystemctlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Systemctl {
		return vs[0].(map[string]*Systemctl)[vs[1].(string)]
	}).(SystemctlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemctlInput)(nil)).Elem(), &Systemctl{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemctlArrayInput)(nil)).Elem(), SystemctlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemctlMapInput)(nil)).Elem(), SystemctlMap{})
	pulumi.RegisterOutputType(SystemctlOutput{})
	pulumi.RegisterOutputType(SystemctlArrayOutput{})
	pulumi.RegisterOutputType(SystemctlMapOutput{})
}
