// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CommandLifecycle string

const (
	CommandLifecycleCreate = CommandLifecycle("create")
	CommandLifecycleUpdate = CommandLifecycle("update")
	CommandLifecycleDelete = CommandLifecycle("delete")
)

type CommandLifecycleOutput struct{ *pulumi.OutputState }

func (CommandLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandLifecycle)(nil)).Elem()
}

func (o CommandLifecycleOutput) ToCommandLifecycleOutput() CommandLifecycleOutput {
	return o
}

func (o CommandLifecycleOutput) ToCommandLifecycleOutputWithContext(ctx context.Context) CommandLifecycleOutput {
	return o
}

func (o CommandLifecycleOutput) ToCommandLifecyclePtrOutput() CommandLifecyclePtrOutput {
	return o.ToCommandLifecyclePtrOutputWithContext(context.Background())
}

func (o CommandLifecycleOutput) ToCommandLifecyclePtrOutputWithContext(ctx context.Context) CommandLifecyclePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommandLifecycle) *CommandLifecycle {
		return &v
	}).(CommandLifecyclePtrOutput)
}

func (o CommandLifecycleOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CommandLifecycleOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CommandLifecycle) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CommandLifecycleOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CommandLifecycleOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CommandLifecycle) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CommandLifecyclePtrOutput struct{ *pulumi.OutputState }

func (CommandLifecyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandLifecycle)(nil)).Elem()
}

func (o CommandLifecyclePtrOutput) ToCommandLifecyclePtrOutput() CommandLifecyclePtrOutput {
	return o
}

func (o CommandLifecyclePtrOutput) ToCommandLifecyclePtrOutputWithContext(ctx context.Context) CommandLifecyclePtrOutput {
	return o
}

func (o CommandLifecyclePtrOutput) Elem() CommandLifecycleOutput {
	return o.ApplyT(func(v *CommandLifecycle) CommandLifecycle {
		if v != nil {
			return *v
		}
		var ret CommandLifecycle
		return ret
	}).(CommandLifecycleOutput)
}

func (o CommandLifecyclePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CommandLifecyclePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CommandLifecycle) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EtcdctlCommand string

const (
	EtcdctlCommandMember = EtcdctlCommand("member")
	EtcdctlCommandList   = EtcdctlCommand("list")
)

func (EtcdctlCommand) ElementType() reflect.Type {
	return reflect.TypeOf((*EtcdctlCommand)(nil)).Elem()
}

func (e EtcdctlCommand) ToEtcdctlCommandOutput() EtcdctlCommandOutput {
	return pulumi.ToOutput(e).(EtcdctlCommandOutput)
}

func (e EtcdctlCommand) ToEtcdctlCommandOutputWithContext(ctx context.Context) EtcdctlCommandOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EtcdctlCommandOutput)
}

func (e EtcdctlCommand) ToEtcdctlCommandPtrOutput() EtcdctlCommandPtrOutput {
	return e.ToEtcdctlCommandPtrOutputWithContext(context.Background())
}

func (e EtcdctlCommand) ToEtcdctlCommandPtrOutputWithContext(ctx context.Context) EtcdctlCommandPtrOutput {
	return EtcdctlCommand(e).ToEtcdctlCommandOutputWithContext(ctx).ToEtcdctlCommandPtrOutputWithContext(ctx)
}

func (e EtcdctlCommand) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EtcdctlCommand) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EtcdctlCommand) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EtcdctlCommand) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EtcdctlCommandOutput struct{ *pulumi.OutputState }

func (EtcdctlCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EtcdctlCommand)(nil)).Elem()
}

func (o EtcdctlCommandOutput) ToEtcdctlCommandOutput() EtcdctlCommandOutput {
	return o
}

func (o EtcdctlCommandOutput) ToEtcdctlCommandOutputWithContext(ctx context.Context) EtcdctlCommandOutput {
	return o
}

func (o EtcdctlCommandOutput) ToEtcdctlCommandPtrOutput() EtcdctlCommandPtrOutput {
	return o.ToEtcdctlCommandPtrOutputWithContext(context.Background())
}

func (o EtcdctlCommandOutput) ToEtcdctlCommandPtrOutputWithContext(ctx context.Context) EtcdctlCommandPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EtcdctlCommand) *EtcdctlCommand {
		return &v
	}).(EtcdctlCommandPtrOutput)
}

func (o EtcdctlCommandOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EtcdctlCommandOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EtcdctlCommand) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EtcdctlCommandOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EtcdctlCommandOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EtcdctlCommand) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EtcdctlCommandPtrOutput struct{ *pulumi.OutputState }

func (EtcdctlCommandPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EtcdctlCommand)(nil)).Elem()
}

func (o EtcdctlCommandPtrOutput) ToEtcdctlCommandPtrOutput() EtcdctlCommandPtrOutput {
	return o
}

func (o EtcdctlCommandPtrOutput) ToEtcdctlCommandPtrOutputWithContext(ctx context.Context) EtcdctlCommandPtrOutput {
	return o
}

func (o EtcdctlCommandPtrOutput) Elem() EtcdctlCommandOutput {
	return o.ApplyT(func(v *EtcdctlCommand) EtcdctlCommand {
		if v != nil {
			return *v
		}
		var ret EtcdctlCommand
		return ret
	}).(EtcdctlCommandOutput)
}

func (o EtcdctlCommandPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EtcdctlCommandPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EtcdctlCommand) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EtcdctlCommandInput is an input type that accepts values of the EtcdctlCommand enum
// A concrete instance of `EtcdctlCommandInput` can be one of the following:
//
//	EtcdctlCommandMember
//	EtcdctlCommandList
type EtcdctlCommandInput interface {
	pulumi.Input

	ToEtcdctlCommandOutput() EtcdctlCommandOutput
	ToEtcdctlCommandOutputWithContext(context.Context) EtcdctlCommandOutput
}

var etcdctlCommandPtrType = reflect.TypeOf((**EtcdctlCommand)(nil)).Elem()

type EtcdctlCommandPtrInput interface {
	pulumi.Input

	ToEtcdctlCommandPtrOutput() EtcdctlCommandPtrOutput
	ToEtcdctlCommandPtrOutputWithContext(context.Context) EtcdctlCommandPtrOutput
}

type etcdctlCommandPtr string

func EtcdctlCommandPtr(v string) EtcdctlCommandPtrInput {
	return (*etcdctlCommandPtr)(&v)
}

func (*etcdctlCommandPtr) ElementType() reflect.Type {
	return etcdctlCommandPtrType
}

func (in *etcdctlCommandPtr) ToEtcdctlCommandPtrOutput() EtcdctlCommandPtrOutput {
	return pulumi.ToOutput(in).(EtcdctlCommandPtrOutput)
}

func (in *etcdctlCommandPtr) ToEtcdctlCommandPtrOutputWithContext(ctx context.Context) EtcdctlCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EtcdctlCommandPtrOutput)
}

type SystemctlCommand string

const (
	SystemctlCommandBind                   = SystemctlCommand("bind")
	SystemctlCommandCat                    = SystemctlCommand("cat")
	SystemctlCommandClean                  = SystemctlCommand("clean")
	SystemctlCommand_Daemon_Reload         = SystemctlCommand("daemon-reload")
	SystemctlCommandDisable                = SystemctlCommand("disable")
	SystemctlCommandEnable                 = SystemctlCommand("enable")
	SystemctlCommandFreeze                 = SystemctlCommand("freeze")
	SystemctlCommand_Is_Active             = SystemctlCommand("is-active")
	SystemctlCommand_Is_Enabled            = SystemctlCommand("is-enabled")
	SystemctlCommand_Is_Failed             = SystemctlCommand("is-failed")
	SystemctlCommandIsolate                = SystemctlCommand("isolate")
	SystemctlCommandKill                   = SystemctlCommand("kill")
	SystemctlCommand_List_Automounts       = SystemctlCommand("list-automounts")
	SystemctlCommand_List_Dependencies     = SystemctlCommand("list-dependencies")
	SystemctlCommand_List_Paths            = SystemctlCommand("list-paths")
	SystemctlCommand_List_Sockets          = SystemctlCommand("list-sockets")
	SystemctlCommand_List_Timers           = SystemctlCommand("list-timers")
	SystemctlCommand_List_Units            = SystemctlCommand("list-units")
	SystemctlCommandMask                   = SystemctlCommand("mask")
	SystemctlCommand_Mount_Image           = SystemctlCommand("mount-image")
	SystemctlCommandReenable               = SystemctlCommand("reenable")
	SystemctlCommandReload                 = SystemctlCommand("reload")
	SystemctlCommand_Reload_Or_Restart     = SystemctlCommand("reload-or-restart")
	SystemctlCommandRestart                = SystemctlCommand("restart")
	SystemctlCommand_Set_Property          = SystemctlCommand("set-property")
	SystemctlCommandShow                   = SystemctlCommand("show")
	SystemctlCommandStart                  = SystemctlCommand("start")
	SystemctlCommandStatus                 = SystemctlCommand("status")
	SystemctlCommandStop                   = SystemctlCommand("stop")
	SystemctlCommandThaw                   = SystemctlCommand("thaw")
	SystemctlCommand_Try_Reload_Or_Restart = SystemctlCommand("try-reload-or-restart")
	SystemctlCommand_Try_Restart           = SystemctlCommand("try-restart")
	SystemctlCommandUnmask                 = SystemctlCommand("unmask")
)

type SystemctlCommandOutput struct{ *pulumi.OutputState }

func (SystemctlCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemctlCommand)(nil)).Elem()
}

func (o SystemctlCommandOutput) ToSystemctlCommandOutput() SystemctlCommandOutput {
	return o
}

func (o SystemctlCommandOutput) ToSystemctlCommandOutputWithContext(ctx context.Context) SystemctlCommandOutput {
	return o
}

func (o SystemctlCommandOutput) ToSystemctlCommandPtrOutput() SystemctlCommandPtrOutput {
	return o.ToSystemctlCommandPtrOutputWithContext(context.Background())
}

func (o SystemctlCommandOutput) ToSystemctlCommandPtrOutputWithContext(ctx context.Context) SystemctlCommandPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemctlCommand) *SystemctlCommand {
		return &v
	}).(SystemctlCommandPtrOutput)
}

func (o SystemctlCommandOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SystemctlCommandOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SystemctlCommand) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SystemctlCommandOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SystemctlCommandOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SystemctlCommand) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SystemctlCommandPtrOutput struct{ *pulumi.OutputState }

func (SystemctlCommandPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemctlCommand)(nil)).Elem()
}

func (o SystemctlCommandPtrOutput) ToSystemctlCommandPtrOutput() SystemctlCommandPtrOutput {
	return o
}

func (o SystemctlCommandPtrOutput) ToSystemctlCommandPtrOutputWithContext(ctx context.Context) SystemctlCommandPtrOutput {
	return o
}

func (o SystemctlCommandPtrOutput) Elem() SystemctlCommandOutput {
	return o.ApplyT(func(v *SystemctlCommand) SystemctlCommand {
		if v != nil {
			return *v
		}
		var ret SystemctlCommand
		return ret
	}).(SystemctlCommandOutput)
}

func (o SystemctlCommandPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SystemctlCommandPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SystemctlCommand) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TeeMode string

const (
	TeeModeWarn         = TeeMode("warn")
	TeeMode_Warn_Nopipe = TeeMode("warn-nopipe")
	TeeModeExit         = TeeMode("exit")
	TeeMode_Exit_Nopipe = TeeMode("exit-nopipe")
)

func (TeeMode) ElementType() reflect.Type {
	return reflect.TypeOf((*TeeMode)(nil)).Elem()
}

func (e TeeMode) ToTeeModeOutput() TeeModeOutput {
	return pulumi.ToOutput(e).(TeeModeOutput)
}

func (e TeeMode) ToTeeModeOutputWithContext(ctx context.Context) TeeModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TeeModeOutput)
}

func (e TeeMode) ToTeeModePtrOutput() TeeModePtrOutput {
	return e.ToTeeModePtrOutputWithContext(context.Background())
}

func (e TeeMode) ToTeeModePtrOutputWithContext(ctx context.Context) TeeModePtrOutput {
	return TeeMode(e).ToTeeModeOutputWithContext(ctx).ToTeeModePtrOutputWithContext(ctx)
}

func (e TeeMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TeeMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TeeMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TeeMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TeeModeOutput struct{ *pulumi.OutputState }

func (TeeModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeeMode)(nil)).Elem()
}

func (o TeeModeOutput) ToTeeModeOutput() TeeModeOutput {
	return o
}

func (o TeeModeOutput) ToTeeModeOutputWithContext(ctx context.Context) TeeModeOutput {
	return o
}

func (o TeeModeOutput) ToTeeModePtrOutput() TeeModePtrOutput {
	return o.ToTeeModePtrOutputWithContext(context.Background())
}

func (o TeeModeOutput) ToTeeModePtrOutputWithContext(ctx context.Context) TeeModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TeeMode) *TeeMode {
		return &v
	}).(TeeModePtrOutput)
}

func (o TeeModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TeeModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TeeMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TeeModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TeeModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TeeMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TeeModePtrOutput struct{ *pulumi.OutputState }

func (TeeModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeeMode)(nil)).Elem()
}

func (o TeeModePtrOutput) ToTeeModePtrOutput() TeeModePtrOutput {
	return o
}

func (o TeeModePtrOutput) ToTeeModePtrOutputWithContext(ctx context.Context) TeeModePtrOutput {
	return o
}

func (o TeeModePtrOutput) Elem() TeeModeOutput {
	return o.ApplyT(func(v *TeeMode) TeeMode {
		if v != nil {
			return *v
		}
		var ret TeeMode
		return ret
	}).(TeeModeOutput)
}

func (o TeeModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TeeModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TeeMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TeeModeInput is an input type that accepts values of the TeeMode enum
// A concrete instance of `TeeModeInput` can be one of the following:
//
//	TeeModeWarn
//	TeeMode_Warn_Nopipe
//	TeeModeExit
//	TeeMode_Exit_Nopipe
type TeeModeInput interface {
	pulumi.Input

	ToTeeModeOutput() TeeModeOutput
	ToTeeModeOutputWithContext(context.Context) TeeModeOutput
}

var teeModePtrType = reflect.TypeOf((**TeeMode)(nil)).Elem()

type TeeModePtrInput interface {
	pulumi.Input

	ToTeeModePtrOutput() TeeModePtrOutput
	ToTeeModePtrOutputWithContext(context.Context) TeeModePtrOutput
}

type teeModePtr string

func TeeModePtr(v string) TeeModePtrInput {
	return (*teeModePtr)(&v)
}

func (*teeModePtr) ElementType() reflect.Type {
	return teeModePtrType
}

func (in *teeModePtr) ToTeeModePtrOutput() TeeModePtrOutput {
	return pulumi.ToOutput(in).(TeeModePtrOutput)
}

func (in *teeModePtr) ToTeeModePtrOutputWithContext(ctx context.Context) TeeModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TeeModePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdctlCommandInput)(nil)).Elem(), EtcdctlCommand("member"))
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdctlCommandPtrInput)(nil)).Elem(), EtcdctlCommand("member"))
	pulumi.RegisterInputType(reflect.TypeOf((*TeeModeInput)(nil)).Elem(), TeeMode("warn"))
	pulumi.RegisterInputType(reflect.TypeOf((*TeeModePtrInput)(nil)).Elem(), TeeMode("warn"))
	pulumi.RegisterOutputType(CommandLifecycleOutput{})
	pulumi.RegisterOutputType(CommandLifecyclePtrOutput{})
	pulumi.RegisterOutputType(EtcdctlCommandOutput{})
	pulumi.RegisterOutputType(EtcdctlCommandPtrOutput{})
	pulumi.RegisterOutputType(SystemctlCommandOutput{})
	pulumi.RegisterOutputType(SystemctlCommandPtrOutput{})
	pulumi.RegisterOutputType(TeeModeOutput{})
	pulumi.RegisterOutputType(TeeModePtrOutput{})
}
