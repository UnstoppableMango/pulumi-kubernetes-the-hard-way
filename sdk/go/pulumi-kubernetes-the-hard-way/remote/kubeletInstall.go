// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/internal"
)

// Installs kubelet on a remote system.
type KubeletInstall struct {
	pulumi.ResourceState

	// The CPU architecture to install.
	Architecture ArchitectureOutput `pulumi:"architecture"`
	// The name of the installed binary.
	BinName pulumi.StringPtrOutput `pulumi:"binName"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The directory to install the binary to.
	Directory pulumi.StringOutput `pulumi:"directory"`
	// The download operation.
	Download DownloadOutput `pulumi:"download"`
	// The mkdir operation.
	Mkdir tools.MkdirOutput `pulumi:"mkdir"`
	// The mktemp operation.
	Mktemp tools.MktempOutput `pulumi:"mktemp"`
	// The mv operation.
	Mv tools.MvOutput `pulumi:"mv"`
	// The path to the installed binary.
	Path pulumi.StringOutput `pulumi:"path"`
	// The rm operation.
	Rm tools.RmOutput `pulumi:"rm"`
	// The url used to download the binary.
	Url pulumi.StringOutput `pulumi:"url"`
	// The version to install.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewKubeletInstall registers a new resource with the given unique name, arguments, and options.
func NewKubeletInstall(ctx *pulumi.Context,
	name string, args *KubeletInstallArgs, opts ...pulumi.ResourceOption) (*KubeletInstall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	if args.Directory == nil {
		args.Directory = pulumi.StringPtr("/usr/local/bin")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubeletInstall
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:KubeletInstall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type kubeletInstallArgs struct {
	// The CPU architecture to install.
	Architecture *Architecture `pulumi:"architecture"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The directory to install the binary to.
	Directory *string `pulumi:"directory"`
	// The version to install.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a KubeletInstall resource.
type KubeletInstallArgs struct {
	// The CPU architecture to install.
	Architecture ArchitecturePtrInput
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
	// The directory to install the binary to.
	Directory pulumi.StringPtrInput
	// The version to install.
	Version pulumi.StringPtrInput
}

func (KubeletInstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubeletInstallArgs)(nil)).Elem()
}

type KubeletInstallInput interface {
	pulumi.Input

	ToKubeletInstallOutput() KubeletInstallOutput
	ToKubeletInstallOutputWithContext(ctx context.Context) KubeletInstallOutput
}

func (*KubeletInstall) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeletInstall)(nil)).Elem()
}

func (i *KubeletInstall) ToKubeletInstallOutput() KubeletInstallOutput {
	return i.ToKubeletInstallOutputWithContext(context.Background())
}

func (i *KubeletInstall) ToKubeletInstallOutputWithContext(ctx context.Context) KubeletInstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeletInstallOutput)
}

// KubeletInstallArrayInput is an input type that accepts KubeletInstallArray and KubeletInstallArrayOutput values.
// You can construct a concrete instance of `KubeletInstallArrayInput` via:
//
//	KubeletInstallArray{ KubeletInstallArgs{...} }
type KubeletInstallArrayInput interface {
	pulumi.Input

	ToKubeletInstallArrayOutput() KubeletInstallArrayOutput
	ToKubeletInstallArrayOutputWithContext(context.Context) KubeletInstallArrayOutput
}

type KubeletInstallArray []KubeletInstallInput

func (KubeletInstallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeletInstall)(nil)).Elem()
}

func (i KubeletInstallArray) ToKubeletInstallArrayOutput() KubeletInstallArrayOutput {
	return i.ToKubeletInstallArrayOutputWithContext(context.Background())
}

func (i KubeletInstallArray) ToKubeletInstallArrayOutputWithContext(ctx context.Context) KubeletInstallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeletInstallArrayOutput)
}

// KubeletInstallMapInput is an input type that accepts KubeletInstallMap and KubeletInstallMapOutput values.
// You can construct a concrete instance of `KubeletInstallMapInput` via:
//
//	KubeletInstallMap{ "key": KubeletInstallArgs{...} }
type KubeletInstallMapInput interface {
	pulumi.Input

	ToKubeletInstallMapOutput() KubeletInstallMapOutput
	ToKubeletInstallMapOutputWithContext(context.Context) KubeletInstallMapOutput
}

type KubeletInstallMap map[string]KubeletInstallInput

func (KubeletInstallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeletInstall)(nil)).Elem()
}

func (i KubeletInstallMap) ToKubeletInstallMapOutput() KubeletInstallMapOutput {
	return i.ToKubeletInstallMapOutputWithContext(context.Background())
}

func (i KubeletInstallMap) ToKubeletInstallMapOutputWithContext(ctx context.Context) KubeletInstallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeletInstallMapOutput)
}

type KubeletInstallOutput struct{ *pulumi.OutputState }

func (KubeletInstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeletInstall)(nil)).Elem()
}

func (o KubeletInstallOutput) ToKubeletInstallOutput() KubeletInstallOutput {
	return o
}

func (o KubeletInstallOutput) ToKubeletInstallOutputWithContext(ctx context.Context) KubeletInstallOutput {
	return o
}

// The CPU architecture to install.
func (o KubeletInstallOutput) Architecture() ArchitectureOutput {
	return o.ApplyT(func(v *KubeletInstall) ArchitectureOutput { return v.Architecture }).(ArchitectureOutput)
}

// The name of the installed binary.
func (o KubeletInstallOutput) BinName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletInstall) pulumi.StringPtrOutput { return v.BinName }).(pulumi.StringPtrOutput)
}

// The parameters with which to connect to the remote host.
func (o KubeletInstallOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *KubeletInstall) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The directory to install the binary to.
func (o KubeletInstallOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeletInstall) pulumi.StringOutput { return v.Directory }).(pulumi.StringOutput)
}

// The download operation.
func (o KubeletInstallOutput) Download() DownloadOutput {
	return o.ApplyT(func(v *KubeletInstall) DownloadOutput { return v.Download }).(DownloadOutput)
}

// The mkdir operation.
func (o KubeletInstallOutput) Mkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *KubeletInstall) tools.MkdirOutput { return v.Mkdir }).(tools.MkdirOutput)
}

// The mktemp operation.
func (o KubeletInstallOutput) Mktemp() tools.MktempOutput {
	return o.ApplyT(func(v *KubeletInstall) tools.MktempOutput { return v.Mktemp }).(tools.MktempOutput)
}

// The mv operation.
func (o KubeletInstallOutput) Mv() tools.MvOutput {
	return o.ApplyT(func(v *KubeletInstall) tools.MvOutput { return v.Mv }).(tools.MvOutput)
}

// The path to the installed binary.
func (o KubeletInstallOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeletInstall) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The rm operation.
func (o KubeletInstallOutput) Rm() tools.RmOutput {
	return o.ApplyT(func(v *KubeletInstall) tools.RmOutput { return v.Rm }).(tools.RmOutput)
}

// The url used to download the binary.
func (o KubeletInstallOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeletInstall) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The version to install.
func (o KubeletInstallOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeletInstall) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type KubeletInstallArrayOutput struct{ *pulumi.OutputState }

func (KubeletInstallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeletInstall)(nil)).Elem()
}

func (o KubeletInstallArrayOutput) ToKubeletInstallArrayOutput() KubeletInstallArrayOutput {
	return o
}

func (o KubeletInstallArrayOutput) ToKubeletInstallArrayOutputWithContext(ctx context.Context) KubeletInstallArrayOutput {
	return o
}

func (o KubeletInstallArrayOutput) Index(i pulumi.IntInput) KubeletInstallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubeletInstall {
		return vs[0].([]*KubeletInstall)[vs[1].(int)]
	}).(KubeletInstallOutput)
}

type KubeletInstallMapOutput struct{ *pulumi.OutputState }

func (KubeletInstallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeletInstall)(nil)).Elem()
}

func (o KubeletInstallMapOutput) ToKubeletInstallMapOutput() KubeletInstallMapOutput {
	return o
}

func (o KubeletInstallMapOutput) ToKubeletInstallMapOutputWithContext(ctx context.Context) KubeletInstallMapOutput {
	return o
}

func (o KubeletInstallMapOutput) MapIndex(k pulumi.StringInput) KubeletInstallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubeletInstall {
		return vs[0].(map[string]*KubeletInstall)[vs[1].(string)]
	}).(KubeletInstallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubeletInstallInput)(nil)).Elem(), &KubeletInstall{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeletInstallArrayInput)(nil)).Elem(), KubeletInstallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeletInstallMapInput)(nil)).Elem(), KubeletInstallMap{})
	pulumi.RegisterOutputType(KubeletInstallOutput{})
	pulumi.RegisterOutputType(KubeletInstallArrayOutput{})
	pulumi.RegisterOutputType(KubeletInstallMapOutput{})
}
