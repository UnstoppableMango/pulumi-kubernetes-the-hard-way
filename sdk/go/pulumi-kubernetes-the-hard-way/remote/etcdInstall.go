// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/tools"
)

// Installs etcd on a remote system
type EtcdInstall struct {
	pulumi.ResourceState

	// The CPU architecture to install.
	Architecture ArchitectureOutput `pulumi:"architecture"`
	// The name of the downloaded archive.
	ArchiveName pulumi.StringOutput `pulumi:"archiveName"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The directory to install the binary to.
	Directory pulumi.StringOutput `pulumi:"directory"`
	// The download operation.
	Download DownloadOutput `pulumi:"download"`
	// The etcd mv operation.
	EtcdMv tools.MvOutput `pulumi:"etcdMv"`
	// The etcd path on the remote system
	EtcdPath pulumi.StringOutput `pulumi:"etcdPath"`
	// The etcdctl mv operation.
	EtcdctlMv tools.MvOutput `pulumi:"etcdctlMv"`
	// The etcdctl path on the remote system
	EtcdctlPath pulumi.StringOutput `pulumi:"etcdctlPath"`
	// The mkdir operation.
	Mkdir tools.MkdirOutput `pulumi:"mkdir"`
	// The mktemp operation.
	Mktemp tools.MktempOutput `pulumi:"mktemp"`
	// The path to the installed binary.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// The rm operation.
	Rm tools.RmOutput `pulumi:"rm"`
	// The tar operation.
	Tar tools.TarOutput `pulumi:"tar"`
	// The url used to download the binary.
	Url pulumi.StringOutput `pulumi:"url"`
	// The version to install.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewEtcdInstall registers a new resource with the given unique name, arguments, and options.
func NewEtcdInstall(ctx *pulumi.Context,
	name string, args *EtcdInstallArgs, opts ...pulumi.ResourceOption) (*EtcdInstall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	if args.Directory == nil {
		args.Directory = pulumi.StringPtr("/usr/local/bin")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EtcdInstall
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:EtcdInstall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type etcdInstallArgs struct {
	// The CPU architecture to install.
	Architecture *Architecture `pulumi:"architecture"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The directory to install the binary to.
	Directory *string `pulumi:"directory"`
	// The version to install.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a EtcdInstall resource.
type EtcdInstallArgs struct {
	// The CPU architecture to install.
	Architecture ArchitecturePtrInput
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
	// The directory to install the binary to.
	Directory pulumi.StringPtrInput
	// The version to install.
	Version pulumi.StringPtrInput
}

func (EtcdInstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*etcdInstallArgs)(nil)).Elem()
}

type EtcdInstallInput interface {
	pulumi.Input

	ToEtcdInstallOutput() EtcdInstallOutput
	ToEtcdInstallOutputWithContext(ctx context.Context) EtcdInstallOutput
}

func (*EtcdInstall) ElementType() reflect.Type {
	return reflect.TypeOf((**EtcdInstall)(nil)).Elem()
}

func (i *EtcdInstall) ToEtcdInstallOutput() EtcdInstallOutput {
	return i.ToEtcdInstallOutputWithContext(context.Background())
}

func (i *EtcdInstall) ToEtcdInstallOutputWithContext(ctx context.Context) EtcdInstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdInstallOutput)
}

// EtcdInstallArrayInput is an input type that accepts EtcdInstallArray and EtcdInstallArrayOutput values.
// You can construct a concrete instance of `EtcdInstallArrayInput` via:
//
//	EtcdInstallArray{ EtcdInstallArgs{...} }
type EtcdInstallArrayInput interface {
	pulumi.Input

	ToEtcdInstallArrayOutput() EtcdInstallArrayOutput
	ToEtcdInstallArrayOutputWithContext(context.Context) EtcdInstallArrayOutput
}

type EtcdInstallArray []EtcdInstallInput

func (EtcdInstallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EtcdInstall)(nil)).Elem()
}

func (i EtcdInstallArray) ToEtcdInstallArrayOutput() EtcdInstallArrayOutput {
	return i.ToEtcdInstallArrayOutputWithContext(context.Background())
}

func (i EtcdInstallArray) ToEtcdInstallArrayOutputWithContext(ctx context.Context) EtcdInstallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdInstallArrayOutput)
}

// EtcdInstallMapInput is an input type that accepts EtcdInstallMap and EtcdInstallMapOutput values.
// You can construct a concrete instance of `EtcdInstallMapInput` via:
//
//	EtcdInstallMap{ "key": EtcdInstallArgs{...} }
type EtcdInstallMapInput interface {
	pulumi.Input

	ToEtcdInstallMapOutput() EtcdInstallMapOutput
	ToEtcdInstallMapOutputWithContext(context.Context) EtcdInstallMapOutput
}

type EtcdInstallMap map[string]EtcdInstallInput

func (EtcdInstallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EtcdInstall)(nil)).Elem()
}

func (i EtcdInstallMap) ToEtcdInstallMapOutput() EtcdInstallMapOutput {
	return i.ToEtcdInstallMapOutputWithContext(context.Background())
}

func (i EtcdInstallMap) ToEtcdInstallMapOutputWithContext(ctx context.Context) EtcdInstallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdInstallMapOutput)
}

type EtcdInstallOutput struct{ *pulumi.OutputState }

func (EtcdInstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EtcdInstall)(nil)).Elem()
}

func (o EtcdInstallOutput) ToEtcdInstallOutput() EtcdInstallOutput {
	return o
}

func (o EtcdInstallOutput) ToEtcdInstallOutputWithContext(ctx context.Context) EtcdInstallOutput {
	return o
}

// The CPU architecture to install.
func (o EtcdInstallOutput) Architecture() ArchitectureOutput {
	return o.ApplyT(func(v *EtcdInstall) ArchitectureOutput { return v.Architecture }).(ArchitectureOutput)
}

// The name of the downloaded archive.
func (o EtcdInstallOutput) ArchiveName() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.ArchiveName }).(pulumi.StringOutput)
}

// The parameters with which to connect to the remote host.
func (o EtcdInstallOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The directory to install the binary to.
func (o EtcdInstallOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.Directory }).(pulumi.StringOutput)
}

// The download operation.
func (o EtcdInstallOutput) Download() DownloadOutput {
	return o.ApplyT(func(v *EtcdInstall) DownloadOutput { return v.Download }).(DownloadOutput)
}

// The etcd mv operation.
func (o EtcdInstallOutput) EtcdMv() tools.MvOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.MvOutput { return v.EtcdMv }).(tools.MvOutput)
}

// The etcd path on the remote system
func (o EtcdInstallOutput) EtcdPath() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.EtcdPath }).(pulumi.StringOutput)
}

// The etcdctl mv operation.
func (o EtcdInstallOutput) EtcdctlMv() tools.MvOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.MvOutput { return v.EtcdctlMv }).(tools.MvOutput)
}

// The etcdctl path on the remote system
func (o EtcdInstallOutput) EtcdctlPath() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.EtcdctlPath }).(pulumi.StringOutput)
}

// The mkdir operation.
func (o EtcdInstallOutput) Mkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.MkdirOutput { return v.Mkdir }).(tools.MkdirOutput)
}

// The mktemp operation.
func (o EtcdInstallOutput) Mktemp() tools.MktempOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.MktempOutput { return v.Mktemp }).(tools.MktempOutput)
}

// The path to the installed binary.
func (o EtcdInstallOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// The rm operation.
func (o EtcdInstallOutput) Rm() tools.RmOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.RmOutput { return v.Rm }).(tools.RmOutput)
}

// The tar operation.
func (o EtcdInstallOutput) Tar() tools.TarOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.TarOutput { return v.Tar }).(tools.TarOutput)
}

// The url used to download the binary.
func (o EtcdInstallOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The version to install.
func (o EtcdInstallOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type EtcdInstallArrayOutput struct{ *pulumi.OutputState }

func (EtcdInstallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EtcdInstall)(nil)).Elem()
}

func (o EtcdInstallArrayOutput) ToEtcdInstallArrayOutput() EtcdInstallArrayOutput {
	return o
}

func (o EtcdInstallArrayOutput) ToEtcdInstallArrayOutputWithContext(ctx context.Context) EtcdInstallArrayOutput {
	return o
}

func (o EtcdInstallArrayOutput) Index(i pulumi.IntInput) EtcdInstallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EtcdInstall {
		return vs[0].([]*EtcdInstall)[vs[1].(int)]
	}).(EtcdInstallOutput)
}

type EtcdInstallMapOutput struct{ *pulumi.OutputState }

func (EtcdInstallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EtcdInstall)(nil)).Elem()
}

func (o EtcdInstallMapOutput) ToEtcdInstallMapOutput() EtcdInstallMapOutput {
	return o
}

func (o EtcdInstallMapOutput) ToEtcdInstallMapOutputWithContext(ctx context.Context) EtcdInstallMapOutput {
	return o
}

func (o EtcdInstallMapOutput) MapIndex(k pulumi.StringInput) EtcdInstallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EtcdInstall {
		return vs[0].(map[string]*EtcdInstall)[vs[1].(string)]
	}).(EtcdInstallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdInstallInput)(nil)).Elem(), &EtcdInstall{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdInstallArrayInput)(nil)).Elem(), EtcdInstallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdInstallMapInput)(nil)).Elem(), EtcdInstallMap{})
	pulumi.RegisterOutputType(EtcdInstallOutput{})
	pulumi.RegisterOutputType(EtcdInstallArrayOutput{})
	pulumi.RegisterOutputType(EtcdInstallMapOutput{})
}
