// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/internal"
)

// Installs kube-controller-manager on a remote system.
type KubeControllerManager struct {
	pulumi.ResourceState

	// The CPU architecture to install.
	Architecture ArchitectureOutput `pulumi:"architecture"`
	// The name of the installed binary.
	BinName pulumi.StringPtrOutput `pulumi:"binName"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The directory to install the binary to.
	Directory pulumi.StringOutput `pulumi:"directory"`
	// The download operation.
	Download DownloadOutput `pulumi:"download"`
	// The mkdir operation.
	Mkdir tools.MkdirOutput `pulumi:"mkdir"`
	// The mktemp operation.
	Mktemp tools.MktempOutput `pulumi:"mktemp"`
	// The mv operation.
	Mv tools.MvOutput `pulumi:"mv"`
	// The path to the installed binary.
	Path pulumi.StringOutput `pulumi:"path"`
	// The rm operation.
	Rm tools.RmOutput `pulumi:"rm"`
	// The url used to download the binary.
	Url pulumi.StringOutput `pulumi:"url"`
	// The version to install.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewKubeControllerManager registers a new resource with the given unique name, arguments, and options.
func NewKubeControllerManager(ctx *pulumi.Context,
	name string, args *KubeControllerManagerArgs, opts ...pulumi.ResourceOption) (*KubeControllerManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	if args.Directory == nil {
		args.Directory = pulumi.StringPtr("/usr/local/bin")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubeControllerManager
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:KubeControllerManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type kubeControllerManagerArgs struct {
	// The CPU architecture to install.
	Architecture *Architecture `pulumi:"architecture"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The directory to install the binary to.
	Directory *string `pulumi:"directory"`
	// The version to install.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a KubeControllerManager resource.
type KubeControllerManagerArgs struct {
	// The CPU architecture to install.
	Architecture ArchitecturePtrInput
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
	// The directory to install the binary to.
	Directory pulumi.StringPtrInput
	// The version to install.
	Version pulumi.StringPtrInput
}

func (KubeControllerManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubeControllerManagerArgs)(nil)).Elem()
}

type KubeControllerManagerInput interface {
	pulumi.Input

	ToKubeControllerManagerOutput() KubeControllerManagerOutput
	ToKubeControllerManagerOutputWithContext(ctx context.Context) KubeControllerManagerOutput
}

func (*KubeControllerManager) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeControllerManager)(nil)).Elem()
}

func (i *KubeControllerManager) ToKubeControllerManagerOutput() KubeControllerManagerOutput {
	return i.ToKubeControllerManagerOutputWithContext(context.Background())
}

func (i *KubeControllerManager) ToKubeControllerManagerOutputWithContext(ctx context.Context) KubeControllerManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeControllerManagerOutput)
}

// KubeControllerManagerArrayInput is an input type that accepts KubeControllerManagerArray and KubeControllerManagerArrayOutput values.
// You can construct a concrete instance of `KubeControllerManagerArrayInput` via:
//
//	KubeControllerManagerArray{ KubeControllerManagerArgs{...} }
type KubeControllerManagerArrayInput interface {
	pulumi.Input

	ToKubeControllerManagerArrayOutput() KubeControllerManagerArrayOutput
	ToKubeControllerManagerArrayOutputWithContext(context.Context) KubeControllerManagerArrayOutput
}

type KubeControllerManagerArray []KubeControllerManagerInput

func (KubeControllerManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeControllerManager)(nil)).Elem()
}

func (i KubeControllerManagerArray) ToKubeControllerManagerArrayOutput() KubeControllerManagerArrayOutput {
	return i.ToKubeControllerManagerArrayOutputWithContext(context.Background())
}

func (i KubeControllerManagerArray) ToKubeControllerManagerArrayOutputWithContext(ctx context.Context) KubeControllerManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeControllerManagerArrayOutput)
}

// KubeControllerManagerMapInput is an input type that accepts KubeControllerManagerMap and KubeControllerManagerMapOutput values.
// You can construct a concrete instance of `KubeControllerManagerMapInput` via:
//
//	KubeControllerManagerMap{ "key": KubeControllerManagerArgs{...} }
type KubeControllerManagerMapInput interface {
	pulumi.Input

	ToKubeControllerManagerMapOutput() KubeControllerManagerMapOutput
	ToKubeControllerManagerMapOutputWithContext(context.Context) KubeControllerManagerMapOutput
}

type KubeControllerManagerMap map[string]KubeControllerManagerInput

func (KubeControllerManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeControllerManager)(nil)).Elem()
}

func (i KubeControllerManagerMap) ToKubeControllerManagerMapOutput() KubeControllerManagerMapOutput {
	return i.ToKubeControllerManagerMapOutputWithContext(context.Background())
}

func (i KubeControllerManagerMap) ToKubeControllerManagerMapOutputWithContext(ctx context.Context) KubeControllerManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeControllerManagerMapOutput)
}

type KubeControllerManagerOutput struct{ *pulumi.OutputState }

func (KubeControllerManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeControllerManager)(nil)).Elem()
}

func (o KubeControllerManagerOutput) ToKubeControllerManagerOutput() KubeControllerManagerOutput {
	return o
}

func (o KubeControllerManagerOutput) ToKubeControllerManagerOutputWithContext(ctx context.Context) KubeControllerManagerOutput {
	return o
}

// The CPU architecture to install.
func (o KubeControllerManagerOutput) Architecture() ArchitectureOutput {
	return o.ApplyT(func(v *KubeControllerManager) ArchitectureOutput { return v.Architecture }).(ArchitectureOutput)
}

// The name of the installed binary.
func (o KubeControllerManagerOutput) BinName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeControllerManager) pulumi.StringPtrOutput { return v.BinName }).(pulumi.StringPtrOutput)
}

// The parameters with which to connect to the remote host.
func (o KubeControllerManagerOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *KubeControllerManager) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The directory to install the binary to.
func (o KubeControllerManagerOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeControllerManager) pulumi.StringOutput { return v.Directory }).(pulumi.StringOutput)
}

// The download operation.
func (o KubeControllerManagerOutput) Download() DownloadOutput {
	return o.ApplyT(func(v *KubeControllerManager) DownloadOutput { return v.Download }).(DownloadOutput)
}

// The mkdir operation.
func (o KubeControllerManagerOutput) Mkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *KubeControllerManager) tools.MkdirOutput { return v.Mkdir }).(tools.MkdirOutput)
}

// The mktemp operation.
func (o KubeControllerManagerOutput) Mktemp() tools.MktempOutput {
	return o.ApplyT(func(v *KubeControllerManager) tools.MktempOutput { return v.Mktemp }).(tools.MktempOutput)
}

// The mv operation.
func (o KubeControllerManagerOutput) Mv() tools.MvOutput {
	return o.ApplyT(func(v *KubeControllerManager) tools.MvOutput { return v.Mv }).(tools.MvOutput)
}

// The path to the installed binary.
func (o KubeControllerManagerOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeControllerManager) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The rm operation.
func (o KubeControllerManagerOutput) Rm() tools.RmOutput {
	return o.ApplyT(func(v *KubeControllerManager) tools.RmOutput { return v.Rm }).(tools.RmOutput)
}

// The url used to download the binary.
func (o KubeControllerManagerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeControllerManager) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The version to install.
func (o KubeControllerManagerOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeControllerManager) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type KubeControllerManagerArrayOutput struct{ *pulumi.OutputState }

func (KubeControllerManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeControllerManager)(nil)).Elem()
}

func (o KubeControllerManagerArrayOutput) ToKubeControllerManagerArrayOutput() KubeControllerManagerArrayOutput {
	return o
}

func (o KubeControllerManagerArrayOutput) ToKubeControllerManagerArrayOutputWithContext(ctx context.Context) KubeControllerManagerArrayOutput {
	return o
}

func (o KubeControllerManagerArrayOutput) Index(i pulumi.IntInput) KubeControllerManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubeControllerManager {
		return vs[0].([]*KubeControllerManager)[vs[1].(int)]
	}).(KubeControllerManagerOutput)
}

type KubeControllerManagerMapOutput struct{ *pulumi.OutputState }

func (KubeControllerManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeControllerManager)(nil)).Elem()
}

func (o KubeControllerManagerMapOutput) ToKubeControllerManagerMapOutput() KubeControllerManagerMapOutput {
	return o
}

func (o KubeControllerManagerMapOutput) ToKubeControllerManagerMapOutputWithContext(ctx context.Context) KubeControllerManagerMapOutput {
	return o
}

func (o KubeControllerManagerMapOutput) MapIndex(k pulumi.StringInput) KubeControllerManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubeControllerManager {
		return vs[0].(map[string]*KubeControllerManager)[vs[1].(string)]
	}).(KubeControllerManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubeControllerManagerInput)(nil)).Elem(), &KubeControllerManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeControllerManagerArrayInput)(nil)).Elem(), KubeControllerManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeControllerManagerMapInput)(nil)).Elem(), KubeControllerManagerMap{})
	pulumi.RegisterOutputType(KubeControllerManagerOutput{})
	pulumi.RegisterOutputType(KubeControllerManagerArrayOutput{})
	pulumi.RegisterOutputType(KubeControllerManagerMapOutput{})
}
