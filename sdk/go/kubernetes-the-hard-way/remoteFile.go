// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetesthehardway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

type RemoteFile struct {
	pulumi.ResourceState

	// The command resource.
	Command remote.CommandOutput `pulumi:"command"`
	// The contents of the remote file.
	Content pulumi.StringOutput `pulumi:"content"`
	// The path to the file on the remote filesystem.
	Path pulumi.StringOutput `pulumi:"path"`
	// The process' stderr.
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// The process' stdin.
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// The process' stdout.
	Stdout pulumi.StringOutput `pulumi:"stdout"`
}

// NewRemoteFile registers a new resource with the given unique name, arguments, and options.
func NewRemoteFile(ctx *pulumi.Context,
	name string, args *RemoteFileArgs, opts ...pulumi.ResourceOption) (*RemoteFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v remote.Connection) remote.Connection { return *v.Defaults() }).(remote.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RemoteFile
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:index:RemoteFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type remoteFileArgs struct {
	// The connection details.
	Connection remote.Connection `pulumi:"connection"`
	// The content of the file.
	Content string `pulumi:"content"`
	// The path to the file on the remote host.
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a RemoteFile resource.
type RemoteFileArgs struct {
	// The connection details.
	Connection remote.ConnectionInput
	// The content of the file.
	Content pulumi.StringInput
	// The path to the file on the remote host.
	Path pulumi.StringInput
}

func (RemoteFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteFileArgs)(nil)).Elem()
}

type RemoteFileInput interface {
	pulumi.Input

	ToRemoteFileOutput() RemoteFileOutput
	ToRemoteFileOutputWithContext(ctx context.Context) RemoteFileOutput
}

func (*RemoteFile) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteFile)(nil)).Elem()
}

func (i *RemoteFile) ToRemoteFileOutput() RemoteFileOutput {
	return i.ToRemoteFileOutputWithContext(context.Background())
}

func (i *RemoteFile) ToRemoteFileOutputWithContext(ctx context.Context) RemoteFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteFileOutput)
}

// RemoteFileArrayInput is an input type that accepts RemoteFileArray and RemoteFileArrayOutput values.
// You can construct a concrete instance of `RemoteFileArrayInput` via:
//
//	RemoteFileArray{ RemoteFileArgs{...} }
type RemoteFileArrayInput interface {
	pulumi.Input

	ToRemoteFileArrayOutput() RemoteFileArrayOutput
	ToRemoteFileArrayOutputWithContext(context.Context) RemoteFileArrayOutput
}

type RemoteFileArray []RemoteFileInput

func (RemoteFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteFile)(nil)).Elem()
}

func (i RemoteFileArray) ToRemoteFileArrayOutput() RemoteFileArrayOutput {
	return i.ToRemoteFileArrayOutputWithContext(context.Background())
}

func (i RemoteFileArray) ToRemoteFileArrayOutputWithContext(ctx context.Context) RemoteFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteFileArrayOutput)
}

// RemoteFileMapInput is an input type that accepts RemoteFileMap and RemoteFileMapOutput values.
// You can construct a concrete instance of `RemoteFileMapInput` via:
//
//	RemoteFileMap{ "key": RemoteFileArgs{...} }
type RemoteFileMapInput interface {
	pulumi.Input

	ToRemoteFileMapOutput() RemoteFileMapOutput
	ToRemoteFileMapOutputWithContext(context.Context) RemoteFileMapOutput
}

type RemoteFileMap map[string]RemoteFileInput

func (RemoteFileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteFile)(nil)).Elem()
}

func (i RemoteFileMap) ToRemoteFileMapOutput() RemoteFileMapOutput {
	return i.ToRemoteFileMapOutputWithContext(context.Background())
}

func (i RemoteFileMap) ToRemoteFileMapOutputWithContext(ctx context.Context) RemoteFileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteFileMapOutput)
}

type RemoteFileOutput struct{ *pulumi.OutputState }

func (RemoteFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteFile)(nil)).Elem()
}

func (o RemoteFileOutput) ToRemoteFileOutput() RemoteFileOutput {
	return o
}

func (o RemoteFileOutput) ToRemoteFileOutputWithContext(ctx context.Context) RemoteFileOutput {
	return o
}

// The command resource.
func (o RemoteFileOutput) Command() remote.CommandOutput {
	return o.ApplyT(func(v *RemoteFile) remote.CommandOutput { return v.Command }).(remote.CommandOutput)
}

// The contents of the remote file.
func (o RemoteFileOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteFile) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The path to the file on the remote filesystem.
func (o RemoteFileOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteFile) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The process' stderr.
func (o RemoteFileOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteFile) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// The process' stdin.
func (o RemoteFileOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteFile) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// The process' stdout.
func (o RemoteFileOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteFile) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

type RemoteFileArrayOutput struct{ *pulumi.OutputState }

func (RemoteFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteFile)(nil)).Elem()
}

func (o RemoteFileArrayOutput) ToRemoteFileArrayOutput() RemoteFileArrayOutput {
	return o
}

func (o RemoteFileArrayOutput) ToRemoteFileArrayOutputWithContext(ctx context.Context) RemoteFileArrayOutput {
	return o
}

func (o RemoteFileArrayOutput) Index(i pulumi.IntInput) RemoteFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RemoteFile {
		return vs[0].([]*RemoteFile)[vs[1].(int)]
	}).(RemoteFileOutput)
}

type RemoteFileMapOutput struct{ *pulumi.OutputState }

func (RemoteFileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteFile)(nil)).Elem()
}

func (o RemoteFileMapOutput) ToRemoteFileMapOutput() RemoteFileMapOutput {
	return o
}

func (o RemoteFileMapOutput) ToRemoteFileMapOutputWithContext(ctx context.Context) RemoteFileMapOutput {
	return o
}

func (o RemoteFileMapOutput) MapIndex(k pulumi.StringInput) RemoteFileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RemoteFile {
		return vs[0].(map[string]*RemoteFile)[vs[1].(string)]
	}).(RemoteFileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteFileInput)(nil)).Elem(), &RemoteFile{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteFileArrayInput)(nil)).Elem(), RemoteFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteFileMapInput)(nil)).Elem(), RemoteFileMap{})
	pulumi.RegisterOutputType(RemoteFileOutput{})
	pulumi.RegisterOutputType(RemoteFileArrayOutput{})
	pulumi.RegisterOutputType(RemoteFileMapOutput{})
}
