// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Abstraction over the `sed` utility on a remote system.
type Sed struct {
	pulumi.ResourceState

	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringOutput `pulumi:"binaryPath"`
	// The underlying command
	Command pulumiCommand.CommandOutput `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// annotate program execution.
	Debug pulumi.BoolOutput `pulumi:"debug"`
	// Environment variables
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// add the script to the commands to be executed.
	Expressions pulumi.AnyOutput `pulumi:"expressions"`
	// add the contents of script-file to the commands to be executed.
	Files pulumi.AnyOutput `pulumi:"files"`
	// follow symlinks when processing in place
	FollowSymlinks pulumi.BoolOutput `pulumi:"followSymlinks"`
	// display this help and exit.
	Help pulumi.BoolOutput `pulumi:"help"`
	// edit files in place (makes backup if SUFFIX supplied)
	InPlace pulumi.StringOutput `pulumi:"inPlace"`
	// corresponds to the [input-file]... argument(s).
	InputFiles pulumi.AnyOutput `pulumi:"inputFiles"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle CommandLifecyclePtrOutput `pulumi:"lifecycle"`
	// specify the desired line-wrap length for the `l' command
	LineLength pulumi.BoolPtrOutput `pulumi:"lineLength"`
	// separate lines by NUL characters
	NullData pulumi.BoolOutput `pulumi:"nullData"`
	// disable all GNU extensions.
	Posix pulumi.BoolOutput `pulumi:"posix"`
	// suppress automatic printing of pattern space. Same as `silent`.
	Quiet pulumi.BoolOutput `pulumi:"quiet"`
	// use extended regular expressions in the script (for portability use POSIX -E).
	RegexpExtended pulumi.BoolOutput `pulumi:"regexpExtended"`
	// operate in sandbox mode (disable e/r/w commands).
	Sandbox pulumi.BoolOutput `pulumi:"sandbox"`
	// script only if no other script.
	Script pulumi.StringPtrOutput `pulumi:"script"`
	// consider files as separate rather than as a single, continuous long stream.
	Separate pulumi.BoolOutput `pulumi:"separate"`
	// suppress automatic printing of pattern space. Same as `quiet`.
	Silent pulumi.BoolOutput `pulumi:"silent"`
	// TODO
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// TODO
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// TODO
	Stdout pulumi.StringOutput `pulumi:"stdout"`
	// TODO
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// load minimal amounts of data from the input files and flush the output buffers more often.
	Unbuffered pulumi.BoolOutput `pulumi:"unbuffered"`
	// output version information and exit.
	Version pulumi.BoolOutput `pulumi:"version"`
}

// NewSed registers a new resource with the given unique name, arguments, and options.
func NewSed(ctx *pulumi.Context,
	name string, args *SedArgs, opts ...pulumi.ResourceOption) (*Sed, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sed
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:tools:Sed", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type sedArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath *string `pulumi:"binaryPath"`
	// Connection details for the remote system
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// annotate program execution.
	Debug *bool `pulumi:"debug"`
	// Environment variables
	Environment map[string]string `pulumi:"environment"`
	// add the script to the commands to be executed.
	Expressions interface{} `pulumi:"expressions"`
	// add the contents of script-file to the commands to be executed.
	Files interface{} `pulumi:"files"`
	// follow symlinks when processing in place
	FollowSymlinks *bool `pulumi:"followSymlinks"`
	// display this help and exit.
	Help *bool `pulumi:"help"`
	// edit files in place (makes backup if SUFFIX supplied)
	InPlace *string `pulumi:"inPlace"`
	// corresponds to the [input-file]... argument(s).
	InputFiles interface{} `pulumi:"inputFiles"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle `pulumi:"lifecycle"`
	// specify the desired line-wrap length for the `l' command
	LineLength *bool `pulumi:"lineLength"`
	// separate lines by NUL characters
	NullData *bool `pulumi:"nullData"`
	// disable all GNU extensions.
	Posix *bool `pulumi:"posix"`
	// suppress automatic printing of pattern space. Same as `silent`.
	Quiet *bool `pulumi:"quiet"`
	// use extended regular expressions in the script (for portability use POSIX -E).
	RegexpExtended *bool `pulumi:"regexpExtended"`
	// operate in sandbox mode (disable e/r/w commands).
	Sandbox *bool `pulumi:"sandbox"`
	// script only if no other script.
	Script *string `pulumi:"script"`
	// consider files as separate rather than as a single, continuous long stream.
	Separate *bool `pulumi:"separate"`
	// suppress automatic printing of pattern space. Same as `quiet`.
	Silent *bool `pulumi:"silent"`
	// TODO
	Stdin *string `pulumi:"stdin"`
	// TODO
	Triggers []interface{} `pulumi:"triggers"`
	// load minimal amounts of data from the input files and flush the output buffers more often.
	Unbuffered *bool `pulumi:"unbuffered"`
	// output version information and exit.
	Version *bool `pulumi:"version"`
}

// The set of arguments for constructing a Sed resource.
type SedArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringPtrInput
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionInput
	// annotate program execution.
	Debug pulumi.BoolPtrInput
	// Environment variables
	Environment pulumi.StringMapInput
	// add the script to the commands to be executed.
	Expressions pulumi.Input
	// add the contents of script-file to the commands to be executed.
	Files pulumi.Input
	// follow symlinks when processing in place
	FollowSymlinks pulumi.BoolPtrInput
	// display this help and exit.
	Help pulumi.BoolPtrInput
	// edit files in place (makes backup if SUFFIX supplied)
	InPlace pulumi.StringPtrInput
	// corresponds to the [input-file]... argument(s).
	InputFiles pulumi.Input
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle
	// specify the desired line-wrap length for the `l' command
	LineLength pulumi.BoolPtrInput
	// separate lines by NUL characters
	NullData pulumi.BoolPtrInput
	// disable all GNU extensions.
	Posix pulumi.BoolPtrInput
	// suppress automatic printing of pattern space. Same as `silent`.
	Quiet pulumi.BoolPtrInput
	// use extended regular expressions in the script (for portability use POSIX -E).
	RegexpExtended pulumi.BoolPtrInput
	// operate in sandbox mode (disable e/r/w commands).
	Sandbox pulumi.BoolPtrInput
	// script only if no other script.
	Script pulumi.StringPtrInput
	// consider files as separate rather than as a single, continuous long stream.
	Separate pulumi.BoolPtrInput
	// suppress automatic printing of pattern space. Same as `quiet`.
	Silent pulumi.BoolPtrInput
	// TODO
	Stdin pulumi.StringPtrInput
	// TODO
	Triggers pulumi.ArrayInput
	// load minimal amounts of data from the input files and flush the output buffers more often.
	Unbuffered pulumi.BoolPtrInput
	// output version information and exit.
	Version pulumi.BoolPtrInput
}

func (SedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sedArgs)(nil)).Elem()
}

type SedInput interface {
	pulumi.Input

	ToSedOutput() SedOutput
	ToSedOutputWithContext(ctx context.Context) SedOutput
}

func (*Sed) ElementType() reflect.Type {
	return reflect.TypeOf((**Sed)(nil)).Elem()
}

func (i *Sed) ToSedOutput() SedOutput {
	return i.ToSedOutputWithContext(context.Background())
}

func (i *Sed) ToSedOutputWithContext(ctx context.Context) SedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SedOutput)
}

// SedArrayInput is an input type that accepts SedArray and SedArrayOutput values.
// You can construct a concrete instance of `SedArrayInput` via:
//
//	SedArray{ SedArgs{...} }
type SedArrayInput interface {
	pulumi.Input

	ToSedArrayOutput() SedArrayOutput
	ToSedArrayOutputWithContext(context.Context) SedArrayOutput
}

type SedArray []SedInput

func (SedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sed)(nil)).Elem()
}

func (i SedArray) ToSedArrayOutput() SedArrayOutput {
	return i.ToSedArrayOutputWithContext(context.Background())
}

func (i SedArray) ToSedArrayOutputWithContext(ctx context.Context) SedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SedArrayOutput)
}

// SedMapInput is an input type that accepts SedMap and SedMapOutput values.
// You can construct a concrete instance of `SedMapInput` via:
//
//	SedMap{ "key": SedArgs{...} }
type SedMapInput interface {
	pulumi.Input

	ToSedMapOutput() SedMapOutput
	ToSedMapOutputWithContext(context.Context) SedMapOutput
}

type SedMap map[string]SedInput

func (SedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sed)(nil)).Elem()
}

func (i SedMap) ToSedMapOutput() SedMapOutput {
	return i.ToSedMapOutputWithContext(context.Background())
}

func (i SedMap) ToSedMapOutputWithContext(ctx context.Context) SedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SedMapOutput)
}

type SedOutput struct{ *pulumi.OutputState }

func (SedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sed)(nil)).Elem()
}

func (o SedOutput) ToSedOutput() SedOutput {
	return o
}

func (o SedOutput) ToSedOutputWithContext(ctx context.Context) SedOutput {
	return o
}

// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
func (o SedOutput) BinaryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Sed) pulumi.StringOutput { return v.BinaryPath }).(pulumi.StringOutput)
}

// The underlying command
func (o SedOutput) Command() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *Sed) pulumiCommand.CommandOutput { return v.Command }).(pulumiCommand.CommandOutput)
}

// Connection details for the remote system
func (o SedOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *Sed) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// annotate program execution.
func (o SedOutput) Debug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.Debug }).(pulumi.BoolOutput)
}

// Environment variables
func (o SedOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Sed) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// add the script to the commands to be executed.
func (o SedOutput) Expressions() pulumi.AnyOutput {
	return o.ApplyT(func(v *Sed) pulumi.AnyOutput { return v.Expressions }).(pulumi.AnyOutput)
}

// add the contents of script-file to the commands to be executed.
func (o SedOutput) Files() pulumi.AnyOutput {
	return o.ApplyT(func(v *Sed) pulumi.AnyOutput { return v.Files }).(pulumi.AnyOutput)
}

// follow symlinks when processing in place
func (o SedOutput) FollowSymlinks() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.FollowSymlinks }).(pulumi.BoolOutput)
}

// display this help and exit.
func (o SedOutput) Help() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.Help }).(pulumi.BoolOutput)
}

// edit files in place (makes backup if SUFFIX supplied)
func (o SedOutput) InPlace() pulumi.StringOutput {
	return o.ApplyT(func(v *Sed) pulumi.StringOutput { return v.InPlace }).(pulumi.StringOutput)
}

// corresponds to the [input-file]... argument(s).
func (o SedOutput) InputFiles() pulumi.AnyOutput {
	return o.ApplyT(func(v *Sed) pulumi.AnyOutput { return v.InputFiles }).(pulumi.AnyOutput)
}

// At what stage(s) in the resource lifecycle should the command be run
func (o SedOutput) Lifecycle() CommandLifecyclePtrOutput {
	return o.ApplyT(func(v *Sed) CommandLifecyclePtrOutput { return v.Lifecycle }).(CommandLifecyclePtrOutput)
}

// specify the desired line-wrap length for the `l' command
func (o SedOutput) LineLength() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolPtrOutput { return v.LineLength }).(pulumi.BoolPtrOutput)
}

// separate lines by NUL characters
func (o SedOutput) NullData() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.NullData }).(pulumi.BoolOutput)
}

// disable all GNU extensions.
func (o SedOutput) Posix() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.Posix }).(pulumi.BoolOutput)
}

// suppress automatic printing of pattern space. Same as `silent`.
func (o SedOutput) Quiet() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.Quiet }).(pulumi.BoolOutput)
}

// use extended regular expressions in the script (for portability use POSIX -E).
func (o SedOutput) RegexpExtended() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.RegexpExtended }).(pulumi.BoolOutput)
}

// operate in sandbox mode (disable e/r/w commands).
func (o SedOutput) Sandbox() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.Sandbox }).(pulumi.BoolOutput)
}

// script only if no other script.
func (o SedOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sed) pulumi.StringPtrOutput { return v.Script }).(pulumi.StringPtrOutput)
}

// consider files as separate rather than as a single, continuous long stream.
func (o SedOutput) Separate() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.Separate }).(pulumi.BoolOutput)
}

// suppress automatic printing of pattern space. Same as `quiet`.
func (o SedOutput) Silent() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.Silent }).(pulumi.BoolOutput)
}

// TODO
func (o SedOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Sed) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// TODO
func (o SedOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sed) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// TODO
func (o SedOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Sed) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

// TODO
func (o SedOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Sed) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// load minimal amounts of data from the input files and flush the output buffers more often.
func (o SedOutput) Unbuffered() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.Unbuffered }).(pulumi.BoolOutput)
}

// output version information and exit.
func (o SedOutput) Version() pulumi.BoolOutput {
	return o.ApplyT(func(v *Sed) pulumi.BoolOutput { return v.Version }).(pulumi.BoolOutput)
}

type SedArrayOutput struct{ *pulumi.OutputState }

func (SedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sed)(nil)).Elem()
}

func (o SedArrayOutput) ToSedArrayOutput() SedArrayOutput {
	return o
}

func (o SedArrayOutput) ToSedArrayOutputWithContext(ctx context.Context) SedArrayOutput {
	return o
}

func (o SedArrayOutput) Index(i pulumi.IntInput) SedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sed {
		return vs[0].([]*Sed)[vs[1].(int)]
	}).(SedOutput)
}

type SedMapOutput struct{ *pulumi.OutputState }

func (SedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sed)(nil)).Elem()
}

func (o SedMapOutput) ToSedMapOutput() SedMapOutput {
	return o
}

func (o SedMapOutput) ToSedMapOutputWithContext(ctx context.Context) SedMapOutput {
	return o
}

func (o SedMapOutput) MapIndex(k pulumi.StringInput) SedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sed {
		return vs[0].(map[string]*Sed)[vs[1].(string)]
	}).(SedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SedInput)(nil)).Elem(), &Sed{})
	pulumi.RegisterInputType(reflect.TypeOf((*SedArrayInput)(nil)).Elem(), SedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SedMapInput)(nil)).Elem(), SedMap{})
	pulumi.RegisterOutputType(SedOutput{})
	pulumi.RegisterOutputType(SedArrayOutput{})
	pulumi.RegisterOutputType(SedMapOutput{})
}
