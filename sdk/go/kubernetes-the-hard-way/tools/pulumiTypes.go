// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

var _ = internal.GetEnvOrDefault

// Abstraction over the `chmod` utility on a remote system.
type ChmodOpts struct {
	// Like verbose but report only when a change is made.
	Changes *bool `pulumi:"changes"`
	// Corresponds to the [FILE] argument.
	Files []string `pulumi:"files"`
	// Display help and exit.
	Help *bool `pulumi:"help"`
	// Modes may be absolute or symbolic. An absolute mode is an octal number...
	Mode string `pulumi:"mode"`
	// Do not treat '/' specially (the default).
	NoPreserveRoot *bool `pulumi:"noPreserveRoot"`
	// Fail to operate recursively on '/'.
	PreserveRoot *bool `pulumi:"preserveRoot"`
	// Suppress most error messages. Same as `silent`.
	Quiet *bool `pulumi:"quiet"`
	// Change files and directories recursively.
	Recursive *bool `pulumi:"recursive"`
	// Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
	Reference *string `pulumi:"reference"`
	// Suppress most error messages. Same as `quiet`.
	Silent *bool `pulumi:"silent"`
	// Output version information and exit.
	Version *bool `pulumi:"version"`
}

// ChmodOptsInput is an input type that accepts ChmodOptsArgs and ChmodOptsOutput values.
// You can construct a concrete instance of `ChmodOptsInput` via:
//
//	ChmodOptsArgs{...}
type ChmodOptsInput interface {
	pulumi.Input

	ToChmodOptsOutput() ChmodOptsOutput
	ToChmodOptsOutputWithContext(context.Context) ChmodOptsOutput
}

// Abstraction over the `chmod` utility on a remote system.
type ChmodOptsArgs struct {
	// Like verbose but report only when a change is made.
	Changes pulumi.BoolPtrInput `pulumi:"changes"`
	// Corresponds to the [FILE] argument.
	Files pulumi.StringArrayInput `pulumi:"files"`
	// Display help and exit.
	Help pulumi.BoolPtrInput `pulumi:"help"`
	// Modes may be absolute or symbolic. An absolute mode is an octal number...
	Mode pulumi.StringInput `pulumi:"mode"`
	// Do not treat '/' specially (the default).
	NoPreserveRoot pulumi.BoolPtrInput `pulumi:"noPreserveRoot"`
	// Fail to operate recursively on '/'.
	PreserveRoot pulumi.BoolPtrInput `pulumi:"preserveRoot"`
	// Suppress most error messages. Same as `silent`.
	Quiet pulumi.BoolPtrInput `pulumi:"quiet"`
	// Change files and directories recursively.
	Recursive pulumi.BoolPtrInput `pulumi:"recursive"`
	// Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
	Reference pulumi.StringPtrInput `pulumi:"reference"`
	// Suppress most error messages. Same as `quiet`.
	Silent pulumi.BoolPtrInput `pulumi:"silent"`
	// Output version information and exit.
	Version pulumi.BoolPtrInput `pulumi:"version"`
}

func (ChmodOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChmodOpts)(nil)).Elem()
}

func (i ChmodOptsArgs) ToChmodOptsOutput() ChmodOptsOutput {
	return i.ToChmodOptsOutputWithContext(context.Background())
}

func (i ChmodOptsArgs) ToChmodOptsOutputWithContext(ctx context.Context) ChmodOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChmodOptsOutput)
}

func (i ChmodOptsArgs) ToChmodOptsPtrOutput() ChmodOptsPtrOutput {
	return i.ToChmodOptsPtrOutputWithContext(context.Background())
}

func (i ChmodOptsArgs) ToChmodOptsPtrOutputWithContext(ctx context.Context) ChmodOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChmodOptsOutput).ToChmodOptsPtrOutputWithContext(ctx)
}

// ChmodOptsPtrInput is an input type that accepts ChmodOptsArgs, ChmodOptsPtr and ChmodOptsPtrOutput values.
// You can construct a concrete instance of `ChmodOptsPtrInput` via:
//
//	        ChmodOptsArgs{...}
//
//	or:
//
//	        nil
type ChmodOptsPtrInput interface {
	pulumi.Input

	ToChmodOptsPtrOutput() ChmodOptsPtrOutput
	ToChmodOptsPtrOutputWithContext(context.Context) ChmodOptsPtrOutput
}

type chmodOptsPtrType ChmodOptsArgs

func ChmodOptsPtr(v *ChmodOptsArgs) ChmodOptsPtrInput {
	return (*chmodOptsPtrType)(v)
}

func (*chmodOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChmodOpts)(nil)).Elem()
}

func (i *chmodOptsPtrType) ToChmodOptsPtrOutput() ChmodOptsPtrOutput {
	return i.ToChmodOptsPtrOutputWithContext(context.Background())
}

func (i *chmodOptsPtrType) ToChmodOptsPtrOutputWithContext(ctx context.Context) ChmodOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChmodOptsPtrOutput)
}

// Abstraction over the `chmod` utility on a remote system.
type ChmodOptsOutput struct{ *pulumi.OutputState }

func (ChmodOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChmodOpts)(nil)).Elem()
}

func (o ChmodOptsOutput) ToChmodOptsOutput() ChmodOptsOutput {
	return o
}

func (o ChmodOptsOutput) ToChmodOptsOutputWithContext(ctx context.Context) ChmodOptsOutput {
	return o
}

func (o ChmodOptsOutput) ToChmodOptsPtrOutput() ChmodOptsPtrOutput {
	return o.ToChmodOptsPtrOutputWithContext(context.Background())
}

func (o ChmodOptsOutput) ToChmodOptsPtrOutputWithContext(ctx context.Context) ChmodOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChmodOpts) *ChmodOpts {
		return &v
	}).(ChmodOptsPtrOutput)
}

// Like verbose but report only when a change is made.
func (o ChmodOptsOutput) Changes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodOpts) *bool { return v.Changes }).(pulumi.BoolPtrOutput)
}

// Corresponds to the [FILE] argument.
func (o ChmodOptsOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChmodOpts) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// Display help and exit.
func (o ChmodOptsOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodOpts) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

// Modes may be absolute or symbolic. An absolute mode is an octal number...
func (o ChmodOptsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ChmodOpts) string { return v.Mode }).(pulumi.StringOutput)
}

// Do not treat '/' specially (the default).
func (o ChmodOptsOutput) NoPreserveRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodOpts) *bool { return v.NoPreserveRoot }).(pulumi.BoolPtrOutput)
}

// Fail to operate recursively on '/'.
func (o ChmodOptsOutput) PreserveRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodOpts) *bool { return v.PreserveRoot }).(pulumi.BoolPtrOutput)
}

// Suppress most error messages. Same as `silent`.
func (o ChmodOptsOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodOpts) *bool { return v.Quiet }).(pulumi.BoolPtrOutput)
}

// Change files and directories recursively.
func (o ChmodOptsOutput) Recursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodOpts) *bool { return v.Recursive }).(pulumi.BoolPtrOutput)
}

// Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
func (o ChmodOptsOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChmodOpts) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

// Suppress most error messages. Same as `quiet`.
func (o ChmodOptsOutput) Silent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodOpts) *bool { return v.Silent }).(pulumi.BoolPtrOutput)
}

// Output version information and exit.
func (o ChmodOptsOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChmodOpts) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

type ChmodOptsPtrOutput struct{ *pulumi.OutputState }

func (ChmodOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChmodOpts)(nil)).Elem()
}

func (o ChmodOptsPtrOutput) ToChmodOptsPtrOutput() ChmodOptsPtrOutput {
	return o
}

func (o ChmodOptsPtrOutput) ToChmodOptsPtrOutputWithContext(ctx context.Context) ChmodOptsPtrOutput {
	return o
}

func (o ChmodOptsPtrOutput) Elem() ChmodOptsOutput {
	return o.ApplyT(func(v *ChmodOpts) ChmodOpts {
		if v != nil {
			return *v
		}
		var ret ChmodOpts
		return ret
	}).(ChmodOptsOutput)
}

// Like verbose but report only when a change is made.
func (o ChmodOptsPtrOutput) Changes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Changes
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the [FILE] argument.
func (o ChmodOptsPtrOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChmodOpts) []string {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.StringArrayOutput)
}

// Display help and exit.
func (o ChmodOptsPtrOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Help
	}).(pulumi.BoolPtrOutput)
}

// Modes may be absolute or symbolic. An absolute mode is an octal number...
func (o ChmodOptsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Do not treat '/' specially (the default).
func (o ChmodOptsPtrOutput) NoPreserveRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *bool {
		if v == nil {
			return nil
		}
		return v.NoPreserveRoot
	}).(pulumi.BoolPtrOutput)
}

// Fail to operate recursively on '/'.
func (o ChmodOptsPtrOutput) PreserveRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveRoot
	}).(pulumi.BoolPtrOutput)
}

// Suppress most error messages. Same as `silent`.
func (o ChmodOptsPtrOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Quiet
	}).(pulumi.BoolPtrOutput)
}

// Change files and directories recursively.
func (o ChmodOptsPtrOutput) Recursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.BoolPtrOutput)
}

// Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
func (o ChmodOptsPtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// Suppress most error messages. Same as `quiet`.
func (o ChmodOptsPtrOutput) Silent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Silent
	}).(pulumi.BoolPtrOutput)
}

// Output version information and exit.
func (o ChmodOptsPtrOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChmodOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.BoolPtrOutput)
}

// Abstraction over the `etcdctl` utility on a remote system.
type EtcdctlOpts struct {
	// TODO
	CaCert *string `pulumi:"caCert"`
	// TODO
	Cert *string `pulumi:"cert"`
	// TODO
	Commands EtcdctlCommand `pulumi:"commands"`
	// TODO
	Endpoints *string `pulumi:"endpoints"`
	// TODO
	Key *string `pulumi:"key"`
}

// EtcdctlOptsInput is an input type that accepts EtcdctlOptsArgs and EtcdctlOptsOutput values.
// You can construct a concrete instance of `EtcdctlOptsInput` via:
//
//	EtcdctlOptsArgs{...}
type EtcdctlOptsInput interface {
	pulumi.Input

	ToEtcdctlOptsOutput() EtcdctlOptsOutput
	ToEtcdctlOptsOutputWithContext(context.Context) EtcdctlOptsOutput
}

// Abstraction over the `etcdctl` utility on a remote system.
type EtcdctlOptsArgs struct {
	// TODO
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// TODO
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	// TODO
	Commands EtcdctlCommandInput `pulumi:"commands"`
	// TODO
	Endpoints pulumi.StringPtrInput `pulumi:"endpoints"`
	// TODO
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (EtcdctlOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EtcdctlOpts)(nil)).Elem()
}

func (i EtcdctlOptsArgs) ToEtcdctlOptsOutput() EtcdctlOptsOutput {
	return i.ToEtcdctlOptsOutputWithContext(context.Background())
}

func (i EtcdctlOptsArgs) ToEtcdctlOptsOutputWithContext(ctx context.Context) EtcdctlOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdctlOptsOutput)
}

func (i EtcdctlOptsArgs) ToEtcdctlOptsPtrOutput() EtcdctlOptsPtrOutput {
	return i.ToEtcdctlOptsPtrOutputWithContext(context.Background())
}

func (i EtcdctlOptsArgs) ToEtcdctlOptsPtrOutputWithContext(ctx context.Context) EtcdctlOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdctlOptsOutput).ToEtcdctlOptsPtrOutputWithContext(ctx)
}

// EtcdctlOptsPtrInput is an input type that accepts EtcdctlOptsArgs, EtcdctlOptsPtr and EtcdctlOptsPtrOutput values.
// You can construct a concrete instance of `EtcdctlOptsPtrInput` via:
//
//	        EtcdctlOptsArgs{...}
//
//	or:
//
//	        nil
type EtcdctlOptsPtrInput interface {
	pulumi.Input

	ToEtcdctlOptsPtrOutput() EtcdctlOptsPtrOutput
	ToEtcdctlOptsPtrOutputWithContext(context.Context) EtcdctlOptsPtrOutput
}

type etcdctlOptsPtrType EtcdctlOptsArgs

func EtcdctlOptsPtr(v *EtcdctlOptsArgs) EtcdctlOptsPtrInput {
	return (*etcdctlOptsPtrType)(v)
}

func (*etcdctlOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EtcdctlOpts)(nil)).Elem()
}

func (i *etcdctlOptsPtrType) ToEtcdctlOptsPtrOutput() EtcdctlOptsPtrOutput {
	return i.ToEtcdctlOptsPtrOutputWithContext(context.Background())
}

func (i *etcdctlOptsPtrType) ToEtcdctlOptsPtrOutputWithContext(ctx context.Context) EtcdctlOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdctlOptsPtrOutput)
}

// Abstraction over the `etcdctl` utility on a remote system.
type EtcdctlOptsOutput struct{ *pulumi.OutputState }

func (EtcdctlOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EtcdctlOpts)(nil)).Elem()
}

func (o EtcdctlOptsOutput) ToEtcdctlOptsOutput() EtcdctlOptsOutput {
	return o
}

func (o EtcdctlOptsOutput) ToEtcdctlOptsOutputWithContext(ctx context.Context) EtcdctlOptsOutput {
	return o
}

func (o EtcdctlOptsOutput) ToEtcdctlOptsPtrOutput() EtcdctlOptsPtrOutput {
	return o.ToEtcdctlOptsPtrOutputWithContext(context.Background())
}

func (o EtcdctlOptsOutput) ToEtcdctlOptsPtrOutputWithContext(ctx context.Context) EtcdctlOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EtcdctlOpts) *EtcdctlOpts {
		return &v
	}).(EtcdctlOptsPtrOutput)
}

// TODO
func (o EtcdctlOptsOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtcdctlOpts) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// TODO
func (o EtcdctlOptsOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtcdctlOpts) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// TODO
func (o EtcdctlOptsOutput) Commands() EtcdctlCommandOutput {
	return o.ApplyT(func(v EtcdctlOpts) EtcdctlCommand { return v.Commands }).(EtcdctlCommandOutput)
}

// TODO
func (o EtcdctlOptsOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtcdctlOpts) *string { return v.Endpoints }).(pulumi.StringPtrOutput)
}

// TODO
func (o EtcdctlOptsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtcdctlOpts) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type EtcdctlOptsPtrOutput struct{ *pulumi.OutputState }

func (EtcdctlOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EtcdctlOpts)(nil)).Elem()
}

func (o EtcdctlOptsPtrOutput) ToEtcdctlOptsPtrOutput() EtcdctlOptsPtrOutput {
	return o
}

func (o EtcdctlOptsPtrOutput) ToEtcdctlOptsPtrOutputWithContext(ctx context.Context) EtcdctlOptsPtrOutput {
	return o
}

func (o EtcdctlOptsPtrOutput) Elem() EtcdctlOptsOutput {
	return o.ApplyT(func(v *EtcdctlOpts) EtcdctlOpts {
		if v != nil {
			return *v
		}
		var ret EtcdctlOpts
		return ret
	}).(EtcdctlOptsOutput)
}

// TODO
func (o EtcdctlOptsPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtcdctlOpts) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// TODO
func (o EtcdctlOptsPtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtcdctlOpts) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

// TODO
func (o EtcdctlOptsPtrOutput) Commands() EtcdctlCommandPtrOutput {
	return o.ApplyT(func(v *EtcdctlOpts) *EtcdctlCommand {
		if v == nil {
			return nil
		}
		return &v.Commands
	}).(EtcdctlCommandPtrOutput)
}

// TODO
func (o EtcdctlOptsPtrOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtcdctlOpts) *string {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(pulumi.StringPtrOutput)
}

// TODO
func (o EtcdctlOptsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtcdctlOpts) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Abstraction over the `hostnamectl` utility on a remote system.
type HostnamectlOpts struct {
	// The argument for the specified `command`.
	Arg *string `pulumi:"arg"`
	// Corresponds to the {COMMAND} argument.
	Command HostnamectlCommand `pulumi:"command"`
	// Print a short help text and exit.
	Help *bool `pulumi:"help"`
	// Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
	Host *string `pulumi:"host"`
	// Shows output formatted as JSON.
	Json *HostnamectlJsonMode `pulumi:"json"`
	// Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
	Machine *string `pulumi:"machine"`
	// Do not query the user for authentication for privileged operations.
	NoAskPassword *bool `pulumi:"noAskPassword"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
	Pretty *bool `pulumi:"pretty"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
	Static *bool `pulumi:"static"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
	Transient *bool `pulumi:"transient"`
	// Print a short version string and exit.
	Version *bool `pulumi:"version"`
}

// HostnamectlOptsInput is an input type that accepts HostnamectlOptsArgs and HostnamectlOptsOutput values.
// You can construct a concrete instance of `HostnamectlOptsInput` via:
//
//	HostnamectlOptsArgs{...}
type HostnamectlOptsInput interface {
	pulumi.Input

	ToHostnamectlOptsOutput() HostnamectlOptsOutput
	ToHostnamectlOptsOutputWithContext(context.Context) HostnamectlOptsOutput
}

// Abstraction over the `hostnamectl` utility on a remote system.
type HostnamectlOptsArgs struct {
	// The argument for the specified `command`.
	Arg pulumi.StringPtrInput `pulumi:"arg"`
	// Corresponds to the {COMMAND} argument.
	Command HostnamectlCommandInput `pulumi:"command"`
	// Print a short help text and exit.
	Help pulumi.BoolPtrInput `pulumi:"help"`
	// Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Shows output formatted as JSON.
	Json HostnamectlJsonModePtrInput `pulumi:"json"`
	// Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
	Machine pulumi.StringPtrInput `pulumi:"machine"`
	// Do not query the user for authentication for privileged operations.
	NoAskPassword pulumi.BoolPtrInput `pulumi:"noAskPassword"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
	Pretty pulumi.BoolPtrInput `pulumi:"pretty"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
	Static pulumi.BoolPtrInput `pulumi:"static"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
	Transient pulumi.BoolPtrInput `pulumi:"transient"`
	// Print a short version string and exit.
	Version pulumi.BoolPtrInput `pulumi:"version"`
}

func (HostnamectlOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostnamectlOpts)(nil)).Elem()
}

func (i HostnamectlOptsArgs) ToHostnamectlOptsOutput() HostnamectlOptsOutput {
	return i.ToHostnamectlOptsOutputWithContext(context.Background())
}

func (i HostnamectlOptsArgs) ToHostnamectlOptsOutputWithContext(ctx context.Context) HostnamectlOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnamectlOptsOutput)
}

func (i HostnamectlOptsArgs) ToHostnamectlOptsPtrOutput() HostnamectlOptsPtrOutput {
	return i.ToHostnamectlOptsPtrOutputWithContext(context.Background())
}

func (i HostnamectlOptsArgs) ToHostnamectlOptsPtrOutputWithContext(ctx context.Context) HostnamectlOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnamectlOptsOutput).ToHostnamectlOptsPtrOutputWithContext(ctx)
}

// HostnamectlOptsPtrInput is an input type that accepts HostnamectlOptsArgs, HostnamectlOptsPtr and HostnamectlOptsPtrOutput values.
// You can construct a concrete instance of `HostnamectlOptsPtrInput` via:
//
//	        HostnamectlOptsArgs{...}
//
//	or:
//
//	        nil
type HostnamectlOptsPtrInput interface {
	pulumi.Input

	ToHostnamectlOptsPtrOutput() HostnamectlOptsPtrOutput
	ToHostnamectlOptsPtrOutputWithContext(context.Context) HostnamectlOptsPtrOutput
}

type hostnamectlOptsPtrType HostnamectlOptsArgs

func HostnamectlOptsPtr(v *HostnamectlOptsArgs) HostnamectlOptsPtrInput {
	return (*hostnamectlOptsPtrType)(v)
}

func (*hostnamectlOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostnamectlOpts)(nil)).Elem()
}

func (i *hostnamectlOptsPtrType) ToHostnamectlOptsPtrOutput() HostnamectlOptsPtrOutput {
	return i.ToHostnamectlOptsPtrOutputWithContext(context.Background())
}

func (i *hostnamectlOptsPtrType) ToHostnamectlOptsPtrOutputWithContext(ctx context.Context) HostnamectlOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnamectlOptsPtrOutput)
}

// Abstraction over the `hostnamectl` utility on a remote system.
type HostnamectlOptsOutput struct{ *pulumi.OutputState }

func (HostnamectlOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostnamectlOpts)(nil)).Elem()
}

func (o HostnamectlOptsOutput) ToHostnamectlOptsOutput() HostnamectlOptsOutput {
	return o
}

func (o HostnamectlOptsOutput) ToHostnamectlOptsOutputWithContext(ctx context.Context) HostnamectlOptsOutput {
	return o
}

func (o HostnamectlOptsOutput) ToHostnamectlOptsPtrOutput() HostnamectlOptsPtrOutput {
	return o.ToHostnamectlOptsPtrOutputWithContext(context.Background())
}

func (o HostnamectlOptsOutput) ToHostnamectlOptsPtrOutputWithContext(ctx context.Context) HostnamectlOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HostnamectlOpts) *HostnamectlOpts {
		return &v
	}).(HostnamectlOptsPtrOutput)
}

// The argument for the specified `command`.
func (o HostnamectlOptsOutput) Arg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *string { return v.Arg }).(pulumi.StringPtrOutput)
}

// Corresponds to the {COMMAND} argument.
func (o HostnamectlOptsOutput) Command() HostnamectlCommandOutput {
	return o.ApplyT(func(v HostnamectlOpts) HostnamectlCommand { return v.Command }).(HostnamectlCommandOutput)
}

// Print a short help text and exit.
func (o HostnamectlOptsOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

// Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
func (o HostnamectlOptsOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Shows output formatted as JSON.
func (o HostnamectlOptsOutput) Json() HostnamectlJsonModePtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *HostnamectlJsonMode { return v.Json }).(HostnamectlJsonModePtrOutput)
}

// Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
func (o HostnamectlOptsOutput) Machine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *string { return v.Machine }).(pulumi.StringPtrOutput)
}

// Do not query the user for authentication for privileged operations.
func (o HostnamectlOptsOutput) NoAskPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *bool { return v.NoAskPassword }).(pulumi.BoolPtrOutput)
}

// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
func (o HostnamectlOptsOutput) Pretty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *bool { return v.Pretty }).(pulumi.BoolPtrOutput)
}

// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
func (o HostnamectlOptsOutput) Static() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *bool { return v.Static }).(pulumi.BoolPtrOutput)
}

// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
func (o HostnamectlOptsOutput) Transient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *bool { return v.Transient }).(pulumi.BoolPtrOutput)
}

// Print a short version string and exit.
func (o HostnamectlOptsOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostnamectlOpts) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

type HostnamectlOptsPtrOutput struct{ *pulumi.OutputState }

func (HostnamectlOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostnamectlOpts)(nil)).Elem()
}

func (o HostnamectlOptsPtrOutput) ToHostnamectlOptsPtrOutput() HostnamectlOptsPtrOutput {
	return o
}

func (o HostnamectlOptsPtrOutput) ToHostnamectlOptsPtrOutputWithContext(ctx context.Context) HostnamectlOptsPtrOutput {
	return o
}

func (o HostnamectlOptsPtrOutput) Elem() HostnamectlOptsOutput {
	return o.ApplyT(func(v *HostnamectlOpts) HostnamectlOpts {
		if v != nil {
			return *v
		}
		var ret HostnamectlOpts
		return ret
	}).(HostnamectlOptsOutput)
}

// The argument for the specified `command`.
func (o HostnamectlOptsPtrOutput) Arg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *string {
		if v == nil {
			return nil
		}
		return v.Arg
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the {COMMAND} argument.
func (o HostnamectlOptsPtrOutput) Command() HostnamectlCommandPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *HostnamectlCommand {
		if v == nil {
			return nil
		}
		return &v.Command
	}).(HostnamectlCommandPtrOutput)
}

// Print a short help text and exit.
func (o HostnamectlOptsPtrOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Help
	}).(pulumi.BoolPtrOutput)
}

// Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
func (o HostnamectlOptsPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Shows output formatted as JSON.
func (o HostnamectlOptsPtrOutput) Json() HostnamectlJsonModePtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *HostnamectlJsonMode {
		if v == nil {
			return nil
		}
		return v.Json
	}).(HostnamectlJsonModePtrOutput)
}

// Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
func (o HostnamectlOptsPtrOutput) Machine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *string {
		if v == nil {
			return nil
		}
		return v.Machine
	}).(pulumi.StringPtrOutput)
}

// Do not query the user for authentication for privileged operations.
func (o HostnamectlOptsPtrOutput) NoAskPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *bool {
		if v == nil {
			return nil
		}
		return v.NoAskPassword
	}).(pulumi.BoolPtrOutput)
}

// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
func (o HostnamectlOptsPtrOutput) Pretty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Pretty
	}).(pulumi.BoolPtrOutput)
}

// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
func (o HostnamectlOptsPtrOutput) Static() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Static
	}).(pulumi.BoolPtrOutput)
}

// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
func (o HostnamectlOptsPtrOutput) Transient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Transient
	}).(pulumi.BoolPtrOutput)
}

// Print a short version string and exit.
func (o HostnamectlOptsPtrOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostnamectlOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.BoolPtrOutput)
}

// Abstraction over the `mkdir` utility on a remote system.
type MkdirOpts struct {
	// The fully qualified path of the directory on the remote system.
	Directory string `pulumi:"directory"`
	// Corresponds to the `--parents` option.
	Parents *bool `pulumi:"parents"`
	// Remove the created directory when the `Mkdir` resource is deleted or updated.
	RemoveOnDelete *bool `pulumi:"removeOnDelete"`
}

// MkdirOptsInput is an input type that accepts MkdirOptsArgs and MkdirOptsOutput values.
// You can construct a concrete instance of `MkdirOptsInput` via:
//
//	MkdirOptsArgs{...}
type MkdirOptsInput interface {
	pulumi.Input

	ToMkdirOptsOutput() MkdirOptsOutput
	ToMkdirOptsOutputWithContext(context.Context) MkdirOptsOutput
}

// Abstraction over the `mkdir` utility on a remote system.
type MkdirOptsArgs struct {
	// The fully qualified path of the directory on the remote system.
	Directory pulumi.StringInput `pulumi:"directory"`
	// Corresponds to the `--parents` option.
	Parents pulumi.BoolPtrInput `pulumi:"parents"`
	// Remove the created directory when the `Mkdir` resource is deleted or updated.
	RemoveOnDelete pulumi.BoolPtrInput `pulumi:"removeOnDelete"`
}

func (MkdirOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MkdirOpts)(nil)).Elem()
}

func (i MkdirOptsArgs) ToMkdirOptsOutput() MkdirOptsOutput {
	return i.ToMkdirOptsOutputWithContext(context.Background())
}

func (i MkdirOptsArgs) ToMkdirOptsOutputWithContext(ctx context.Context) MkdirOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MkdirOptsOutput)
}

func (i MkdirOptsArgs) ToMkdirOptsPtrOutput() MkdirOptsPtrOutput {
	return i.ToMkdirOptsPtrOutputWithContext(context.Background())
}

func (i MkdirOptsArgs) ToMkdirOptsPtrOutputWithContext(ctx context.Context) MkdirOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MkdirOptsOutput).ToMkdirOptsPtrOutputWithContext(ctx)
}

// MkdirOptsPtrInput is an input type that accepts MkdirOptsArgs, MkdirOptsPtr and MkdirOptsPtrOutput values.
// You can construct a concrete instance of `MkdirOptsPtrInput` via:
//
//	        MkdirOptsArgs{...}
//
//	or:
//
//	        nil
type MkdirOptsPtrInput interface {
	pulumi.Input

	ToMkdirOptsPtrOutput() MkdirOptsPtrOutput
	ToMkdirOptsPtrOutputWithContext(context.Context) MkdirOptsPtrOutput
}

type mkdirOptsPtrType MkdirOptsArgs

func MkdirOptsPtr(v *MkdirOptsArgs) MkdirOptsPtrInput {
	return (*mkdirOptsPtrType)(v)
}

func (*mkdirOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MkdirOpts)(nil)).Elem()
}

func (i *mkdirOptsPtrType) ToMkdirOptsPtrOutput() MkdirOptsPtrOutput {
	return i.ToMkdirOptsPtrOutputWithContext(context.Background())
}

func (i *mkdirOptsPtrType) ToMkdirOptsPtrOutputWithContext(ctx context.Context) MkdirOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MkdirOptsPtrOutput)
}

// Abstraction over the `mkdir` utility on a remote system.
type MkdirOptsOutput struct{ *pulumi.OutputState }

func (MkdirOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MkdirOpts)(nil)).Elem()
}

func (o MkdirOptsOutput) ToMkdirOptsOutput() MkdirOptsOutput {
	return o
}

func (o MkdirOptsOutput) ToMkdirOptsOutputWithContext(ctx context.Context) MkdirOptsOutput {
	return o
}

func (o MkdirOptsOutput) ToMkdirOptsPtrOutput() MkdirOptsPtrOutput {
	return o.ToMkdirOptsPtrOutputWithContext(context.Background())
}

func (o MkdirOptsOutput) ToMkdirOptsPtrOutputWithContext(ctx context.Context) MkdirOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MkdirOpts) *MkdirOpts {
		return &v
	}).(MkdirOptsPtrOutput)
}

// The fully qualified path of the directory on the remote system.
func (o MkdirOptsOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v MkdirOpts) string { return v.Directory }).(pulumi.StringOutput)
}

// Corresponds to the `--parents` option.
func (o MkdirOptsOutput) Parents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MkdirOpts) *bool { return v.Parents }).(pulumi.BoolPtrOutput)
}

// Remove the created directory when the `Mkdir` resource is deleted or updated.
func (o MkdirOptsOutput) RemoveOnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MkdirOpts) *bool { return v.RemoveOnDelete }).(pulumi.BoolPtrOutput)
}

type MkdirOptsPtrOutput struct{ *pulumi.OutputState }

func (MkdirOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MkdirOpts)(nil)).Elem()
}

func (o MkdirOptsPtrOutput) ToMkdirOptsPtrOutput() MkdirOptsPtrOutput {
	return o
}

func (o MkdirOptsPtrOutput) ToMkdirOptsPtrOutputWithContext(ctx context.Context) MkdirOptsPtrOutput {
	return o
}

func (o MkdirOptsPtrOutput) Elem() MkdirOptsOutput {
	return o.ApplyT(func(v *MkdirOpts) MkdirOpts {
		if v != nil {
			return *v
		}
		var ret MkdirOpts
		return ret
	}).(MkdirOptsOutput)
}

// The fully qualified path of the directory on the remote system.
func (o MkdirOptsPtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MkdirOpts) *string {
		if v == nil {
			return nil
		}
		return &v.Directory
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the `--parents` option.
func (o MkdirOptsPtrOutput) Parents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MkdirOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Parents
	}).(pulumi.BoolPtrOutput)
}

// Remove the created directory when the `Mkdir` resource is deleted or updated.
func (o MkdirOptsPtrOutput) RemoveOnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MkdirOpts) *bool {
		if v == nil {
			return nil
		}
		return v.RemoveOnDelete
	}).(pulumi.BoolPtrOutput)
}

// Abstraction over the `mktemp` utility on a remote system.
type MktempOpts struct {
	// Corresponds to the `--directory` option.
	Directory *bool `pulumi:"directory"`
	// Corresponds to the `--dry-run` option.
	DryRun *bool `pulumi:"dryRun"`
	// Corresponds to the `--quiet` option.
	Quiet *bool `pulumi:"quiet"`
	// Corresponds to the `--suffix` option.
	Suffix *string `pulumi:"suffix"`
	// Corresponds to the [TEMPLATE] argument.
	Template *string `pulumi:"template"`
	// Corresponds to the `--tmpdir` option.
	Tmpdir *string `pulumi:"tmpdir"`
}

// MktempOptsInput is an input type that accepts MktempOptsArgs and MktempOptsOutput values.
// You can construct a concrete instance of `MktempOptsInput` via:
//
//	MktempOptsArgs{...}
type MktempOptsInput interface {
	pulumi.Input

	ToMktempOptsOutput() MktempOptsOutput
	ToMktempOptsOutputWithContext(context.Context) MktempOptsOutput
}

// Abstraction over the `mktemp` utility on a remote system.
type MktempOptsArgs struct {
	// Corresponds to the `--directory` option.
	Directory pulumi.BoolPtrInput `pulumi:"directory"`
	// Corresponds to the `--dry-run` option.
	DryRun pulumi.BoolPtrInput `pulumi:"dryRun"`
	// Corresponds to the `--quiet` option.
	Quiet pulumi.BoolPtrInput `pulumi:"quiet"`
	// Corresponds to the `--suffix` option.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
	// Corresponds to the [TEMPLATE] argument.
	Template pulumi.StringPtrInput `pulumi:"template"`
	// Corresponds to the `--tmpdir` option.
	Tmpdir pulumi.StringPtrInput `pulumi:"tmpdir"`
}

func (MktempOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MktempOpts)(nil)).Elem()
}

func (i MktempOptsArgs) ToMktempOptsOutput() MktempOptsOutput {
	return i.ToMktempOptsOutputWithContext(context.Background())
}

func (i MktempOptsArgs) ToMktempOptsOutputWithContext(ctx context.Context) MktempOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MktempOptsOutput)
}

func (i MktempOptsArgs) ToMktempOptsPtrOutput() MktempOptsPtrOutput {
	return i.ToMktempOptsPtrOutputWithContext(context.Background())
}

func (i MktempOptsArgs) ToMktempOptsPtrOutputWithContext(ctx context.Context) MktempOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MktempOptsOutput).ToMktempOptsPtrOutputWithContext(ctx)
}

// MktempOptsPtrInput is an input type that accepts MktempOptsArgs, MktempOptsPtr and MktempOptsPtrOutput values.
// You can construct a concrete instance of `MktempOptsPtrInput` via:
//
//	        MktempOptsArgs{...}
//
//	or:
//
//	        nil
type MktempOptsPtrInput interface {
	pulumi.Input

	ToMktempOptsPtrOutput() MktempOptsPtrOutput
	ToMktempOptsPtrOutputWithContext(context.Context) MktempOptsPtrOutput
}

type mktempOptsPtrType MktempOptsArgs

func MktempOptsPtr(v *MktempOptsArgs) MktempOptsPtrInput {
	return (*mktempOptsPtrType)(v)
}

func (*mktempOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MktempOpts)(nil)).Elem()
}

func (i *mktempOptsPtrType) ToMktempOptsPtrOutput() MktempOptsPtrOutput {
	return i.ToMktempOptsPtrOutputWithContext(context.Background())
}

func (i *mktempOptsPtrType) ToMktempOptsPtrOutputWithContext(ctx context.Context) MktempOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MktempOptsPtrOutput)
}

// Abstraction over the `mktemp` utility on a remote system.
type MktempOptsOutput struct{ *pulumi.OutputState }

func (MktempOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MktempOpts)(nil)).Elem()
}

func (o MktempOptsOutput) ToMktempOptsOutput() MktempOptsOutput {
	return o
}

func (o MktempOptsOutput) ToMktempOptsOutputWithContext(ctx context.Context) MktempOptsOutput {
	return o
}

func (o MktempOptsOutput) ToMktempOptsPtrOutput() MktempOptsPtrOutput {
	return o.ToMktempOptsPtrOutputWithContext(context.Background())
}

func (o MktempOptsOutput) ToMktempOptsPtrOutputWithContext(ctx context.Context) MktempOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MktempOpts) *MktempOpts {
		return &v
	}).(MktempOptsPtrOutput)
}

// Corresponds to the `--directory` option.
func (o MktempOptsOutput) Directory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempOpts) *bool { return v.Directory }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--dry-run` option.
func (o MktempOptsOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempOpts) *bool { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--quiet` option.
func (o MktempOptsOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MktempOpts) *bool { return v.Quiet }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--suffix` option.
func (o MktempOptsOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MktempOpts) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

// Corresponds to the [TEMPLATE] argument.
func (o MktempOptsOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MktempOpts) *string { return v.Template }).(pulumi.StringPtrOutput)
}

// Corresponds to the `--tmpdir` option.
func (o MktempOptsOutput) Tmpdir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MktempOpts) *string { return v.Tmpdir }).(pulumi.StringPtrOutput)
}

type MktempOptsPtrOutput struct{ *pulumi.OutputState }

func (MktempOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MktempOpts)(nil)).Elem()
}

func (o MktempOptsPtrOutput) ToMktempOptsPtrOutput() MktempOptsPtrOutput {
	return o
}

func (o MktempOptsPtrOutput) ToMktempOptsPtrOutputWithContext(ctx context.Context) MktempOptsPtrOutput {
	return o
}

func (o MktempOptsPtrOutput) Elem() MktempOptsOutput {
	return o.ApplyT(func(v *MktempOpts) MktempOpts {
		if v != nil {
			return *v
		}
		var ret MktempOpts
		return ret
	}).(MktempOptsOutput)
}

// Corresponds to the `--directory` option.
func (o MktempOptsPtrOutput) Directory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MktempOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--dry-run` option.
func (o MktempOptsPtrOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MktempOpts) *bool {
		if v == nil {
			return nil
		}
		return v.DryRun
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--quiet` option.
func (o MktempOptsPtrOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MktempOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Quiet
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--suffix` option.
func (o MktempOptsPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MktempOpts) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the [TEMPLATE] argument.
func (o MktempOptsPtrOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MktempOpts) *string {
		if v == nil {
			return nil
		}
		return v.Template
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the `--tmpdir` option.
func (o MktempOptsPtrOutput) Tmpdir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MktempOpts) *string {
		if v == nil {
			return nil
		}
		return v.Tmpdir
	}).(pulumi.StringPtrOutput)
}

// Abstraction over the `mv` utility on a remote system.
type MvOpts struct {
	// Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
	Backup *bool `pulumi:"backup"`
	// Corresponds to the `--context` option.
	Context *bool `pulumi:"context"`
	// Corresponds to the [CONTROL] argument for the `--backup` option.
	Control *bool `pulumi:"control"`
	// Corresponds to the [DEST] argument.
	Dest *string `pulumi:"dest"`
	// Corresponds to the [DIRECTORY] argument.
	Directory *string `pulumi:"directory"`
	// Corresponds to the `--force` option.
	Force *bool `pulumi:"force"`
	// Corresponds to the `--no-clobber` option.
	NoClobber *bool `pulumi:"noClobber"`
	// Corresponds to the `--no-target-directory` option.
	NoTargetDirectory *bool `pulumi:"noTargetDirectory"`
	// Corresponds to the [SOURCE] argument.
	Source []string `pulumi:"source"`
	// Corresponds to the `--strip-trailing-slashes` option.
	StripTrailingSlashes *bool `pulumi:"stripTrailingSlashes"`
	// Corresponds to the `--suffix` option.
	Suffix *string `pulumi:"suffix"`
	// Corresponds to the `--target-directory` option.
	TargetDirectory *bool `pulumi:"targetDirectory"`
	// Corresponds to the `--update` option.
	Update *bool `pulumi:"update"`
	// Corresponds to the `--verbose` option.
	Verbose *bool `pulumi:"verbose"`
}

// MvOptsInput is an input type that accepts MvOptsArgs and MvOptsOutput values.
// You can construct a concrete instance of `MvOptsInput` via:
//
//	MvOptsArgs{...}
type MvOptsInput interface {
	pulumi.Input

	ToMvOptsOutput() MvOptsOutput
	ToMvOptsOutputWithContext(context.Context) MvOptsOutput
}

// Abstraction over the `mv` utility on a remote system.
type MvOptsArgs struct {
	// Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
	Backup *bool `pulumi:"backup"`
	// Corresponds to the `--context` option.
	Context pulumi.BoolPtrInput `pulumi:"context"`
	// Corresponds to the [CONTROL] argument for the `--backup` option.
	Control pulumi.BoolPtrInput `pulumi:"control"`
	// Corresponds to the [DEST] argument.
	Dest pulumi.StringPtrInput `pulumi:"dest"`
	// Corresponds to the [DIRECTORY] argument.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// Corresponds to the `--force` option.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// Corresponds to the `--no-clobber` option.
	NoClobber pulumi.BoolPtrInput `pulumi:"noClobber"`
	// Corresponds to the `--no-target-directory` option.
	NoTargetDirectory pulumi.BoolPtrInput `pulumi:"noTargetDirectory"`
	// Corresponds to the [SOURCE] argument.
	Source pulumi.StringArrayInput `pulumi:"source"`
	// Corresponds to the `--strip-trailing-slashes` option.
	StripTrailingSlashes pulumi.BoolPtrInput `pulumi:"stripTrailingSlashes"`
	// Corresponds to the `--suffix` option.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
	// Corresponds to the `--target-directory` option.
	TargetDirectory pulumi.BoolPtrInput `pulumi:"targetDirectory"`
	// Corresponds to the `--update` option.
	Update pulumi.BoolPtrInput `pulumi:"update"`
	// Corresponds to the `--verbose` option.
	Verbose pulumi.BoolPtrInput `pulumi:"verbose"`
}

func (MvOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MvOpts)(nil)).Elem()
}

func (i MvOptsArgs) ToMvOptsOutput() MvOptsOutput {
	return i.ToMvOptsOutputWithContext(context.Background())
}

func (i MvOptsArgs) ToMvOptsOutputWithContext(ctx context.Context) MvOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MvOptsOutput)
}

func (i MvOptsArgs) ToMvOptsPtrOutput() MvOptsPtrOutput {
	return i.ToMvOptsPtrOutputWithContext(context.Background())
}

func (i MvOptsArgs) ToMvOptsPtrOutputWithContext(ctx context.Context) MvOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MvOptsOutput).ToMvOptsPtrOutputWithContext(ctx)
}

// MvOptsPtrInput is an input type that accepts MvOptsArgs, MvOptsPtr and MvOptsPtrOutput values.
// You can construct a concrete instance of `MvOptsPtrInput` via:
//
//	        MvOptsArgs{...}
//
//	or:
//
//	        nil
type MvOptsPtrInput interface {
	pulumi.Input

	ToMvOptsPtrOutput() MvOptsPtrOutput
	ToMvOptsPtrOutputWithContext(context.Context) MvOptsPtrOutput
}

type mvOptsPtrType MvOptsArgs

func MvOptsPtr(v *MvOptsArgs) MvOptsPtrInput {
	return (*mvOptsPtrType)(v)
}

func (*mvOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MvOpts)(nil)).Elem()
}

func (i *mvOptsPtrType) ToMvOptsPtrOutput() MvOptsPtrOutput {
	return i.ToMvOptsPtrOutputWithContext(context.Background())
}

func (i *mvOptsPtrType) ToMvOptsPtrOutputWithContext(ctx context.Context) MvOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MvOptsPtrOutput)
}

// Abstraction over the `mv` utility on a remote system.
type MvOptsOutput struct{ *pulumi.OutputState }

func (MvOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MvOpts)(nil)).Elem()
}

func (o MvOptsOutput) ToMvOptsOutput() MvOptsOutput {
	return o
}

func (o MvOptsOutput) ToMvOptsOutputWithContext(ctx context.Context) MvOptsOutput {
	return o
}

func (o MvOptsOutput) ToMvOptsPtrOutput() MvOptsPtrOutput {
	return o.ToMvOptsPtrOutputWithContext(context.Background())
}

func (o MvOptsOutput) ToMvOptsPtrOutputWithContext(ctx context.Context) MvOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MvOpts) *MvOpts {
		return &v
	}).(MvOptsPtrOutput)
}

// Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
func (o MvOptsOutput) Backup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.Backup }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--context` option.
func (o MvOptsOutput) Context() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.Context }).(pulumi.BoolPtrOutput)
}

// Corresponds to the [CONTROL] argument for the `--backup` option.
func (o MvOptsOutput) Control() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.Control }).(pulumi.BoolPtrOutput)
}

// Corresponds to the [DEST] argument.
func (o MvOptsOutput) Dest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MvOpts) *string { return v.Dest }).(pulumi.StringPtrOutput)
}

// Corresponds to the [DIRECTORY] argument.
func (o MvOptsOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MvOpts) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// Corresponds to the `--force` option.
func (o MvOptsOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--no-clobber` option.
func (o MvOptsOutput) NoClobber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.NoClobber }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--no-target-directory` option.
func (o MvOptsOutput) NoTargetDirectory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.NoTargetDirectory }).(pulumi.BoolPtrOutput)
}

// Corresponds to the [SOURCE] argument.
func (o MvOptsOutput) Source() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MvOpts) []string { return v.Source }).(pulumi.StringArrayOutput)
}

// Corresponds to the `--strip-trailing-slashes` option.
func (o MvOptsOutput) StripTrailingSlashes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.StripTrailingSlashes }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--suffix` option.
func (o MvOptsOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MvOpts) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

// Corresponds to the `--target-directory` option.
func (o MvOptsOutput) TargetDirectory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.TargetDirectory }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--update` option.
func (o MvOptsOutput) Update() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.Update }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--verbose` option.
func (o MvOptsOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MvOpts) *bool { return v.Verbose }).(pulumi.BoolPtrOutput)
}

type MvOptsPtrOutput struct{ *pulumi.OutputState }

func (MvOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MvOpts)(nil)).Elem()
}

func (o MvOptsPtrOutput) ToMvOptsPtrOutput() MvOptsPtrOutput {
	return o
}

func (o MvOptsPtrOutput) ToMvOptsPtrOutputWithContext(ctx context.Context) MvOptsPtrOutput {
	return o
}

func (o MvOptsPtrOutput) Elem() MvOptsOutput {
	return o.ApplyT(func(v *MvOpts) MvOpts {
		if v != nil {
			return *v
		}
		var ret MvOpts
		return ret
	}).(MvOptsOutput)
}

// Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
func (o MvOptsPtrOutput) Backup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Backup
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--context` option.
func (o MvOptsPtrOutput) Context() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Context
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the [CONTROL] argument for the `--backup` option.
func (o MvOptsPtrOutput) Control() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Control
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the [DEST] argument.
func (o MvOptsPtrOutput) Dest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MvOpts) *string {
		if v == nil {
			return nil
		}
		return v.Dest
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the [DIRECTORY] argument.
func (o MvOptsPtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MvOpts) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the `--force` option.
func (o MvOptsPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--no-clobber` option.
func (o MvOptsPtrOutput) NoClobber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.NoClobber
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--no-target-directory` option.
func (o MvOptsPtrOutput) NoTargetDirectory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.NoTargetDirectory
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the [SOURCE] argument.
func (o MvOptsPtrOutput) Source() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MvOpts) []string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringArrayOutput)
}

// Corresponds to the `--strip-trailing-slashes` option.
func (o MvOptsPtrOutput) StripTrailingSlashes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.StripTrailingSlashes
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--suffix` option.
func (o MvOptsPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MvOpts) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the `--target-directory` option.
func (o MvOptsPtrOutput) TargetDirectory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.TargetDirectory
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--update` option.
func (o MvOptsPtrOutput) Update() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--verbose` option.
func (o MvOptsPtrOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MvOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Verbose
	}).(pulumi.BoolPtrOutput)
}

// Abstraction over the `rm` utility on a remote system.
type RmOpts struct {
	// Corresponds to the `--dir` option.
	Dir *bool `pulumi:"dir"`
	// Corresponds to the [FILE] argument.
	Files []string `pulumi:"files"`
	// Corresponds to the `--force` option.
	Force *bool `pulumi:"force"`
	// Whether rm should be run when the resource is created or deleted.
	OnDelete *bool `pulumi:"onDelete"`
	// Corresponds to the `--recursive` option.
	Recursive *bool `pulumi:"recursive"`
	// Corresponds to the `--verbose` option.
	Verbose *bool `pulumi:"verbose"`
}

// RmOptsInput is an input type that accepts RmOptsArgs and RmOptsOutput values.
// You can construct a concrete instance of `RmOptsInput` via:
//
//	RmOptsArgs{...}
type RmOptsInput interface {
	pulumi.Input

	ToRmOptsOutput() RmOptsOutput
	ToRmOptsOutputWithContext(context.Context) RmOptsOutput
}

// Abstraction over the `rm` utility on a remote system.
type RmOptsArgs struct {
	// Corresponds to the `--dir` option.
	Dir pulumi.BoolPtrInput `pulumi:"dir"`
	// Corresponds to the [FILE] argument.
	Files pulumi.StringArrayInput `pulumi:"files"`
	// Corresponds to the `--force` option.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// Whether rm should be run when the resource is created or deleted.
	OnDelete pulumi.BoolPtrInput `pulumi:"onDelete"`
	// Corresponds to the `--recursive` option.
	Recursive pulumi.BoolPtrInput `pulumi:"recursive"`
	// Corresponds to the `--verbose` option.
	Verbose pulumi.BoolPtrInput `pulumi:"verbose"`
}

func (RmOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RmOpts)(nil)).Elem()
}

func (i RmOptsArgs) ToRmOptsOutput() RmOptsOutput {
	return i.ToRmOptsOutputWithContext(context.Background())
}

func (i RmOptsArgs) ToRmOptsOutputWithContext(ctx context.Context) RmOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RmOptsOutput)
}

func (i RmOptsArgs) ToRmOptsPtrOutput() RmOptsPtrOutput {
	return i.ToRmOptsPtrOutputWithContext(context.Background())
}

func (i RmOptsArgs) ToRmOptsPtrOutputWithContext(ctx context.Context) RmOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RmOptsOutput).ToRmOptsPtrOutputWithContext(ctx)
}

// RmOptsPtrInput is an input type that accepts RmOptsArgs, RmOptsPtr and RmOptsPtrOutput values.
// You can construct a concrete instance of `RmOptsPtrInput` via:
//
//	        RmOptsArgs{...}
//
//	or:
//
//	        nil
type RmOptsPtrInput interface {
	pulumi.Input

	ToRmOptsPtrOutput() RmOptsPtrOutput
	ToRmOptsPtrOutputWithContext(context.Context) RmOptsPtrOutput
}

type rmOptsPtrType RmOptsArgs

func RmOptsPtr(v *RmOptsArgs) RmOptsPtrInput {
	return (*rmOptsPtrType)(v)
}

func (*rmOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RmOpts)(nil)).Elem()
}

func (i *rmOptsPtrType) ToRmOptsPtrOutput() RmOptsPtrOutput {
	return i.ToRmOptsPtrOutputWithContext(context.Background())
}

func (i *rmOptsPtrType) ToRmOptsPtrOutputWithContext(ctx context.Context) RmOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RmOptsPtrOutput)
}

// Abstraction over the `rm` utility on a remote system.
type RmOptsOutput struct{ *pulumi.OutputState }

func (RmOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RmOpts)(nil)).Elem()
}

func (o RmOptsOutput) ToRmOptsOutput() RmOptsOutput {
	return o
}

func (o RmOptsOutput) ToRmOptsOutputWithContext(ctx context.Context) RmOptsOutput {
	return o
}

func (o RmOptsOutput) ToRmOptsPtrOutput() RmOptsPtrOutput {
	return o.ToRmOptsPtrOutputWithContext(context.Background())
}

func (o RmOptsOutput) ToRmOptsPtrOutputWithContext(ctx context.Context) RmOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RmOpts) *RmOpts {
		return &v
	}).(RmOptsPtrOutput)
}

// Corresponds to the `--dir` option.
func (o RmOptsOutput) Dir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmOpts) *bool { return v.Dir }).(pulumi.BoolPtrOutput)
}

// Corresponds to the [FILE] argument.
func (o RmOptsOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RmOpts) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// Corresponds to the `--force` option.
func (o RmOptsOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmOpts) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// Whether rm should be run when the resource is created or deleted.
func (o RmOptsOutput) OnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmOpts) *bool { return v.OnDelete }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--recursive` option.
func (o RmOptsOutput) Recursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmOpts) *bool { return v.Recursive }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--verbose` option.
func (o RmOptsOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RmOpts) *bool { return v.Verbose }).(pulumi.BoolPtrOutput)
}

type RmOptsPtrOutput struct{ *pulumi.OutputState }

func (RmOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RmOpts)(nil)).Elem()
}

func (o RmOptsPtrOutput) ToRmOptsPtrOutput() RmOptsPtrOutput {
	return o
}

func (o RmOptsPtrOutput) ToRmOptsPtrOutputWithContext(ctx context.Context) RmOptsPtrOutput {
	return o
}

func (o RmOptsPtrOutput) Elem() RmOptsOutput {
	return o.ApplyT(func(v *RmOpts) RmOpts {
		if v != nil {
			return *v
		}
		var ret RmOpts
		return ret
	}).(RmOptsOutput)
}

// Corresponds to the `--dir` option.
func (o RmOptsPtrOutput) Dir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RmOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the [FILE] argument.
func (o RmOptsPtrOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RmOpts) []string {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.StringArrayOutput)
}

// Corresponds to the `--force` option.
func (o RmOptsPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RmOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// Whether rm should be run when the resource is created or deleted.
func (o RmOptsPtrOutput) OnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RmOpts) *bool {
		if v == nil {
			return nil
		}
		return v.OnDelete
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--recursive` option.
func (o RmOptsPtrOutput) Recursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RmOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--verbose` option.
func (o RmOptsPtrOutput) Verbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RmOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Verbose
	}).(pulumi.BoolPtrOutput)
}

// Abstraction over the `sed` utility on a remote system.
type SedOpts struct {
	// annotate program execution.
	Debug *bool `pulumi:"debug"`
	// add the script to the commands to be executed.
	Expressions []string `pulumi:"expressions"`
	// add the contents of script-file to the commands to be executed.
	Files []string `pulumi:"files"`
	// follow symlinks when processing in place
	FollowSymlinks *bool `pulumi:"followSymlinks"`
	// display this help and exit.
	Help *bool `pulumi:"help"`
	// edit files in place (makes backup if SUFFIX supplied)
	InPlace *string `pulumi:"inPlace"`
	// corresponds to the [input-file]... argument(s).
	InputFiles []string `pulumi:"inputFiles"`
	// specify the desired line-wrap length for the `l' command
	LineLength *int `pulumi:"lineLength"`
	// separate lines by NUL characters
	NullData *bool `pulumi:"nullData"`
	// disable all GNU extensions.
	Posix *bool `pulumi:"posix"`
	// suppress automatic printing of pattern space. Same as `silent`.
	Quiet *bool `pulumi:"quiet"`
	// use extended regular expressions in the script (for portability use POSIX -E).
	RegexpExtended *bool `pulumi:"regexpExtended"`
	// operate in sandbox mode (disable e/r/w commands).
	Sandbox *bool `pulumi:"sandbox"`
	// script only if no other script.
	Script *string `pulumi:"script"`
	// consider files as separate rather than as a single, continuous long stream.
	Separate *bool `pulumi:"separate"`
	// suppress automatic printing of pattern space. Same as `quiet`.
	Silent *bool `pulumi:"silent"`
	// load minimal amounts of data from the input files and flush the output buffers more often.
	Unbuffered *bool `pulumi:"unbuffered"`
	// output version information and exit.
	Version *bool `pulumi:"version"`
}

// SedOptsInput is an input type that accepts SedOptsArgs and SedOptsOutput values.
// You can construct a concrete instance of `SedOptsInput` via:
//
//	SedOptsArgs{...}
type SedOptsInput interface {
	pulumi.Input

	ToSedOptsOutput() SedOptsOutput
	ToSedOptsOutputWithContext(context.Context) SedOptsOutput
}

// Abstraction over the `sed` utility on a remote system.
type SedOptsArgs struct {
	// annotate program execution.
	Debug pulumi.BoolPtrInput `pulumi:"debug"`
	// add the script to the commands to be executed.
	Expressions pulumi.StringArrayInput `pulumi:"expressions"`
	// add the contents of script-file to the commands to be executed.
	Files pulumi.StringArrayInput `pulumi:"files"`
	// follow symlinks when processing in place
	FollowSymlinks pulumi.BoolPtrInput `pulumi:"followSymlinks"`
	// display this help and exit.
	Help pulumi.BoolPtrInput `pulumi:"help"`
	// edit files in place (makes backup if SUFFIX supplied)
	InPlace pulumi.StringPtrInput `pulumi:"inPlace"`
	// corresponds to the [input-file]... argument(s).
	InputFiles pulumi.StringArrayInput `pulumi:"inputFiles"`
	// specify the desired line-wrap length for the `l' command
	LineLength pulumi.IntPtrInput `pulumi:"lineLength"`
	// separate lines by NUL characters
	NullData pulumi.BoolPtrInput `pulumi:"nullData"`
	// disable all GNU extensions.
	Posix pulumi.BoolPtrInput `pulumi:"posix"`
	// suppress automatic printing of pattern space. Same as `silent`.
	Quiet pulumi.BoolPtrInput `pulumi:"quiet"`
	// use extended regular expressions in the script (for portability use POSIX -E).
	RegexpExtended pulumi.BoolPtrInput `pulumi:"regexpExtended"`
	// operate in sandbox mode (disable e/r/w commands).
	Sandbox pulumi.BoolPtrInput `pulumi:"sandbox"`
	// script only if no other script.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// consider files as separate rather than as a single, continuous long stream.
	Separate pulumi.BoolPtrInput `pulumi:"separate"`
	// suppress automatic printing of pattern space. Same as `quiet`.
	Silent pulumi.BoolPtrInput `pulumi:"silent"`
	// load minimal amounts of data from the input files and flush the output buffers more often.
	Unbuffered pulumi.BoolPtrInput `pulumi:"unbuffered"`
	// output version information and exit.
	Version pulumi.BoolPtrInput `pulumi:"version"`
}

func (SedOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SedOpts)(nil)).Elem()
}

func (i SedOptsArgs) ToSedOptsOutput() SedOptsOutput {
	return i.ToSedOptsOutputWithContext(context.Background())
}

func (i SedOptsArgs) ToSedOptsOutputWithContext(ctx context.Context) SedOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SedOptsOutput)
}

func (i SedOptsArgs) ToSedOptsPtrOutput() SedOptsPtrOutput {
	return i.ToSedOptsPtrOutputWithContext(context.Background())
}

func (i SedOptsArgs) ToSedOptsPtrOutputWithContext(ctx context.Context) SedOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SedOptsOutput).ToSedOptsPtrOutputWithContext(ctx)
}

// SedOptsPtrInput is an input type that accepts SedOptsArgs, SedOptsPtr and SedOptsPtrOutput values.
// You can construct a concrete instance of `SedOptsPtrInput` via:
//
//	        SedOptsArgs{...}
//
//	or:
//
//	        nil
type SedOptsPtrInput interface {
	pulumi.Input

	ToSedOptsPtrOutput() SedOptsPtrOutput
	ToSedOptsPtrOutputWithContext(context.Context) SedOptsPtrOutput
}

type sedOptsPtrType SedOptsArgs

func SedOptsPtr(v *SedOptsArgs) SedOptsPtrInput {
	return (*sedOptsPtrType)(v)
}

func (*sedOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SedOpts)(nil)).Elem()
}

func (i *sedOptsPtrType) ToSedOptsPtrOutput() SedOptsPtrOutput {
	return i.ToSedOptsPtrOutputWithContext(context.Background())
}

func (i *sedOptsPtrType) ToSedOptsPtrOutputWithContext(ctx context.Context) SedOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SedOptsPtrOutput)
}

// Abstraction over the `sed` utility on a remote system.
type SedOptsOutput struct{ *pulumi.OutputState }

func (SedOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SedOpts)(nil)).Elem()
}

func (o SedOptsOutput) ToSedOptsOutput() SedOptsOutput {
	return o
}

func (o SedOptsOutput) ToSedOptsOutputWithContext(ctx context.Context) SedOptsOutput {
	return o
}

func (o SedOptsOutput) ToSedOptsPtrOutput() SedOptsPtrOutput {
	return o.ToSedOptsPtrOutputWithContext(context.Background())
}

func (o SedOptsOutput) ToSedOptsPtrOutputWithContext(ctx context.Context) SedOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SedOpts) *SedOpts {
		return &v
	}).(SedOptsPtrOutput)
}

// annotate program execution.
func (o SedOptsOutput) Debug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.Debug }).(pulumi.BoolPtrOutput)
}

// add the script to the commands to be executed.
func (o SedOptsOutput) Expressions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SedOpts) []string { return v.Expressions }).(pulumi.StringArrayOutput)
}

// add the contents of script-file to the commands to be executed.
func (o SedOptsOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SedOpts) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// follow symlinks when processing in place
func (o SedOptsOutput) FollowSymlinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.FollowSymlinks }).(pulumi.BoolPtrOutput)
}

// display this help and exit.
func (o SedOptsOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.Help }).(pulumi.BoolPtrOutput)
}

// edit files in place (makes backup if SUFFIX supplied)
func (o SedOptsOutput) InPlace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SedOpts) *string { return v.InPlace }).(pulumi.StringPtrOutput)
}

// corresponds to the [input-file]... argument(s).
func (o SedOptsOutput) InputFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SedOpts) []string { return v.InputFiles }).(pulumi.StringArrayOutput)
}

// specify the desired line-wrap length for the `l' command
func (o SedOptsOutput) LineLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SedOpts) *int { return v.LineLength }).(pulumi.IntPtrOutput)
}

// separate lines by NUL characters
func (o SedOptsOutput) NullData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.NullData }).(pulumi.BoolPtrOutput)
}

// disable all GNU extensions.
func (o SedOptsOutput) Posix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.Posix }).(pulumi.BoolPtrOutput)
}

// suppress automatic printing of pattern space. Same as `silent`.
func (o SedOptsOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.Quiet }).(pulumi.BoolPtrOutput)
}

// use extended regular expressions in the script (for portability use POSIX -E).
func (o SedOptsOutput) RegexpExtended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.RegexpExtended }).(pulumi.BoolPtrOutput)
}

// operate in sandbox mode (disable e/r/w commands).
func (o SedOptsOutput) Sandbox() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.Sandbox }).(pulumi.BoolPtrOutput)
}

// script only if no other script.
func (o SedOptsOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SedOpts) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// consider files as separate rather than as a single, continuous long stream.
func (o SedOptsOutput) Separate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.Separate }).(pulumi.BoolPtrOutput)
}

// suppress automatic printing of pattern space. Same as `quiet`.
func (o SedOptsOutput) Silent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.Silent }).(pulumi.BoolPtrOutput)
}

// load minimal amounts of data from the input files and flush the output buffers more often.
func (o SedOptsOutput) Unbuffered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.Unbuffered }).(pulumi.BoolPtrOutput)
}

// output version information and exit.
func (o SedOptsOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SedOpts) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

type SedOptsPtrOutput struct{ *pulumi.OutputState }

func (SedOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SedOpts)(nil)).Elem()
}

func (o SedOptsPtrOutput) ToSedOptsPtrOutput() SedOptsPtrOutput {
	return o
}

func (o SedOptsPtrOutput) ToSedOptsPtrOutputWithContext(ctx context.Context) SedOptsPtrOutput {
	return o
}

func (o SedOptsPtrOutput) Elem() SedOptsOutput {
	return o.ApplyT(func(v *SedOpts) SedOpts {
		if v != nil {
			return *v
		}
		var ret SedOpts
		return ret
	}).(SedOptsOutput)
}

// annotate program execution.
func (o SedOptsPtrOutput) Debug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Debug
	}).(pulumi.BoolPtrOutput)
}

// add the script to the commands to be executed.
func (o SedOptsPtrOutput) Expressions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SedOpts) []string {
		if v == nil {
			return nil
		}
		return v.Expressions
	}).(pulumi.StringArrayOutput)
}

// add the contents of script-file to the commands to be executed.
func (o SedOptsPtrOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SedOpts) []string {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.StringArrayOutput)
}

// follow symlinks when processing in place
func (o SedOptsPtrOutput) FollowSymlinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.FollowSymlinks
	}).(pulumi.BoolPtrOutput)
}

// display this help and exit.
func (o SedOptsPtrOutput) Help() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Help
	}).(pulumi.BoolPtrOutput)
}

// edit files in place (makes backup if SUFFIX supplied)
func (o SedOptsPtrOutput) InPlace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SedOpts) *string {
		if v == nil {
			return nil
		}
		return v.InPlace
	}).(pulumi.StringPtrOutput)
}

// corresponds to the [input-file]... argument(s).
func (o SedOptsPtrOutput) InputFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SedOpts) []string {
		if v == nil {
			return nil
		}
		return v.InputFiles
	}).(pulumi.StringArrayOutput)
}

// specify the desired line-wrap length for the `l' command
func (o SedOptsPtrOutput) LineLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SedOpts) *int {
		if v == nil {
			return nil
		}
		return v.LineLength
	}).(pulumi.IntPtrOutput)
}

// separate lines by NUL characters
func (o SedOptsPtrOutput) NullData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.NullData
	}).(pulumi.BoolPtrOutput)
}

// disable all GNU extensions.
func (o SedOptsPtrOutput) Posix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Posix
	}).(pulumi.BoolPtrOutput)
}

// suppress automatic printing of pattern space. Same as `silent`.
func (o SedOptsPtrOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Quiet
	}).(pulumi.BoolPtrOutput)
}

// use extended regular expressions in the script (for portability use POSIX -E).
func (o SedOptsPtrOutput) RegexpExtended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.RegexpExtended
	}).(pulumi.BoolPtrOutput)
}

// operate in sandbox mode (disable e/r/w commands).
func (o SedOptsPtrOutput) Sandbox() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Sandbox
	}).(pulumi.BoolPtrOutput)
}

// script only if no other script.
func (o SedOptsPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SedOpts) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// consider files as separate rather than as a single, continuous long stream.
func (o SedOptsPtrOutput) Separate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Separate
	}).(pulumi.BoolPtrOutput)
}

// suppress automatic printing of pattern space. Same as `quiet`.
func (o SedOptsPtrOutput) Silent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Silent
	}).(pulumi.BoolPtrOutput)
}

// load minimal amounts of data from the input files and flush the output buffers more often.
func (o SedOptsPtrOutput) Unbuffered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Unbuffered
	}).(pulumi.BoolPtrOutput)
}

// output version information and exit.
func (o SedOptsPtrOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SedOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.BoolPtrOutput)
}

// Abstraction over the `systemctl` utility on a remote system.
type SystemctlOpts struct {
	// Corresponds to the COMMAND argument.
	Command SystemctlCommand `pulumi:"command"`
	// Corresponds to the [PATTERN] argument
	Pattern *string `pulumi:"pattern"`
	// Corresponds to the [UNIT...] argument.
	Unit *string `pulumi:"unit"`
}

// SystemctlOptsInput is an input type that accepts SystemctlOptsArgs and SystemctlOptsOutput values.
// You can construct a concrete instance of `SystemctlOptsInput` via:
//
//	SystemctlOptsArgs{...}
type SystemctlOptsInput interface {
	pulumi.Input

	ToSystemctlOptsOutput() SystemctlOptsOutput
	ToSystemctlOptsOutputWithContext(context.Context) SystemctlOptsOutput
}

// Abstraction over the `systemctl` utility on a remote system.
type SystemctlOptsArgs struct {
	// Corresponds to the COMMAND argument.
	Command SystemctlCommand `pulumi:"command"`
	// Corresponds to the [PATTERN] argument
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Corresponds to the [UNIT...] argument.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (SystemctlOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemctlOpts)(nil)).Elem()
}

func (i SystemctlOptsArgs) ToSystemctlOptsOutput() SystemctlOptsOutput {
	return i.ToSystemctlOptsOutputWithContext(context.Background())
}

func (i SystemctlOptsArgs) ToSystemctlOptsOutputWithContext(ctx context.Context) SystemctlOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemctlOptsOutput)
}

func (i SystemctlOptsArgs) ToSystemctlOptsPtrOutput() SystemctlOptsPtrOutput {
	return i.ToSystemctlOptsPtrOutputWithContext(context.Background())
}

func (i SystemctlOptsArgs) ToSystemctlOptsPtrOutputWithContext(ctx context.Context) SystemctlOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemctlOptsOutput).ToSystemctlOptsPtrOutputWithContext(ctx)
}

// SystemctlOptsPtrInput is an input type that accepts SystemctlOptsArgs, SystemctlOptsPtr and SystemctlOptsPtrOutput values.
// You can construct a concrete instance of `SystemctlOptsPtrInput` via:
//
//	        SystemctlOptsArgs{...}
//
//	or:
//
//	        nil
type SystemctlOptsPtrInput interface {
	pulumi.Input

	ToSystemctlOptsPtrOutput() SystemctlOptsPtrOutput
	ToSystemctlOptsPtrOutputWithContext(context.Context) SystemctlOptsPtrOutput
}

type systemctlOptsPtrType SystemctlOptsArgs

func SystemctlOptsPtr(v *SystemctlOptsArgs) SystemctlOptsPtrInput {
	return (*systemctlOptsPtrType)(v)
}

func (*systemctlOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemctlOpts)(nil)).Elem()
}

func (i *systemctlOptsPtrType) ToSystemctlOptsPtrOutput() SystemctlOptsPtrOutput {
	return i.ToSystemctlOptsPtrOutputWithContext(context.Background())
}

func (i *systemctlOptsPtrType) ToSystemctlOptsPtrOutputWithContext(ctx context.Context) SystemctlOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemctlOptsPtrOutput)
}

// Abstraction over the `systemctl` utility on a remote system.
type SystemctlOptsOutput struct{ *pulumi.OutputState }

func (SystemctlOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemctlOpts)(nil)).Elem()
}

func (o SystemctlOptsOutput) ToSystemctlOptsOutput() SystemctlOptsOutput {
	return o
}

func (o SystemctlOptsOutput) ToSystemctlOptsOutputWithContext(ctx context.Context) SystemctlOptsOutput {
	return o
}

func (o SystemctlOptsOutput) ToSystemctlOptsPtrOutput() SystemctlOptsPtrOutput {
	return o.ToSystemctlOptsPtrOutputWithContext(context.Background())
}

func (o SystemctlOptsOutput) ToSystemctlOptsPtrOutputWithContext(ctx context.Context) SystemctlOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemctlOpts) *SystemctlOpts {
		return &v
	}).(SystemctlOptsPtrOutput)
}

// Corresponds to the COMMAND argument.
func (o SystemctlOptsOutput) Command() SystemctlCommandOutput {
	return o.ApplyT(func(v SystemctlOpts) SystemctlCommand { return v.Command }).(SystemctlCommandOutput)
}

// Corresponds to the [PATTERN] argument
func (o SystemctlOptsOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemctlOpts) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Corresponds to the [UNIT...] argument.
func (o SystemctlOptsOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemctlOpts) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type SystemctlOptsPtrOutput struct{ *pulumi.OutputState }

func (SystemctlOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemctlOpts)(nil)).Elem()
}

func (o SystemctlOptsPtrOutput) ToSystemctlOptsPtrOutput() SystemctlOptsPtrOutput {
	return o
}

func (o SystemctlOptsPtrOutput) ToSystemctlOptsPtrOutputWithContext(ctx context.Context) SystemctlOptsPtrOutput {
	return o
}

func (o SystemctlOptsPtrOutput) Elem() SystemctlOptsOutput {
	return o.ApplyT(func(v *SystemctlOpts) SystemctlOpts {
		if v != nil {
			return *v
		}
		var ret SystemctlOpts
		return ret
	}).(SystemctlOptsOutput)
}

// Corresponds to the COMMAND argument.
func (o SystemctlOptsPtrOutput) Command() SystemctlCommandPtrOutput {
	return o.ApplyT(func(v *SystemctlOpts) *SystemctlCommand {
		if v == nil {
			return nil
		}
		return &v.Command
	}).(SystemctlCommandPtrOutput)
}

// Corresponds to the [PATTERN] argument
func (o SystemctlOptsPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemctlOpts) *string {
		if v == nil {
			return nil
		}
		return v.Pattern
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the [UNIT...] argument.
func (o SystemctlOptsPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemctlOpts) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// Abstraction over the `tar` utility on a remote system.
type TarOpts struct {
	// Corresponds to the [ARCHIVE] argument.
	Archive string `pulumi:"archive"`
	// Corresponds to the `--directory` option.
	Directory *string `pulumi:"directory"`
	// Corresponds to the `--extract` option.
	Extract *bool `pulumi:"extract"`
	// Corresponds to the [FILE] argument.
	Files []string `pulumi:"files"`
	// Corresponds to the `--gzip` option.
	Gzip *bool `pulumi:"gzip"`
	// Whether rm should be run when the resource is created or deleted.
	OnDelete *bool `pulumi:"onDelete"`
	// Corresponds to the `--recursive` option.
	Recursive *bool `pulumi:"recursive"`
	// Corresponds to the `--strip-components` option.
	StripComponents *int `pulumi:"stripComponents"`
}

// TarOptsInput is an input type that accepts TarOptsArgs and TarOptsOutput values.
// You can construct a concrete instance of `TarOptsInput` via:
//
//	TarOptsArgs{...}
type TarOptsInput interface {
	pulumi.Input

	ToTarOptsOutput() TarOptsOutput
	ToTarOptsOutputWithContext(context.Context) TarOptsOutput
}

// Abstraction over the `tar` utility on a remote system.
type TarOptsArgs struct {
	// Corresponds to the [ARCHIVE] argument.
	Archive pulumi.StringInput `pulumi:"archive"`
	// Corresponds to the `--directory` option.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// Corresponds to the `--extract` option.
	Extract pulumi.BoolPtrInput `pulumi:"extract"`
	// Corresponds to the [FILE] argument.
	Files pulumi.StringArrayInput `pulumi:"files"`
	// Corresponds to the `--gzip` option.
	Gzip pulumi.BoolPtrInput `pulumi:"gzip"`
	// Whether rm should be run when the resource is created or deleted.
	OnDelete pulumi.BoolPtrInput `pulumi:"onDelete"`
	// Corresponds to the `--recursive` option.
	Recursive pulumi.BoolPtrInput `pulumi:"recursive"`
	// Corresponds to the `--strip-components` option.
	StripComponents pulumi.IntPtrInput `pulumi:"stripComponents"`
}

func (TarOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TarOpts)(nil)).Elem()
}

func (i TarOptsArgs) ToTarOptsOutput() TarOptsOutput {
	return i.ToTarOptsOutputWithContext(context.Background())
}

func (i TarOptsArgs) ToTarOptsOutputWithContext(ctx context.Context) TarOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarOptsOutput)
}

func (i TarOptsArgs) ToTarOptsPtrOutput() TarOptsPtrOutput {
	return i.ToTarOptsPtrOutputWithContext(context.Background())
}

func (i TarOptsArgs) ToTarOptsPtrOutputWithContext(ctx context.Context) TarOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarOptsOutput).ToTarOptsPtrOutputWithContext(ctx)
}

// TarOptsPtrInput is an input type that accepts TarOptsArgs, TarOptsPtr and TarOptsPtrOutput values.
// You can construct a concrete instance of `TarOptsPtrInput` via:
//
//	        TarOptsArgs{...}
//
//	or:
//
//	        nil
type TarOptsPtrInput interface {
	pulumi.Input

	ToTarOptsPtrOutput() TarOptsPtrOutput
	ToTarOptsPtrOutputWithContext(context.Context) TarOptsPtrOutput
}

type tarOptsPtrType TarOptsArgs

func TarOptsPtr(v *TarOptsArgs) TarOptsPtrInput {
	return (*tarOptsPtrType)(v)
}

func (*tarOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TarOpts)(nil)).Elem()
}

func (i *tarOptsPtrType) ToTarOptsPtrOutput() TarOptsPtrOutput {
	return i.ToTarOptsPtrOutputWithContext(context.Background())
}

func (i *tarOptsPtrType) ToTarOptsPtrOutputWithContext(ctx context.Context) TarOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarOptsPtrOutput)
}

// Abstraction over the `tar` utility on a remote system.
type TarOptsOutput struct{ *pulumi.OutputState }

func (TarOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TarOpts)(nil)).Elem()
}

func (o TarOptsOutput) ToTarOptsOutput() TarOptsOutput {
	return o
}

func (o TarOptsOutput) ToTarOptsOutputWithContext(ctx context.Context) TarOptsOutput {
	return o
}

func (o TarOptsOutput) ToTarOptsPtrOutput() TarOptsPtrOutput {
	return o.ToTarOptsPtrOutputWithContext(context.Background())
}

func (o TarOptsOutput) ToTarOptsPtrOutputWithContext(ctx context.Context) TarOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TarOpts) *TarOpts {
		return &v
	}).(TarOptsPtrOutput)
}

// Corresponds to the [ARCHIVE] argument.
func (o TarOptsOutput) Archive() pulumi.StringOutput {
	return o.ApplyT(func(v TarOpts) string { return v.Archive }).(pulumi.StringOutput)
}

// Corresponds to the `--directory` option.
func (o TarOptsOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TarOpts) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// Corresponds to the `--extract` option.
func (o TarOptsOutput) Extract() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarOpts) *bool { return v.Extract }).(pulumi.BoolPtrOutput)
}

// Corresponds to the [FILE] argument.
func (o TarOptsOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TarOpts) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// Corresponds to the `--gzip` option.
func (o TarOptsOutput) Gzip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarOpts) *bool { return v.Gzip }).(pulumi.BoolPtrOutput)
}

// Whether rm should be run when the resource is created or deleted.
func (o TarOptsOutput) OnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarOpts) *bool { return v.OnDelete }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--recursive` option.
func (o TarOptsOutput) Recursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TarOpts) *bool { return v.Recursive }).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--strip-components` option.
func (o TarOptsOutput) StripComponents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TarOpts) *int { return v.StripComponents }).(pulumi.IntPtrOutput)
}

type TarOptsPtrOutput struct{ *pulumi.OutputState }

func (TarOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TarOpts)(nil)).Elem()
}

func (o TarOptsPtrOutput) ToTarOptsPtrOutput() TarOptsPtrOutput {
	return o
}

func (o TarOptsPtrOutput) ToTarOptsPtrOutputWithContext(ctx context.Context) TarOptsPtrOutput {
	return o
}

func (o TarOptsPtrOutput) Elem() TarOptsOutput {
	return o.ApplyT(func(v *TarOpts) TarOpts {
		if v != nil {
			return *v
		}
		var ret TarOpts
		return ret
	}).(TarOptsOutput)
}

// Corresponds to the [ARCHIVE] argument.
func (o TarOptsPtrOutput) Archive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TarOpts) *string {
		if v == nil {
			return nil
		}
		return &v.Archive
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the `--directory` option.
func (o TarOptsPtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TarOpts) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the `--extract` option.
func (o TarOptsPtrOutput) Extract() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TarOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Extract
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the [FILE] argument.
func (o TarOptsPtrOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TarOpts) []string {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.StringArrayOutput)
}

// Corresponds to the `--gzip` option.
func (o TarOptsPtrOutput) Gzip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TarOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Gzip
	}).(pulumi.BoolPtrOutput)
}

// Whether rm should be run when the resource is created or deleted.
func (o TarOptsPtrOutput) OnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TarOpts) *bool {
		if v == nil {
			return nil
		}
		return v.OnDelete
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--recursive` option.
func (o TarOptsPtrOutput) Recursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TarOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the `--strip-components` option.
func (o TarOptsPtrOutput) StripComponents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TarOpts) *int {
		if v == nil {
			return nil
		}
		return v.StripComponents
	}).(pulumi.IntPtrOutput)
}

// Abstraction over the `rm` utility on a remote system.
type TeeOpts struct {
	// Append to the given FILEs, do not overwrite
	Append *bool `pulumi:"append"`
	// Corresponds to the [FILE] argument.
	Files []string `pulumi:"files"`
	// Ignore interrupt signals.
	IgnoreInterrupts *bool `pulumi:"ignoreInterrupts"`
	// Set behavior on write error.
	OutputError *TeeMode `pulumi:"outputError"`
	// Operate in a more appropriate MODE with pipes.
	Pipe *bool `pulumi:"pipe"`
	// Output version information and exit.
	Version *bool `pulumi:"version"`
}

// TeeOptsInput is an input type that accepts TeeOptsArgs and TeeOptsOutput values.
// You can construct a concrete instance of `TeeOptsInput` via:
//
//	TeeOptsArgs{...}
type TeeOptsInput interface {
	pulumi.Input

	ToTeeOptsOutput() TeeOptsOutput
	ToTeeOptsOutputWithContext(context.Context) TeeOptsOutput
}

// Abstraction over the `rm` utility on a remote system.
type TeeOptsArgs struct {
	// Append to the given FILEs, do not overwrite
	Append pulumi.BoolPtrInput `pulumi:"append"`
	// Corresponds to the [FILE] argument.
	Files pulumi.StringArrayInput `pulumi:"files"`
	// Ignore interrupt signals.
	IgnoreInterrupts pulumi.BoolPtrInput `pulumi:"ignoreInterrupts"`
	// Set behavior on write error.
	OutputError TeeModePtrInput `pulumi:"outputError"`
	// Operate in a more appropriate MODE with pipes.
	Pipe pulumi.BoolPtrInput `pulumi:"pipe"`
	// Output version information and exit.
	Version pulumi.BoolPtrInput `pulumi:"version"`
}

func (TeeOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeeOpts)(nil)).Elem()
}

func (i TeeOptsArgs) ToTeeOptsOutput() TeeOptsOutput {
	return i.ToTeeOptsOutputWithContext(context.Background())
}

func (i TeeOptsArgs) ToTeeOptsOutputWithContext(ctx context.Context) TeeOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeeOptsOutput)
}

func (i TeeOptsArgs) ToTeeOptsPtrOutput() TeeOptsPtrOutput {
	return i.ToTeeOptsPtrOutputWithContext(context.Background())
}

func (i TeeOptsArgs) ToTeeOptsPtrOutputWithContext(ctx context.Context) TeeOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeeOptsOutput).ToTeeOptsPtrOutputWithContext(ctx)
}

// TeeOptsPtrInput is an input type that accepts TeeOptsArgs, TeeOptsPtr and TeeOptsPtrOutput values.
// You can construct a concrete instance of `TeeOptsPtrInput` via:
//
//	        TeeOptsArgs{...}
//
//	or:
//
//	        nil
type TeeOptsPtrInput interface {
	pulumi.Input

	ToTeeOptsPtrOutput() TeeOptsPtrOutput
	ToTeeOptsPtrOutputWithContext(context.Context) TeeOptsPtrOutput
}

type teeOptsPtrType TeeOptsArgs

func TeeOptsPtr(v *TeeOptsArgs) TeeOptsPtrInput {
	return (*teeOptsPtrType)(v)
}

func (*teeOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TeeOpts)(nil)).Elem()
}

func (i *teeOptsPtrType) ToTeeOptsPtrOutput() TeeOptsPtrOutput {
	return i.ToTeeOptsPtrOutputWithContext(context.Background())
}

func (i *teeOptsPtrType) ToTeeOptsPtrOutputWithContext(ctx context.Context) TeeOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeeOptsPtrOutput)
}

// Abstraction over the `rm` utility on a remote system.
type TeeOptsOutput struct{ *pulumi.OutputState }

func (TeeOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeeOpts)(nil)).Elem()
}

func (o TeeOptsOutput) ToTeeOptsOutput() TeeOptsOutput {
	return o
}

func (o TeeOptsOutput) ToTeeOptsOutputWithContext(ctx context.Context) TeeOptsOutput {
	return o
}

func (o TeeOptsOutput) ToTeeOptsPtrOutput() TeeOptsPtrOutput {
	return o.ToTeeOptsPtrOutputWithContext(context.Background())
}

func (o TeeOptsOutput) ToTeeOptsPtrOutputWithContext(ctx context.Context) TeeOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TeeOpts) *TeeOpts {
		return &v
	}).(TeeOptsPtrOutput)
}

// Append to the given FILEs, do not overwrite
func (o TeeOptsOutput) Append() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TeeOpts) *bool { return v.Append }).(pulumi.BoolPtrOutput)
}

// Corresponds to the [FILE] argument.
func (o TeeOptsOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TeeOpts) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// Ignore interrupt signals.
func (o TeeOptsOutput) IgnoreInterrupts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TeeOpts) *bool { return v.IgnoreInterrupts }).(pulumi.BoolPtrOutput)
}

// Set behavior on write error.
func (o TeeOptsOutput) OutputError() TeeModePtrOutput {
	return o.ApplyT(func(v TeeOpts) *TeeMode { return v.OutputError }).(TeeModePtrOutput)
}

// Operate in a more appropriate MODE with pipes.
func (o TeeOptsOutput) Pipe() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TeeOpts) *bool { return v.Pipe }).(pulumi.BoolPtrOutput)
}

// Output version information and exit.
func (o TeeOptsOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TeeOpts) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

type TeeOptsPtrOutput struct{ *pulumi.OutputState }

func (TeeOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeeOpts)(nil)).Elem()
}

func (o TeeOptsPtrOutput) ToTeeOptsPtrOutput() TeeOptsPtrOutput {
	return o
}

func (o TeeOptsPtrOutput) ToTeeOptsPtrOutputWithContext(ctx context.Context) TeeOptsPtrOutput {
	return o
}

func (o TeeOptsPtrOutput) Elem() TeeOptsOutput {
	return o.ApplyT(func(v *TeeOpts) TeeOpts {
		if v != nil {
			return *v
		}
		var ret TeeOpts
		return ret
	}).(TeeOptsOutput)
}

// Append to the given FILEs, do not overwrite
func (o TeeOptsPtrOutput) Append() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TeeOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Append
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the [FILE] argument.
func (o TeeOptsPtrOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TeeOpts) []string {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.StringArrayOutput)
}

// Ignore interrupt signals.
func (o TeeOptsPtrOutput) IgnoreInterrupts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TeeOpts) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreInterrupts
	}).(pulumi.BoolPtrOutput)
}

// Set behavior on write error.
func (o TeeOptsPtrOutput) OutputError() TeeModePtrOutput {
	return o.ApplyT(func(v *TeeOpts) *TeeMode {
		if v == nil {
			return nil
		}
		return v.OutputError
	}).(TeeModePtrOutput)
}

// Operate in a more appropriate MODE with pipes.
func (o TeeOptsPtrOutput) Pipe() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TeeOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Pipe
	}).(pulumi.BoolPtrOutput)
}

// Output version information and exit.
func (o TeeOptsPtrOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TeeOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.BoolPtrOutput)
}

// Abstraction over the `wget` utility on a remote system.
type WgetOpts struct {
	// The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory).
	DirectoryPrefix *string `pulumi:"directoryPrefix"`
	// When in recursive mode, only HTTPS links are followed.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed.
	NoVerbose *bool `pulumi:"noVerbose"`
	// The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file.
	OutputDocument *string `pulumi:"outputDocument"`
	// Turn off Wget's output.
	Quiet *bool `pulumi:"quiet"`
	// Turn on time-stamping.
	Timestamping *bool `pulumi:"timestamping"`
	// Corresponds to the [URL...] argument.
	Url []string `pulumi:"url"`
}

// WgetOptsInput is an input type that accepts WgetOptsArgs and WgetOptsOutput values.
// You can construct a concrete instance of `WgetOptsInput` via:
//
//	WgetOptsArgs{...}
type WgetOptsInput interface {
	pulumi.Input

	ToWgetOptsOutput() WgetOptsOutput
	ToWgetOptsOutputWithContext(context.Context) WgetOptsOutput
}

// Abstraction over the `wget` utility on a remote system.
type WgetOptsArgs struct {
	// The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory).
	DirectoryPrefix pulumi.StringPtrInput `pulumi:"directoryPrefix"`
	// When in recursive mode, only HTTPS links are followed.
	HttpsOnly pulumi.BoolPtrInput `pulumi:"httpsOnly"`
	// Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed.
	NoVerbose pulumi.BoolPtrInput `pulumi:"noVerbose"`
	// The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file.
	OutputDocument pulumi.StringPtrInput `pulumi:"outputDocument"`
	// Turn off Wget's output.
	Quiet pulumi.BoolPtrInput `pulumi:"quiet"`
	// Turn on time-stamping.
	Timestamping pulumi.BoolPtrInput `pulumi:"timestamping"`
	// Corresponds to the [URL...] argument.
	Url pulumi.StringArrayInput `pulumi:"url"`
}

func (WgetOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WgetOpts)(nil)).Elem()
}

func (i WgetOptsArgs) ToWgetOptsOutput() WgetOptsOutput {
	return i.ToWgetOptsOutputWithContext(context.Background())
}

func (i WgetOptsArgs) ToWgetOptsOutputWithContext(ctx context.Context) WgetOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WgetOptsOutput)
}

func (i WgetOptsArgs) ToWgetOptsPtrOutput() WgetOptsPtrOutput {
	return i.ToWgetOptsPtrOutputWithContext(context.Background())
}

func (i WgetOptsArgs) ToWgetOptsPtrOutputWithContext(ctx context.Context) WgetOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WgetOptsOutput).ToWgetOptsPtrOutputWithContext(ctx)
}

// WgetOptsPtrInput is an input type that accepts WgetOptsArgs, WgetOptsPtr and WgetOptsPtrOutput values.
// You can construct a concrete instance of `WgetOptsPtrInput` via:
//
//	        WgetOptsArgs{...}
//
//	or:
//
//	        nil
type WgetOptsPtrInput interface {
	pulumi.Input

	ToWgetOptsPtrOutput() WgetOptsPtrOutput
	ToWgetOptsPtrOutputWithContext(context.Context) WgetOptsPtrOutput
}

type wgetOptsPtrType WgetOptsArgs

func WgetOptsPtr(v *WgetOptsArgs) WgetOptsPtrInput {
	return (*wgetOptsPtrType)(v)
}

func (*wgetOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WgetOpts)(nil)).Elem()
}

func (i *wgetOptsPtrType) ToWgetOptsPtrOutput() WgetOptsPtrOutput {
	return i.ToWgetOptsPtrOutputWithContext(context.Background())
}

func (i *wgetOptsPtrType) ToWgetOptsPtrOutputWithContext(ctx context.Context) WgetOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WgetOptsPtrOutput)
}

// Abstraction over the `wget` utility on a remote system.
type WgetOptsOutput struct{ *pulumi.OutputState }

func (WgetOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WgetOpts)(nil)).Elem()
}

func (o WgetOptsOutput) ToWgetOptsOutput() WgetOptsOutput {
	return o
}

func (o WgetOptsOutput) ToWgetOptsOutputWithContext(ctx context.Context) WgetOptsOutput {
	return o
}

func (o WgetOptsOutput) ToWgetOptsPtrOutput() WgetOptsPtrOutput {
	return o.ToWgetOptsPtrOutputWithContext(context.Background())
}

func (o WgetOptsOutput) ToWgetOptsPtrOutputWithContext(ctx context.Context) WgetOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WgetOpts) *WgetOpts {
		return &v
	}).(WgetOptsPtrOutput)
}

// The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory).
func (o WgetOptsOutput) DirectoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetOpts) *string { return v.DirectoryPrefix }).(pulumi.StringPtrOutput)
}

// When in recursive mode, only HTTPS links are followed.
func (o WgetOptsOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetOpts) *bool { return v.HttpsOnly }).(pulumi.BoolPtrOutput)
}

// Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed.
func (o WgetOptsOutput) NoVerbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetOpts) *bool { return v.NoVerbose }).(pulumi.BoolPtrOutput)
}

// The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file.
func (o WgetOptsOutput) OutputDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WgetOpts) *string { return v.OutputDocument }).(pulumi.StringPtrOutput)
}

// Turn off Wget's output.
func (o WgetOptsOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetOpts) *bool { return v.Quiet }).(pulumi.BoolPtrOutput)
}

// Turn on time-stamping.
func (o WgetOptsOutput) Timestamping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WgetOpts) *bool { return v.Timestamping }).(pulumi.BoolPtrOutput)
}

// Corresponds to the [URL...] argument.
func (o WgetOptsOutput) Url() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WgetOpts) []string { return v.Url }).(pulumi.StringArrayOutput)
}

type WgetOptsPtrOutput struct{ *pulumi.OutputState }

func (WgetOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WgetOpts)(nil)).Elem()
}

func (o WgetOptsPtrOutput) ToWgetOptsPtrOutput() WgetOptsPtrOutput {
	return o
}

func (o WgetOptsPtrOutput) ToWgetOptsPtrOutputWithContext(ctx context.Context) WgetOptsPtrOutput {
	return o
}

func (o WgetOptsPtrOutput) Elem() WgetOptsOutput {
	return o.ApplyT(func(v *WgetOpts) WgetOpts {
		if v != nil {
			return *v
		}
		var ret WgetOpts
		return ret
	}).(WgetOptsOutput)
}

// The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory).
func (o WgetOptsPtrOutput) DirectoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WgetOpts) *string {
		if v == nil {
			return nil
		}
		return v.DirectoryPrefix
	}).(pulumi.StringPtrOutput)
}

// When in recursive mode, only HTTPS links are followed.
func (o WgetOptsPtrOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WgetOpts) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsOnly
	}).(pulumi.BoolPtrOutput)
}

// Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed.
func (o WgetOptsPtrOutput) NoVerbose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WgetOpts) *bool {
		if v == nil {
			return nil
		}
		return v.NoVerbose
	}).(pulumi.BoolPtrOutput)
}

// The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file.
func (o WgetOptsPtrOutput) OutputDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WgetOpts) *string {
		if v == nil {
			return nil
		}
		return v.OutputDocument
	}).(pulumi.StringPtrOutput)
}

// Turn off Wget's output.
func (o WgetOptsPtrOutput) Quiet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WgetOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Quiet
	}).(pulumi.BoolPtrOutput)
}

// Turn on time-stamping.
func (o WgetOptsPtrOutput) Timestamping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WgetOpts) *bool {
		if v == nil {
			return nil
		}
		return v.Timestamping
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to the [URL...] argument.
func (o WgetOptsPtrOutput) Url() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WgetOpts) []string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChmodOptsInput)(nil)).Elem(), ChmodOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChmodOptsPtrInput)(nil)).Elem(), ChmodOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdctlOptsInput)(nil)).Elem(), EtcdctlOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdctlOptsPtrInput)(nil)).Elem(), EtcdctlOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostnamectlOptsInput)(nil)).Elem(), HostnamectlOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostnamectlOptsPtrInput)(nil)).Elem(), HostnamectlOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MkdirOptsInput)(nil)).Elem(), MkdirOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MkdirOptsPtrInput)(nil)).Elem(), MkdirOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MktempOptsInput)(nil)).Elem(), MktempOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MktempOptsPtrInput)(nil)).Elem(), MktempOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MvOptsInput)(nil)).Elem(), MvOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MvOptsPtrInput)(nil)).Elem(), MvOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RmOptsInput)(nil)).Elem(), RmOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RmOptsPtrInput)(nil)).Elem(), RmOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SedOptsInput)(nil)).Elem(), SedOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SedOptsPtrInput)(nil)).Elem(), SedOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemctlOptsInput)(nil)).Elem(), SystemctlOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemctlOptsPtrInput)(nil)).Elem(), SystemctlOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TarOptsInput)(nil)).Elem(), TarOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TarOptsPtrInput)(nil)).Elem(), TarOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeeOptsInput)(nil)).Elem(), TeeOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeeOptsPtrInput)(nil)).Elem(), TeeOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WgetOptsInput)(nil)).Elem(), WgetOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WgetOptsPtrInput)(nil)).Elem(), WgetOptsArgs{})
	pulumi.RegisterOutputType(ChmodOptsOutput{})
	pulumi.RegisterOutputType(ChmodOptsPtrOutput{})
	pulumi.RegisterOutputType(EtcdctlOptsOutput{})
	pulumi.RegisterOutputType(EtcdctlOptsPtrOutput{})
	pulumi.RegisterOutputType(HostnamectlOptsOutput{})
	pulumi.RegisterOutputType(HostnamectlOptsPtrOutput{})
	pulumi.RegisterOutputType(MkdirOptsOutput{})
	pulumi.RegisterOutputType(MkdirOptsPtrOutput{})
	pulumi.RegisterOutputType(MktempOptsOutput{})
	pulumi.RegisterOutputType(MktempOptsPtrOutput{})
	pulumi.RegisterOutputType(MvOptsOutput{})
	pulumi.RegisterOutputType(MvOptsPtrOutput{})
	pulumi.RegisterOutputType(RmOptsOutput{})
	pulumi.RegisterOutputType(RmOptsPtrOutput{})
	pulumi.RegisterOutputType(SedOptsOutput{})
	pulumi.RegisterOutputType(SedOptsPtrOutput{})
	pulumi.RegisterOutputType(SystemctlOptsOutput{})
	pulumi.RegisterOutputType(SystemctlOptsPtrOutput{})
	pulumi.RegisterOutputType(TarOptsOutput{})
	pulumi.RegisterOutputType(TarOptsPtrOutput{})
	pulumi.RegisterOutputType(TeeOptsOutput{})
	pulumi.RegisterOutputType(TeeOptsPtrOutput{})
	pulumi.RegisterOutputType(WgetOptsOutput{})
	pulumi.RegisterOutputType(WgetOptsPtrOutput{})
}
