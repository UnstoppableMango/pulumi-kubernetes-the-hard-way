// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Abstraction over the `hostnamectl` utility on a remote system.
type Hostnamectl struct {
	pulumi.ResourceState

	// The argument for the specified `command`.
	Arg pulumi.StringPtrOutput `pulumi:"arg"`
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringOutput `pulumi:"binaryPath"`
	// The underlying command
	Command pulumiCommand.CommandOutput `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// Environment variables
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// Print a short help text and exit.
	Help pulumi.BoolOutput `pulumi:"help"`
	// Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// Corresponds to the {COMMAND} argument.
	HostnamectlCommand HostnamectlCommandOutput `pulumi:"hostnamectlCommand"`
	// Shows output formatted as JSON.
	Json HostnamectlJsonModePtrOutput `pulumi:"json"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle CommandLifecyclePtrOutput `pulumi:"lifecycle"`
	// Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
	Machine pulumi.StringPtrOutput `pulumi:"machine"`
	// Do not query the user for authentication for privileged operations.
	NoAskPassword pulumi.BoolOutput `pulumi:"noAskPassword"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
	Pretty pulumi.BoolOutput `pulumi:"pretty"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
	Static pulumi.BoolOutput `pulumi:"static"`
	// TODO
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// TODO
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// TODO
	Stdout pulumi.StringOutput `pulumi:"stdout"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
	Transient pulumi.BoolOutput `pulumi:"transient"`
	// TODO
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// Print a short version string and exit.
	Version pulumi.BoolOutput `pulumi:"version"`
}

// NewHostnamectl registers a new resource with the given unique name, arguments, and options.
func NewHostnamectl(ctx *pulumi.Context,
	name string, args *HostnamectlArgs, opts ...pulumi.ResourceOption) (*Hostnamectl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Command == nil {
		return nil, errors.New("invalid value for required argument 'Command'")
	}
	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hostnamectl
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:tools:Hostnamectl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type hostnamectlArgs struct {
	// The argument for the specified `command`.
	Arg *string `pulumi:"arg"`
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath *string `pulumi:"binaryPath"`
	// Corresponds to the {COMMAND} argument.
	Command HostnamectlCommand `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// Environment variables
	Environment map[string]string `pulumi:"environment"`
	// Print a short help text and exit.
	Help *bool `pulumi:"help"`
	// Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
	Host *string `pulumi:"host"`
	// Shows output formatted as JSON.
	Json *HostnamectlJsonMode `pulumi:"json"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle `pulumi:"lifecycle"`
	// Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
	Machine *string `pulumi:"machine"`
	// Do not query the user for authentication for privileged operations.
	NoAskPassword *bool `pulumi:"noAskPassword"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
	Pretty *bool `pulumi:"pretty"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
	Static *bool `pulumi:"static"`
	// TODO
	Stdin *string `pulumi:"stdin"`
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
	Transient *bool `pulumi:"transient"`
	// TODO
	Triggers []interface{} `pulumi:"triggers"`
	// Print a short version string and exit.
	Version *bool `pulumi:"version"`
}

// The set of arguments for constructing a Hostnamectl resource.
type HostnamectlArgs struct {
	// The argument for the specified `command`.
	Arg pulumi.StringPtrInput
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringPtrInput
	// Corresponds to the {COMMAND} argument.
	Command HostnamectlCommandInput
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionInput
	// Environment variables
	Environment pulumi.StringMapInput
	// Print a short help text and exit.
	Help pulumi.BoolPtrInput
	// Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
	Host pulumi.StringPtrInput
	// Shows output formatted as JSON.
	Json HostnamectlJsonModePtrInput
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle
	// Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
	Machine pulumi.StringPtrInput
	// Do not query the user for authentication for privileged operations.
	NoAskPassword pulumi.BoolPtrInput
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
	Pretty pulumi.BoolPtrInput
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
	Static pulumi.BoolPtrInput
	// TODO
	Stdin pulumi.StringPtrInput
	// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
	Transient pulumi.BoolPtrInput
	// TODO
	Triggers pulumi.ArrayInput
	// Print a short version string and exit.
	Version pulumi.BoolPtrInput
}

func (HostnamectlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostnamectlArgs)(nil)).Elem()
}

type HostnamectlInput interface {
	pulumi.Input

	ToHostnamectlOutput() HostnamectlOutput
	ToHostnamectlOutputWithContext(ctx context.Context) HostnamectlOutput
}

func (*Hostnamectl) ElementType() reflect.Type {
	return reflect.TypeOf((**Hostnamectl)(nil)).Elem()
}

func (i *Hostnamectl) ToHostnamectlOutput() HostnamectlOutput {
	return i.ToHostnamectlOutputWithContext(context.Background())
}

func (i *Hostnamectl) ToHostnamectlOutputWithContext(ctx context.Context) HostnamectlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnamectlOutput)
}

// HostnamectlArrayInput is an input type that accepts HostnamectlArray and HostnamectlArrayOutput values.
// You can construct a concrete instance of `HostnamectlArrayInput` via:
//
//	HostnamectlArray{ HostnamectlArgs{...} }
type HostnamectlArrayInput interface {
	pulumi.Input

	ToHostnamectlArrayOutput() HostnamectlArrayOutput
	ToHostnamectlArrayOutputWithContext(context.Context) HostnamectlArrayOutput
}

type HostnamectlArray []HostnamectlInput

func (HostnamectlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hostnamectl)(nil)).Elem()
}

func (i HostnamectlArray) ToHostnamectlArrayOutput() HostnamectlArrayOutput {
	return i.ToHostnamectlArrayOutputWithContext(context.Background())
}

func (i HostnamectlArray) ToHostnamectlArrayOutputWithContext(ctx context.Context) HostnamectlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnamectlArrayOutput)
}

// HostnamectlMapInput is an input type that accepts HostnamectlMap and HostnamectlMapOutput values.
// You can construct a concrete instance of `HostnamectlMapInput` via:
//
//	HostnamectlMap{ "key": HostnamectlArgs{...} }
type HostnamectlMapInput interface {
	pulumi.Input

	ToHostnamectlMapOutput() HostnamectlMapOutput
	ToHostnamectlMapOutputWithContext(context.Context) HostnamectlMapOutput
}

type HostnamectlMap map[string]HostnamectlInput

func (HostnamectlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hostnamectl)(nil)).Elem()
}

func (i HostnamectlMap) ToHostnamectlMapOutput() HostnamectlMapOutput {
	return i.ToHostnamectlMapOutputWithContext(context.Background())
}

func (i HostnamectlMap) ToHostnamectlMapOutputWithContext(ctx context.Context) HostnamectlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostnamectlMapOutput)
}

type HostnamectlOutput struct{ *pulumi.OutputState }

func (HostnamectlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hostnamectl)(nil)).Elem()
}

func (o HostnamectlOutput) ToHostnamectlOutput() HostnamectlOutput {
	return o
}

func (o HostnamectlOutput) ToHostnamectlOutputWithContext(ctx context.Context) HostnamectlOutput {
	return o
}

// The argument for the specified `command`.
func (o HostnamectlOutput) Arg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.StringPtrOutput { return v.Arg }).(pulumi.StringPtrOutput)
}

// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
func (o HostnamectlOutput) BinaryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.StringOutput { return v.BinaryPath }).(pulumi.StringOutput)
}

// The underlying command
func (o HostnamectlOutput) Command() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumiCommand.CommandOutput { return v.Command }).(pulumiCommand.CommandOutput)
}

// Connection details for the remote system
func (o HostnamectlOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// Environment variables
func (o HostnamectlOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// Print a short help text and exit.
func (o HostnamectlOutput) Help() pulumi.BoolOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.BoolOutput { return v.Help }).(pulumi.BoolOutput)
}

// Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
func (o HostnamectlOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.StringPtrOutput { return v.Host }).(pulumi.StringPtrOutput)
}

// Corresponds to the {COMMAND} argument.
func (o HostnamectlOutput) HostnamectlCommand() HostnamectlCommandOutput {
	return o.ApplyT(func(v *Hostnamectl) HostnamectlCommandOutput { return v.HostnamectlCommand }).(HostnamectlCommandOutput)
}

// Shows output formatted as JSON.
func (o HostnamectlOutput) Json() HostnamectlJsonModePtrOutput {
	return o.ApplyT(func(v *Hostnamectl) HostnamectlJsonModePtrOutput { return v.Json }).(HostnamectlJsonModePtrOutput)
}

// At what stage(s) in the resource lifecycle should the command be run
func (o HostnamectlOutput) Lifecycle() CommandLifecyclePtrOutput {
	return o.ApplyT(func(v *Hostnamectl) CommandLifecyclePtrOutput { return v.Lifecycle }).(CommandLifecyclePtrOutput)
}

// Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
func (o HostnamectlOutput) Machine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.StringPtrOutput { return v.Machine }).(pulumi.StringPtrOutput)
}

// Do not query the user for authentication for privileged operations.
func (o HostnamectlOutput) NoAskPassword() pulumi.BoolOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.BoolOutput { return v.NoAskPassword }).(pulumi.BoolOutput)
}

// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
func (o HostnamectlOutput) Pretty() pulumi.BoolOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.BoolOutput { return v.Pretty }).(pulumi.BoolOutput)
}

// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
func (o HostnamectlOutput) Static() pulumi.BoolOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.BoolOutput { return v.Static }).(pulumi.BoolOutput)
}

// TODO
func (o HostnamectlOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// TODO
func (o HostnamectlOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// TODO
func (o HostnamectlOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

// If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
func (o HostnamectlOutput) Transient() pulumi.BoolOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.BoolOutput { return v.Transient }).(pulumi.BoolOutput)
}

// TODO
func (o HostnamectlOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// Print a short version string and exit.
func (o HostnamectlOutput) Version() pulumi.BoolOutput {
	return o.ApplyT(func(v *Hostnamectl) pulumi.BoolOutput { return v.Version }).(pulumi.BoolOutput)
}

type HostnamectlArrayOutput struct{ *pulumi.OutputState }

func (HostnamectlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hostnamectl)(nil)).Elem()
}

func (o HostnamectlArrayOutput) ToHostnamectlArrayOutput() HostnamectlArrayOutput {
	return o
}

func (o HostnamectlArrayOutput) ToHostnamectlArrayOutputWithContext(ctx context.Context) HostnamectlArrayOutput {
	return o
}

func (o HostnamectlArrayOutput) Index(i pulumi.IntInput) HostnamectlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hostnamectl {
		return vs[0].([]*Hostnamectl)[vs[1].(int)]
	}).(HostnamectlOutput)
}

type HostnamectlMapOutput struct{ *pulumi.OutputState }

func (HostnamectlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hostnamectl)(nil)).Elem()
}

func (o HostnamectlMapOutput) ToHostnamectlMapOutput() HostnamectlMapOutput {
	return o
}

func (o HostnamectlMapOutput) ToHostnamectlMapOutputWithContext(ctx context.Context) HostnamectlMapOutput {
	return o
}

func (o HostnamectlMapOutput) MapIndex(k pulumi.StringInput) HostnamectlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hostnamectl {
		return vs[0].(map[string]*Hostnamectl)[vs[1].(string)]
	}).(HostnamectlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostnamectlInput)(nil)).Elem(), &Hostnamectl{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostnamectlArrayInput)(nil)).Elem(), HostnamectlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostnamectlMapInput)(nil)).Elem(), HostnamectlMap{})
	pulumi.RegisterOutputType(HostnamectlOutput{})
	pulumi.RegisterOutputType(HostnamectlArrayOutput{})
	pulumi.RegisterOutputType(HostnamectlMapOutput{})
}
