// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Abstraction over the `curl` utility on a remote system. Transfer a URL.
type Curl struct {
	pulumi.CustomResourceState

	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringOutput `pulumi:"binaryPath"`
	// The underlying command
	Command pulumiCommand.CommandOutput `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The command to run on create.
	Create CurlOptsPtrOutput `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete CurlOptsPtrOutput `pulumi:"delete"`
	// Environment variables
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// TODO
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// TODO
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// TODO
	Stdout pulumi.StringOutput `pulumi:"stdout"`
	// TODO
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update CurlOptsPtrOutput `pulumi:"update"`
}

// NewCurl registers a new resource with the given unique name, arguments, and options.
func NewCurl(ctx *pulumi.Context,
	name string, args *CurlArgs, opts ...pulumi.ResourceOption) (*Curl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Curl
	err := ctx.RegisterResource("kubernetes-the-hard-way:tools:Curl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCurl gets an existing Curl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCurl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CurlState, opts ...pulumi.ResourceOption) (*Curl, error) {
	var resource Curl
	err := ctx.ReadResource("kubernetes-the-hard-way:tools:Curl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Curl resources.
type curlState struct {
}

type CurlState struct {
}

func (CurlState) ElementType() reflect.Type {
	return reflect.TypeOf((*curlState)(nil)).Elem()
}

type curlArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath *string `pulumi:"binaryPath"`
	// Connection details for the remote system
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The command to run on create.
	Create *CurlOpts `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete *CurlOpts `pulumi:"delete"`
	// Environment variables
	Environment map[string]string `pulumi:"environment"`
	// TODO
	Stdin *string `pulumi:"stdin"`
	// TODO
	Triggers []interface{} `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update *CurlOpts `pulumi:"update"`
}

// The set of arguments for constructing a Curl resource.
type CurlArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringPtrInput
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionInput
	// The command to run on create.
	Create *CurlOptsArgs
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete *CurlOptsArgs
	// Environment variables
	Environment pulumi.StringMapInput
	// TODO
	Stdin pulumi.StringPtrInput
	// TODO
	Triggers pulumi.ArrayInput
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update *CurlOptsArgs
}

func (CurlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*curlArgs)(nil)).Elem()
}

type CurlInput interface {
	pulumi.Input

	ToCurlOutput() CurlOutput
	ToCurlOutputWithContext(ctx context.Context) CurlOutput
}

func (*Curl) ElementType() reflect.Type {
	return reflect.TypeOf((**Curl)(nil)).Elem()
}

func (i *Curl) ToCurlOutput() CurlOutput {
	return i.ToCurlOutputWithContext(context.Background())
}

func (i *Curl) ToCurlOutputWithContext(ctx context.Context) CurlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurlOutput)
}

// CurlArrayInput is an input type that accepts CurlArray and CurlArrayOutput values.
// You can construct a concrete instance of `CurlArrayInput` via:
//
//	CurlArray{ CurlArgs{...} }
type CurlArrayInput interface {
	pulumi.Input

	ToCurlArrayOutput() CurlArrayOutput
	ToCurlArrayOutputWithContext(context.Context) CurlArrayOutput
}

type CurlArray []CurlInput

func (CurlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Curl)(nil)).Elem()
}

func (i CurlArray) ToCurlArrayOutput() CurlArrayOutput {
	return i.ToCurlArrayOutputWithContext(context.Background())
}

func (i CurlArray) ToCurlArrayOutputWithContext(ctx context.Context) CurlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurlArrayOutput)
}

// CurlMapInput is an input type that accepts CurlMap and CurlMapOutput values.
// You can construct a concrete instance of `CurlMapInput` via:
//
//	CurlMap{ "key": CurlArgs{...} }
type CurlMapInput interface {
	pulumi.Input

	ToCurlMapOutput() CurlMapOutput
	ToCurlMapOutputWithContext(context.Context) CurlMapOutput
}

type CurlMap map[string]CurlInput

func (CurlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Curl)(nil)).Elem()
}

func (i CurlMap) ToCurlMapOutput() CurlMapOutput {
	return i.ToCurlMapOutputWithContext(context.Background())
}

func (i CurlMap) ToCurlMapOutputWithContext(ctx context.Context) CurlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurlMapOutput)
}

type CurlOutput struct{ *pulumi.OutputState }

func (CurlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Curl)(nil)).Elem()
}

func (o CurlOutput) ToCurlOutput() CurlOutput {
	return o
}

func (o CurlOutput) ToCurlOutputWithContext(ctx context.Context) CurlOutput {
	return o
}

// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
func (o CurlOutput) BinaryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Curl) pulumi.StringOutput { return v.BinaryPath }).(pulumi.StringOutput)
}

// The underlying command
func (o CurlOutput) Command() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *Curl) pulumiCommand.CommandOutput { return v.Command }).(pulumiCommand.CommandOutput)
}

// Connection details for the remote system
func (o CurlOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *Curl) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The command to run on create.
func (o CurlOutput) Create() CurlOptsPtrOutput {
	return o.ApplyT(func(v *Curl) CurlOptsPtrOutput { return v.Create }).(CurlOptsPtrOutput)
}

// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
// Command resource from previous create or update steps.
func (o CurlOutput) Delete() CurlOptsPtrOutput {
	return o.ApplyT(func(v *Curl) CurlOptsPtrOutput { return v.Delete }).(CurlOptsPtrOutput)
}

// Environment variables
func (o CurlOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Curl) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// TODO
func (o CurlOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Curl) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// TODO
func (o CurlOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Curl) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// TODO
func (o CurlOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Curl) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

// TODO
func (o CurlOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Curl) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// The command to run on update, if empty, create will
// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
// are set to the stdout and stderr properties of the Command resource from previous
// create or update steps.
func (o CurlOutput) Update() CurlOptsPtrOutput {
	return o.ApplyT(func(v *Curl) CurlOptsPtrOutput { return v.Update }).(CurlOptsPtrOutput)
}

type CurlArrayOutput struct{ *pulumi.OutputState }

func (CurlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Curl)(nil)).Elem()
}

func (o CurlArrayOutput) ToCurlArrayOutput() CurlArrayOutput {
	return o
}

func (o CurlArrayOutput) ToCurlArrayOutputWithContext(ctx context.Context) CurlArrayOutput {
	return o
}

func (o CurlArrayOutput) Index(i pulumi.IntInput) CurlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Curl {
		return vs[0].([]*Curl)[vs[1].(int)]
	}).(CurlOutput)
}

type CurlMapOutput struct{ *pulumi.OutputState }

func (CurlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Curl)(nil)).Elem()
}

func (o CurlMapOutput) ToCurlMapOutput() CurlMapOutput {
	return o
}

func (o CurlMapOutput) ToCurlMapOutputWithContext(ctx context.Context) CurlMapOutput {
	return o
}

func (o CurlMapOutput) MapIndex(k pulumi.StringInput) CurlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Curl {
		return vs[0].(map[string]*Curl)[vs[1].(string)]
	}).(CurlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CurlInput)(nil)).Elem(), &Curl{})
	pulumi.RegisterInputType(reflect.TypeOf((*CurlArrayInput)(nil)).Elem(), CurlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CurlMapInput)(nil)).Elem(), CurlMap{})
	pulumi.RegisterOutputType(CurlOutput{})
	pulumi.RegisterOutputType(CurlArrayOutput{})
	pulumi.RegisterOutputType(CurlMapOutput{})
}
