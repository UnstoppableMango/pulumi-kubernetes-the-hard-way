// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Abstraction over the `rm` utility on a remote system.
type Rm struct {
	pulumi.CustomResourceState

	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringOutput `pulumi:"binaryPath"`
	// The underlying command
	Command pulumiCommand.CommandOutput `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The command to run on create.
	Create RmOptsPtrOutput `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete RmOptsPtrOutput `pulumi:"delete"`
	// Environment variables
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// TODO
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// TODO
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// TODO
	Stdout pulumi.StringOutput `pulumi:"stdout"`
	// TODO
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update RmOptsPtrOutput `pulumi:"update"`
}

// NewRm registers a new resource with the given unique name, arguments, and options.
func NewRm(ctx *pulumi.Context,
	name string, args *RmArgs, opts ...pulumi.ResourceOption) (*Rm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rm
	err := ctx.RegisterResource("kubernetes-the-hard-way:tools:Rm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRm gets an existing Rm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RmState, opts ...pulumi.ResourceOption) (*Rm, error) {
	var resource Rm
	err := ctx.ReadResource("kubernetes-the-hard-way:tools:Rm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rm resources.
type rmState struct {
}

type RmState struct {
}

func (RmState) ElementType() reflect.Type {
	return reflect.TypeOf((*rmState)(nil)).Elem()
}

type rmArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath *string `pulumi:"binaryPath"`
	// Connection details for the remote system
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The command to run on create.
	Create *RmOpts `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete *RmOpts `pulumi:"delete"`
	// Environment variables
	Environment map[string]string `pulumi:"environment"`
	// TODO
	Stdin *string `pulumi:"stdin"`
	// TODO
	Triggers []interface{} `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update *RmOpts `pulumi:"update"`
}

// The set of arguments for constructing a Rm resource.
type RmArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringPtrInput
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionInput
	// The command to run on create.
	Create *RmOptsArgs
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete *RmOptsArgs
	// Environment variables
	Environment pulumi.StringMapInput
	// TODO
	Stdin pulumi.StringPtrInput
	// TODO
	Triggers pulumi.ArrayInput
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update *RmOptsArgs
}

func (RmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rmArgs)(nil)).Elem()
}

type RmInput interface {
	pulumi.Input

	ToRmOutput() RmOutput
	ToRmOutputWithContext(ctx context.Context) RmOutput
}

func (*Rm) ElementType() reflect.Type {
	return reflect.TypeOf((**Rm)(nil)).Elem()
}

func (i *Rm) ToRmOutput() RmOutput {
	return i.ToRmOutputWithContext(context.Background())
}

func (i *Rm) ToRmOutputWithContext(ctx context.Context) RmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RmOutput)
}

// RmArrayInput is an input type that accepts RmArray and RmArrayOutput values.
// You can construct a concrete instance of `RmArrayInput` via:
//
//	RmArray{ RmArgs{...} }
type RmArrayInput interface {
	pulumi.Input

	ToRmArrayOutput() RmArrayOutput
	ToRmArrayOutputWithContext(context.Context) RmArrayOutput
}

type RmArray []RmInput

func (RmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rm)(nil)).Elem()
}

func (i RmArray) ToRmArrayOutput() RmArrayOutput {
	return i.ToRmArrayOutputWithContext(context.Background())
}

func (i RmArray) ToRmArrayOutputWithContext(ctx context.Context) RmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RmArrayOutput)
}

// RmMapInput is an input type that accepts RmMap and RmMapOutput values.
// You can construct a concrete instance of `RmMapInput` via:
//
//	RmMap{ "key": RmArgs{...} }
type RmMapInput interface {
	pulumi.Input

	ToRmMapOutput() RmMapOutput
	ToRmMapOutputWithContext(context.Context) RmMapOutput
}

type RmMap map[string]RmInput

func (RmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rm)(nil)).Elem()
}

func (i RmMap) ToRmMapOutput() RmMapOutput {
	return i.ToRmMapOutputWithContext(context.Background())
}

func (i RmMap) ToRmMapOutputWithContext(ctx context.Context) RmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RmMapOutput)
}

type RmOutput struct{ *pulumi.OutputState }

func (RmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rm)(nil)).Elem()
}

func (o RmOutput) ToRmOutput() RmOutput {
	return o
}

func (o RmOutput) ToRmOutputWithContext(ctx context.Context) RmOutput {
	return o
}

// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
func (o RmOutput) BinaryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Rm) pulumi.StringOutput { return v.BinaryPath }).(pulumi.StringOutput)
}

// The underlying command
func (o RmOutput) Command() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *Rm) pulumiCommand.CommandOutput { return v.Command }).(pulumiCommand.CommandOutput)
}

// Connection details for the remote system
func (o RmOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *Rm) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The command to run on create.
func (o RmOutput) Create() RmOptsPtrOutput {
	return o.ApplyT(func(v *Rm) RmOptsPtrOutput { return v.Create }).(RmOptsPtrOutput)
}

// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
// Command resource from previous create or update steps.
func (o RmOutput) Delete() RmOptsPtrOutput {
	return o.ApplyT(func(v *Rm) RmOptsPtrOutput { return v.Delete }).(RmOptsPtrOutput)
}

// Environment variables
func (o RmOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Rm) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// TODO
func (o RmOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Rm) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// TODO
func (o RmOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rm) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// TODO
func (o RmOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Rm) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

// TODO
func (o RmOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Rm) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// The command to run on update, if empty, create will
// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
// are set to the stdout and stderr properties of the Command resource from previous
// create or update steps.
func (o RmOutput) Update() RmOptsPtrOutput {
	return o.ApplyT(func(v *Rm) RmOptsPtrOutput { return v.Update }).(RmOptsPtrOutput)
}

type RmArrayOutput struct{ *pulumi.OutputState }

func (RmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rm)(nil)).Elem()
}

func (o RmArrayOutput) ToRmArrayOutput() RmArrayOutput {
	return o
}

func (o RmArrayOutput) ToRmArrayOutputWithContext(ctx context.Context) RmArrayOutput {
	return o
}

func (o RmArrayOutput) Index(i pulumi.IntInput) RmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rm {
		return vs[0].([]*Rm)[vs[1].(int)]
	}).(RmOutput)
}

type RmMapOutput struct{ *pulumi.OutputState }

func (RmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rm)(nil)).Elem()
}

func (o RmMapOutput) ToRmMapOutput() RmMapOutput {
	return o
}

func (o RmMapOutput) ToRmMapOutputWithContext(ctx context.Context) RmMapOutput {
	return o
}

func (o RmMapOutput) MapIndex(k pulumi.StringInput) RmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rm {
		return vs[0].(map[string]*Rm)[vs[1].(string)]
	}).(RmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RmInput)(nil)).Elem(), &Rm{})
	pulumi.RegisterInputType(reflect.TypeOf((*RmArrayInput)(nil)).Elem(), RmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RmMapInput)(nil)).Elem(), RmMap{})
	pulumi.RegisterOutputType(RmOutput{})
	pulumi.RegisterOutputType(RmArrayOutput{})
	pulumi.RegisterOutputType(RmMapOutput{})
}
