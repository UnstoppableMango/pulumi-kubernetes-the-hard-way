// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Abstraction over the `mkdir` utility on a remote system.
type Mkdir struct {
	pulumi.ResourceState

	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringOutput `pulumi:"binaryPath"`
	// The underlying command
	Command pulumiCommand.CommandOutput `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The fully qualified path of the directory on the remote system.
	Directory pulumi.StringOutput `pulumi:"directory"`
	// Environment variables
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle CommandLifecyclePtrOutput `pulumi:"lifecycle"`
	// Corresponds to the `--parents` option.
	Parents pulumi.BoolOutput `pulumi:"parents"`
	// Remove the created directory when the `Mkdir` resource is deleted or updated.
	RemoveOnDelete pulumi.BoolOutput `pulumi:"removeOnDelete"`
	// TODO
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// TODO
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// TODO
	Stdout pulumi.StringOutput `pulumi:"stdout"`
	// TODO
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
}

// NewMkdir registers a new resource with the given unique name, arguments, and options.
func NewMkdir(ctx *pulumi.Context,
	name string, args *MkdirArgs, opts ...pulumi.ResourceOption) (*Mkdir, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Directory == nil {
		return nil, errors.New("invalid value for required argument 'Directory'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mkdir
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:tools:Mkdir", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type mkdirArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath *string `pulumi:"binaryPath"`
	// Connection details for the remote system
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The fully qualified path of the directory on the remote system.
	Directory string `pulumi:"directory"`
	// Environment variables
	Environment map[string]string `pulumi:"environment"`
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle `pulumi:"lifecycle"`
	// Corresponds to the `--parents` option.
	Parents *bool `pulumi:"parents"`
	// Remove the created directory when the `Mkdir` resource is deleted or updated.
	RemoveOnDelete *bool `pulumi:"removeOnDelete"`
	// TODO
	Stdin *string `pulumi:"stdin"`
	// TODO
	Triggers []interface{} `pulumi:"triggers"`
}

// The set of arguments for constructing a Mkdir resource.
type MkdirArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringPtrInput
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionInput
	// The fully qualified path of the directory on the remote system.
	Directory pulumi.StringInput
	// Environment variables
	Environment pulumi.StringMapInput
	// At what stage(s) in the resource lifecycle should the command be run
	Lifecycle *CommandLifecycle
	// Corresponds to the `--parents` option.
	Parents pulumi.BoolPtrInput
	// Remove the created directory when the `Mkdir` resource is deleted or updated.
	RemoveOnDelete pulumi.BoolPtrInput
	// TODO
	Stdin pulumi.StringPtrInput
	// TODO
	Triggers pulumi.ArrayInput
}

func (MkdirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mkdirArgs)(nil)).Elem()
}

type MkdirInput interface {
	pulumi.Input

	ToMkdirOutput() MkdirOutput
	ToMkdirOutputWithContext(ctx context.Context) MkdirOutput
}

func (*Mkdir) ElementType() reflect.Type {
	return reflect.TypeOf((**Mkdir)(nil)).Elem()
}

func (i *Mkdir) ToMkdirOutput() MkdirOutput {
	return i.ToMkdirOutputWithContext(context.Background())
}

func (i *Mkdir) ToMkdirOutputWithContext(ctx context.Context) MkdirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MkdirOutput)
}

// MkdirArrayInput is an input type that accepts MkdirArray and MkdirArrayOutput values.
// You can construct a concrete instance of `MkdirArrayInput` via:
//
//	MkdirArray{ MkdirArgs{...} }
type MkdirArrayInput interface {
	pulumi.Input

	ToMkdirArrayOutput() MkdirArrayOutput
	ToMkdirArrayOutputWithContext(context.Context) MkdirArrayOutput
}

type MkdirArray []MkdirInput

func (MkdirArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mkdir)(nil)).Elem()
}

func (i MkdirArray) ToMkdirArrayOutput() MkdirArrayOutput {
	return i.ToMkdirArrayOutputWithContext(context.Background())
}

func (i MkdirArray) ToMkdirArrayOutputWithContext(ctx context.Context) MkdirArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MkdirArrayOutput)
}

// MkdirMapInput is an input type that accepts MkdirMap and MkdirMapOutput values.
// You can construct a concrete instance of `MkdirMapInput` via:
//
//	MkdirMap{ "key": MkdirArgs{...} }
type MkdirMapInput interface {
	pulumi.Input

	ToMkdirMapOutput() MkdirMapOutput
	ToMkdirMapOutputWithContext(context.Context) MkdirMapOutput
}

type MkdirMap map[string]MkdirInput

func (MkdirMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mkdir)(nil)).Elem()
}

func (i MkdirMap) ToMkdirMapOutput() MkdirMapOutput {
	return i.ToMkdirMapOutputWithContext(context.Background())
}

func (i MkdirMap) ToMkdirMapOutputWithContext(ctx context.Context) MkdirMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MkdirMapOutput)
}

type MkdirOutput struct{ *pulumi.OutputState }

func (MkdirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mkdir)(nil)).Elem()
}

func (o MkdirOutput) ToMkdirOutput() MkdirOutput {
	return o
}

func (o MkdirOutput) ToMkdirOutputWithContext(ctx context.Context) MkdirOutput {
	return o
}

// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
func (o MkdirOutput) BinaryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Mkdir) pulumi.StringOutput { return v.BinaryPath }).(pulumi.StringOutput)
}

// The underlying command
func (o MkdirOutput) Command() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *Mkdir) pulumiCommand.CommandOutput { return v.Command }).(pulumiCommand.CommandOutput)
}

// Connection details for the remote system
func (o MkdirOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *Mkdir) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The fully qualified path of the directory on the remote system.
func (o MkdirOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v *Mkdir) pulumi.StringOutput { return v.Directory }).(pulumi.StringOutput)
}

// Environment variables
func (o MkdirOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Mkdir) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// At what stage(s) in the resource lifecycle should the command be run
func (o MkdirOutput) Lifecycle() CommandLifecyclePtrOutput {
	return o.ApplyT(func(v *Mkdir) CommandLifecyclePtrOutput { return v.Lifecycle }).(CommandLifecyclePtrOutput)
}

// Corresponds to the `--parents` option.
func (o MkdirOutput) Parents() pulumi.BoolOutput {
	return o.ApplyT(func(v *Mkdir) pulumi.BoolOutput { return v.Parents }).(pulumi.BoolOutput)
}

// Remove the created directory when the `Mkdir` resource is deleted or updated.
func (o MkdirOutput) RemoveOnDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v *Mkdir) pulumi.BoolOutput { return v.RemoveOnDelete }).(pulumi.BoolOutput)
}

// TODO
func (o MkdirOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Mkdir) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// TODO
func (o MkdirOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mkdir) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// TODO
func (o MkdirOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Mkdir) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

// TODO
func (o MkdirOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Mkdir) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

type MkdirArrayOutput struct{ *pulumi.OutputState }

func (MkdirArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mkdir)(nil)).Elem()
}

func (o MkdirArrayOutput) ToMkdirArrayOutput() MkdirArrayOutput {
	return o
}

func (o MkdirArrayOutput) ToMkdirArrayOutputWithContext(ctx context.Context) MkdirArrayOutput {
	return o
}

func (o MkdirArrayOutput) Index(i pulumi.IntInput) MkdirOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mkdir {
		return vs[0].([]*Mkdir)[vs[1].(int)]
	}).(MkdirOutput)
}

type MkdirMapOutput struct{ *pulumi.OutputState }

func (MkdirMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mkdir)(nil)).Elem()
}

func (o MkdirMapOutput) ToMkdirMapOutput() MkdirMapOutput {
	return o
}

func (o MkdirMapOutput) ToMkdirMapOutputWithContext(ctx context.Context) MkdirMapOutput {
	return o
}

func (o MkdirMapOutput) MapIndex(k pulumi.StringInput) MkdirOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mkdir {
		return vs[0].(map[string]*Mkdir)[vs[1].(string)]
	}).(MkdirOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MkdirInput)(nil)).Elem(), &Mkdir{})
	pulumi.RegisterInputType(reflect.TypeOf((*MkdirArrayInput)(nil)).Elem(), MkdirArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MkdirMapInput)(nil)).Elem(), MkdirMap{})
	pulumi.RegisterOutputType(MkdirOutput{})
	pulumi.RegisterOutputType(MkdirArrayOutput{})
	pulumi.RegisterOutputType(MkdirMapOutput{})
}
