// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tools

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Abstraction over the `wget` utility on a remote system.
type Wget struct {
	pulumi.ResourceState

	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringOutput `pulumi:"binaryPath"`
	// The underlying command
	Command pulumiCommand.CommandOutput `pulumi:"command"`
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The command to run on create.
	Create WgetOptsPtrOutput `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete WgetOptsPtrOutput `pulumi:"delete"`
	// Environment variables
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// TODO
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// TODO
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// TODO
	Stdout pulumi.StringOutput `pulumi:"stdout"`
	// TODO
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update WgetOptsPtrOutput `pulumi:"update"`
}

// NewWget registers a new resource with the given unique name, arguments, and options.
func NewWget(ctx *pulumi.Context,
	name string, args *WgetArgs, opts ...pulumi.ResourceOption) (*Wget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Wget
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:tools:Wget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type wgetArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath *string `pulumi:"binaryPath"`
	// Connection details for the remote system
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The command to run on create.
	Create *WgetOpts `pulumi:"create"`
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete *WgetOpts `pulumi:"delete"`
	// Environment variables
	Environment map[string]string `pulumi:"environment"`
	// TODO
	Stdin *string `pulumi:"stdin"`
	// TODO
	Triggers []interface{} `pulumi:"triggers"`
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update *WgetOpts `pulumi:"update"`
}

// The set of arguments for constructing a Wget resource.
type WgetArgs struct {
	// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
	BinaryPath pulumi.StringPtrInput
	// Connection details for the remote system
	Connection pulumiCommand.ConnectionInput
	// The command to run on create.
	Create *WgetOptsArgs
	// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
	// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
	// Command resource from previous create or update steps.
	Delete *WgetOptsArgs
	// Environment variables
	Environment pulumi.StringMapInput
	// TODO
	Stdin pulumi.StringPtrInput
	// TODO
	Triggers pulumi.ArrayInput
	// The command to run on update, if empty, create will
	// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
	// are set to the stdout and stderr properties of the Command resource from previous
	// create or update steps.
	Update *WgetOptsArgs
}

func (WgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wgetArgs)(nil)).Elem()
}

type WgetInput interface {
	pulumi.Input

	ToWgetOutput() WgetOutput
	ToWgetOutputWithContext(ctx context.Context) WgetOutput
}

func (*Wget) ElementType() reflect.Type {
	return reflect.TypeOf((**Wget)(nil)).Elem()
}

func (i *Wget) ToWgetOutput() WgetOutput {
	return i.ToWgetOutputWithContext(context.Background())
}

func (i *Wget) ToWgetOutputWithContext(ctx context.Context) WgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WgetOutput)
}

// WgetArrayInput is an input type that accepts WgetArray and WgetArrayOutput values.
// You can construct a concrete instance of `WgetArrayInput` via:
//
//	WgetArray{ WgetArgs{...} }
type WgetArrayInput interface {
	pulumi.Input

	ToWgetArrayOutput() WgetArrayOutput
	ToWgetArrayOutputWithContext(context.Context) WgetArrayOutput
}

type WgetArray []WgetInput

func (WgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wget)(nil)).Elem()
}

func (i WgetArray) ToWgetArrayOutput() WgetArrayOutput {
	return i.ToWgetArrayOutputWithContext(context.Background())
}

func (i WgetArray) ToWgetArrayOutputWithContext(ctx context.Context) WgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WgetArrayOutput)
}

// WgetMapInput is an input type that accepts WgetMap and WgetMapOutput values.
// You can construct a concrete instance of `WgetMapInput` via:
//
//	WgetMap{ "key": WgetArgs{...} }
type WgetMapInput interface {
	pulumi.Input

	ToWgetMapOutput() WgetMapOutput
	ToWgetMapOutputWithContext(context.Context) WgetMapOutput
}

type WgetMap map[string]WgetInput

func (WgetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wget)(nil)).Elem()
}

func (i WgetMap) ToWgetMapOutput() WgetMapOutput {
	return i.ToWgetMapOutputWithContext(context.Background())
}

func (i WgetMap) ToWgetMapOutputWithContext(ctx context.Context) WgetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WgetMapOutput)
}

type WgetOutput struct{ *pulumi.OutputState }

func (WgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Wget)(nil)).Elem()
}

func (o WgetOutput) ToWgetOutput() WgetOutput {
	return o
}

func (o WgetOutput) ToWgetOutputWithContext(ctx context.Context) WgetOutput {
	return o
}

// Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
func (o WgetOutput) BinaryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Wget) pulumi.StringOutput { return v.BinaryPath }).(pulumi.StringOutput)
}

// The underlying command
func (o WgetOutput) Command() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *Wget) pulumiCommand.CommandOutput { return v.Command }).(pulumiCommand.CommandOutput)
}

// Connection details for the remote system
func (o WgetOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *Wget) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The command to run on create.
func (o WgetOutput) Create() WgetOptsPtrOutput {
	return o.ApplyT(func(v *Wget) WgetOptsPtrOutput { return v.Create }).(WgetOptsPtrOutput)
}

// The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
// and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
// Command resource from previous create or update steps.
func (o WgetOutput) Delete() WgetOptsPtrOutput {
	return o.ApplyT(func(v *Wget) WgetOptsPtrOutput { return v.Delete }).(WgetOptsPtrOutput)
}

// Environment variables
func (o WgetOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Wget) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// TODO
func (o WgetOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Wget) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// TODO
func (o WgetOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wget) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// TODO
func (o WgetOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Wget) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

// TODO
func (o WgetOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Wget) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// The command to run on update, if empty, create will
// run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
// are set to the stdout and stderr properties of the Command resource from previous
// create or update steps.
func (o WgetOutput) Update() WgetOptsPtrOutput {
	return o.ApplyT(func(v *Wget) WgetOptsPtrOutput { return v.Update }).(WgetOptsPtrOutput)
}

type WgetArrayOutput struct{ *pulumi.OutputState }

func (WgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wget)(nil)).Elem()
}

func (o WgetArrayOutput) ToWgetArrayOutput() WgetArrayOutput {
	return o
}

func (o WgetArrayOutput) ToWgetArrayOutputWithContext(ctx context.Context) WgetArrayOutput {
	return o
}

func (o WgetArrayOutput) Index(i pulumi.IntInput) WgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Wget {
		return vs[0].([]*Wget)[vs[1].(int)]
	}).(WgetOutput)
}

type WgetMapOutput struct{ *pulumi.OutputState }

func (WgetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wget)(nil)).Elem()
}

func (o WgetMapOutput) ToWgetMapOutput() WgetMapOutput {
	return o
}

func (o WgetMapOutput) ToWgetMapOutputWithContext(ctx context.Context) WgetMapOutput {
	return o
}

func (o WgetMapOutput) MapIndex(k pulumi.StringInput) WgetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Wget {
		return vs[0].(map[string]*Wget)[vs[1].(string)]
	}).(WgetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WgetInput)(nil)).Elem(), &Wget{})
	pulumi.RegisterInputType(reflect.TypeOf((*WgetArrayInput)(nil)).Elem(), WgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WgetMapInput)(nil)).Elem(), WgetMap{})
	pulumi.RegisterOutputType(WgetOutput{})
	pulumi.RegisterOutputType(WgetArrayOutput{})
	pulumi.RegisterOutputType(WgetMapOutput{})
}
