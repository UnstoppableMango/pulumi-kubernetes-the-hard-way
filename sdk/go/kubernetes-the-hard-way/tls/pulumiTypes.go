// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-tls/sdk/v5/go/tls"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

var _ = internal.GetEnvOrDefault

// Node inputs for the PKI.
type ClusterPkiNode struct {
	// The IP address of the node.
	Ip   *string   `pulumi:"ip"`
	Role *NodeRole `pulumi:"role"`
}

// ClusterPkiNodeInput is an input type that accepts ClusterPkiNodeArgs and ClusterPkiNodeOutput values.
// You can construct a concrete instance of `ClusterPkiNodeInput` via:
//
//	ClusterPkiNodeArgs{...}
type ClusterPkiNodeInput interface {
	pulumi.Input

	ToClusterPkiNodeOutput() ClusterPkiNodeOutput
	ToClusterPkiNodeOutputWithContext(context.Context) ClusterPkiNodeOutput
}

// Node inputs for the PKI.
type ClusterPkiNodeArgs struct {
	// The IP address of the node.
	Ip   pulumi.StringPtrInput `pulumi:"ip"`
	Role NodeRolePtrInput      `pulumi:"role"`
}

func (ClusterPkiNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPkiNode)(nil)).Elem()
}

func (i ClusterPkiNodeArgs) ToClusterPkiNodeOutput() ClusterPkiNodeOutput {
	return i.ToClusterPkiNodeOutputWithContext(context.Background())
}

func (i ClusterPkiNodeArgs) ToClusterPkiNodeOutputWithContext(ctx context.Context) ClusterPkiNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPkiNodeOutput)
}

// ClusterPkiNodeMapInput is an input type that accepts ClusterPkiNodeMap and ClusterPkiNodeMapOutput values.
// You can construct a concrete instance of `ClusterPkiNodeMapInput` via:
//
//	ClusterPkiNodeMap{ "key": ClusterPkiNodeArgs{...} }
type ClusterPkiNodeMapInput interface {
	pulumi.Input

	ToClusterPkiNodeMapOutput() ClusterPkiNodeMapOutput
	ToClusterPkiNodeMapOutputWithContext(context.Context) ClusterPkiNodeMapOutput
}

type ClusterPkiNodeMap map[string]ClusterPkiNodeInput

func (ClusterPkiNodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ClusterPkiNode)(nil)).Elem()
}

func (i ClusterPkiNodeMap) ToClusterPkiNodeMapOutput() ClusterPkiNodeMapOutput {
	return i.ToClusterPkiNodeMapOutputWithContext(context.Background())
}

func (i ClusterPkiNodeMap) ToClusterPkiNodeMapOutputWithContext(ctx context.Context) ClusterPkiNodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPkiNodeMapOutput)
}

// Node inputs for the PKI.
type ClusterPkiNodeOutput struct{ *pulumi.OutputState }

func (ClusterPkiNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPkiNode)(nil)).Elem()
}

func (o ClusterPkiNodeOutput) ToClusterPkiNodeOutput() ClusterPkiNodeOutput {
	return o
}

func (o ClusterPkiNodeOutput) ToClusterPkiNodeOutputWithContext(ctx context.Context) ClusterPkiNodeOutput {
	return o
}

// The IP address of the node.
func (o ClusterPkiNodeOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPkiNode) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o ClusterPkiNodeOutput) Role() NodeRolePtrOutput {
	return o.ApplyT(func(v ClusterPkiNode) *NodeRole { return v.Role }).(NodeRolePtrOutput)
}

type ClusterPkiNodeMapOutput struct{ *pulumi.OutputState }

func (ClusterPkiNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ClusterPkiNode)(nil)).Elem()
}

func (o ClusterPkiNodeMapOutput) ToClusterPkiNodeMapOutput() ClusterPkiNodeMapOutput {
	return o
}

func (o ClusterPkiNodeMapOutput) ToClusterPkiNodeMapOutputWithContext(ctx context.Context) ClusterPkiNodeMapOutput {
	return o
}

func (o ClusterPkiNodeMapOutput) MapIndex(k pulumi.StringInput) ClusterPkiNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ClusterPkiNode {
		return vs[0].(map[string]ClusterPkiNode)[vs[1].(string)]
	}).(ClusterPkiNodeOutput)
}

// A certificate and key pair.
type KeyPair struct {
	// The PEM encoded certificate data
	CertPem *string `pulumi:"certPem"`
	// The private key.
	Key *tls.PrivateKey `pulumi:"key"`
	// The PEM encoded private key data.
	PrivateKeyPem *string `pulumi:"privateKeyPem"`
	// The PEM encoded public key data.
	PublicKeyPem *string `pulumi:"publicKeyPem"`
}

// KeyPairInput is an input type that accepts KeyPairArgs and KeyPairOutput values.
// You can construct a concrete instance of `KeyPairInput` via:
//
//	KeyPairArgs{...}
type KeyPairInput interface {
	pulumi.Input

	ToKeyPairOutput() KeyPairOutput
	ToKeyPairOutputWithContext(context.Context) KeyPairOutput
}

// A certificate and key pair.
type KeyPairArgs struct {
	// The PEM encoded certificate data
	CertPem pulumi.StringPtrInput `pulumi:"certPem"`
	// The private key.
	Key tls.PrivateKeyInput `pulumi:"key"`
	// The PEM encoded private key data.
	PrivateKeyPem pulumi.StringPtrInput `pulumi:"privateKeyPem"`
	// The PEM encoded public key data.
	PublicKeyPem pulumi.StringPtrInput `pulumi:"publicKeyPem"`
}

func (KeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPair)(nil)).Elem()
}

func (i KeyPairArgs) ToKeyPairOutput() KeyPairOutput {
	return i.ToKeyPairOutputWithContext(context.Background())
}

func (i KeyPairArgs) ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairOutput)
}

// A certificate and key pair.
type KeyPairOutput struct{ *pulumi.OutputState }

func (KeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPair)(nil)).Elem()
}

func (o KeyPairOutput) ToKeyPairOutput() KeyPairOutput {
	return o
}

func (o KeyPairOutput) ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput {
	return o
}

// The PEM encoded certificate data
func (o KeyPairOutput) CertPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyPair) *string { return v.CertPem }).(pulumi.StringPtrOutput)
}

// The private key.
func (o KeyPairOutput) Key() tls.PrivateKeyOutput {
	return o.ApplyT(func(v KeyPair) *tls.PrivateKey { return v.Key }).(tls.PrivateKeyOutput)
}

// The PEM encoded private key data.
func (o KeyPairOutput) PrivateKeyPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyPair) *string { return v.PrivateKeyPem }).(pulumi.StringPtrOutput)
}

// The PEM encoded public key data.
func (o KeyPairOutput) PublicKeyPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyPair) *string { return v.PublicKeyPem }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPkiNodeInput)(nil)).Elem(), ClusterPkiNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPkiNodeMapInput)(nil)).Elem(), ClusterPkiNodeMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairInput)(nil)).Elem(), KeyPairArgs{})
	pulumi.RegisterOutputType(ClusterPkiNodeOutput{})
	pulumi.RegisterOutputType(ClusterPkiNodeMapOutput{})
	pulumi.RegisterOutputType(KeyPairOutput{})
}
