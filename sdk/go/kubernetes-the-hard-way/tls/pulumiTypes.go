// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-tls/sdk/v5/go/tls"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

var _ = internal.GetEnvOrDefault

// A CA + Cert + Key bundle
type Bundle struct {
	// The PEM encoded certificate authority data.
	CaPem string `pulumi:"caPem"`
	// The PEM encoded certificate data.
	CertPem string `pulumi:"certPem"`
	// The PEM encoded private key data
	KeyPem string `pulumi:"keyPem"`
}

// BundleInput is an input type that accepts BundleArgs and BundleOutput values.
// You can construct a concrete instance of `BundleInput` via:
//
//	BundleArgs{...}
type BundleInput interface {
	pulumi.Input

	ToBundleOutput() BundleOutput
	ToBundleOutputWithContext(context.Context) BundleOutput
}

// A CA + Cert + Key bundle
type BundleArgs struct {
	// The PEM encoded certificate authority data.
	CaPem pulumi.StringInput `pulumi:"caPem"`
	// The PEM encoded certificate data.
	CertPem pulumi.StringInput `pulumi:"certPem"`
	// The PEM encoded private key data
	KeyPem pulumi.StringInput `pulumi:"keyPem"`
}

func (BundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Bundle)(nil)).Elem()
}

func (i BundleArgs) ToBundleOutput() BundleOutput {
	return i.ToBundleOutputWithContext(context.Background())
}

func (i BundleArgs) ToBundleOutputWithContext(ctx context.Context) BundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BundleOutput)
}

// A CA + Cert + Key bundle
type BundleOutput struct{ *pulumi.OutputState }

func (BundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Bundle)(nil)).Elem()
}

func (o BundleOutput) ToBundleOutput() BundleOutput {
	return o
}

func (o BundleOutput) ToBundleOutputWithContext(ctx context.Context) BundleOutput {
	return o
}

// The PEM encoded certificate authority data.
func (o BundleOutput) CaPem() pulumi.StringOutput {
	return o.ApplyT(func(v Bundle) string { return v.CaPem }).(pulumi.StringOutput)
}

// The PEM encoded certificate data.
func (o BundleOutput) CertPem() pulumi.StringOutput {
	return o.ApplyT(func(v Bundle) string { return v.CertPem }).(pulumi.StringOutput)
}

// The PEM encoded private key data
func (o BundleOutput) KeyPem() pulumi.StringOutput {
	return o.ApplyT(func(v Bundle) string { return v.KeyPem }).(pulumi.StringOutput)
}

// TODO
type ClusterPkiNode struct {
	// The IP address of the node
	Ip string `pulumi:"ip"`
	// The role a node should be configured for
	Role NodeRole `pulumi:"role"`
}

// ClusterPkiNodeInput is an input type that accepts ClusterPkiNodeArgs and ClusterPkiNodeOutput values.
// You can construct a concrete instance of `ClusterPkiNodeInput` via:
//
//	ClusterPkiNodeArgs{...}
type ClusterPkiNodeInput interface {
	pulumi.Input

	ToClusterPkiNodeOutput() ClusterPkiNodeOutput
	ToClusterPkiNodeOutputWithContext(context.Context) ClusterPkiNodeOutput
}

// TODO
type ClusterPkiNodeArgs struct {
	// The IP address of the node
	Ip pulumi.StringInput `pulumi:"ip"`
	// The role a node should be configured for
	Role NodeRoleInput `pulumi:"role"`
}

func (ClusterPkiNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPkiNode)(nil)).Elem()
}

func (i ClusterPkiNodeArgs) ToClusterPkiNodeOutput() ClusterPkiNodeOutput {
	return i.ToClusterPkiNodeOutputWithContext(context.Background())
}

func (i ClusterPkiNodeArgs) ToClusterPkiNodeOutputWithContext(ctx context.Context) ClusterPkiNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPkiNodeOutput)
}

// ClusterPkiNodeMapInput is an input type that accepts ClusterPkiNodeMap and ClusterPkiNodeMapOutput values.
// You can construct a concrete instance of `ClusterPkiNodeMapInput` via:
//
//	ClusterPkiNodeMap{ "key": ClusterPkiNodeArgs{...} }
type ClusterPkiNodeMapInput interface {
	pulumi.Input

	ToClusterPkiNodeMapOutput() ClusterPkiNodeMapOutput
	ToClusterPkiNodeMapOutputWithContext(context.Context) ClusterPkiNodeMapOutput
}

type ClusterPkiNodeMap map[string]ClusterPkiNodeInput

func (ClusterPkiNodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ClusterPkiNode)(nil)).Elem()
}

func (i ClusterPkiNodeMap) ToClusterPkiNodeMapOutput() ClusterPkiNodeMapOutput {
	return i.ToClusterPkiNodeMapOutputWithContext(context.Background())
}

func (i ClusterPkiNodeMap) ToClusterPkiNodeMapOutputWithContext(ctx context.Context) ClusterPkiNodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPkiNodeMapOutput)
}

// TODO
type ClusterPkiNodeOutput struct{ *pulumi.OutputState }

func (ClusterPkiNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPkiNode)(nil)).Elem()
}

func (o ClusterPkiNodeOutput) ToClusterPkiNodeOutput() ClusterPkiNodeOutput {
	return o
}

func (o ClusterPkiNodeOutput) ToClusterPkiNodeOutputWithContext(ctx context.Context) ClusterPkiNodeOutput {
	return o
}

// The IP address of the node
func (o ClusterPkiNodeOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPkiNode) string { return v.Ip }).(pulumi.StringOutput)
}

// The role a node should be configured for
func (o ClusterPkiNodeOutput) Role() NodeRoleOutput {
	return o.ApplyT(func(v ClusterPkiNode) NodeRole { return v.Role }).(NodeRoleOutput)
}

type ClusterPkiNodeMapOutput struct{ *pulumi.OutputState }

func (ClusterPkiNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ClusterPkiNode)(nil)).Elem()
}

func (o ClusterPkiNodeMapOutput) ToClusterPkiNodeMapOutput() ClusterPkiNodeMapOutput {
	return o
}

func (o ClusterPkiNodeMapOutput) ToClusterPkiNodeMapOutputWithContext(ctx context.Context) ClusterPkiNodeMapOutput {
	return o
}

func (o ClusterPkiNodeMapOutput) MapIndex(k pulumi.StringInput) ClusterPkiNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ClusterPkiNode {
		return vs[0].(map[string]ClusterPkiNode)[vs[1].(string)]
	}).(ClusterPkiNodeOutput)
}

// A certificate and key pair
type KeyPair struct {
	// The certificate resource.
	Cert interface{} `pulumi:"cert"`
	// The PEM encoded certificate data.
	CertPem string `pulumi:"certPem"`
	// The private key resource.
	Key *tls.PrivateKey `pulumi:"key"`
	// The PEM encoded private key data.
	PrivateKeyPem string `pulumi:"privateKeyPem"`
	// The PEM encoded public key data.
	PublicKeyPem string `pulumi:"publicKeyPem"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BundleInput)(nil)).Elem(), BundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPkiNodeInput)(nil)).Elem(), ClusterPkiNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPkiNodeMapInput)(nil)).Elem(), ClusterPkiNodeMap{})
	pulumi.RegisterOutputType(BundleOutput{})
	pulumi.RegisterOutputType(ClusterPkiNodeOutput{})
	pulumi.RegisterOutputType(ClusterPkiNodeMapOutput{})
}
