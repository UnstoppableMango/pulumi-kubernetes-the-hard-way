// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Gets the static pod manifests for KubeVip.
func GetKubeVipManifest(ctx *pulumi.Context, args *GetKubeVipManifestArgs, opts ...pulumi.InvokeOption) (*GetKubeVipManifestResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKubeVipManifestResult
	err := ctx.Invoke("kubernetes-the-hard-way:config:getKubeVipManifest", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetKubeVipManifestArgs struct {
	// TODO
	Address string `pulumi:"address"`
	// TODO
	CpEnable *bool `pulumi:"cpEnable"`
	// TODO
	CpNamespace *string `pulumi:"cpNamespace"`
	// Override the kube-vip image.
	Image *string `pulumi:"image"`
	// Path to the kubeconfig on the remote host.
	KubeconfigPath string `pulumi:"kubeconfigPath"`
	// TODO
	Port *int `pulumi:"port"`
	// TODO
	SvcEnable *bool `pulumi:"svcEnable"`
	// Version of kube-vip to use.
	Version *string `pulumi:"version"`
	// TODO
	VipArp *bool `pulumi:"vipArp"`
	// TODO
	VipCidr string `pulumi:"vipCidr"`
	// TODO
	VipDdns *bool `pulumi:"vipDdns"`
	// TODO
	VipInterface *string `pulumi:"vipInterface"`
	// TODO
	VipLeaderElection *bool `pulumi:"vipLeaderElection"`
	// TODO
	VipLeaseDuration *int `pulumi:"vipLeaseDuration"`
	// TODO
	VipRenewDeadline *int `pulumi:"vipRenewDeadline"`
	// TODO
	VipRetryPeriod *int `pulumi:"vipRetryPeriod"`
}

// Defaults sets the appropriate defaults for GetKubeVipManifestArgs
func (val *GetKubeVipManifestArgs) Defaults() *GetKubeVipManifestArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Port == nil {
		port_ := 6443
		tmp.Port = &port_
	}
	return &tmp
}

type GetKubeVipManifestResult struct {
	Result PodManifest `pulumi:"result"`
}

func GetKubeVipManifestOutput(ctx *pulumi.Context, args GetKubeVipManifestOutputArgs, opts ...pulumi.InvokeOption) GetKubeVipManifestResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetKubeVipManifestResult, error) {
			args := v.(GetKubeVipManifestArgs)
			r, err := GetKubeVipManifest(ctx, &args, opts...)
			var s GetKubeVipManifestResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetKubeVipManifestResultOutput)
}

type GetKubeVipManifestOutputArgs struct {
	// TODO
	Address pulumi.StringInput `pulumi:"address"`
	// TODO
	CpEnable pulumi.BoolPtrInput `pulumi:"cpEnable"`
	// TODO
	CpNamespace pulumi.StringPtrInput `pulumi:"cpNamespace"`
	// Override the kube-vip image.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Path to the kubeconfig on the remote host.
	KubeconfigPath pulumi.StringInput `pulumi:"kubeconfigPath"`
	// TODO
	Port pulumi.IntPtrInput `pulumi:"port"`
	// TODO
	SvcEnable pulumi.BoolPtrInput `pulumi:"svcEnable"`
	// Version of kube-vip to use.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// TODO
	VipArp pulumi.BoolPtrInput `pulumi:"vipArp"`
	// TODO
	VipCidr pulumi.StringInput `pulumi:"vipCidr"`
	// TODO
	VipDdns pulumi.BoolPtrInput `pulumi:"vipDdns"`
	// TODO
	VipInterface pulumi.StringPtrInput `pulumi:"vipInterface"`
	// TODO
	VipLeaderElection pulumi.BoolPtrInput `pulumi:"vipLeaderElection"`
	// TODO
	VipLeaseDuration pulumi.IntPtrInput `pulumi:"vipLeaseDuration"`
	// TODO
	VipRenewDeadline pulumi.IntPtrInput `pulumi:"vipRenewDeadline"`
	// TODO
	VipRetryPeriod pulumi.IntPtrInput `pulumi:"vipRetryPeriod"`
}

func (GetKubeVipManifestOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubeVipManifestArgs)(nil)).Elem()
}

type GetKubeVipManifestResultOutput struct{ *pulumi.OutputState }

func (GetKubeVipManifestResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubeVipManifestResult)(nil)).Elem()
}

func (o GetKubeVipManifestResultOutput) ToGetKubeVipManifestResultOutput() GetKubeVipManifestResultOutput {
	return o
}

func (o GetKubeVipManifestResultOutput) ToGetKubeVipManifestResultOutputWithContext(ctx context.Context) GetKubeVipManifestResultOutput {
	return o
}

func (o GetKubeVipManifestResultOutput) Result() PodManifestOutput {
	return o.ApplyT(func(v GetKubeVipManifestResult) PodManifest { return v.Result }).(PodManifestOutput)
}

func init() {
	pulumi.RegisterOutputType(GetKubeVipManifestResultOutput{})
}
