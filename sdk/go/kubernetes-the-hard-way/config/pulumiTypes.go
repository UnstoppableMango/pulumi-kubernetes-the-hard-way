// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

var _ = internal.GetEnvOrDefault

type Cluster struct {
	CertificateAuthorityData string `pulumi:"certificateAuthorityData"`
	Server                   string `pulumi:"server"`
}

// ClusterInput is an input type that accepts ClusterArgs and ClusterOutput values.
// You can construct a concrete instance of `ClusterInput` via:
//
//	ClusterArgs{...}
type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(context.Context) ClusterOutput
}

type ClusterArgs struct {
	CertificateAuthorityData pulumi.StringInput `pulumi:"certificateAuthorityData"`
	Server                   pulumi.StringInput `pulumi:"server"`
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (i ClusterArgs) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i ClusterArgs) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) CertificateAuthorityData() pulumi.StringOutput {
	return o.ApplyT(func(v Cluster) string { return v.CertificateAuthorityData }).(pulumi.StringOutput)
}

func (o ClusterOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v Cluster) string { return v.Server }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Cluster {
		return vs[0].([]Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type Context struct {
	Cluster string `pulumi:"cluster"`
	User    string `pulumi:"user"`
}

// ContextInput is an input type that accepts ContextArgs and ContextOutput values.
// You can construct a concrete instance of `ContextInput` via:
//
//	ContextArgs{...}
type ContextInput interface {
	pulumi.Input

	ToContextOutput() ContextOutput
	ToContextOutputWithContext(context.Context) ContextOutput
}

type ContextArgs struct {
	Cluster pulumi.StringInput `pulumi:"cluster"`
	User    pulumi.StringInput `pulumi:"user"`
}

func (ContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Context)(nil)).Elem()
}

func (i ContextArgs) ToContextOutput() ContextOutput {
	return i.ToContextOutputWithContext(context.Background())
}

func (i ContextArgs) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextOutput)
}

// ContextArrayInput is an input type that accepts ContextArray and ContextArrayOutput values.
// You can construct a concrete instance of `ContextArrayInput` via:
//
//	ContextArray{ ContextArgs{...} }
type ContextArrayInput interface {
	pulumi.Input

	ToContextArrayOutput() ContextArrayOutput
	ToContextArrayOutputWithContext(context.Context) ContextArrayOutput
}

type ContextArray []ContextInput

func (ContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Context)(nil)).Elem()
}

func (i ContextArray) ToContextArrayOutput() ContextArrayOutput {
	return i.ToContextArrayOutputWithContext(context.Background())
}

func (i ContextArray) ToContextArrayOutputWithContext(ctx context.Context) ContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextArrayOutput)
}

type ContextOutput struct{ *pulumi.OutputState }

func (ContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Context)(nil)).Elem()
}

func (o ContextOutput) ToContextOutput() ContextOutput {
	return o
}

func (o ContextOutput) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return o
}

func (o ContextOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v Context) string { return v.Cluster }).(pulumi.StringOutput)
}

func (o ContextOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Context) string { return v.User }).(pulumi.StringOutput)
}

type ContextArrayOutput struct{ *pulumi.OutputState }

func (ContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Context)(nil)).Elem()
}

func (o ContextArrayOutput) ToContextArrayOutput() ContextArrayOutput {
	return o
}

func (o ContextArrayOutput) ToContextArrayOutputWithContext(ctx context.Context) ContextArrayOutput {
	return o
}

func (o ContextArrayOutput) Index(i pulumi.IntInput) ContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Context {
		return vs[0].([]Context)[vs[1].(int)]
	}).(ContextOutput)
}

type Kubeconfig struct {
	Clusters []Cluster `pulumi:"clusters"`
	Contexts []Context `pulumi:"contexts"`
	Users    []User    `pulumi:"users"`
}

// KubeconfigInput is an input type that accepts KubeconfigArgs and KubeconfigOutput values.
// You can construct a concrete instance of `KubeconfigInput` via:
//
//	KubeconfigArgs{...}
type KubeconfigInput interface {
	pulumi.Input

	ToKubeconfigOutput() KubeconfigOutput
	ToKubeconfigOutputWithContext(context.Context) KubeconfigOutput
}

type KubeconfigArgs struct {
	Clusters ClusterArrayInput `pulumi:"clusters"`
	Contexts ContextArrayInput `pulumi:"contexts"`
	Users    UserArrayInput    `pulumi:"users"`
}

func (KubeconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubeconfig)(nil)).Elem()
}

func (i KubeconfigArgs) ToKubeconfigOutput() KubeconfigOutput {
	return i.ToKubeconfigOutputWithContext(context.Background())
}

func (i KubeconfigArgs) ToKubeconfigOutputWithContext(ctx context.Context) KubeconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeconfigOutput)
}

type KubeconfigOutput struct{ *pulumi.OutputState }

func (KubeconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubeconfig)(nil)).Elem()
}

func (o KubeconfigOutput) ToKubeconfigOutput() KubeconfigOutput {
	return o
}

func (o KubeconfigOutput) ToKubeconfigOutputWithContext(ctx context.Context) KubeconfigOutput {
	return o
}

func (o KubeconfigOutput) Clusters() ClusterArrayOutput {
	return o.ApplyT(func(v Kubeconfig) []Cluster { return v.Clusters }).(ClusterArrayOutput)
}

func (o KubeconfigOutput) Contexts() ContextArrayOutput {
	return o.ApplyT(func(v Kubeconfig) []Context { return v.Contexts }).(ContextArrayOutput)
}

func (o KubeconfigOutput) Users() UserArrayOutput {
	return o.ApplyT(func(v Kubeconfig) []User { return v.Users }).(UserArrayOutput)
}

type KubeconfigAdminOptions struct {
	PublicIp *string `pulumi:"publicIp"`
	Type     string  `pulumi:"type"`
}

// KubeconfigAdminOptionsInput is an input type that accepts KubeconfigAdminOptionsArgs and KubeconfigAdminOptionsOutput values.
// You can construct a concrete instance of `KubeconfigAdminOptionsInput` via:
//
//	KubeconfigAdminOptionsArgs{...}
type KubeconfigAdminOptionsInput interface {
	pulumi.Input

	ToKubeconfigAdminOptionsOutput() KubeconfigAdminOptionsOutput
	ToKubeconfigAdminOptionsOutputWithContext(context.Context) KubeconfigAdminOptionsOutput
}

type KubeconfigAdminOptionsArgs struct {
	PublicIp pulumi.StringPtrInput `pulumi:"publicIp"`
	Type     string                `pulumi:"type"`
}

func (KubeconfigAdminOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigAdminOptions)(nil)).Elem()
}

func (i KubeconfigAdminOptionsArgs) ToKubeconfigAdminOptionsOutput() KubeconfigAdminOptionsOutput {
	return i.ToKubeconfigAdminOptionsOutputWithContext(context.Background())
}

func (i KubeconfigAdminOptionsArgs) ToKubeconfigAdminOptionsOutputWithContext(ctx context.Context) KubeconfigAdminOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeconfigAdminOptionsOutput)
}

type KubeconfigAdminOptionsOutput struct{ *pulumi.OutputState }

func (KubeconfigAdminOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigAdminOptions)(nil)).Elem()
}

func (o KubeconfigAdminOptionsOutput) ToKubeconfigAdminOptionsOutput() KubeconfigAdminOptionsOutput {
	return o
}

func (o KubeconfigAdminOptionsOutput) ToKubeconfigAdminOptionsOutputWithContext(ctx context.Context) KubeconfigAdminOptionsOutput {
	return o
}

func (o KubeconfigAdminOptionsOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeconfigAdminOptions) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

func (o KubeconfigAdminOptionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KubeconfigAdminOptions) string { return v.Type }).(pulumi.StringOutput)
}

type KubeconfigCluster struct {
	Cluster Cluster `pulumi:"cluster"`
	Name    string  `pulumi:"name"`
}

type KubeconfigContext struct {
	Context Context `pulumi:"context"`
	Name    string  `pulumi:"name"`
}

type KubeconfigKubeControllerManagerOptions struct {
	PublicIp *string `pulumi:"publicIp"`
	Type     string  `pulumi:"type"`
}

// KubeconfigKubeControllerManagerOptionsInput is an input type that accepts KubeconfigKubeControllerManagerOptionsArgs and KubeconfigKubeControllerManagerOptionsOutput values.
// You can construct a concrete instance of `KubeconfigKubeControllerManagerOptionsInput` via:
//
//	KubeconfigKubeControllerManagerOptionsArgs{...}
type KubeconfigKubeControllerManagerOptionsInput interface {
	pulumi.Input

	ToKubeconfigKubeControllerManagerOptionsOutput() KubeconfigKubeControllerManagerOptionsOutput
	ToKubeconfigKubeControllerManagerOptionsOutputWithContext(context.Context) KubeconfigKubeControllerManagerOptionsOutput
}

type KubeconfigKubeControllerManagerOptionsArgs struct {
	PublicIp pulumi.StringPtrInput `pulumi:"publicIp"`
	Type     string                `pulumi:"type"`
}

func (KubeconfigKubeControllerManagerOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigKubeControllerManagerOptions)(nil)).Elem()
}

func (i KubeconfigKubeControllerManagerOptionsArgs) ToKubeconfigKubeControllerManagerOptionsOutput() KubeconfigKubeControllerManagerOptionsOutput {
	return i.ToKubeconfigKubeControllerManagerOptionsOutputWithContext(context.Background())
}

func (i KubeconfigKubeControllerManagerOptionsArgs) ToKubeconfigKubeControllerManagerOptionsOutputWithContext(ctx context.Context) KubeconfigKubeControllerManagerOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeconfigKubeControllerManagerOptionsOutput)
}

type KubeconfigKubeControllerManagerOptionsOutput struct{ *pulumi.OutputState }

func (KubeconfigKubeControllerManagerOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigKubeControllerManagerOptions)(nil)).Elem()
}

func (o KubeconfigKubeControllerManagerOptionsOutput) ToKubeconfigKubeControllerManagerOptionsOutput() KubeconfigKubeControllerManagerOptionsOutput {
	return o
}

func (o KubeconfigKubeControllerManagerOptionsOutput) ToKubeconfigKubeControllerManagerOptionsOutputWithContext(ctx context.Context) KubeconfigKubeControllerManagerOptionsOutput {
	return o
}

func (o KubeconfigKubeControllerManagerOptionsOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeconfigKubeControllerManagerOptions) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

func (o KubeconfigKubeControllerManagerOptionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KubeconfigKubeControllerManagerOptions) string { return v.Type }).(pulumi.StringOutput)
}

type KubeconfigKubeProxyOptions struct {
	PublicIp *string `pulumi:"publicIp"`
	Type     string  `pulumi:"type"`
}

// KubeconfigKubeProxyOptionsInput is an input type that accepts KubeconfigKubeProxyOptionsArgs and KubeconfigKubeProxyOptionsOutput values.
// You can construct a concrete instance of `KubeconfigKubeProxyOptionsInput` via:
//
//	KubeconfigKubeProxyOptionsArgs{...}
type KubeconfigKubeProxyOptionsInput interface {
	pulumi.Input

	ToKubeconfigKubeProxyOptionsOutput() KubeconfigKubeProxyOptionsOutput
	ToKubeconfigKubeProxyOptionsOutputWithContext(context.Context) KubeconfigKubeProxyOptionsOutput
}

type KubeconfigKubeProxyOptionsArgs struct {
	PublicIp pulumi.StringPtrInput `pulumi:"publicIp"`
	Type     string                `pulumi:"type"`
}

func (KubeconfigKubeProxyOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigKubeProxyOptions)(nil)).Elem()
}

func (i KubeconfigKubeProxyOptionsArgs) ToKubeconfigKubeProxyOptionsOutput() KubeconfigKubeProxyOptionsOutput {
	return i.ToKubeconfigKubeProxyOptionsOutputWithContext(context.Background())
}

func (i KubeconfigKubeProxyOptionsArgs) ToKubeconfigKubeProxyOptionsOutputWithContext(ctx context.Context) KubeconfigKubeProxyOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeconfigKubeProxyOptionsOutput)
}

type KubeconfigKubeProxyOptionsOutput struct{ *pulumi.OutputState }

func (KubeconfigKubeProxyOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigKubeProxyOptions)(nil)).Elem()
}

func (o KubeconfigKubeProxyOptionsOutput) ToKubeconfigKubeProxyOptionsOutput() KubeconfigKubeProxyOptionsOutput {
	return o
}

func (o KubeconfigKubeProxyOptionsOutput) ToKubeconfigKubeProxyOptionsOutputWithContext(ctx context.Context) KubeconfigKubeProxyOptionsOutput {
	return o
}

func (o KubeconfigKubeProxyOptionsOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeconfigKubeProxyOptions) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

func (o KubeconfigKubeProxyOptionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KubeconfigKubeProxyOptions) string { return v.Type }).(pulumi.StringOutput)
}

type KubeconfigKubeSchedulerOptions struct {
	PublicIp *string `pulumi:"publicIp"`
	Type     string  `pulumi:"type"`
}

// KubeconfigKubeSchedulerOptionsInput is an input type that accepts KubeconfigKubeSchedulerOptionsArgs and KubeconfigKubeSchedulerOptionsOutput values.
// You can construct a concrete instance of `KubeconfigKubeSchedulerOptionsInput` via:
//
//	KubeconfigKubeSchedulerOptionsArgs{...}
type KubeconfigKubeSchedulerOptionsInput interface {
	pulumi.Input

	ToKubeconfigKubeSchedulerOptionsOutput() KubeconfigKubeSchedulerOptionsOutput
	ToKubeconfigKubeSchedulerOptionsOutputWithContext(context.Context) KubeconfigKubeSchedulerOptionsOutput
}

type KubeconfigKubeSchedulerOptionsArgs struct {
	PublicIp pulumi.StringPtrInput `pulumi:"publicIp"`
	Type     string                `pulumi:"type"`
}

func (KubeconfigKubeSchedulerOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigKubeSchedulerOptions)(nil)).Elem()
}

func (i KubeconfigKubeSchedulerOptionsArgs) ToKubeconfigKubeSchedulerOptionsOutput() KubeconfigKubeSchedulerOptionsOutput {
	return i.ToKubeconfigKubeSchedulerOptionsOutputWithContext(context.Background())
}

func (i KubeconfigKubeSchedulerOptionsArgs) ToKubeconfigKubeSchedulerOptionsOutputWithContext(ctx context.Context) KubeconfigKubeSchedulerOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeconfigKubeSchedulerOptionsOutput)
}

type KubeconfigKubeSchedulerOptionsOutput struct{ *pulumi.OutputState }

func (KubeconfigKubeSchedulerOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigKubeSchedulerOptions)(nil)).Elem()
}

func (o KubeconfigKubeSchedulerOptionsOutput) ToKubeconfigKubeSchedulerOptionsOutput() KubeconfigKubeSchedulerOptionsOutput {
	return o
}

func (o KubeconfigKubeSchedulerOptionsOutput) ToKubeconfigKubeSchedulerOptionsOutputWithContext(ctx context.Context) KubeconfigKubeSchedulerOptionsOutput {
	return o
}

func (o KubeconfigKubeSchedulerOptionsOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeconfigKubeSchedulerOptions) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

func (o KubeconfigKubeSchedulerOptionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KubeconfigKubeSchedulerOptions) string { return v.Type }).(pulumi.StringOutput)
}

type KubeconfigUser struct {
	Name string `pulumi:"name"`
	User User   `pulumi:"user"`
}

type KubeconfigWorkerOptions struct {
	Name     string  `pulumi:"name"`
	PublicIp string  `pulumi:"publicIp"`
	Type     *string `pulumi:"type"`
}

// KubeconfigWorkerOptionsInput is an input type that accepts KubeconfigWorkerOptionsArgs and KubeconfigWorkerOptionsOutput values.
// You can construct a concrete instance of `KubeconfigWorkerOptionsInput` via:
//
//	KubeconfigWorkerOptionsArgs{...}
type KubeconfigWorkerOptionsInput interface {
	pulumi.Input

	ToKubeconfigWorkerOptionsOutput() KubeconfigWorkerOptionsOutput
	ToKubeconfigWorkerOptionsOutputWithContext(context.Context) KubeconfigWorkerOptionsOutput
}

type KubeconfigWorkerOptionsArgs struct {
	Name     pulumi.StringInput `pulumi:"name"`
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
	Type     *string            `pulumi:"type"`
}

func (KubeconfigWorkerOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigWorkerOptions)(nil)).Elem()
}

func (i KubeconfigWorkerOptionsArgs) ToKubeconfigWorkerOptionsOutput() KubeconfigWorkerOptionsOutput {
	return i.ToKubeconfigWorkerOptionsOutputWithContext(context.Background())
}

func (i KubeconfigWorkerOptionsArgs) ToKubeconfigWorkerOptionsOutputWithContext(ctx context.Context) KubeconfigWorkerOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeconfigWorkerOptionsOutput)
}

type KubeconfigWorkerOptionsOutput struct{ *pulumi.OutputState }

func (KubeconfigWorkerOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeconfigWorkerOptions)(nil)).Elem()
}

func (o KubeconfigWorkerOptionsOutput) ToKubeconfigWorkerOptionsOutput() KubeconfigWorkerOptionsOutput {
	return o
}

func (o KubeconfigWorkerOptionsOutput) ToKubeconfigWorkerOptionsOutputWithContext(ctx context.Context) KubeconfigWorkerOptionsOutput {
	return o
}

func (o KubeconfigWorkerOptionsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KubeconfigWorkerOptions) string { return v.Name }).(pulumi.StringOutput)
}

func (o KubeconfigWorkerOptionsOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v KubeconfigWorkerOptions) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o KubeconfigWorkerOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeconfigWorkerOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// ## Example Usage
// ### Create a Pod with auto-naming
// ```go
// package main
//
// import (
//
//	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
//				Spec: &corev1.PodSpecArgs{
//					Containers: corev1.ContainerArray{
//						&corev1.ContainerArgs{
//							Image: pulumi.String("nginx:1.14.2"),
//							Name:  pulumi.String("nginx"),
//							Ports: corev1.ContainerPortArray{
//								&corev1.ContainerPortArgs{
//									ContainerPort: pulumi.Int(80),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a Pod with a user-specified name
// ```go
// package main
//
// import (
//
//	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
//	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
//				Metadata: &metav1.ObjectMetaArgs{
//					Name: pulumi.String("nginx"),
//				},
//				Spec: &corev1.PodSpecArgs{
//					Containers: corev1.ContainerArray{
//						&corev1.ContainerArgs{
//							Image: pulumi.String("nginx:1.14.2"),
//							Name:  pulumi.String("nginx"),
//							Ports: corev1.ContainerPortArray{
//								&corev1.ContainerPortArgs{
//									ContainerPort: pulumi.Int(80),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PodManifest struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *corev1.PodSpec `pulumi:"spec"`
	// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *corev1.PodStatus `pulumi:"status"`
}

// PodManifestInput is an input type that accepts PodManifestArgs and PodManifestOutput values.
// You can construct a concrete instance of `PodManifestInput` via:
//
//	PodManifestArgs{...}
type PodManifestInput interface {
	pulumi.Input

	ToPodManifestOutput() PodManifestOutput
	ToPodManifestOutputWithContext(context.Context) PodManifestOutput
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// ## Example Usage
// ### Create a Pod with auto-naming
// ```go
// package main
//
// import (
//
//	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
//				Spec: &corev1.PodSpecArgs{
//					Containers: corev1.ContainerArray{
//						&corev1.ContainerArgs{
//							Image: pulumi.String("nginx:1.14.2"),
//							Name:  pulumi.String("nginx"),
//							Ports: corev1.ContainerPortArray{
//								&corev1.ContainerPortArgs{
//									ContainerPort: pulumi.Int(80),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a Pod with a user-specified name
// ```go
// package main
//
// import (
//
//	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
//	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
//				Metadata: &metav1.ObjectMetaArgs{
//					Name: pulumi.String("nginx"),
//				},
//				Spec: &corev1.PodSpecArgs{
//					Containers: corev1.ContainerArray{
//						&corev1.ContainerArgs{
//							Image: pulumi.String("nginx:1.14.2"),
//							Name:  pulumi.String("nginx"),
//							Ports: corev1.ContainerPortArray{
//								&corev1.ContainerPortArgs{
//									ContainerPort: pulumi.Int(80),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PodManifestArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec corev1.PodSpecPtrInput `pulumi:"spec"`
	// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status corev1.PodStatusPtrInput `pulumi:"status"`
}

func (PodManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodManifest)(nil)).Elem()
}

func (i PodManifestArgs) ToPodManifestOutput() PodManifestOutput {
	return i.ToPodManifestOutputWithContext(context.Background())
}

func (i PodManifestArgs) ToPodManifestOutputWithContext(ctx context.Context) PodManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodManifestOutput)
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
//
// This resource waits until its status is ready before registering success
// for create/update, and populating output properties from the current state of the resource.
// The following conditions are used to determine whether the resource creation has
// succeeded or failed:
//
//  1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
//  2. The Pod is initialized ("Initialized" '.status.condition' is true).
//  3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
//     set to "Running".
//     Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
//
// If the Pod has not reached a Ready state after 10 minutes, it will
// time out and mark the resource update as Failed. You can override the default timeout value
// by setting the 'customTimeouts' option on the resource.
//
// ## Example Usage
// ### Create a Pod with auto-naming
// ```go
// package main
//
// import (
//
//	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
//				Spec: &corev1.PodSpecArgs{
//					Containers: corev1.ContainerArray{
//						&corev1.ContainerArgs{
//							Image: pulumi.String("nginx:1.14.2"),
//							Name:  pulumi.String("nginx"),
//							Ports: corev1.ContainerPortArray{
//								&corev1.ContainerPortArgs{
//									ContainerPort: pulumi.Int(80),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a Pod with a user-specified name
// ```go
// package main
//
// import (
//
//	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
//	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
//				Metadata: &metav1.ObjectMetaArgs{
//					Name: pulumi.String("nginx"),
//				},
//				Spec: &corev1.PodSpecArgs{
//					Containers: corev1.ContainerArray{
//						&corev1.ContainerArgs{
//							Image: pulumi.String("nginx:1.14.2"),
//							Name:  pulumi.String("nginx"),
//							Ports: corev1.ContainerPortArray{
//								&corev1.ContainerPortArgs{
//									ContainerPort: pulumi.Int(80),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PodManifestOutput struct{ *pulumi.OutputState }

func (PodManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodManifest)(nil)).Elem()
}

func (o PodManifestOutput) ToPodManifestOutput() PodManifestOutput {
	return o
}

func (o PodManifestOutput) ToPodManifestOutputWithContext(ctx context.Context) PodManifestOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodManifestOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodManifest) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodManifestOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodManifest) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodManifestOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodManifest) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodManifestOutput) Spec() corev1.PodSpecPtrOutput {
	return o.ApplyT(func(v PodManifest) *corev1.PodSpec { return v.Spec }).(corev1.PodSpecPtrOutput)
}

// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PodManifestOutput) Status() corev1.PodStatusPtrOutput {
	return o.ApplyT(func(v PodManifest) *corev1.PodStatus { return v.Status }).(corev1.PodStatusPtrOutput)
}

type User struct {
	ClientCertificateData string `pulumi:"clientCertificateData"`
	ClientKeyData         string `pulumi:"clientKeyData"`
}

// UserInput is an input type that accepts UserArgs and UserOutput values.
// You can construct a concrete instance of `UserInput` via:
//
//	UserArgs{...}
type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(context.Context) UserOutput
}

type UserArgs struct {
	ClientCertificateData pulumi.StringInput `pulumi:"clientCertificateData"`
	ClientKeyData         pulumi.StringInput `pulumi:"clientKeyData"`
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (i UserArgs) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i UserArgs) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) ClientCertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v User) string { return v.ClientCertificateData }).(pulumi.StringOutput)
}

func (o UserOutput) ClientKeyData() pulumi.StringOutput {
	return o.ApplyT(func(v User) string { return v.ClientKeyData }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) User {
		return vs[0].([]User)[vs[1].(int)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), ClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextInput)(nil)).Elem(), ContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContextArrayInput)(nil)).Elem(), ContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeconfigInput)(nil)).Elem(), KubeconfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeconfigAdminOptionsInput)(nil)).Elem(), KubeconfigAdminOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeconfigKubeControllerManagerOptionsInput)(nil)).Elem(), KubeconfigKubeControllerManagerOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeconfigKubeProxyOptionsInput)(nil)).Elem(), KubeconfigKubeProxyOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeconfigKubeSchedulerOptionsInput)(nil)).Elem(), KubeconfigKubeSchedulerOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeconfigWorkerOptionsInput)(nil)).Elem(), KubeconfigWorkerOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodManifestInput)(nil)).Elem(), PodManifestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), UserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ContextOutput{})
	pulumi.RegisterOutputType(ContextArrayOutput{})
	pulumi.RegisterOutputType(KubeconfigOutput{})
	pulumi.RegisterOutputType(KubeconfigAdminOptionsOutput{})
	pulumi.RegisterOutputType(KubeconfigKubeControllerManagerOptionsOutput{})
	pulumi.RegisterOutputType(KubeconfigKubeProxyOptionsOutput{})
	pulumi.RegisterOutputType(KubeconfigKubeSchedulerOptionsOutput{})
	pulumi.RegisterOutputType(KubeconfigWorkerOptionsOutput{})
	pulumi.RegisterOutputType(PodManifestOutput{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
}
