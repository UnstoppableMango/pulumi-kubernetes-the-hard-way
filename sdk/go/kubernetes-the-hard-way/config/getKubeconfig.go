// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
func GetKubeconfig(ctx *pulumi.Context, args *GetKubeconfigArgs, opts ...pulumi.InvokeOption) (*GetKubeconfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKubeconfigResult
	err := ctx.Invoke("kubernetes-the-hard-way:config:getKubeconfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetKubeconfigArgs struct {
	// Certificate authority data.
	CaPem string `pulumi:"caPem"`
	// The PEM encoded certificate data of the client.
	ClientCert string `pulumi:"clientCert"`
	// The PEM encoded private key data of the client.
	ClientKey string `pulumi:"clientKey"`
	// A name to identify the cluster.
	ClusterName string `pulumi:"clusterName"`
	// A name to use for the kubeconfig context
	ContextName *string `pulumi:"contextName"`
	// The address and port of the Kubernetes API server.
	Server string `pulumi:"server"`
	// The username of the user
	Username string `pulumi:"username"`
}

// https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
type GetKubeconfigResult struct {
	Result KubeconfigType `pulumi:"result"`
}

func GetKubeconfigOutput(ctx *pulumi.Context, args GetKubeconfigOutputArgs, opts ...pulumi.InvokeOption) GetKubeconfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetKubeconfigResult, error) {
			args := v.(GetKubeconfigArgs)
			r, err := GetKubeconfig(ctx, &args, opts...)
			var s GetKubeconfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetKubeconfigResultOutput)
}

type GetKubeconfigOutputArgs struct {
	// Certificate authority data.
	CaPem pulumi.StringInput `pulumi:"caPem"`
	// The PEM encoded certificate data of the client.
	ClientCert pulumi.StringInput `pulumi:"clientCert"`
	// The PEM encoded private key data of the client.
	ClientKey pulumi.StringInput `pulumi:"clientKey"`
	// A name to identify the cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// A name to use for the kubeconfig context
	ContextName pulumi.StringPtrInput `pulumi:"contextName"`
	// The address and port of the Kubernetes API server.
	Server pulumi.StringInput `pulumi:"server"`
	// The username of the user
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetKubeconfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubeconfigArgs)(nil)).Elem()
}

// https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
type GetKubeconfigResultOutput struct{ *pulumi.OutputState }

func (GetKubeconfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKubeconfigResult)(nil)).Elem()
}

func (o GetKubeconfigResultOutput) ToGetKubeconfigResultOutput() GetKubeconfigResultOutput {
	return o
}

func (o GetKubeconfigResultOutput) ToGetKubeconfigResultOutputWithContext(ctx context.Context) GetKubeconfigResultOutput {
	return o
}

func (o GetKubeconfigResultOutput) Result() KubeconfigTypeOutput {
	return o.ApplyT(func(v GetKubeconfigResult) KubeconfigType { return v.Result }).(KubeconfigTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(GetKubeconfigResultOutput{})
}
