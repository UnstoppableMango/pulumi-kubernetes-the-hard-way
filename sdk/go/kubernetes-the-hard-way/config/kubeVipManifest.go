// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Pseudo resource for generating the kube-vip manifest.
type KubeVipManifest struct {
	pulumi.ResourceState

	Result PodManifestOutput `pulumi:"result"`
}

// NewKubeVipManifest registers a new resource with the given unique name, arguments, and options.
func NewKubeVipManifest(ctx *pulumi.Context,
	name string, args *KubeVipManifestArgs, opts ...pulumi.ResourceOption) (*KubeVipManifest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.KubeconfigPath == nil {
		return nil, errors.New("invalid value for required argument 'KubeconfigPath'")
	}
	if args.VipCidr == nil {
		return nil, errors.New("invalid value for required argument 'VipCidr'")
	}
	if args.Port == nil {
		args.Port = pulumi.IntPtr(6443)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubeVipManifest
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:config:KubeVipManifest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type kubeVipManifestArgs struct {
	// TODO
	Address string `pulumi:"address"`
	// TODO
	BgpAs *int `pulumi:"bgpAs"`
	// TODO
	BgpEnable *bool `pulumi:"bgpEnable"`
	// TODO
	BgpPeerAddress *string `pulumi:"bgpPeerAddress"`
	// TODO
	BgpPeerAs *int `pulumi:"bgpPeerAs"`
	// TODO
	BgpPeerPass *string `pulumi:"bgpPeerPass"`
	// TODO
	BgpPeers *string `pulumi:"bgpPeers"`
	// TODO
	BgpRouterId *string `pulumi:"bgpRouterId"`
	// TODO
	CpEnable *bool `pulumi:"cpEnable"`
	// TODO
	CpNamespace *string `pulumi:"cpNamespace"`
	// Override the kube-vip image.
	Image *string `pulumi:"image"`
	// Path to the kubeconfig on the remote host.
	KubeconfigPath string `pulumi:"kubeconfigPath"`
	// TODO
	Port *int `pulumi:"port"`
	// TODO
	SvcEnable *bool `pulumi:"svcEnable"`
	// Version of kube-vip to use.
	Version *string `pulumi:"version"`
	// TODO
	VipArp *bool `pulumi:"vipArp"`
	// TODO
	VipCidr int `pulumi:"vipCidr"`
	// TODO
	VipDdns *bool `pulumi:"vipDdns"`
	// TODO
	VipInterface *string `pulumi:"vipInterface"`
	// TODO
	VipLeaderElection *bool `pulumi:"vipLeaderElection"`
	// TODO
	VipLeaseDuration *int `pulumi:"vipLeaseDuration"`
	// TODO
	VipRenewDeadline *int `pulumi:"vipRenewDeadline"`
	// TODO
	VipRetryPeriod *int `pulumi:"vipRetryPeriod"`
}

// The set of arguments for constructing a KubeVipManifest resource.
type KubeVipManifestArgs struct {
	// TODO
	Address pulumi.StringInput
	// TODO
	BgpAs pulumi.IntPtrInput
	// TODO
	BgpEnable pulumi.BoolPtrInput
	// TODO
	BgpPeerAddress pulumi.StringPtrInput
	// TODO
	BgpPeerAs pulumi.IntPtrInput
	// TODO
	BgpPeerPass pulumi.StringPtrInput
	// TODO
	BgpPeers pulumi.StringPtrInput
	// TODO
	BgpRouterId pulumi.StringPtrInput
	// TODO
	CpEnable pulumi.BoolPtrInput
	// TODO
	CpNamespace pulumi.StringPtrInput
	// Override the kube-vip image.
	Image pulumi.StringPtrInput
	// Path to the kubeconfig on the remote host.
	KubeconfigPath pulumi.StringInput
	// TODO
	Port pulumi.IntPtrInput
	// TODO
	SvcEnable pulumi.BoolPtrInput
	// Version of kube-vip to use.
	Version pulumi.StringPtrInput
	// TODO
	VipArp pulumi.BoolPtrInput
	// TODO
	VipCidr pulumi.IntInput
	// TODO
	VipDdns pulumi.BoolPtrInput
	// TODO
	VipInterface pulumi.StringPtrInput
	// TODO
	VipLeaderElection pulumi.BoolPtrInput
	// TODO
	VipLeaseDuration pulumi.IntPtrInput
	// TODO
	VipRenewDeadline pulumi.IntPtrInput
	// TODO
	VipRetryPeriod pulumi.IntPtrInput
}

func (KubeVipManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubeVipManifestArgs)(nil)).Elem()
}

type KubeVipManifestInput interface {
	pulumi.Input

	ToKubeVipManifestOutput() KubeVipManifestOutput
	ToKubeVipManifestOutputWithContext(ctx context.Context) KubeVipManifestOutput
}

func (*KubeVipManifest) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeVipManifest)(nil)).Elem()
}

func (i *KubeVipManifest) ToKubeVipManifestOutput() KubeVipManifestOutput {
	return i.ToKubeVipManifestOutputWithContext(context.Background())
}

func (i *KubeVipManifest) ToKubeVipManifestOutputWithContext(ctx context.Context) KubeVipManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeVipManifestOutput)
}

// KubeVipManifestArrayInput is an input type that accepts KubeVipManifestArray and KubeVipManifestArrayOutput values.
// You can construct a concrete instance of `KubeVipManifestArrayInput` via:
//
//	KubeVipManifestArray{ KubeVipManifestArgs{...} }
type KubeVipManifestArrayInput interface {
	pulumi.Input

	ToKubeVipManifestArrayOutput() KubeVipManifestArrayOutput
	ToKubeVipManifestArrayOutputWithContext(context.Context) KubeVipManifestArrayOutput
}

type KubeVipManifestArray []KubeVipManifestInput

func (KubeVipManifestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeVipManifest)(nil)).Elem()
}

func (i KubeVipManifestArray) ToKubeVipManifestArrayOutput() KubeVipManifestArrayOutput {
	return i.ToKubeVipManifestArrayOutputWithContext(context.Background())
}

func (i KubeVipManifestArray) ToKubeVipManifestArrayOutputWithContext(ctx context.Context) KubeVipManifestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeVipManifestArrayOutput)
}

// KubeVipManifestMapInput is an input type that accepts KubeVipManifestMap and KubeVipManifestMapOutput values.
// You can construct a concrete instance of `KubeVipManifestMapInput` via:
//
//	KubeVipManifestMap{ "key": KubeVipManifestArgs{...} }
type KubeVipManifestMapInput interface {
	pulumi.Input

	ToKubeVipManifestMapOutput() KubeVipManifestMapOutput
	ToKubeVipManifestMapOutputWithContext(context.Context) KubeVipManifestMapOutput
}

type KubeVipManifestMap map[string]KubeVipManifestInput

func (KubeVipManifestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeVipManifest)(nil)).Elem()
}

func (i KubeVipManifestMap) ToKubeVipManifestMapOutput() KubeVipManifestMapOutput {
	return i.ToKubeVipManifestMapOutputWithContext(context.Background())
}

func (i KubeVipManifestMap) ToKubeVipManifestMapOutputWithContext(ctx context.Context) KubeVipManifestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeVipManifestMapOutput)
}

type KubeVipManifestOutput struct{ *pulumi.OutputState }

func (KubeVipManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeVipManifest)(nil)).Elem()
}

func (o KubeVipManifestOutput) ToKubeVipManifestOutput() KubeVipManifestOutput {
	return o
}

func (o KubeVipManifestOutput) ToKubeVipManifestOutputWithContext(ctx context.Context) KubeVipManifestOutput {
	return o
}

func (o KubeVipManifestOutput) Result() PodManifestOutput {
	return o.ApplyT(func(v *KubeVipManifest) PodManifestOutput { return v.Result }).(PodManifestOutput)
}

type KubeVipManifestArrayOutput struct{ *pulumi.OutputState }

func (KubeVipManifestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeVipManifest)(nil)).Elem()
}

func (o KubeVipManifestArrayOutput) ToKubeVipManifestArrayOutput() KubeVipManifestArrayOutput {
	return o
}

func (o KubeVipManifestArrayOutput) ToKubeVipManifestArrayOutputWithContext(ctx context.Context) KubeVipManifestArrayOutput {
	return o
}

func (o KubeVipManifestArrayOutput) Index(i pulumi.IntInput) KubeVipManifestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubeVipManifest {
		return vs[0].([]*KubeVipManifest)[vs[1].(int)]
	}).(KubeVipManifestOutput)
}

type KubeVipManifestMapOutput struct{ *pulumi.OutputState }

func (KubeVipManifestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeVipManifest)(nil)).Elem()
}

func (o KubeVipManifestMapOutput) ToKubeVipManifestMapOutput() KubeVipManifestMapOutput {
	return o
}

func (o KubeVipManifestMapOutput) ToKubeVipManifestMapOutputWithContext(ctx context.Context) KubeVipManifestMapOutput {
	return o
}

func (o KubeVipManifestMapOutput) MapIndex(k pulumi.StringInput) KubeVipManifestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubeVipManifest {
		return vs[0].(map[string]*KubeVipManifest)[vs[1].(string)]
	}).(KubeVipManifestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubeVipManifestInput)(nil)).Elem(), &KubeVipManifest{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeVipManifestArrayInput)(nil)).Elem(), KubeVipManifestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeVipManifestMapInput)(nil)).Elem(), KubeVipManifestMap{})
	pulumi.RegisterOutputType(KubeVipManifestOutput{})
	pulumi.RegisterOutputType(KubeVipManifestArrayOutput{})
	pulumi.RegisterOutputType(KubeVipManifestMapOutput{})
}
