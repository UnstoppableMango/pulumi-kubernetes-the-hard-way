// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Get the `bridge` configuration.
type CniBridgePluginConfiguration struct {
	pulumi.ResourceState

	Result CniBridgePluginConfigurationTypeOutput `pulumi:"result"`
	// The yaml representation of the manifest.
	Yaml pulumi.StringOutput `pulumi:"yaml"`
}

// NewCniBridgePluginConfiguration registers a new resource with the given unique name, arguments, and options.
func NewCniBridgePluginConfiguration(ctx *pulumi.Context,
	name string, args *CniBridgePluginConfigurationArgs, opts ...pulumi.ResourceOption) (*CniBridgePluginConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CniBridgePluginConfiguration
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:config:CniBridgePluginConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type cniBridgePluginConfigurationArgs struct {
	// Bridge name.
	Bridge *string `pulumi:"bridge"`
	// CNI version.
	CniVersion *string `pulumi:"cniVersion"`
	// IP masq.
	IpMasq *bool `pulumi:"ipMasq"`
	// IPAM
	Ipam *CniBridgeIpam `pulumi:"ipam"`
	// Is gateway.
	IsGateway *bool `pulumi:"isGateway"`
	// CNI plugin name.
	Name *string `pulumi:"name"`
	// The subnet to use.
	Subnet string `pulumi:"subnet"`
	// CNI plugin type.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a CniBridgePluginConfiguration resource.
type CniBridgePluginConfigurationArgs struct {
	// Bridge name.
	Bridge pulumi.StringPtrInput
	// CNI version.
	CniVersion pulumi.StringPtrInput
	// IP masq.
	IpMasq pulumi.BoolPtrInput
	// IPAM
	Ipam CniBridgeIpamPtrInput
	// Is gateway.
	IsGateway pulumi.BoolPtrInput
	// CNI plugin name.
	Name pulumi.StringPtrInput
	// The subnet to use.
	Subnet pulumi.StringInput
	// CNI plugin type.
	Type pulumi.StringPtrInput
}

func (CniBridgePluginConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cniBridgePluginConfigurationArgs)(nil)).Elem()
}

type CniBridgePluginConfigurationInput interface {
	pulumi.Input

	ToCniBridgePluginConfigurationOutput() CniBridgePluginConfigurationOutput
	ToCniBridgePluginConfigurationOutputWithContext(ctx context.Context) CniBridgePluginConfigurationOutput
}

func (*CniBridgePluginConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**CniBridgePluginConfiguration)(nil)).Elem()
}

func (i *CniBridgePluginConfiguration) ToCniBridgePluginConfigurationOutput() CniBridgePluginConfigurationOutput {
	return i.ToCniBridgePluginConfigurationOutputWithContext(context.Background())
}

func (i *CniBridgePluginConfiguration) ToCniBridgePluginConfigurationOutputWithContext(ctx context.Context) CniBridgePluginConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBridgePluginConfigurationOutput)
}

// CniBridgePluginConfigurationArrayInput is an input type that accepts CniBridgePluginConfigurationArray and CniBridgePluginConfigurationArrayOutput values.
// You can construct a concrete instance of `CniBridgePluginConfigurationArrayInput` via:
//
//	CniBridgePluginConfigurationArray{ CniBridgePluginConfigurationArgs{...} }
type CniBridgePluginConfigurationArrayInput interface {
	pulumi.Input

	ToCniBridgePluginConfigurationArrayOutput() CniBridgePluginConfigurationArrayOutput
	ToCniBridgePluginConfigurationArrayOutputWithContext(context.Context) CniBridgePluginConfigurationArrayOutput
}

type CniBridgePluginConfigurationArray []CniBridgePluginConfigurationInput

func (CniBridgePluginConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CniBridgePluginConfiguration)(nil)).Elem()
}

func (i CniBridgePluginConfigurationArray) ToCniBridgePluginConfigurationArrayOutput() CniBridgePluginConfigurationArrayOutput {
	return i.ToCniBridgePluginConfigurationArrayOutputWithContext(context.Background())
}

func (i CniBridgePluginConfigurationArray) ToCniBridgePluginConfigurationArrayOutputWithContext(ctx context.Context) CniBridgePluginConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBridgePluginConfigurationArrayOutput)
}

// CniBridgePluginConfigurationMapInput is an input type that accepts CniBridgePluginConfigurationMap and CniBridgePluginConfigurationMapOutput values.
// You can construct a concrete instance of `CniBridgePluginConfigurationMapInput` via:
//
//	CniBridgePluginConfigurationMap{ "key": CniBridgePluginConfigurationArgs{...} }
type CniBridgePluginConfigurationMapInput interface {
	pulumi.Input

	ToCniBridgePluginConfigurationMapOutput() CniBridgePluginConfigurationMapOutput
	ToCniBridgePluginConfigurationMapOutputWithContext(context.Context) CniBridgePluginConfigurationMapOutput
}

type CniBridgePluginConfigurationMap map[string]CniBridgePluginConfigurationInput

func (CniBridgePluginConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CniBridgePluginConfiguration)(nil)).Elem()
}

func (i CniBridgePluginConfigurationMap) ToCniBridgePluginConfigurationMapOutput() CniBridgePluginConfigurationMapOutput {
	return i.ToCniBridgePluginConfigurationMapOutputWithContext(context.Background())
}

func (i CniBridgePluginConfigurationMap) ToCniBridgePluginConfigurationMapOutputWithContext(ctx context.Context) CniBridgePluginConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBridgePluginConfigurationMapOutput)
}

type CniBridgePluginConfigurationOutput struct{ *pulumi.OutputState }

func (CniBridgePluginConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CniBridgePluginConfiguration)(nil)).Elem()
}

func (o CniBridgePluginConfigurationOutput) ToCniBridgePluginConfigurationOutput() CniBridgePluginConfigurationOutput {
	return o
}

func (o CniBridgePluginConfigurationOutput) ToCniBridgePluginConfigurationOutputWithContext(ctx context.Context) CniBridgePluginConfigurationOutput {
	return o
}

func (o CniBridgePluginConfigurationOutput) Result() CniBridgePluginConfigurationTypeOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) CniBridgePluginConfigurationTypeOutput { return v.Result }).(CniBridgePluginConfigurationTypeOutput)
}

// The yaml representation of the manifest.
func (o CniBridgePluginConfigurationOutput) Yaml() pulumi.StringOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) pulumi.StringOutput { return v.Yaml }).(pulumi.StringOutput)
}

type CniBridgePluginConfigurationArrayOutput struct{ *pulumi.OutputState }

func (CniBridgePluginConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CniBridgePluginConfiguration)(nil)).Elem()
}

func (o CniBridgePluginConfigurationArrayOutput) ToCniBridgePluginConfigurationArrayOutput() CniBridgePluginConfigurationArrayOutput {
	return o
}

func (o CniBridgePluginConfigurationArrayOutput) ToCniBridgePluginConfigurationArrayOutputWithContext(ctx context.Context) CniBridgePluginConfigurationArrayOutput {
	return o
}

func (o CniBridgePluginConfigurationArrayOutput) Index(i pulumi.IntInput) CniBridgePluginConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CniBridgePluginConfiguration {
		return vs[0].([]*CniBridgePluginConfiguration)[vs[1].(int)]
	}).(CniBridgePluginConfigurationOutput)
}

type CniBridgePluginConfigurationMapOutput struct{ *pulumi.OutputState }

func (CniBridgePluginConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CniBridgePluginConfiguration)(nil)).Elem()
}

func (o CniBridgePluginConfigurationMapOutput) ToCniBridgePluginConfigurationMapOutput() CniBridgePluginConfigurationMapOutput {
	return o
}

func (o CniBridgePluginConfigurationMapOutput) ToCniBridgePluginConfigurationMapOutputWithContext(ctx context.Context) CniBridgePluginConfigurationMapOutput {
	return o
}

func (o CniBridgePluginConfigurationMapOutput) MapIndex(k pulumi.StringInput) CniBridgePluginConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CniBridgePluginConfiguration {
		return vs[0].(map[string]*CniBridgePluginConfiguration)[vs[1].(string)]
	}).(CniBridgePluginConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CniBridgePluginConfigurationInput)(nil)).Elem(), &CniBridgePluginConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*CniBridgePluginConfigurationArrayInput)(nil)).Elem(), CniBridgePluginConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CniBridgePluginConfigurationMapInput)(nil)).Elem(), CniBridgePluginConfigurationMap{})
	pulumi.RegisterOutputType(CniBridgePluginConfigurationOutput{})
	pulumi.RegisterOutputType(CniBridgePluginConfigurationArrayOutput{})
	pulumi.RegisterOutputType(CniBridgePluginConfigurationMapOutput{})
}
