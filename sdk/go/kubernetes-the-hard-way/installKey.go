// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetesthehardway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Creates a RemoteFile resource representing the copy operation.
func InstallKey(ctx *pulumi.Context, args *InstallKeyArgs, opts ...pulumi.InvokeOption) (*InstallKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv InstallKeyResult
	err := ctx.Invoke("kubernetes-the-hard-way:index:installKey", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type InstallKeyArgs struct {
	// The certificate to install.
	Cert *Certificate `pulumi:"cert"`
	// The connection details.
	Connection Connection       `pulumi:"connection"`
	Name       string           `pulumi:"name"`
	Opts       *ResourceOptions `pulumi:"opts"`
	// The path to install to.
	Path *string `pulumi:"path"`
}

// Defaults sets the appropriate defaults for InstallKeyArgs
func (val *InstallKeyArgs) Defaults() *InstallKeyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Connection = *tmp.Connection.Defaults()

	return &tmp
}

type InstallKeyResult struct {
	Result *RemoteFile `pulumi:"result"`
}

func InstallKeyOutput(ctx *pulumi.Context, args InstallKeyOutputArgs, opts ...pulumi.InvokeOption) InstallKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (InstallKeyResult, error) {
			args := v.(InstallKeyArgs)
			r, err := InstallKey(ctx, &args, opts...)
			var s InstallKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(InstallKeyResultOutput)
}

type InstallKeyOutputArgs struct {
	// The certificate to install.
	Cert CertificateInput `pulumi:"cert"`
	// The connection details.
	Connection ConnectionInput      `pulumi:"connection"`
	Name       string               `pulumi:"name"`
	Opts       *ResourceOptionsArgs `pulumi:"opts"`
	// The path to install to.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (InstallKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallKeyArgs)(nil)).Elem()
}

type InstallKeyResultOutput struct{ *pulumi.OutputState }

func (InstallKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallKeyResult)(nil)).Elem()
}

func (o InstallKeyResultOutput) ToInstallKeyResultOutput() InstallKeyResultOutput {
	return o
}

func (o InstallKeyResultOutput) ToInstallKeyResultOutputWithContext(ctx context.Context) InstallKeyResultOutput {
	return o
}

func (o InstallKeyResultOutput) Result() RemoteFileOutput {
	return o.ApplyT(func(v InstallKeyResult) *RemoteFile { return v.Result }).(RemoteFileOutput)
}

func init() {
	pulumi.RegisterOutputType(InstallKeyResultOutput{})
}
