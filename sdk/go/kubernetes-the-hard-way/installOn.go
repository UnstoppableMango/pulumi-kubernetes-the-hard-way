// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetesthehardway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

func InstallOn(ctx *pulumi.Context, args *InstallOnArgs, opts ...pulumi.InvokeOption) (*InstallOnResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv InstallOnResult
	err := ctx.Invoke("kubernetes-the-hard-way:index:installOn", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type InstallOnArgs struct {
	Connection *remote.Connection `pulumi:"connection"`
}

// Defaults sets the appropriate defaults for InstallOnArgs
func (val *InstallOnArgs) Defaults() *InstallOnArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Connection = tmp.Connection.Defaults()

	return &tmp
}

type InstallOnResult struct {
	File *string `pulumi:"file"`
}

func InstallOnOutput(ctx *pulumi.Context, args InstallOnOutputArgs, opts ...pulumi.InvokeOption) InstallOnResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (InstallOnResult, error) {
			args := v.(InstallOnArgs)
			r, err := InstallOn(ctx, &args, opts...)
			var s InstallOnResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(InstallOnResultOutput)
}

type InstallOnOutputArgs struct {
	Connection *remote.ConnectionInput `pulumi:"connection"`
}

func (InstallOnOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallOnArgs)(nil)).Elem()
}

type InstallOnResultOutput struct{ *pulumi.OutputState }

func (InstallOnResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallOnResult)(nil)).Elem()
}

func (o InstallOnResultOutput) ToInstallOnResultOutput() InstallOnResultOutput {
	return o
}

func (o InstallOnResultOutput) ToInstallOnResultOutputWithContext(ctx context.Context) InstallOnResultOutput {
	return o
}

func (o InstallOnResultOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstallOnResult) *string { return v.File }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(InstallOnResultOutput{})
}
