// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetesthehardway

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/remote"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tools"
)

// Represents an etcd binary on a remote system.
type Etcd struct {
	pulumi.ResourceState

	// The etcd CPU architecture.
	Architecture ArchitectureOutput `pulumi:"architecture"`
	// The etcd download operation.
	Download remote.DownloadOutput `pulumi:"download"`
	// The directory where the etcd binary was downloaded to.
	DownloadDirectory pulumi.StringOutput `pulumi:"downloadDirectory"`
	// The name of the etcd binary file.
	Filename pulumi.StringOutput `pulumi:"filename"`
	// Directory to install the `etcd` and `etcdctl` binaries.
	InstallDirectory pulumi.StringOutput `pulumi:"installDirectory"`
	// The tar operation.
	Tar tools.TarOutput `pulumi:"tar"`
	// The url used to download etcd.
	Url pulumi.StringOutput `pulumi:"url"`
	// The version of etcd downloaded.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewEtcd registers a new resource with the given unique name, arguments, and options.
func NewEtcd(ctx *pulumi.Context,
	name string, args *EtcdArgs, opts ...pulumi.ResourceOption) (*Etcd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	if args.InstallDirectory == nil {
		args.InstallDirectory = pulumi.StringPtr("/usr/local/bin")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Etcd
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:index:Etcd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type etcdArgs struct {
	// The etcd CPU architecture.
	Architecture *Architecture `pulumi:"architecture"`
	// The connection details.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// Temporary directory to download files to. Defaults to `/tmp/<random string>`.
	DownloadDirectory *string `pulumi:"downloadDirectory"`
	// Directory to install the `etcd` and `etcdctl` binaries.
	InstallDirectory *string `pulumi:"installDirectory"`
	// The version of etcd to install.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Etcd resource.
type EtcdArgs struct {
	// The etcd CPU architecture.
	Architecture ArchitecturePtrInput
	// The connection details.
	Connection pulumiCommand.ConnectionInput
	// Temporary directory to download files to. Defaults to `/tmp/<random string>`.
	DownloadDirectory pulumi.StringPtrInput
	// Directory to install the `etcd` and `etcdctl` binaries.
	InstallDirectory pulumi.StringPtrInput
	// The version of etcd to install.
	Version pulumi.StringPtrInput
}

func (EtcdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*etcdArgs)(nil)).Elem()
}

type EtcdInput interface {
	pulumi.Input

	ToEtcdOutput() EtcdOutput
	ToEtcdOutputWithContext(ctx context.Context) EtcdOutput
}

func (*Etcd) ElementType() reflect.Type {
	return reflect.TypeOf((**Etcd)(nil)).Elem()
}

func (i *Etcd) ToEtcdOutput() EtcdOutput {
	return i.ToEtcdOutputWithContext(context.Background())
}

func (i *Etcd) ToEtcdOutputWithContext(ctx context.Context) EtcdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdOutput)
}

// EtcdArrayInput is an input type that accepts EtcdArray and EtcdArrayOutput values.
// You can construct a concrete instance of `EtcdArrayInput` via:
//
//	EtcdArray{ EtcdArgs{...} }
type EtcdArrayInput interface {
	pulumi.Input

	ToEtcdArrayOutput() EtcdArrayOutput
	ToEtcdArrayOutputWithContext(context.Context) EtcdArrayOutput
}

type EtcdArray []EtcdInput

func (EtcdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Etcd)(nil)).Elem()
}

func (i EtcdArray) ToEtcdArrayOutput() EtcdArrayOutput {
	return i.ToEtcdArrayOutputWithContext(context.Background())
}

func (i EtcdArray) ToEtcdArrayOutputWithContext(ctx context.Context) EtcdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdArrayOutput)
}

// EtcdMapInput is an input type that accepts EtcdMap and EtcdMapOutput values.
// You can construct a concrete instance of `EtcdMapInput` via:
//
//	EtcdMap{ "key": EtcdArgs{...} }
type EtcdMapInput interface {
	pulumi.Input

	ToEtcdMapOutput() EtcdMapOutput
	ToEtcdMapOutputWithContext(context.Context) EtcdMapOutput
}

type EtcdMap map[string]EtcdInput

func (EtcdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Etcd)(nil)).Elem()
}

func (i EtcdMap) ToEtcdMapOutput() EtcdMapOutput {
	return i.ToEtcdMapOutputWithContext(context.Background())
}

func (i EtcdMap) ToEtcdMapOutputWithContext(ctx context.Context) EtcdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdMapOutput)
}

type EtcdOutput struct{ *pulumi.OutputState }

func (EtcdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Etcd)(nil)).Elem()
}

func (o EtcdOutput) ToEtcdOutput() EtcdOutput {
	return o
}

func (o EtcdOutput) ToEtcdOutputWithContext(ctx context.Context) EtcdOutput {
	return o
}

// The etcd CPU architecture.
func (o EtcdOutput) Architecture() ArchitectureOutput {
	return o.ApplyT(func(v *Etcd) ArchitectureOutput { return v.Architecture }).(ArchitectureOutput)
}

// The etcd download operation.
func (o EtcdOutput) Download() remote.DownloadOutput {
	return o.ApplyT(func(v *Etcd) remote.DownloadOutput { return v.Download }).(remote.DownloadOutput)
}

// The directory where the etcd binary was downloaded to.
func (o EtcdOutput) DownloadDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *Etcd) pulumi.StringOutput { return v.DownloadDirectory }).(pulumi.StringOutput)
}

// The name of the etcd binary file.
func (o EtcdOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v *Etcd) pulumi.StringOutput { return v.Filename }).(pulumi.StringOutput)
}

// Directory to install the `etcd` and `etcdctl` binaries.
func (o EtcdOutput) InstallDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *Etcd) pulumi.StringOutput { return v.InstallDirectory }).(pulumi.StringOutput)
}

// The tar operation.
func (o EtcdOutput) Tar() tools.TarOutput {
	return o.ApplyT(func(v *Etcd) tools.TarOutput { return v.Tar }).(tools.TarOutput)
}

// The url used to download etcd.
func (o EtcdOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Etcd) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The version of etcd downloaded.
func (o EtcdOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Etcd) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type EtcdArrayOutput struct{ *pulumi.OutputState }

func (EtcdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Etcd)(nil)).Elem()
}

func (o EtcdArrayOutput) ToEtcdArrayOutput() EtcdArrayOutput {
	return o
}

func (o EtcdArrayOutput) ToEtcdArrayOutputWithContext(ctx context.Context) EtcdArrayOutput {
	return o
}

func (o EtcdArrayOutput) Index(i pulumi.IntInput) EtcdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Etcd {
		return vs[0].([]*Etcd)[vs[1].(int)]
	}).(EtcdOutput)
}

type EtcdMapOutput struct{ *pulumi.OutputState }

func (EtcdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Etcd)(nil)).Elem()
}

func (o EtcdMapOutput) ToEtcdMapOutput() EtcdMapOutput {
	return o
}

func (o EtcdMapOutput) ToEtcdMapOutputWithContext(ctx context.Context) EtcdMapOutput {
	return o
}

func (o EtcdMapOutput) MapIndex(k pulumi.StringInput) EtcdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Etcd {
		return vs[0].(map[string]*Etcd)[vs[1].(string)]
	}).(EtcdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdInput)(nil)).Elem(), &Etcd{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdArrayInput)(nil)).Elem(), EtcdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdMapInput)(nil)).Elem(), EtcdMap{})
	pulumi.RegisterOutputType(EtcdOutput{})
	pulumi.RegisterOutputType(EtcdArrayOutput{})
	pulumi.RegisterOutputType(EtcdMapOutput{})
}
