// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tools"
)

// Starts `containerd` on a remote system
type StartContainerd struct {
	pulumi.ResourceState

	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The daemon-reload command.
	DaemonReload tools.SystemctlOutput `pulumi:"daemonReload"`
	// The enable command.
	Enable tools.SystemctlOutput `pulumi:"enable"`
	// The start command.
	Start tools.SystemctlOutput `pulumi:"start"`
}

// NewStartContainerd registers a new resource with the given unique name, arguments, and options.
func NewStartContainerd(ctx *pulumi.Context,
	name string, args *StartContainerdArgs, opts ...pulumi.ResourceOption) (*StartContainerd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StartContainerd
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:StartContainerd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type startContainerdArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
}

// The set of arguments for constructing a StartContainerd resource.
type StartContainerdArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
}

func (StartContainerdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*startContainerdArgs)(nil)).Elem()
}

type StartContainerdInput interface {
	pulumi.Input

	ToStartContainerdOutput() StartContainerdOutput
	ToStartContainerdOutputWithContext(ctx context.Context) StartContainerdOutput
}

func (*StartContainerd) ElementType() reflect.Type {
	return reflect.TypeOf((**StartContainerd)(nil)).Elem()
}

func (i *StartContainerd) ToStartContainerdOutput() StartContainerdOutput {
	return i.ToStartContainerdOutputWithContext(context.Background())
}

func (i *StartContainerd) ToStartContainerdOutputWithContext(ctx context.Context) StartContainerdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartContainerdOutput)
}

// StartContainerdArrayInput is an input type that accepts StartContainerdArray and StartContainerdArrayOutput values.
// You can construct a concrete instance of `StartContainerdArrayInput` via:
//
//	StartContainerdArray{ StartContainerdArgs{...} }
type StartContainerdArrayInput interface {
	pulumi.Input

	ToStartContainerdArrayOutput() StartContainerdArrayOutput
	ToStartContainerdArrayOutputWithContext(context.Context) StartContainerdArrayOutput
}

type StartContainerdArray []StartContainerdInput

func (StartContainerdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartContainerd)(nil)).Elem()
}

func (i StartContainerdArray) ToStartContainerdArrayOutput() StartContainerdArrayOutput {
	return i.ToStartContainerdArrayOutputWithContext(context.Background())
}

func (i StartContainerdArray) ToStartContainerdArrayOutputWithContext(ctx context.Context) StartContainerdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartContainerdArrayOutput)
}

// StartContainerdMapInput is an input type that accepts StartContainerdMap and StartContainerdMapOutput values.
// You can construct a concrete instance of `StartContainerdMapInput` via:
//
//	StartContainerdMap{ "key": StartContainerdArgs{...} }
type StartContainerdMapInput interface {
	pulumi.Input

	ToStartContainerdMapOutput() StartContainerdMapOutput
	ToStartContainerdMapOutputWithContext(context.Context) StartContainerdMapOutput
}

type StartContainerdMap map[string]StartContainerdInput

func (StartContainerdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartContainerd)(nil)).Elem()
}

func (i StartContainerdMap) ToStartContainerdMapOutput() StartContainerdMapOutput {
	return i.ToStartContainerdMapOutputWithContext(context.Background())
}

func (i StartContainerdMap) ToStartContainerdMapOutputWithContext(ctx context.Context) StartContainerdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartContainerdMapOutput)
}

type StartContainerdOutput struct{ *pulumi.OutputState }

func (StartContainerdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartContainerd)(nil)).Elem()
}

func (o StartContainerdOutput) ToStartContainerdOutput() StartContainerdOutput {
	return o
}

func (o StartContainerdOutput) ToStartContainerdOutputWithContext(ctx context.Context) StartContainerdOutput {
	return o
}

// The parameters with which to connect to the remote host.
func (o StartContainerdOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *StartContainerd) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The daemon-reload command.
func (o StartContainerdOutput) DaemonReload() tools.SystemctlOutput {
	return o.ApplyT(func(v *StartContainerd) tools.SystemctlOutput { return v.DaemonReload }).(tools.SystemctlOutput)
}

// The enable command.
func (o StartContainerdOutput) Enable() tools.SystemctlOutput {
	return o.ApplyT(func(v *StartContainerd) tools.SystemctlOutput { return v.Enable }).(tools.SystemctlOutput)
}

// The start command.
func (o StartContainerdOutput) Start() tools.SystemctlOutput {
	return o.ApplyT(func(v *StartContainerd) tools.SystemctlOutput { return v.Start }).(tools.SystemctlOutput)
}

type StartContainerdArrayOutput struct{ *pulumi.OutputState }

func (StartContainerdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartContainerd)(nil)).Elem()
}

func (o StartContainerdArrayOutput) ToStartContainerdArrayOutput() StartContainerdArrayOutput {
	return o
}

func (o StartContainerdArrayOutput) ToStartContainerdArrayOutputWithContext(ctx context.Context) StartContainerdArrayOutput {
	return o
}

func (o StartContainerdArrayOutput) Index(i pulumi.IntInput) StartContainerdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StartContainerd {
		return vs[0].([]*StartContainerd)[vs[1].(int)]
	}).(StartContainerdOutput)
}

type StartContainerdMapOutput struct{ *pulumi.OutputState }

func (StartContainerdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartContainerd)(nil)).Elem()
}

func (o StartContainerdMapOutput) ToStartContainerdMapOutput() StartContainerdMapOutput {
	return o
}

func (o StartContainerdMapOutput) ToStartContainerdMapOutputWithContext(ctx context.Context) StartContainerdMapOutput {
	return o
}

func (o StartContainerdMapOutput) MapIndex(k pulumi.StringInput) StartContainerdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StartContainerd {
		return vs[0].(map[string]*StartContainerd)[vs[1].(string)]
	}).(StartContainerdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StartContainerdInput)(nil)).Elem(), &StartContainerd{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartContainerdArrayInput)(nil)).Elem(), StartContainerdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartContainerdMapInput)(nil)).Elem(), StartContainerdMap{})
	pulumi.RegisterOutputType(StartContainerdOutput{})
	pulumi.RegisterOutputType(StartContainerdArrayOutput{})
	pulumi.RegisterOutputType(StartContainerdMapOutput{})
}
