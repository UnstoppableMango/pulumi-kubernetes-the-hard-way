// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tools"
)

// Installs runc on a remote system.
type RuncInstall struct {
	pulumi.ResourceState

	// The CPU architecture to install.
	Architecture ArchitectureOutput `pulumi:"architecture"`
	// The name of the installed binary.
	BinName pulumi.StringPtrOutput `pulumi:"binName"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The directory to install the binary to.
	Directory pulumi.StringOutput `pulumi:"directory"`
	// The download operation.
	Download DownloadOutput `pulumi:"download"`
	// The mkdir operation.
	Mkdir tools.MkdirOutput `pulumi:"mkdir"`
	// The mktemp operation.
	Mktemp tools.MktempOutput `pulumi:"mktemp"`
	// The mv operation.
	Mv tools.MvOutput `pulumi:"mv"`
	// The path to the installed binary.
	Path pulumi.StringOutput `pulumi:"path"`
	// The rm operation.
	Rm tools.RmOutput `pulumi:"rm"`
	// The url used to download the binary.
	Url pulumi.StringOutput `pulumi:"url"`
	// The version to install.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewRuncInstall registers a new resource with the given unique name, arguments, and options.
func NewRuncInstall(ctx *pulumi.Context,
	name string, args *RuncInstallArgs, opts ...pulumi.ResourceOption) (*RuncInstall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	if args.Directory == nil {
		args.Directory = pulumi.StringPtr("/usr/local/bin")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuncInstall
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:RuncInstall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type runcInstallArgs struct {
	// The CPU architecture to install.
	Architecture *Architecture `pulumi:"architecture"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The directory to install the binary to.
	Directory *string `pulumi:"directory"`
	// The version to install.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a RuncInstall resource.
type RuncInstallArgs struct {
	// The CPU architecture to install.
	Architecture ArchitecturePtrInput
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
	// The directory to install the binary to.
	Directory pulumi.StringPtrInput
	// The version to install.
	Version pulumi.StringPtrInput
}

func (RuncInstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runcInstallArgs)(nil)).Elem()
}

type RuncInstallInput interface {
	pulumi.Input

	ToRuncInstallOutput() RuncInstallOutput
	ToRuncInstallOutputWithContext(ctx context.Context) RuncInstallOutput
}

func (*RuncInstall) ElementType() reflect.Type {
	return reflect.TypeOf((**RuncInstall)(nil)).Elem()
}

func (i *RuncInstall) ToRuncInstallOutput() RuncInstallOutput {
	return i.ToRuncInstallOutputWithContext(context.Background())
}

func (i *RuncInstall) ToRuncInstallOutputWithContext(ctx context.Context) RuncInstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuncInstallOutput)
}

// RuncInstallArrayInput is an input type that accepts RuncInstallArray and RuncInstallArrayOutput values.
// You can construct a concrete instance of `RuncInstallArrayInput` via:
//
//	RuncInstallArray{ RuncInstallArgs{...} }
type RuncInstallArrayInput interface {
	pulumi.Input

	ToRuncInstallArrayOutput() RuncInstallArrayOutput
	ToRuncInstallArrayOutputWithContext(context.Context) RuncInstallArrayOutput
}

type RuncInstallArray []RuncInstallInput

func (RuncInstallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuncInstall)(nil)).Elem()
}

func (i RuncInstallArray) ToRuncInstallArrayOutput() RuncInstallArrayOutput {
	return i.ToRuncInstallArrayOutputWithContext(context.Background())
}

func (i RuncInstallArray) ToRuncInstallArrayOutputWithContext(ctx context.Context) RuncInstallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuncInstallArrayOutput)
}

// RuncInstallMapInput is an input type that accepts RuncInstallMap and RuncInstallMapOutput values.
// You can construct a concrete instance of `RuncInstallMapInput` via:
//
//	RuncInstallMap{ "key": RuncInstallArgs{...} }
type RuncInstallMapInput interface {
	pulumi.Input

	ToRuncInstallMapOutput() RuncInstallMapOutput
	ToRuncInstallMapOutputWithContext(context.Context) RuncInstallMapOutput
}

type RuncInstallMap map[string]RuncInstallInput

func (RuncInstallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuncInstall)(nil)).Elem()
}

func (i RuncInstallMap) ToRuncInstallMapOutput() RuncInstallMapOutput {
	return i.ToRuncInstallMapOutputWithContext(context.Background())
}

func (i RuncInstallMap) ToRuncInstallMapOutputWithContext(ctx context.Context) RuncInstallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuncInstallMapOutput)
}

type RuncInstallOutput struct{ *pulumi.OutputState }

func (RuncInstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuncInstall)(nil)).Elem()
}

func (o RuncInstallOutput) ToRuncInstallOutput() RuncInstallOutput {
	return o
}

func (o RuncInstallOutput) ToRuncInstallOutputWithContext(ctx context.Context) RuncInstallOutput {
	return o
}

// The CPU architecture to install.
func (o RuncInstallOutput) Architecture() ArchitectureOutput {
	return o.ApplyT(func(v *RuncInstall) ArchitectureOutput { return v.Architecture }).(ArchitectureOutput)
}

// The name of the installed binary.
func (o RuncInstallOutput) BinName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuncInstall) pulumi.StringPtrOutput { return v.BinName }).(pulumi.StringPtrOutput)
}

// The parameters with which to connect to the remote host.
func (o RuncInstallOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *RuncInstall) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The directory to install the binary to.
func (o RuncInstallOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v *RuncInstall) pulumi.StringOutput { return v.Directory }).(pulumi.StringOutput)
}

// The download operation.
func (o RuncInstallOutput) Download() DownloadOutput {
	return o.ApplyT(func(v *RuncInstall) DownloadOutput { return v.Download }).(DownloadOutput)
}

// The mkdir operation.
func (o RuncInstallOutput) Mkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *RuncInstall) tools.MkdirOutput { return v.Mkdir }).(tools.MkdirOutput)
}

// The mktemp operation.
func (o RuncInstallOutput) Mktemp() tools.MktempOutput {
	return o.ApplyT(func(v *RuncInstall) tools.MktempOutput { return v.Mktemp }).(tools.MktempOutput)
}

// The mv operation.
func (o RuncInstallOutput) Mv() tools.MvOutput {
	return o.ApplyT(func(v *RuncInstall) tools.MvOutput { return v.Mv }).(tools.MvOutput)
}

// The path to the installed binary.
func (o RuncInstallOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *RuncInstall) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The rm operation.
func (o RuncInstallOutput) Rm() tools.RmOutput {
	return o.ApplyT(func(v *RuncInstall) tools.RmOutput { return v.Rm }).(tools.RmOutput)
}

// The url used to download the binary.
func (o RuncInstallOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *RuncInstall) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The version to install.
func (o RuncInstallOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *RuncInstall) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type RuncInstallArrayOutput struct{ *pulumi.OutputState }

func (RuncInstallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuncInstall)(nil)).Elem()
}

func (o RuncInstallArrayOutput) ToRuncInstallArrayOutput() RuncInstallArrayOutput {
	return o
}

func (o RuncInstallArrayOutput) ToRuncInstallArrayOutputWithContext(ctx context.Context) RuncInstallArrayOutput {
	return o
}

func (o RuncInstallArrayOutput) Index(i pulumi.IntInput) RuncInstallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuncInstall {
		return vs[0].([]*RuncInstall)[vs[1].(int)]
	}).(RuncInstallOutput)
}

type RuncInstallMapOutput struct{ *pulumi.OutputState }

func (RuncInstallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuncInstall)(nil)).Elem()
}

func (o RuncInstallMapOutput) ToRuncInstallMapOutput() RuncInstallMapOutput {
	return o
}

func (o RuncInstallMapOutput) ToRuncInstallMapOutputWithContext(ctx context.Context) RuncInstallMapOutput {
	return o
}

func (o RuncInstallMapOutput) MapIndex(k pulumi.StringInput) RuncInstallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuncInstall {
		return vs[0].(map[string]*RuncInstall)[vs[1].(string)]
	}).(RuncInstallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuncInstallInput)(nil)).Elem(), &RuncInstall{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuncInstallArrayInput)(nil)).Elem(), RuncInstallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuncInstallMapInput)(nil)).Elem(), RuncInstallMap{})
	pulumi.RegisterOutputType(RuncInstallOutput{})
	pulumi.RegisterOutputType(RuncInstallArrayOutput{})
	pulumi.RegisterOutputType(RuncInstallMapOutput{})
}
