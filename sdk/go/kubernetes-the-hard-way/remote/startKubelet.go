// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tools"
)

// Starts `kubelet` on a remote system
type StartKubelet struct {
	pulumi.ResourceState

	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The daemon-reload command.
	DaemonReload tools.SystemctlOutput `pulumi:"daemonReload"`
	// The enable command.
	Enable tools.SystemctlOutput `pulumi:"enable"`
	// The start command.
	Start tools.SystemctlOutput `pulumi:"start"`
}

// NewStartKubelet registers a new resource with the given unique name, arguments, and options.
func NewStartKubelet(ctx *pulumi.Context,
	name string, args *StartKubeletArgs, opts ...pulumi.ResourceOption) (*StartKubelet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StartKubelet
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:StartKubelet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type startKubeletArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
}

// The set of arguments for constructing a StartKubelet resource.
type StartKubeletArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
}

func (StartKubeletArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*startKubeletArgs)(nil)).Elem()
}

type StartKubeletInput interface {
	pulumi.Input

	ToStartKubeletOutput() StartKubeletOutput
	ToStartKubeletOutputWithContext(ctx context.Context) StartKubeletOutput
}

func (*StartKubelet) ElementType() reflect.Type {
	return reflect.TypeOf((**StartKubelet)(nil)).Elem()
}

func (i *StartKubelet) ToStartKubeletOutput() StartKubeletOutput {
	return i.ToStartKubeletOutputWithContext(context.Background())
}

func (i *StartKubelet) ToStartKubeletOutputWithContext(ctx context.Context) StartKubeletOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartKubeletOutput)
}

// StartKubeletArrayInput is an input type that accepts StartKubeletArray and StartKubeletArrayOutput values.
// You can construct a concrete instance of `StartKubeletArrayInput` via:
//
//	StartKubeletArray{ StartKubeletArgs{...} }
type StartKubeletArrayInput interface {
	pulumi.Input

	ToStartKubeletArrayOutput() StartKubeletArrayOutput
	ToStartKubeletArrayOutputWithContext(context.Context) StartKubeletArrayOutput
}

type StartKubeletArray []StartKubeletInput

func (StartKubeletArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartKubelet)(nil)).Elem()
}

func (i StartKubeletArray) ToStartKubeletArrayOutput() StartKubeletArrayOutput {
	return i.ToStartKubeletArrayOutputWithContext(context.Background())
}

func (i StartKubeletArray) ToStartKubeletArrayOutputWithContext(ctx context.Context) StartKubeletArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartKubeletArrayOutput)
}

// StartKubeletMapInput is an input type that accepts StartKubeletMap and StartKubeletMapOutput values.
// You can construct a concrete instance of `StartKubeletMapInput` via:
//
//	StartKubeletMap{ "key": StartKubeletArgs{...} }
type StartKubeletMapInput interface {
	pulumi.Input

	ToStartKubeletMapOutput() StartKubeletMapOutput
	ToStartKubeletMapOutputWithContext(context.Context) StartKubeletMapOutput
}

type StartKubeletMap map[string]StartKubeletInput

func (StartKubeletMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartKubelet)(nil)).Elem()
}

func (i StartKubeletMap) ToStartKubeletMapOutput() StartKubeletMapOutput {
	return i.ToStartKubeletMapOutputWithContext(context.Background())
}

func (i StartKubeletMap) ToStartKubeletMapOutputWithContext(ctx context.Context) StartKubeletMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartKubeletMapOutput)
}

type StartKubeletOutput struct{ *pulumi.OutputState }

func (StartKubeletOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartKubelet)(nil)).Elem()
}

func (o StartKubeletOutput) ToStartKubeletOutput() StartKubeletOutput {
	return o
}

func (o StartKubeletOutput) ToStartKubeletOutputWithContext(ctx context.Context) StartKubeletOutput {
	return o
}

// The parameters with which to connect to the remote host.
func (o StartKubeletOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *StartKubelet) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The daemon-reload command.
func (o StartKubeletOutput) DaemonReload() tools.SystemctlOutput {
	return o.ApplyT(func(v *StartKubelet) tools.SystemctlOutput { return v.DaemonReload }).(tools.SystemctlOutput)
}

// The enable command.
func (o StartKubeletOutput) Enable() tools.SystemctlOutput {
	return o.ApplyT(func(v *StartKubelet) tools.SystemctlOutput { return v.Enable }).(tools.SystemctlOutput)
}

// The start command.
func (o StartKubeletOutput) Start() tools.SystemctlOutput {
	return o.ApplyT(func(v *StartKubelet) tools.SystemctlOutput { return v.Start }).(tools.SystemctlOutput)
}

type StartKubeletArrayOutput struct{ *pulumi.OutputState }

func (StartKubeletArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartKubelet)(nil)).Elem()
}

func (o StartKubeletArrayOutput) ToStartKubeletArrayOutput() StartKubeletArrayOutput {
	return o
}

func (o StartKubeletArrayOutput) ToStartKubeletArrayOutputWithContext(ctx context.Context) StartKubeletArrayOutput {
	return o
}

func (o StartKubeletArrayOutput) Index(i pulumi.IntInput) StartKubeletOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StartKubelet {
		return vs[0].([]*StartKubelet)[vs[1].(int)]
	}).(StartKubeletOutput)
}

type StartKubeletMapOutput struct{ *pulumi.OutputState }

func (StartKubeletMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartKubelet)(nil)).Elem()
}

func (o StartKubeletMapOutput) ToStartKubeletMapOutput() StartKubeletMapOutput {
	return o
}

func (o StartKubeletMapOutput) ToStartKubeletMapOutputWithContext(ctx context.Context) StartKubeletMapOutput {
	return o
}

func (o StartKubeletMapOutput) MapIndex(k pulumi.StringInput) StartKubeletOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StartKubelet {
		return vs[0].(map[string]*StartKubelet)[vs[1].(string)]
	}).(StartKubeletOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StartKubeletInput)(nil)).Elem(), &StartKubelet{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartKubeletArrayInput)(nil)).Elem(), StartKubeletArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartKubeletMapInput)(nil)).Elem(), StartKubeletMap{})
	pulumi.RegisterOutputType(StartKubeletOutput{})
	pulumi.RegisterOutputType(StartKubeletArrayOutput{})
	pulumi.RegisterOutputType(StartKubeletMapOutput{})
}
