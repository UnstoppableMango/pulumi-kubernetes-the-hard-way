// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

var _ = internal.GetEnvOrDefault

// The CNI plugins IPAM
type CniBridgeIpam struct {
	// IPAM ranges.
	Ranges []map[string]string `pulumi:"ranges"`
	// IPAM routes.
	Routes []map[string]string `pulumi:"routes"`
	// CNI bridge IPAM type
	Type *string `pulumi:"type"`
}

// CniBridgeIpamInput is an input type that accepts CniBridgeIpamArgs and CniBridgeIpamOutput values.
// You can construct a concrete instance of `CniBridgeIpamInput` via:
//
//	CniBridgeIpamArgs{...}
type CniBridgeIpamInput interface {
	pulumi.Input

	ToCniBridgeIpamOutput() CniBridgeIpamOutput
	ToCniBridgeIpamOutputWithContext(context.Context) CniBridgeIpamOutput
}

// The CNI plugins IPAM
type CniBridgeIpamArgs struct {
	// IPAM ranges.
	Ranges pulumi.StringMapArrayInput `pulumi:"ranges"`
	// IPAM routes.
	Routes pulumi.StringMapArrayInput `pulumi:"routes"`
	// CNI bridge IPAM type
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CniBridgeIpamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CniBridgeIpam)(nil)).Elem()
}

func (i CniBridgeIpamArgs) ToCniBridgeIpamOutput() CniBridgeIpamOutput {
	return i.ToCniBridgeIpamOutputWithContext(context.Background())
}

func (i CniBridgeIpamArgs) ToCniBridgeIpamOutputWithContext(ctx context.Context) CniBridgeIpamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBridgeIpamOutput)
}

func (i CniBridgeIpamArgs) ToCniBridgeIpamPtrOutput() CniBridgeIpamPtrOutput {
	return i.ToCniBridgeIpamPtrOutputWithContext(context.Background())
}

func (i CniBridgeIpamArgs) ToCniBridgeIpamPtrOutputWithContext(ctx context.Context) CniBridgeIpamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBridgeIpamOutput).ToCniBridgeIpamPtrOutputWithContext(ctx)
}

// CniBridgeIpamPtrInput is an input type that accepts CniBridgeIpamArgs, CniBridgeIpamPtr and CniBridgeIpamPtrOutput values.
// You can construct a concrete instance of `CniBridgeIpamPtrInput` via:
//
//	        CniBridgeIpamArgs{...}
//
//	or:
//
//	        nil
type CniBridgeIpamPtrInput interface {
	pulumi.Input

	ToCniBridgeIpamPtrOutput() CniBridgeIpamPtrOutput
	ToCniBridgeIpamPtrOutputWithContext(context.Context) CniBridgeIpamPtrOutput
}

type cniBridgeIpamPtrType CniBridgeIpamArgs

func CniBridgeIpamPtr(v *CniBridgeIpamArgs) CniBridgeIpamPtrInput {
	return (*cniBridgeIpamPtrType)(v)
}

func (*cniBridgeIpamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CniBridgeIpam)(nil)).Elem()
}

func (i *cniBridgeIpamPtrType) ToCniBridgeIpamPtrOutput() CniBridgeIpamPtrOutput {
	return i.ToCniBridgeIpamPtrOutputWithContext(context.Background())
}

func (i *cniBridgeIpamPtrType) ToCniBridgeIpamPtrOutputWithContext(ctx context.Context) CniBridgeIpamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBridgeIpamPtrOutput)
}

// The CNI plugins IPAM
type CniBridgeIpamOutput struct{ *pulumi.OutputState }

func (CniBridgeIpamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CniBridgeIpam)(nil)).Elem()
}

func (o CniBridgeIpamOutput) ToCniBridgeIpamOutput() CniBridgeIpamOutput {
	return o
}

func (o CniBridgeIpamOutput) ToCniBridgeIpamOutputWithContext(ctx context.Context) CniBridgeIpamOutput {
	return o
}

func (o CniBridgeIpamOutput) ToCniBridgeIpamPtrOutput() CniBridgeIpamPtrOutput {
	return o.ToCniBridgeIpamPtrOutputWithContext(context.Background())
}

func (o CniBridgeIpamOutput) ToCniBridgeIpamPtrOutputWithContext(ctx context.Context) CniBridgeIpamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CniBridgeIpam) *CniBridgeIpam {
		return &v
	}).(CniBridgeIpamPtrOutput)
}

// IPAM ranges.
func (o CniBridgeIpamOutput) Ranges() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v CniBridgeIpam) []map[string]string { return v.Ranges }).(pulumi.StringMapArrayOutput)
}

// IPAM routes.
func (o CniBridgeIpamOutput) Routes() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v CniBridgeIpam) []map[string]string { return v.Routes }).(pulumi.StringMapArrayOutput)
}

// CNI bridge IPAM type
func (o CniBridgeIpamOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CniBridgeIpam) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CniBridgeIpamPtrOutput struct{ *pulumi.OutputState }

func (CniBridgeIpamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CniBridgeIpam)(nil)).Elem()
}

func (o CniBridgeIpamPtrOutput) ToCniBridgeIpamPtrOutput() CniBridgeIpamPtrOutput {
	return o
}

func (o CniBridgeIpamPtrOutput) ToCniBridgeIpamPtrOutputWithContext(ctx context.Context) CniBridgeIpamPtrOutput {
	return o
}

func (o CniBridgeIpamPtrOutput) Elem() CniBridgeIpamOutput {
	return o.ApplyT(func(v *CniBridgeIpam) CniBridgeIpam {
		if v != nil {
			return *v
		}
		var ret CniBridgeIpam
		return ret
	}).(CniBridgeIpamOutput)
}

// IPAM ranges.
func (o CniBridgeIpamPtrOutput) Ranges() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *CniBridgeIpam) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Ranges
	}).(pulumi.StringMapArrayOutput)
}

// IPAM routes.
func (o CniBridgeIpamPtrOutput) Routes() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *CniBridgeIpam) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(pulumi.StringMapArrayOutput)
}

// CNI bridge IPAM type
func (o CniBridgeIpamPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CniBridgeIpam) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The CNI bridge plugin configuration.
type CniBridgePluginConfiguration struct {
	// Bridge name.
	Bridge *string `pulumi:"bridge"`
	// CNI version.
	CniVersion *string `pulumi:"cniVersion"`
	// IP masq.
	IpMasq *bool `pulumi:"ipMasq"`
	// IPAM
	Ipam *CniBridgeIpam `pulumi:"ipam"`
	// Is gateway.
	IsGateway *bool `pulumi:"isGateway"`
	// CNI plugin name.
	Name *string `pulumi:"name"`
	// CNI plugin type.
	Type *string `pulumi:"type"`
}

// CniBridgePluginConfigurationInput is an input type that accepts CniBridgePluginConfigurationArgs and CniBridgePluginConfigurationOutput values.
// You can construct a concrete instance of `CniBridgePluginConfigurationInput` via:
//
//	CniBridgePluginConfigurationArgs{...}
type CniBridgePluginConfigurationInput interface {
	pulumi.Input

	ToCniBridgePluginConfigurationOutput() CniBridgePluginConfigurationOutput
	ToCniBridgePluginConfigurationOutputWithContext(context.Context) CniBridgePluginConfigurationOutput
}

// The CNI bridge plugin configuration.
type CniBridgePluginConfigurationArgs struct {
	// Bridge name.
	Bridge pulumi.StringPtrInput `pulumi:"bridge"`
	// CNI version.
	CniVersion pulumi.StringPtrInput `pulumi:"cniVersion"`
	// IP masq.
	IpMasq pulumi.BoolPtrInput `pulumi:"ipMasq"`
	// IPAM
	Ipam CniBridgeIpamPtrInput `pulumi:"ipam"`
	// Is gateway.
	IsGateway pulumi.BoolPtrInput `pulumi:"isGateway"`
	// CNI plugin name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// CNI plugin type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CniBridgePluginConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CniBridgePluginConfiguration)(nil)).Elem()
}

func (i CniBridgePluginConfigurationArgs) ToCniBridgePluginConfigurationOutput() CniBridgePluginConfigurationOutput {
	return i.ToCniBridgePluginConfigurationOutputWithContext(context.Background())
}

func (i CniBridgePluginConfigurationArgs) ToCniBridgePluginConfigurationOutputWithContext(ctx context.Context) CniBridgePluginConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBridgePluginConfigurationOutput)
}

func (i CniBridgePluginConfigurationArgs) ToCniBridgePluginConfigurationPtrOutput() CniBridgePluginConfigurationPtrOutput {
	return i.ToCniBridgePluginConfigurationPtrOutputWithContext(context.Background())
}

func (i CniBridgePluginConfigurationArgs) ToCniBridgePluginConfigurationPtrOutputWithContext(ctx context.Context) CniBridgePluginConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBridgePluginConfigurationOutput).ToCniBridgePluginConfigurationPtrOutputWithContext(ctx)
}

// CniBridgePluginConfigurationPtrInput is an input type that accepts CniBridgePluginConfigurationArgs, CniBridgePluginConfigurationPtr and CniBridgePluginConfigurationPtrOutput values.
// You can construct a concrete instance of `CniBridgePluginConfigurationPtrInput` via:
//
//	        CniBridgePluginConfigurationArgs{...}
//
//	or:
//
//	        nil
type CniBridgePluginConfigurationPtrInput interface {
	pulumi.Input

	ToCniBridgePluginConfigurationPtrOutput() CniBridgePluginConfigurationPtrOutput
	ToCniBridgePluginConfigurationPtrOutputWithContext(context.Context) CniBridgePluginConfigurationPtrOutput
}

type cniBridgePluginConfigurationPtrType CniBridgePluginConfigurationArgs

func CniBridgePluginConfigurationPtr(v *CniBridgePluginConfigurationArgs) CniBridgePluginConfigurationPtrInput {
	return (*cniBridgePluginConfigurationPtrType)(v)
}

func (*cniBridgePluginConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CniBridgePluginConfiguration)(nil)).Elem()
}

func (i *cniBridgePluginConfigurationPtrType) ToCniBridgePluginConfigurationPtrOutput() CniBridgePluginConfigurationPtrOutput {
	return i.ToCniBridgePluginConfigurationPtrOutputWithContext(context.Background())
}

func (i *cniBridgePluginConfigurationPtrType) ToCniBridgePluginConfigurationPtrOutputWithContext(ctx context.Context) CniBridgePluginConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBridgePluginConfigurationPtrOutput)
}

// The CNI bridge plugin configuration.
type CniBridgePluginConfigurationOutput struct{ *pulumi.OutputState }

func (CniBridgePluginConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CniBridgePluginConfiguration)(nil)).Elem()
}

func (o CniBridgePluginConfigurationOutput) ToCniBridgePluginConfigurationOutput() CniBridgePluginConfigurationOutput {
	return o
}

func (o CniBridgePluginConfigurationOutput) ToCniBridgePluginConfigurationOutputWithContext(ctx context.Context) CniBridgePluginConfigurationOutput {
	return o
}

func (o CniBridgePluginConfigurationOutput) ToCniBridgePluginConfigurationPtrOutput() CniBridgePluginConfigurationPtrOutput {
	return o.ToCniBridgePluginConfigurationPtrOutputWithContext(context.Background())
}

func (o CniBridgePluginConfigurationOutput) ToCniBridgePluginConfigurationPtrOutputWithContext(ctx context.Context) CniBridgePluginConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CniBridgePluginConfiguration) *CniBridgePluginConfiguration {
		return &v
	}).(CniBridgePluginConfigurationPtrOutput)
}

// Bridge name.
func (o CniBridgePluginConfigurationOutput) Bridge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CniBridgePluginConfiguration) *string { return v.Bridge }).(pulumi.StringPtrOutput)
}

// CNI version.
func (o CniBridgePluginConfigurationOutput) CniVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CniBridgePluginConfiguration) *string { return v.CniVersion }).(pulumi.StringPtrOutput)
}

// IP masq.
func (o CniBridgePluginConfigurationOutput) IpMasq() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CniBridgePluginConfiguration) *bool { return v.IpMasq }).(pulumi.BoolPtrOutput)
}

// IPAM
func (o CniBridgePluginConfigurationOutput) Ipam() CniBridgeIpamPtrOutput {
	return o.ApplyT(func(v CniBridgePluginConfiguration) *CniBridgeIpam { return v.Ipam }).(CniBridgeIpamPtrOutput)
}

// Is gateway.
func (o CniBridgePluginConfigurationOutput) IsGateway() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CniBridgePluginConfiguration) *bool { return v.IsGateway }).(pulumi.BoolPtrOutput)
}

// CNI plugin name.
func (o CniBridgePluginConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CniBridgePluginConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// CNI plugin type.
func (o CniBridgePluginConfigurationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CniBridgePluginConfiguration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CniBridgePluginConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CniBridgePluginConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CniBridgePluginConfiguration)(nil)).Elem()
}

func (o CniBridgePluginConfigurationPtrOutput) ToCniBridgePluginConfigurationPtrOutput() CniBridgePluginConfigurationPtrOutput {
	return o
}

func (o CniBridgePluginConfigurationPtrOutput) ToCniBridgePluginConfigurationPtrOutputWithContext(ctx context.Context) CniBridgePluginConfigurationPtrOutput {
	return o
}

func (o CniBridgePluginConfigurationPtrOutput) Elem() CniBridgePluginConfigurationOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) CniBridgePluginConfiguration {
		if v != nil {
			return *v
		}
		var ret CniBridgePluginConfiguration
		return ret
	}).(CniBridgePluginConfigurationOutput)
}

// Bridge name.
func (o CniBridgePluginConfigurationPtrOutput) Bridge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Bridge
	}).(pulumi.StringPtrOutput)
}

// CNI version.
func (o CniBridgePluginConfigurationPtrOutput) CniVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CniVersion
	}).(pulumi.StringPtrOutput)
}

// IP masq.
func (o CniBridgePluginConfigurationPtrOutput) IpMasq() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IpMasq
	}).(pulumi.BoolPtrOutput)
}

// IPAM
func (o CniBridgePluginConfigurationPtrOutput) Ipam() CniBridgeIpamPtrOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) *CniBridgeIpam {
		if v == nil {
			return nil
		}
		return v.Ipam
	}).(CniBridgeIpamPtrOutput)
}

// Is gateway.
func (o CniBridgePluginConfigurationPtrOutput) IsGateway() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IsGateway
	}).(pulumi.BoolPtrOutput)
}

// CNI plugin name.
func (o CniBridgePluginConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// CNI plugin type.
func (o CniBridgePluginConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CniBridgePluginConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The CNI loopback plugin configuration.
type CniLoopbackPluginConfiguration struct {
	// CNI version.
	CniVersion *string `pulumi:"cniVersion"`
	// CNI plugin name.
	Name *string `pulumi:"name"`
	// CNI plugin type.
	Type *string `pulumi:"type"`
}

// CniLoopbackPluginConfigurationInput is an input type that accepts CniLoopbackPluginConfigurationArgs and CniLoopbackPluginConfigurationOutput values.
// You can construct a concrete instance of `CniLoopbackPluginConfigurationInput` via:
//
//	CniLoopbackPluginConfigurationArgs{...}
type CniLoopbackPluginConfigurationInput interface {
	pulumi.Input

	ToCniLoopbackPluginConfigurationOutput() CniLoopbackPluginConfigurationOutput
	ToCniLoopbackPluginConfigurationOutputWithContext(context.Context) CniLoopbackPluginConfigurationOutput
}

// The CNI loopback plugin configuration.
type CniLoopbackPluginConfigurationArgs struct {
	// CNI version.
	CniVersion pulumi.StringPtrInput `pulumi:"cniVersion"`
	// CNI plugin name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// CNI plugin type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CniLoopbackPluginConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CniLoopbackPluginConfiguration)(nil)).Elem()
}

func (i CniLoopbackPluginConfigurationArgs) ToCniLoopbackPluginConfigurationOutput() CniLoopbackPluginConfigurationOutput {
	return i.ToCniLoopbackPluginConfigurationOutputWithContext(context.Background())
}

func (i CniLoopbackPluginConfigurationArgs) ToCniLoopbackPluginConfigurationOutputWithContext(ctx context.Context) CniLoopbackPluginConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniLoopbackPluginConfigurationOutput)
}

func (i CniLoopbackPluginConfigurationArgs) ToCniLoopbackPluginConfigurationPtrOutput() CniLoopbackPluginConfigurationPtrOutput {
	return i.ToCniLoopbackPluginConfigurationPtrOutputWithContext(context.Background())
}

func (i CniLoopbackPluginConfigurationArgs) ToCniLoopbackPluginConfigurationPtrOutputWithContext(ctx context.Context) CniLoopbackPluginConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniLoopbackPluginConfigurationOutput).ToCniLoopbackPluginConfigurationPtrOutputWithContext(ctx)
}

// CniLoopbackPluginConfigurationPtrInput is an input type that accepts CniLoopbackPluginConfigurationArgs, CniLoopbackPluginConfigurationPtr and CniLoopbackPluginConfigurationPtrOutput values.
// You can construct a concrete instance of `CniLoopbackPluginConfigurationPtrInput` via:
//
//	        CniLoopbackPluginConfigurationArgs{...}
//
//	or:
//
//	        nil
type CniLoopbackPluginConfigurationPtrInput interface {
	pulumi.Input

	ToCniLoopbackPluginConfigurationPtrOutput() CniLoopbackPluginConfigurationPtrOutput
	ToCniLoopbackPluginConfigurationPtrOutputWithContext(context.Context) CniLoopbackPluginConfigurationPtrOutput
}

type cniLoopbackPluginConfigurationPtrType CniLoopbackPluginConfigurationArgs

func CniLoopbackPluginConfigurationPtr(v *CniLoopbackPluginConfigurationArgs) CniLoopbackPluginConfigurationPtrInput {
	return (*cniLoopbackPluginConfigurationPtrType)(v)
}

func (*cniLoopbackPluginConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CniLoopbackPluginConfiguration)(nil)).Elem()
}

func (i *cniLoopbackPluginConfigurationPtrType) ToCniLoopbackPluginConfigurationPtrOutput() CniLoopbackPluginConfigurationPtrOutput {
	return i.ToCniLoopbackPluginConfigurationPtrOutputWithContext(context.Background())
}

func (i *cniLoopbackPluginConfigurationPtrType) ToCniLoopbackPluginConfigurationPtrOutputWithContext(ctx context.Context) CniLoopbackPluginConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniLoopbackPluginConfigurationPtrOutput)
}

// The CNI loopback plugin configuration.
type CniLoopbackPluginConfigurationOutput struct{ *pulumi.OutputState }

func (CniLoopbackPluginConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CniLoopbackPluginConfiguration)(nil)).Elem()
}

func (o CniLoopbackPluginConfigurationOutput) ToCniLoopbackPluginConfigurationOutput() CniLoopbackPluginConfigurationOutput {
	return o
}

func (o CniLoopbackPluginConfigurationOutput) ToCniLoopbackPluginConfigurationOutputWithContext(ctx context.Context) CniLoopbackPluginConfigurationOutput {
	return o
}

func (o CniLoopbackPluginConfigurationOutput) ToCniLoopbackPluginConfigurationPtrOutput() CniLoopbackPluginConfigurationPtrOutput {
	return o.ToCniLoopbackPluginConfigurationPtrOutputWithContext(context.Background())
}

func (o CniLoopbackPluginConfigurationOutput) ToCniLoopbackPluginConfigurationPtrOutputWithContext(ctx context.Context) CniLoopbackPluginConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CniLoopbackPluginConfiguration) *CniLoopbackPluginConfiguration {
		return &v
	}).(CniLoopbackPluginConfigurationPtrOutput)
}

// CNI version.
func (o CniLoopbackPluginConfigurationOutput) CniVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CniLoopbackPluginConfiguration) *string { return v.CniVersion }).(pulumi.StringPtrOutput)
}

// CNI plugin name.
func (o CniLoopbackPluginConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CniLoopbackPluginConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// CNI plugin type.
func (o CniLoopbackPluginConfigurationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CniLoopbackPluginConfiguration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CniLoopbackPluginConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CniLoopbackPluginConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CniLoopbackPluginConfiguration)(nil)).Elem()
}

func (o CniLoopbackPluginConfigurationPtrOutput) ToCniLoopbackPluginConfigurationPtrOutput() CniLoopbackPluginConfigurationPtrOutput {
	return o
}

func (o CniLoopbackPluginConfigurationPtrOutput) ToCniLoopbackPluginConfigurationPtrOutputWithContext(ctx context.Context) CniLoopbackPluginConfigurationPtrOutput {
	return o
}

func (o CniLoopbackPluginConfigurationPtrOutput) Elem() CniLoopbackPluginConfigurationOutput {
	return o.ApplyT(func(v *CniLoopbackPluginConfiguration) CniLoopbackPluginConfiguration {
		if v != nil {
			return *v
		}
		var ret CniLoopbackPluginConfiguration
		return ret
	}).(CniLoopbackPluginConfigurationOutput)
}

// CNI version.
func (o CniLoopbackPluginConfigurationPtrOutput) CniVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CniLoopbackPluginConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CniVersion
	}).(pulumi.StringPtrOutput)
}

// CNI plugin name.
func (o CniLoopbackPluginConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CniLoopbackPluginConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// CNI plugin type.
func (o CniLoopbackPluginConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CniLoopbackPluginConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Props for resources that consume etcd configuration.
type EtcdConfigurationProps struct {
	// Path to the certificate authority file on the remote system.
	CaFilePath string `pulumi:"caFilePath"`
	// Path to the certificate file on the remote system.
	CertFilePath string `pulumi:"certFilePath"`
	// Etcd's data directory.
	DataDirectory string `pulumi:"dataDirectory"`
	// Path to the etcd binary.
	EtcdPath string `pulumi:"etcdPath"`
	// Internal IP of the etcd node.
	InternalIp string `pulumi:"internalIp"`
	// Path to the private key file on the remote system.
	KeyFilePath string `pulumi:"keyFilePath"`
	// Name of the etcd node.
	Name string `pulumi:"name"`
}

// EtcdConfigurationPropsInput is an input type that accepts EtcdConfigurationPropsArgs and EtcdConfigurationPropsOutput values.
// You can construct a concrete instance of `EtcdConfigurationPropsInput` via:
//
//	EtcdConfigurationPropsArgs{...}
type EtcdConfigurationPropsInput interface {
	pulumi.Input

	ToEtcdConfigurationPropsOutput() EtcdConfigurationPropsOutput
	ToEtcdConfigurationPropsOutputWithContext(context.Context) EtcdConfigurationPropsOutput
}

// Props for resources that consume etcd configuration.
type EtcdConfigurationPropsArgs struct {
	// Path to the certificate authority file on the remote system.
	CaFilePath pulumi.StringInput `pulumi:"caFilePath"`
	// Path to the certificate file on the remote system.
	CertFilePath pulumi.StringInput `pulumi:"certFilePath"`
	// Etcd's data directory.
	DataDirectory pulumi.StringInput `pulumi:"dataDirectory"`
	// Path to the etcd binary.
	EtcdPath pulumi.StringInput `pulumi:"etcdPath"`
	// Internal IP of the etcd node.
	InternalIp pulumi.StringInput `pulumi:"internalIp"`
	// Path to the private key file on the remote system.
	KeyFilePath pulumi.StringInput `pulumi:"keyFilePath"`
	// Name of the etcd node.
	Name pulumi.StringInput `pulumi:"name"`
}

func (EtcdConfigurationPropsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EtcdConfigurationProps)(nil)).Elem()
}

func (i EtcdConfigurationPropsArgs) ToEtcdConfigurationPropsOutput() EtcdConfigurationPropsOutput {
	return i.ToEtcdConfigurationPropsOutputWithContext(context.Background())
}

func (i EtcdConfigurationPropsArgs) ToEtcdConfigurationPropsOutputWithContext(ctx context.Context) EtcdConfigurationPropsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdConfigurationPropsOutput)
}

// EtcdConfigurationPropsArrayInput is an input type that accepts EtcdConfigurationPropsArray and EtcdConfigurationPropsArrayOutput values.
// You can construct a concrete instance of `EtcdConfigurationPropsArrayInput` via:
//
//	EtcdConfigurationPropsArray{ EtcdConfigurationPropsArgs{...} }
type EtcdConfigurationPropsArrayInput interface {
	pulumi.Input

	ToEtcdConfigurationPropsArrayOutput() EtcdConfigurationPropsArrayOutput
	ToEtcdConfigurationPropsArrayOutputWithContext(context.Context) EtcdConfigurationPropsArrayOutput
}

type EtcdConfigurationPropsArray []EtcdConfigurationPropsInput

func (EtcdConfigurationPropsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EtcdConfigurationProps)(nil)).Elem()
}

func (i EtcdConfigurationPropsArray) ToEtcdConfigurationPropsArrayOutput() EtcdConfigurationPropsArrayOutput {
	return i.ToEtcdConfigurationPropsArrayOutputWithContext(context.Background())
}

func (i EtcdConfigurationPropsArray) ToEtcdConfigurationPropsArrayOutputWithContext(ctx context.Context) EtcdConfigurationPropsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdConfigurationPropsArrayOutput)
}

// Props for resources that consume etcd configuration.
type EtcdConfigurationPropsOutput struct{ *pulumi.OutputState }

func (EtcdConfigurationPropsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EtcdConfigurationProps)(nil)).Elem()
}

func (o EtcdConfigurationPropsOutput) ToEtcdConfigurationPropsOutput() EtcdConfigurationPropsOutput {
	return o
}

func (o EtcdConfigurationPropsOutput) ToEtcdConfigurationPropsOutputWithContext(ctx context.Context) EtcdConfigurationPropsOutput {
	return o
}

// Path to the certificate authority file on the remote system.
func (o EtcdConfigurationPropsOutput) CaFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v EtcdConfigurationProps) string { return v.CaFilePath }).(pulumi.StringOutput)
}

// Path to the certificate file on the remote system.
func (o EtcdConfigurationPropsOutput) CertFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v EtcdConfigurationProps) string { return v.CertFilePath }).(pulumi.StringOutput)
}

// Etcd's data directory.
func (o EtcdConfigurationPropsOutput) DataDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v EtcdConfigurationProps) string { return v.DataDirectory }).(pulumi.StringOutput)
}

// Path to the etcd binary.
func (o EtcdConfigurationPropsOutput) EtcdPath() pulumi.StringOutput {
	return o.ApplyT(func(v EtcdConfigurationProps) string { return v.EtcdPath }).(pulumi.StringOutput)
}

// Internal IP of the etcd node.
func (o EtcdConfigurationPropsOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v EtcdConfigurationProps) string { return v.InternalIp }).(pulumi.StringOutput)
}

// Path to the private key file on the remote system.
func (o EtcdConfigurationPropsOutput) KeyFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v EtcdConfigurationProps) string { return v.KeyFilePath }).(pulumi.StringOutput)
}

// Name of the etcd node.
func (o EtcdConfigurationPropsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EtcdConfigurationProps) string { return v.Name }).(pulumi.StringOutput)
}

type EtcdConfigurationPropsArrayOutput struct{ *pulumi.OutputState }

func (EtcdConfigurationPropsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EtcdConfigurationProps)(nil)).Elem()
}

func (o EtcdConfigurationPropsArrayOutput) ToEtcdConfigurationPropsArrayOutput() EtcdConfigurationPropsArrayOutput {
	return o
}

func (o EtcdConfigurationPropsArrayOutput) ToEtcdConfigurationPropsArrayOutputWithContext(ctx context.Context) EtcdConfigurationPropsArrayOutput {
	return o
}

func (o EtcdConfigurationPropsArrayOutput) Index(i pulumi.IntInput) EtcdConfigurationPropsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EtcdConfigurationProps {
		return vs[0].([]EtcdConfigurationProps)[vs[1].(int)]
	}).(EtcdConfigurationPropsOutput)
}

// Etcd node description.
type EtcdNode struct {
	// The CPU architecture of the node.
	Architecture *Architecture `pulumi:"architecture"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The internal IP of the node.
	InternalIp string `pulumi:"internalIp"`
}

// Defaults sets the appropriate defaults for EtcdNode
func (val *EtcdNode) Defaults() *EtcdNode {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Connection = *tmp.Connection.Defaults()

	return &tmp
}

// EtcdNodeInput is an input type that accepts EtcdNodeArgs and EtcdNodeOutput values.
// You can construct a concrete instance of `EtcdNodeInput` via:
//
//	EtcdNodeArgs{...}
type EtcdNodeInput interface {
	pulumi.Input

	ToEtcdNodeOutput() EtcdNodeOutput
	ToEtcdNodeOutputWithContext(context.Context) EtcdNodeOutput
}

// Etcd node description.
type EtcdNodeArgs struct {
	// The CPU architecture of the node.
	Architecture ArchitecturePtrInput `pulumi:"architecture"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput `pulumi:"connection"`
	// The internal IP of the node.
	InternalIp pulumi.StringInput `pulumi:"internalIp"`
}

// Defaults sets the appropriate defaults for EtcdNodeArgs
func (val *EtcdNodeArgs) Defaults() *EtcdNodeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (EtcdNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EtcdNode)(nil)).Elem()
}

func (i EtcdNodeArgs) ToEtcdNodeOutput() EtcdNodeOutput {
	return i.ToEtcdNodeOutputWithContext(context.Background())
}

func (i EtcdNodeArgs) ToEtcdNodeOutputWithContext(ctx context.Context) EtcdNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdNodeOutput)
}

// Etcd node description.
type EtcdNodeOutput struct{ *pulumi.OutputState }

func (EtcdNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EtcdNode)(nil)).Elem()
}

func (o EtcdNodeOutput) ToEtcdNodeOutput() EtcdNodeOutput {
	return o
}

func (o EtcdNodeOutput) ToEtcdNodeOutputWithContext(ctx context.Context) EtcdNodeOutput {
	return o
}

// The CPU architecture of the node.
func (o EtcdNodeOutput) Architecture() ArchitecturePtrOutput {
	return o.ApplyT(func(v EtcdNode) *Architecture { return v.Architecture }).(ArchitecturePtrOutput)
}

// The parameters with which to connect to the remote host.
func (o EtcdNodeOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v EtcdNode) pulumiCommand.Connection { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The internal IP of the node.
func (o EtcdNodeOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v EtcdNode) string { return v.InternalIp }).(pulumi.StringOutput)
}

type EtcdNodeMapOutput struct{ *pulumi.OutputState }

func (EtcdNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EtcdNode)(nil)).Elem()
}

func (o EtcdNodeMapOutput) ToEtcdNodeMapOutput() EtcdNodeMapOutput {
	return o
}

func (o EtcdNodeMapOutput) ToEtcdNodeMapOutputWithContext(ctx context.Context) EtcdNodeMapOutput {
	return o
}

func (o EtcdNodeMapOutput) MapIndex(k pulumi.StringInput) EtcdNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EtcdNode {
		return vs[0].(map[string]EtcdNode)[vs[1].(string)]
	}).(EtcdNodeOutput)
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BInstall%5D%20Section%20Options
type SystemdInstallSection struct {
	// A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable.
	WantedBy []string `pulumi:"wantedBy"`
}

// SystemdInstallSectionInput is an input type that accepts SystemdInstallSectionArgs and SystemdInstallSectionOutput values.
// You can construct a concrete instance of `SystemdInstallSectionInput` via:
//
//	SystemdInstallSectionArgs{...}
type SystemdInstallSectionInput interface {
	pulumi.Input

	ToSystemdInstallSectionOutput() SystemdInstallSectionOutput
	ToSystemdInstallSectionOutputWithContext(context.Context) SystemdInstallSectionOutput
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BInstall%5D%20Section%20Options
type SystemdInstallSectionArgs struct {
	// A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable.
	WantedBy pulumi.StringArrayInput `pulumi:"wantedBy"`
}

func (SystemdInstallSectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemdInstallSection)(nil)).Elem()
}

func (i SystemdInstallSectionArgs) ToSystemdInstallSectionOutput() SystemdInstallSectionOutput {
	return i.ToSystemdInstallSectionOutputWithContext(context.Background())
}

func (i SystemdInstallSectionArgs) ToSystemdInstallSectionOutputWithContext(ctx context.Context) SystemdInstallSectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdInstallSectionOutput)
}

func (i SystemdInstallSectionArgs) ToSystemdInstallSectionPtrOutput() SystemdInstallSectionPtrOutput {
	return i.ToSystemdInstallSectionPtrOutputWithContext(context.Background())
}

func (i SystemdInstallSectionArgs) ToSystemdInstallSectionPtrOutputWithContext(ctx context.Context) SystemdInstallSectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdInstallSectionOutput).ToSystemdInstallSectionPtrOutputWithContext(ctx)
}

// SystemdInstallSectionPtrInput is an input type that accepts SystemdInstallSectionArgs, SystemdInstallSectionPtr and SystemdInstallSectionPtrOutput values.
// You can construct a concrete instance of `SystemdInstallSectionPtrInput` via:
//
//	        SystemdInstallSectionArgs{...}
//
//	or:
//
//	        nil
type SystemdInstallSectionPtrInput interface {
	pulumi.Input

	ToSystemdInstallSectionPtrOutput() SystemdInstallSectionPtrOutput
	ToSystemdInstallSectionPtrOutputWithContext(context.Context) SystemdInstallSectionPtrOutput
}

type systemdInstallSectionPtrType SystemdInstallSectionArgs

func SystemdInstallSectionPtr(v *SystemdInstallSectionArgs) SystemdInstallSectionPtrInput {
	return (*systemdInstallSectionPtrType)(v)
}

func (*systemdInstallSectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemdInstallSection)(nil)).Elem()
}

func (i *systemdInstallSectionPtrType) ToSystemdInstallSectionPtrOutput() SystemdInstallSectionPtrOutput {
	return i.ToSystemdInstallSectionPtrOutputWithContext(context.Background())
}

func (i *systemdInstallSectionPtrType) ToSystemdInstallSectionPtrOutputWithContext(ctx context.Context) SystemdInstallSectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdInstallSectionPtrOutput)
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BInstall%5D%20Section%20Options
type SystemdInstallSectionOutput struct{ *pulumi.OutputState }

func (SystemdInstallSectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemdInstallSection)(nil)).Elem()
}

func (o SystemdInstallSectionOutput) ToSystemdInstallSectionOutput() SystemdInstallSectionOutput {
	return o
}

func (o SystemdInstallSectionOutput) ToSystemdInstallSectionOutputWithContext(ctx context.Context) SystemdInstallSectionOutput {
	return o
}

func (o SystemdInstallSectionOutput) ToSystemdInstallSectionPtrOutput() SystemdInstallSectionPtrOutput {
	return o.ToSystemdInstallSectionPtrOutputWithContext(context.Background())
}

func (o SystemdInstallSectionOutput) ToSystemdInstallSectionPtrOutputWithContext(ctx context.Context) SystemdInstallSectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemdInstallSection) *SystemdInstallSection {
		return &v
	}).(SystemdInstallSectionPtrOutput)
}

// A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable.
func (o SystemdInstallSectionOutput) WantedBy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemdInstallSection) []string { return v.WantedBy }).(pulumi.StringArrayOutput)
}

type SystemdInstallSectionPtrOutput struct{ *pulumi.OutputState }

func (SystemdInstallSectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemdInstallSection)(nil)).Elem()
}

func (o SystemdInstallSectionPtrOutput) ToSystemdInstallSectionPtrOutput() SystemdInstallSectionPtrOutput {
	return o
}

func (o SystemdInstallSectionPtrOutput) ToSystemdInstallSectionPtrOutputWithContext(ctx context.Context) SystemdInstallSectionPtrOutput {
	return o
}

func (o SystemdInstallSectionPtrOutput) Elem() SystemdInstallSectionOutput {
	return o.ApplyT(func(v *SystemdInstallSection) SystemdInstallSection {
		if v != nil {
			return *v
		}
		var ret SystemdInstallSection
		return ret
	}).(SystemdInstallSectionOutput)
}

// A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable.
func (o SystemdInstallSectionPtrOutput) WantedBy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SystemdInstallSection) []string {
		if v == nil {
			return nil
		}
		return v.WantedBy
	}).(pulumi.StringArrayOutput)
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#
type SystemdServiceSection struct {
	// Commands that are executed when this service is started.
	ExecStart *string `pulumi:"execStart"`
	// Specifies when the manager should consider the service to be finished.
	ExitType *SystemdServiceExitType `pulumi:"exitType"`
	// Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
	Restart *SystemdServiceRestart `pulumi:"restart"`
	// Configures the time to sleep before restarting a service (as configured with Restart=).
	RestartSec *string `pulumi:"restartSec"`
	// Configures the mechanism via which the service notifies the manager that the service start-up has finished.
	Type *SystemdServiceType `pulumi:"type"`
}

// SystemdServiceSectionInput is an input type that accepts SystemdServiceSectionArgs and SystemdServiceSectionOutput values.
// You can construct a concrete instance of `SystemdServiceSectionInput` via:
//
//	SystemdServiceSectionArgs{...}
type SystemdServiceSectionInput interface {
	pulumi.Input

	ToSystemdServiceSectionOutput() SystemdServiceSectionOutput
	ToSystemdServiceSectionOutputWithContext(context.Context) SystemdServiceSectionOutput
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#
type SystemdServiceSectionArgs struct {
	// Commands that are executed when this service is started.
	ExecStart pulumi.StringPtrInput `pulumi:"execStart"`
	// Specifies when the manager should consider the service to be finished.
	ExitType SystemdServiceExitTypePtrInput `pulumi:"exitType"`
	// Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
	Restart SystemdServiceRestartPtrInput `pulumi:"restart"`
	// Configures the time to sleep before restarting a service (as configured with Restart=).
	RestartSec pulumi.StringPtrInput `pulumi:"restartSec"`
	// Configures the mechanism via which the service notifies the manager that the service start-up has finished.
	Type SystemdServiceTypePtrInput `pulumi:"type"`
}

func (SystemdServiceSectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemdServiceSection)(nil)).Elem()
}

func (i SystemdServiceSectionArgs) ToSystemdServiceSectionOutput() SystemdServiceSectionOutput {
	return i.ToSystemdServiceSectionOutputWithContext(context.Background())
}

func (i SystemdServiceSectionArgs) ToSystemdServiceSectionOutputWithContext(ctx context.Context) SystemdServiceSectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdServiceSectionOutput)
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#
type SystemdServiceSectionOutput struct{ *pulumi.OutputState }

func (SystemdServiceSectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemdServiceSection)(nil)).Elem()
}

func (o SystemdServiceSectionOutput) ToSystemdServiceSectionOutput() SystemdServiceSectionOutput {
	return o
}

func (o SystemdServiceSectionOutput) ToSystemdServiceSectionOutputWithContext(ctx context.Context) SystemdServiceSectionOutput {
	return o
}

// Commands that are executed when this service is started.
func (o SystemdServiceSectionOutput) ExecStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemdServiceSection) *string { return v.ExecStart }).(pulumi.StringPtrOutput)
}

// Specifies when the manager should consider the service to be finished.
func (o SystemdServiceSectionOutput) ExitType() SystemdServiceExitTypePtrOutput {
	return o.ApplyT(func(v SystemdServiceSection) *SystemdServiceExitType { return v.ExitType }).(SystemdServiceExitTypePtrOutput)
}

// Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
func (o SystemdServiceSectionOutput) Restart() SystemdServiceRestartPtrOutput {
	return o.ApplyT(func(v SystemdServiceSection) *SystemdServiceRestart { return v.Restart }).(SystemdServiceRestartPtrOutput)
}

// Configures the time to sleep before restarting a service (as configured with Restart=).
func (o SystemdServiceSectionOutput) RestartSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemdServiceSection) *string { return v.RestartSec }).(pulumi.StringPtrOutput)
}

// Configures the mechanism via which the service notifies the manager that the service start-up has finished.
func (o SystemdServiceSectionOutput) Type() SystemdServiceTypePtrOutput {
	return o.ApplyT(func(v SystemdServiceSection) *SystemdServiceType { return v.Type }).(SystemdServiceTypePtrOutput)
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#
type SystemdUnitSection struct {
	// Configures requirement dependencies, very similar in style to Requires=.
	BindsTo []string `pulumi:"bindsTo"`
	// A short human readable title of the unit.
	Description *string `pulumi:"description"`
	// A space-separated list of URIs referencing documentation for this unit or its configuration.
	Documentation []string `pulumi:"documentation"`
	// Similar to Wants=, but declares a stronger requirement dependency.
	Requires []string `pulumi:"requires"`
	// Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.
	Requisite []string `pulumi:"requisite"`
	// Configures (weak) requirement dependencies on other units.
	Wants []string `pulumi:"wants"`
}

// SystemdUnitSectionInput is an input type that accepts SystemdUnitSectionArgs and SystemdUnitSectionOutput values.
// You can construct a concrete instance of `SystemdUnitSectionInput` via:
//
//	SystemdUnitSectionArgs{...}
type SystemdUnitSectionInput interface {
	pulumi.Input

	ToSystemdUnitSectionOutput() SystemdUnitSectionOutput
	ToSystemdUnitSectionOutputWithContext(context.Context) SystemdUnitSectionOutput
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#
type SystemdUnitSectionArgs struct {
	// Configures requirement dependencies, very similar in style to Requires=.
	BindsTo pulumi.StringArrayInput `pulumi:"bindsTo"`
	// A short human readable title of the unit.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A space-separated list of URIs referencing documentation for this unit or its configuration.
	Documentation pulumi.StringArrayInput `pulumi:"documentation"`
	// Similar to Wants=, but declares a stronger requirement dependency.
	Requires pulumi.StringArrayInput `pulumi:"requires"`
	// Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.
	Requisite pulumi.StringArrayInput `pulumi:"requisite"`
	// Configures (weak) requirement dependencies on other units.
	Wants pulumi.StringArrayInput `pulumi:"wants"`
}

func (SystemdUnitSectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemdUnitSection)(nil)).Elem()
}

func (i SystemdUnitSectionArgs) ToSystemdUnitSectionOutput() SystemdUnitSectionOutput {
	return i.ToSystemdUnitSectionOutputWithContext(context.Background())
}

func (i SystemdUnitSectionArgs) ToSystemdUnitSectionOutputWithContext(ctx context.Context) SystemdUnitSectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdUnitSectionOutput)
}

func (i SystemdUnitSectionArgs) ToSystemdUnitSectionPtrOutput() SystemdUnitSectionPtrOutput {
	return i.ToSystemdUnitSectionPtrOutputWithContext(context.Background())
}

func (i SystemdUnitSectionArgs) ToSystemdUnitSectionPtrOutputWithContext(ctx context.Context) SystemdUnitSectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdUnitSectionOutput).ToSystemdUnitSectionPtrOutputWithContext(ctx)
}

// SystemdUnitSectionPtrInput is an input type that accepts SystemdUnitSectionArgs, SystemdUnitSectionPtr and SystemdUnitSectionPtrOutput values.
// You can construct a concrete instance of `SystemdUnitSectionPtrInput` via:
//
//	        SystemdUnitSectionArgs{...}
//
//	or:
//
//	        nil
type SystemdUnitSectionPtrInput interface {
	pulumi.Input

	ToSystemdUnitSectionPtrOutput() SystemdUnitSectionPtrOutput
	ToSystemdUnitSectionPtrOutputWithContext(context.Context) SystemdUnitSectionPtrOutput
}

type systemdUnitSectionPtrType SystemdUnitSectionArgs

func SystemdUnitSectionPtr(v *SystemdUnitSectionArgs) SystemdUnitSectionPtrInput {
	return (*systemdUnitSectionPtrType)(v)
}

func (*systemdUnitSectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemdUnitSection)(nil)).Elem()
}

func (i *systemdUnitSectionPtrType) ToSystemdUnitSectionPtrOutput() SystemdUnitSectionPtrOutput {
	return i.ToSystemdUnitSectionPtrOutputWithContext(context.Background())
}

func (i *systemdUnitSectionPtrType) ToSystemdUnitSectionPtrOutputWithContext(ctx context.Context) SystemdUnitSectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdUnitSectionPtrOutput)
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#
type SystemdUnitSectionOutput struct{ *pulumi.OutputState }

func (SystemdUnitSectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemdUnitSection)(nil)).Elem()
}

func (o SystemdUnitSectionOutput) ToSystemdUnitSectionOutput() SystemdUnitSectionOutput {
	return o
}

func (o SystemdUnitSectionOutput) ToSystemdUnitSectionOutputWithContext(ctx context.Context) SystemdUnitSectionOutput {
	return o
}

func (o SystemdUnitSectionOutput) ToSystemdUnitSectionPtrOutput() SystemdUnitSectionPtrOutput {
	return o.ToSystemdUnitSectionPtrOutputWithContext(context.Background())
}

func (o SystemdUnitSectionOutput) ToSystemdUnitSectionPtrOutputWithContext(ctx context.Context) SystemdUnitSectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemdUnitSection) *SystemdUnitSection {
		return &v
	}).(SystemdUnitSectionPtrOutput)
}

// Configures requirement dependencies, very similar in style to Requires=.
func (o SystemdUnitSectionOutput) BindsTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemdUnitSection) []string { return v.BindsTo }).(pulumi.StringArrayOutput)
}

// A short human readable title of the unit.
func (o SystemdUnitSectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemdUnitSection) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A space-separated list of URIs referencing documentation for this unit or its configuration.
func (o SystemdUnitSectionOutput) Documentation() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemdUnitSection) []string { return v.Documentation }).(pulumi.StringArrayOutput)
}

// Similar to Wants=, but declares a stronger requirement dependency.
func (o SystemdUnitSectionOutput) Requires() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemdUnitSection) []string { return v.Requires }).(pulumi.StringArrayOutput)
}

// Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.
func (o SystemdUnitSectionOutput) Requisite() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemdUnitSection) []string { return v.Requisite }).(pulumi.StringArrayOutput)
}

// Configures (weak) requirement dependencies on other units.
func (o SystemdUnitSectionOutput) Wants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemdUnitSection) []string { return v.Wants }).(pulumi.StringArrayOutput)
}

type SystemdUnitSectionPtrOutput struct{ *pulumi.OutputState }

func (SystemdUnitSectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemdUnitSection)(nil)).Elem()
}

func (o SystemdUnitSectionPtrOutput) ToSystemdUnitSectionPtrOutput() SystemdUnitSectionPtrOutput {
	return o
}

func (o SystemdUnitSectionPtrOutput) ToSystemdUnitSectionPtrOutputWithContext(ctx context.Context) SystemdUnitSectionPtrOutput {
	return o
}

func (o SystemdUnitSectionPtrOutput) Elem() SystemdUnitSectionOutput {
	return o.ApplyT(func(v *SystemdUnitSection) SystemdUnitSection {
		if v != nil {
			return *v
		}
		var ret SystemdUnitSection
		return ret
	}).(SystemdUnitSectionOutput)
}

// Configures requirement dependencies, very similar in style to Requires=.
func (o SystemdUnitSectionPtrOutput) BindsTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SystemdUnitSection) []string {
		if v == nil {
			return nil
		}
		return v.BindsTo
	}).(pulumi.StringArrayOutput)
}

// A short human readable title of the unit.
func (o SystemdUnitSectionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemdUnitSection) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// A space-separated list of URIs referencing documentation for this unit or its configuration.
func (o SystemdUnitSectionPtrOutput) Documentation() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SystemdUnitSection) []string {
		if v == nil {
			return nil
		}
		return v.Documentation
	}).(pulumi.StringArrayOutput)
}

// Similar to Wants=, but declares a stronger requirement dependency.
func (o SystemdUnitSectionPtrOutput) Requires() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SystemdUnitSection) []string {
		if v == nil {
			return nil
		}
		return v.Requires
	}).(pulumi.StringArrayOutput)
}

// Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.
func (o SystemdUnitSectionPtrOutput) Requisite() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SystemdUnitSection) []string {
		if v == nil {
			return nil
		}
		return v.Requisite
	}).(pulumi.StringArrayOutput)
}

// Configures (weak) requirement dependencies on other units.
func (o SystemdUnitSectionPtrOutput) Wants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SystemdUnitSection) []string {
		if v == nil {
			return nil
		}
		return v.Wants
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CniBridgeIpamInput)(nil)).Elem(), CniBridgeIpamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CniBridgeIpamPtrInput)(nil)).Elem(), CniBridgeIpamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CniBridgePluginConfigurationInput)(nil)).Elem(), CniBridgePluginConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CniBridgePluginConfigurationPtrInput)(nil)).Elem(), CniBridgePluginConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CniLoopbackPluginConfigurationInput)(nil)).Elem(), CniLoopbackPluginConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CniLoopbackPluginConfigurationPtrInput)(nil)).Elem(), CniLoopbackPluginConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdConfigurationPropsInput)(nil)).Elem(), EtcdConfigurationPropsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdConfigurationPropsArrayInput)(nil)).Elem(), EtcdConfigurationPropsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdNodeInput)(nil)).Elem(), EtcdNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdInstallSectionInput)(nil)).Elem(), SystemdInstallSectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdInstallSectionPtrInput)(nil)).Elem(), SystemdInstallSectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdServiceSectionInput)(nil)).Elem(), SystemdServiceSectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdUnitSectionInput)(nil)).Elem(), SystemdUnitSectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdUnitSectionPtrInput)(nil)).Elem(), SystemdUnitSectionArgs{})
	pulumi.RegisterOutputType(CniBridgeIpamOutput{})
	pulumi.RegisterOutputType(CniBridgeIpamPtrOutput{})
	pulumi.RegisterOutputType(CniBridgePluginConfigurationOutput{})
	pulumi.RegisterOutputType(CniBridgePluginConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CniLoopbackPluginConfigurationOutput{})
	pulumi.RegisterOutputType(CniLoopbackPluginConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EtcdConfigurationPropsOutput{})
	pulumi.RegisterOutputType(EtcdConfigurationPropsArrayOutput{})
	pulumi.RegisterOutputType(EtcdNodeOutput{})
	pulumi.RegisterOutputType(EtcdNodeMapOutput{})
	pulumi.RegisterOutputType(SystemdInstallSectionOutput{})
	pulumi.RegisterOutputType(SystemdInstallSectionPtrOutput{})
	pulumi.RegisterOutputType(SystemdServiceSectionOutput{})
	pulumi.RegisterOutputType(SystemdUnitSectionOutput{})
	pulumi.RegisterOutputType(SystemdUnitSectionPtrOutput{})
}
