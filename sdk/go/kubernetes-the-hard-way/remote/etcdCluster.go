// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tls"
)

// Creates an etcd cluster from one or more remote systems.
type EtcdCluster struct {
	pulumi.ResourceState

	// TODO
	Architecture ArchitecturePtrOutput `pulumi:"architecture"`
	// TODO
	BinaryDirectory pulumi.StringPtrOutput `pulumi:"binaryDirectory"`
	// The TLS bundle.
	Bundle tls.BundleOutput `pulumi:"bundle"`
	// Map of node name to etcd configuration.
	Configuration EtcdConfigurationMapOutput `pulumi:"configuration"`
	// The directory to use for etcd configuration.
	ConfigurationDirectory pulumi.StringPtrOutput `pulumi:"configurationDirectory"`
	// The directory to use for etcd data.
	DataDirectory pulumi.StringPtrOutput `pulumi:"dataDirectory"`
	// Map of node name to etcd install.
	Install EtcdInstallMapOutput `pulumi:"install"`
	// Etcd node configuration. The key should be a name used to identify the node.
	Nodes EtcdNodeMapOutput `pulumi:"nodes"`
	// Map of node name to etcd systemd service.
	Service EtcdServiceMapOutput `pulumi:"service"`
	// Map of node name to etcd start commands.
	Start StartEtcdMapOutput `pulumi:"start"`
	// The version to install.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewEtcdCluster registers a new resource with the given unique name, arguments, and options.
func NewEtcdCluster(ctx *pulumi.Context,
	name string, args *EtcdClusterArgs, opts ...pulumi.ResourceOption) (*EtcdCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bundle == nil {
		return nil, errors.New("invalid value for required argument 'Bundle'")
	}
	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EtcdCluster
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:EtcdCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type etcdClusterArgs struct {
	// TODO
	Architecture *Architecture `pulumi:"architecture"`
	// TODO
	BinaryDirectory *string `pulumi:"binaryDirectory"`
	// The TLS bundle.
	Bundle tls.Bundle `pulumi:"bundle"`
	// The directory to use for etcd configuration.
	ConfigurationDirectory *string `pulumi:"configurationDirectory"`
	// The directory to use for etcd data.
	DataDirectory *string `pulumi:"dataDirectory"`
	// Etcd node configuration. The key should be a name used to identify the node.
	Nodes map[string]EtcdNode `pulumi:"nodes"`
	// The version to install.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a EtcdCluster resource.
type EtcdClusterArgs struct {
	// TODO
	Architecture ArchitecturePtrInput
	// TODO
	BinaryDirectory pulumi.StringPtrInput
	// The TLS bundle.
	Bundle tls.BundleInput
	// The directory to use for etcd configuration.
	ConfigurationDirectory pulumi.StringPtrInput
	// The directory to use for etcd data.
	DataDirectory pulumi.StringPtrInput
	// Etcd node configuration. The key should be a name used to identify the node.
	Nodes map[string]EtcdNodeInput
	// The version to install.
	Version pulumi.StringPtrInput
}

func (EtcdClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*etcdClusterArgs)(nil)).Elem()
}

type EtcdClusterInput interface {
	pulumi.Input

	ToEtcdClusterOutput() EtcdClusterOutput
	ToEtcdClusterOutputWithContext(ctx context.Context) EtcdClusterOutput
}

func (*EtcdCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**EtcdCluster)(nil)).Elem()
}

func (i *EtcdCluster) ToEtcdClusterOutput() EtcdClusterOutput {
	return i.ToEtcdClusterOutputWithContext(context.Background())
}

func (i *EtcdCluster) ToEtcdClusterOutputWithContext(ctx context.Context) EtcdClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdClusterOutput)
}

// EtcdClusterArrayInput is an input type that accepts EtcdClusterArray and EtcdClusterArrayOutput values.
// You can construct a concrete instance of `EtcdClusterArrayInput` via:
//
//	EtcdClusterArray{ EtcdClusterArgs{...} }
type EtcdClusterArrayInput interface {
	pulumi.Input

	ToEtcdClusterArrayOutput() EtcdClusterArrayOutput
	ToEtcdClusterArrayOutputWithContext(context.Context) EtcdClusterArrayOutput
}

type EtcdClusterArray []EtcdClusterInput

func (EtcdClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EtcdCluster)(nil)).Elem()
}

func (i EtcdClusterArray) ToEtcdClusterArrayOutput() EtcdClusterArrayOutput {
	return i.ToEtcdClusterArrayOutputWithContext(context.Background())
}

func (i EtcdClusterArray) ToEtcdClusterArrayOutputWithContext(ctx context.Context) EtcdClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdClusterArrayOutput)
}

// EtcdClusterMapInput is an input type that accepts EtcdClusterMap and EtcdClusterMapOutput values.
// You can construct a concrete instance of `EtcdClusterMapInput` via:
//
//	EtcdClusterMap{ "key": EtcdClusterArgs{...} }
type EtcdClusterMapInput interface {
	pulumi.Input

	ToEtcdClusterMapOutput() EtcdClusterMapOutput
	ToEtcdClusterMapOutputWithContext(context.Context) EtcdClusterMapOutput
}

type EtcdClusterMap map[string]EtcdClusterInput

func (EtcdClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EtcdCluster)(nil)).Elem()
}

func (i EtcdClusterMap) ToEtcdClusterMapOutput() EtcdClusterMapOutput {
	return i.ToEtcdClusterMapOutputWithContext(context.Background())
}

func (i EtcdClusterMap) ToEtcdClusterMapOutputWithContext(ctx context.Context) EtcdClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdClusterMapOutput)
}

type EtcdClusterOutput struct{ *pulumi.OutputState }

func (EtcdClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EtcdCluster)(nil)).Elem()
}

func (o EtcdClusterOutput) ToEtcdClusterOutput() EtcdClusterOutput {
	return o
}

func (o EtcdClusterOutput) ToEtcdClusterOutputWithContext(ctx context.Context) EtcdClusterOutput {
	return o
}

// TODO
func (o EtcdClusterOutput) Architecture() ArchitecturePtrOutput {
	return o.ApplyT(func(v *EtcdCluster) ArchitecturePtrOutput { return v.Architecture }).(ArchitecturePtrOutput)
}

// TODO
func (o EtcdClusterOutput) BinaryDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtcdCluster) pulumi.StringPtrOutput { return v.BinaryDirectory }).(pulumi.StringPtrOutput)
}

// The TLS bundle.
func (o EtcdClusterOutput) Bundle() tls.BundleOutput {
	return o.ApplyT(func(v *EtcdCluster) tls.BundleOutput { return v.Bundle }).(tls.BundleOutput)
}

// Map of node name to etcd configuration.
func (o EtcdClusterOutput) Configuration() EtcdConfigurationMapOutput {
	return o.ApplyT(func(v *EtcdCluster) EtcdConfigurationMapOutput { return v.Configuration }).(EtcdConfigurationMapOutput)
}

// The directory to use for etcd configuration.
func (o EtcdClusterOutput) ConfigurationDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtcdCluster) pulumi.StringPtrOutput { return v.ConfigurationDirectory }).(pulumi.StringPtrOutput)
}

// The directory to use for etcd data.
func (o EtcdClusterOutput) DataDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtcdCluster) pulumi.StringPtrOutput { return v.DataDirectory }).(pulumi.StringPtrOutput)
}

// Map of node name to etcd install.
func (o EtcdClusterOutput) Install() EtcdInstallMapOutput {
	return o.ApplyT(func(v *EtcdCluster) EtcdInstallMapOutput { return v.Install }).(EtcdInstallMapOutput)
}

// Etcd node configuration. The key should be a name used to identify the node.
func (o EtcdClusterOutput) Nodes() EtcdNodeMapOutput {
	return o.ApplyT(func(v *EtcdCluster) EtcdNodeMapOutput { return v.Nodes }).(EtcdNodeMapOutput)
}

// Map of node name to etcd systemd service.
func (o EtcdClusterOutput) Service() EtcdServiceMapOutput {
	return o.ApplyT(func(v *EtcdCluster) EtcdServiceMapOutput { return v.Service }).(EtcdServiceMapOutput)
}

// Map of node name to etcd start commands.
func (o EtcdClusterOutput) Start() StartEtcdMapOutput {
	return o.ApplyT(func(v *EtcdCluster) StartEtcdMapOutput { return v.Start }).(StartEtcdMapOutput)
}

// The version to install.
func (o EtcdClusterOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtcdCluster) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type EtcdClusterArrayOutput struct{ *pulumi.OutputState }

func (EtcdClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EtcdCluster)(nil)).Elem()
}

func (o EtcdClusterArrayOutput) ToEtcdClusterArrayOutput() EtcdClusterArrayOutput {
	return o
}

func (o EtcdClusterArrayOutput) ToEtcdClusterArrayOutputWithContext(ctx context.Context) EtcdClusterArrayOutput {
	return o
}

func (o EtcdClusterArrayOutput) Index(i pulumi.IntInput) EtcdClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EtcdCluster {
		return vs[0].([]*EtcdCluster)[vs[1].(int)]
	}).(EtcdClusterOutput)
}

type EtcdClusterMapOutput struct{ *pulumi.OutputState }

func (EtcdClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EtcdCluster)(nil)).Elem()
}

func (o EtcdClusterMapOutput) ToEtcdClusterMapOutput() EtcdClusterMapOutput {
	return o
}

func (o EtcdClusterMapOutput) ToEtcdClusterMapOutputWithContext(ctx context.Context) EtcdClusterMapOutput {
	return o
}

func (o EtcdClusterMapOutput) MapIndex(k pulumi.StringInput) EtcdClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EtcdCluster {
		return vs[0].(map[string]*EtcdCluster)[vs[1].(string)]
	}).(EtcdClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdClusterInput)(nil)).Elem(), &EtcdCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdClusterArrayInput)(nil)).Elem(), EtcdClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdClusterMapInput)(nil)).Elem(), EtcdClusterMap{})
	pulumi.RegisterOutputType(EtcdClusterOutput{})
	pulumi.RegisterOutputType(EtcdClusterArrayOutput{})
	pulumi.RegisterOutputType(EtcdClusterMapOutput{})
}
