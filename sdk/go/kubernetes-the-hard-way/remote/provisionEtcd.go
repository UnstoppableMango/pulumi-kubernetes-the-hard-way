// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Starts etcd on a remote system.
type ProvisionEtcd struct {
	pulumi.ResourceState

	// Etcd configuration.
	Configuration EtcdConfigurationOutput `pulumi:"configuration"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// Install etcd.
	Install EtcdInstallOutput `pulumi:"install"`
	// Start etcd
	Start StartEtcdOutput `pulumi:"start"`
}

// NewProvisionEtcd registers a new resource with the given unique name, arguments, and options.
func NewProvisionEtcd(ctx *pulumi.Context,
	name string, args *ProvisionEtcdArgs, opts ...pulumi.ResourceOption) (*ProvisionEtcd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProvisionEtcd
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:ProvisionEtcd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type provisionEtcdArgs struct {
	// Etcd configuration.
	Configuration *EtcdConfiguration `pulumi:"configuration"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
}

// The set of arguments for constructing a ProvisionEtcd resource.
type ProvisionEtcdArgs struct {
	// Etcd configuration.
	Configuration EtcdConfigurationInput
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
}

func (ProvisionEtcdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*provisionEtcdArgs)(nil)).Elem()
}

type ProvisionEtcdInput interface {
	pulumi.Input

	ToProvisionEtcdOutput() ProvisionEtcdOutput
	ToProvisionEtcdOutputWithContext(ctx context.Context) ProvisionEtcdOutput
}

func (*ProvisionEtcd) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionEtcd)(nil)).Elem()
}

func (i *ProvisionEtcd) ToProvisionEtcdOutput() ProvisionEtcdOutput {
	return i.ToProvisionEtcdOutputWithContext(context.Background())
}

func (i *ProvisionEtcd) ToProvisionEtcdOutputWithContext(ctx context.Context) ProvisionEtcdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionEtcdOutput)
}

// ProvisionEtcdArrayInput is an input type that accepts ProvisionEtcdArray and ProvisionEtcdArrayOutput values.
// You can construct a concrete instance of `ProvisionEtcdArrayInput` via:
//
//	ProvisionEtcdArray{ ProvisionEtcdArgs{...} }
type ProvisionEtcdArrayInput interface {
	pulumi.Input

	ToProvisionEtcdArrayOutput() ProvisionEtcdArrayOutput
	ToProvisionEtcdArrayOutputWithContext(context.Context) ProvisionEtcdArrayOutput
}

type ProvisionEtcdArray []ProvisionEtcdInput

func (ProvisionEtcdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProvisionEtcd)(nil)).Elem()
}

func (i ProvisionEtcdArray) ToProvisionEtcdArrayOutput() ProvisionEtcdArrayOutput {
	return i.ToProvisionEtcdArrayOutputWithContext(context.Background())
}

func (i ProvisionEtcdArray) ToProvisionEtcdArrayOutputWithContext(ctx context.Context) ProvisionEtcdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionEtcdArrayOutput)
}

// ProvisionEtcdMapInput is an input type that accepts ProvisionEtcdMap and ProvisionEtcdMapOutput values.
// You can construct a concrete instance of `ProvisionEtcdMapInput` via:
//
//	ProvisionEtcdMap{ "key": ProvisionEtcdArgs{...} }
type ProvisionEtcdMapInput interface {
	pulumi.Input

	ToProvisionEtcdMapOutput() ProvisionEtcdMapOutput
	ToProvisionEtcdMapOutputWithContext(context.Context) ProvisionEtcdMapOutput
}

type ProvisionEtcdMap map[string]ProvisionEtcdInput

func (ProvisionEtcdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProvisionEtcd)(nil)).Elem()
}

func (i ProvisionEtcdMap) ToProvisionEtcdMapOutput() ProvisionEtcdMapOutput {
	return i.ToProvisionEtcdMapOutputWithContext(context.Background())
}

func (i ProvisionEtcdMap) ToProvisionEtcdMapOutputWithContext(ctx context.Context) ProvisionEtcdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionEtcdMapOutput)
}

type ProvisionEtcdOutput struct{ *pulumi.OutputState }

func (ProvisionEtcdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionEtcd)(nil)).Elem()
}

func (o ProvisionEtcdOutput) ToProvisionEtcdOutput() ProvisionEtcdOutput {
	return o
}

func (o ProvisionEtcdOutput) ToProvisionEtcdOutputWithContext(ctx context.Context) ProvisionEtcdOutput {
	return o
}

// Etcd configuration.
func (o ProvisionEtcdOutput) Configuration() EtcdConfigurationOutput {
	return o.ApplyT(func(v *ProvisionEtcd) EtcdConfigurationOutput { return v.Configuration }).(EtcdConfigurationOutput)
}

// The parameters with which to connect to the remote host.
func (o ProvisionEtcdOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *ProvisionEtcd) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// Install etcd.
func (o ProvisionEtcdOutput) Install() EtcdInstallOutput {
	return o.ApplyT(func(v *ProvisionEtcd) EtcdInstallOutput { return v.Install }).(EtcdInstallOutput)
}

// Start etcd
func (o ProvisionEtcdOutput) Start() StartEtcdOutput {
	return o.ApplyT(func(v *ProvisionEtcd) StartEtcdOutput { return v.Start }).(StartEtcdOutput)
}

type ProvisionEtcdArrayOutput struct{ *pulumi.OutputState }

func (ProvisionEtcdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProvisionEtcd)(nil)).Elem()
}

func (o ProvisionEtcdArrayOutput) ToProvisionEtcdArrayOutput() ProvisionEtcdArrayOutput {
	return o
}

func (o ProvisionEtcdArrayOutput) ToProvisionEtcdArrayOutputWithContext(ctx context.Context) ProvisionEtcdArrayOutput {
	return o
}

func (o ProvisionEtcdArrayOutput) Index(i pulumi.IntInput) ProvisionEtcdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProvisionEtcd {
		return vs[0].([]*ProvisionEtcd)[vs[1].(int)]
	}).(ProvisionEtcdOutput)
}

type ProvisionEtcdMapOutput struct{ *pulumi.OutputState }

func (ProvisionEtcdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProvisionEtcd)(nil)).Elem()
}

func (o ProvisionEtcdMapOutput) ToProvisionEtcdMapOutput() ProvisionEtcdMapOutput {
	return o
}

func (o ProvisionEtcdMapOutput) ToProvisionEtcdMapOutputWithContext(ctx context.Context) ProvisionEtcdMapOutput {
	return o
}

func (o ProvisionEtcdMapOutput) MapIndex(k pulumi.StringInput) ProvisionEtcdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProvisionEtcd {
		return vs[0].(map[string]*ProvisionEtcd)[vs[1].(string)]
	}).(ProvisionEtcdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionEtcdInput)(nil)).Elem(), &ProvisionEtcd{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionEtcdArrayInput)(nil)).Elem(), ProvisionEtcdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionEtcdMapInput)(nil)).Elem(), ProvisionEtcdMap{})
	pulumi.RegisterOutputType(ProvisionEtcdOutput{})
	pulumi.RegisterOutputType(ProvisionEtcdArrayOutput{})
	pulumi.RegisterOutputType(ProvisionEtcdMapOutput{})
}
