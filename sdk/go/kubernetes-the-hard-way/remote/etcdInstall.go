// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tools"
)

// Represents an etcd binary on a remote system.
type EtcdInstall struct {
	pulumi.ResourceState

	// The etcd CPU architecture.
	Architecture ArchitectureOutput `pulumi:"architecture"`
	// The name of the etcd release archive.
	ArchiveName pulumi.StringOutput `pulumi:"archiveName"`
	// Directory to install the `etcd` and `etcdctl` binaries.
	Directory pulumi.StringOutput `pulumi:"directory"`
	// The etcd download operation.
	Download DownloadOutput `pulumi:"download"`
	// The path to the etcd binary on the remote system.
	EtcdPath pulumi.StringOutput `pulumi:"etcdPath"`
	// The path to the etcdctl binary on the remote system.
	EtcdctlPath pulumi.StringOutput `pulumi:"etcdctlPath"`
	// The operation to create the install directory.
	Mkdir tools.MkdirOutput `pulumi:"mkdir"`
	// The operation to move the etcd binary to the install directory.
	MvEtcd tools.MvOutput `pulumi:"mvEtcd"`
	// The operation to move the etcdctl binary to the install directory.
	MvEtcdctl tools.MvOutput `pulumi:"mvEtcdctl"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The tar operation.
	Tar tools.TarOutput `pulumi:"tar"`
	// The url used to download etcd.
	Url pulumi.StringOutput `pulumi:"url"`
	// The version of etcd downloaded.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewEtcdInstall registers a new resource with the given unique name, arguments, and options.
func NewEtcdInstall(ctx *pulumi.Context,
	name string, args *EtcdInstallArgs, opts ...pulumi.ResourceOption) (*EtcdInstall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	if args.Directory == nil {
		args.Directory = pulumi.StringPtr("/usr/local/bin")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EtcdInstall
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:EtcdInstall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type etcdInstallArgs struct {
	// The etcd CPU architecture.
	Architecture *Architecture `pulumi:"architecture"`
	// The connection details.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// Directory to install the `etcd` and `etcdctl` binaries.
	Directory *string `pulumi:"directory"`
	// The version of etcd to install.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a EtcdInstall resource.
type EtcdInstallArgs struct {
	// The etcd CPU architecture.
	Architecture ArchitecturePtrInput
	// The connection details.
	Connection pulumiCommand.ConnectionInput
	// Directory to install the `etcd` and `etcdctl` binaries.
	Directory pulumi.StringPtrInput
	// The version of etcd to install.
	Version pulumi.StringPtrInput
}

func (EtcdInstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*etcdInstallArgs)(nil)).Elem()
}

func (r *EtcdInstall) Etcdctl(ctx *pulumi.Context) (tools.EtcdctlOutput, error) {
	out, err := ctx.Call("kubernetes-the-hard-way:remote:EtcdInstall/etcdctl", nil, etcdInstallEtcdctlResultOutput{}, r)
	if err != nil {
		return tools.EtcdctlOutput{}, err
	}
	return out.(etcdInstallEtcdctlResultOutput).Result(), nil
}

type etcdInstallEtcdctlResult struct {
	Result *tools.Etcdctl `pulumi:"result"`
}

type etcdInstallEtcdctlResultOutput struct{ *pulumi.OutputState }

func (etcdInstallEtcdctlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*etcdInstallEtcdctlResult)(nil)).Elem()
}

func (o etcdInstallEtcdctlResultOutput) Result() tools.EtcdctlOutput {
	return o.ApplyT(func(v etcdInstallEtcdctlResult) *tools.Etcdctl { return v.Result }).(tools.EtcdctlOutput)
}

type EtcdInstallInput interface {
	pulumi.Input

	ToEtcdInstallOutput() EtcdInstallOutput
	ToEtcdInstallOutputWithContext(ctx context.Context) EtcdInstallOutput
}

func (*EtcdInstall) ElementType() reflect.Type {
	return reflect.TypeOf((**EtcdInstall)(nil)).Elem()
}

func (i *EtcdInstall) ToEtcdInstallOutput() EtcdInstallOutput {
	return i.ToEtcdInstallOutputWithContext(context.Background())
}

func (i *EtcdInstall) ToEtcdInstallOutputWithContext(ctx context.Context) EtcdInstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdInstallOutput)
}

// EtcdInstallArrayInput is an input type that accepts EtcdInstallArray and EtcdInstallArrayOutput values.
// You can construct a concrete instance of `EtcdInstallArrayInput` via:
//
//	EtcdInstallArray{ EtcdInstallArgs{...} }
type EtcdInstallArrayInput interface {
	pulumi.Input

	ToEtcdInstallArrayOutput() EtcdInstallArrayOutput
	ToEtcdInstallArrayOutputWithContext(context.Context) EtcdInstallArrayOutput
}

type EtcdInstallArray []EtcdInstallInput

func (EtcdInstallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EtcdInstall)(nil)).Elem()
}

func (i EtcdInstallArray) ToEtcdInstallArrayOutput() EtcdInstallArrayOutput {
	return i.ToEtcdInstallArrayOutputWithContext(context.Background())
}

func (i EtcdInstallArray) ToEtcdInstallArrayOutputWithContext(ctx context.Context) EtcdInstallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdInstallArrayOutput)
}

// EtcdInstallMapInput is an input type that accepts EtcdInstallMap and EtcdInstallMapOutput values.
// You can construct a concrete instance of `EtcdInstallMapInput` via:
//
//	EtcdInstallMap{ "key": EtcdInstallArgs{...} }
type EtcdInstallMapInput interface {
	pulumi.Input

	ToEtcdInstallMapOutput() EtcdInstallMapOutput
	ToEtcdInstallMapOutputWithContext(context.Context) EtcdInstallMapOutput
}

type EtcdInstallMap map[string]EtcdInstallInput

func (EtcdInstallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EtcdInstall)(nil)).Elem()
}

func (i EtcdInstallMap) ToEtcdInstallMapOutput() EtcdInstallMapOutput {
	return i.ToEtcdInstallMapOutputWithContext(context.Background())
}

func (i EtcdInstallMap) ToEtcdInstallMapOutputWithContext(ctx context.Context) EtcdInstallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtcdInstallMapOutput)
}

type EtcdInstallOutput struct{ *pulumi.OutputState }

func (EtcdInstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EtcdInstall)(nil)).Elem()
}

func (o EtcdInstallOutput) ToEtcdInstallOutput() EtcdInstallOutput {
	return o
}

func (o EtcdInstallOutput) ToEtcdInstallOutputWithContext(ctx context.Context) EtcdInstallOutput {
	return o
}

// The etcd CPU architecture.
func (o EtcdInstallOutput) Architecture() ArchitectureOutput {
	return o.ApplyT(func(v *EtcdInstall) ArchitectureOutput { return v.Architecture }).(ArchitectureOutput)
}

// The name of the etcd release archive.
func (o EtcdInstallOutput) ArchiveName() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.ArchiveName }).(pulumi.StringOutput)
}

// Directory to install the `etcd` and `etcdctl` binaries.
func (o EtcdInstallOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.Directory }).(pulumi.StringOutput)
}

// The etcd download operation.
func (o EtcdInstallOutput) Download() DownloadOutput {
	return o.ApplyT(func(v *EtcdInstall) DownloadOutput { return v.Download }).(DownloadOutput)
}

// The path to the etcd binary on the remote system.
func (o EtcdInstallOutput) EtcdPath() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.EtcdPath }).(pulumi.StringOutput)
}

// The path to the etcdctl binary on the remote system.
func (o EtcdInstallOutput) EtcdctlPath() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.EtcdctlPath }).(pulumi.StringOutput)
}

// The operation to create the install directory.
func (o EtcdInstallOutput) Mkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.MkdirOutput { return v.Mkdir }).(tools.MkdirOutput)
}

// The operation to move the etcd binary to the install directory.
func (o EtcdInstallOutput) MvEtcd() tools.MvOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.MvOutput { return v.MvEtcd }).(tools.MvOutput)
}

// The operation to move the etcdctl binary to the install directory.
func (o EtcdInstallOutput) MvEtcdctl() tools.MvOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.MvOutput { return v.MvEtcdctl }).(tools.MvOutput)
}

// The name of the resource.
func (o EtcdInstallOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The tar operation.
func (o EtcdInstallOutput) Tar() tools.TarOutput {
	return o.ApplyT(func(v *EtcdInstall) tools.TarOutput { return v.Tar }).(tools.TarOutput)
}

// The url used to download etcd.
func (o EtcdInstallOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The version of etcd downloaded.
func (o EtcdInstallOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *EtcdInstall) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type EtcdInstallArrayOutput struct{ *pulumi.OutputState }

func (EtcdInstallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EtcdInstall)(nil)).Elem()
}

func (o EtcdInstallArrayOutput) ToEtcdInstallArrayOutput() EtcdInstallArrayOutput {
	return o
}

func (o EtcdInstallArrayOutput) ToEtcdInstallArrayOutputWithContext(ctx context.Context) EtcdInstallArrayOutput {
	return o
}

func (o EtcdInstallArrayOutput) Index(i pulumi.IntInput) EtcdInstallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EtcdInstall {
		return vs[0].([]*EtcdInstall)[vs[1].(int)]
	}).(EtcdInstallOutput)
}

type EtcdInstallMapOutput struct{ *pulumi.OutputState }

func (EtcdInstallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EtcdInstall)(nil)).Elem()
}

func (o EtcdInstallMapOutput) ToEtcdInstallMapOutput() EtcdInstallMapOutput {
	return o
}

func (o EtcdInstallMapOutput) ToEtcdInstallMapOutputWithContext(ctx context.Context) EtcdInstallMapOutput {
	return o
}

func (o EtcdInstallMapOutput) MapIndex(k pulumi.StringInput) EtcdInstallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EtcdInstall {
		return vs[0].(map[string]*EtcdInstall)[vs[1].(string)]
	}).(EtcdInstallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdInstallInput)(nil)).Elem(), &EtcdInstall{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdInstallArrayInput)(nil)).Elem(), EtcdInstallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtcdInstallMapInput)(nil)).Elem(), EtcdInstallMap{})
	pulumi.RegisterOutputType(EtcdInstallOutput{})
	pulumi.RegisterOutputType(etcdInstallEtcdctlResultOutput{})
	pulumi.RegisterOutputType(EtcdInstallArrayOutput{})
	pulumi.RegisterOutputType(EtcdInstallMapOutput{})
}
