// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Verifies that all worker node pre-requisites have been met.
type WorkerPreRequisites struct {
	pulumi.ResourceState

	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// Verifies that the conntrack binary exists.
	Conntrack pulumiCommand.CommandOutput `pulumi:"conntrack"`
	// Verifies that the ipset binary exists.
	Ipset pulumiCommand.CommandOutput `pulumi:"ipset"`
	// Verifies that the socat binary exists.
	Socat pulumiCommand.CommandOutput `pulumi:"socat"`
	// Verifies that swap is disabled.
	Swap pulumiCommand.CommandOutput `pulumi:"swap"`
	// Trigger recheck on changes to this input.
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
}

// NewWorkerPreRequisites registers a new resource with the given unique name, arguments, and options.
func NewWorkerPreRequisites(ctx *pulumi.Context,
	name string, args *WorkerPreRequisitesArgs, opts ...pulumi.ResourceOption) (*WorkerPreRequisites, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkerPreRequisites
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:WorkerPreRequisites", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type workerPreRequisitesArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// Trigger recheck on changes to this input.
	Triggers []interface{} `pulumi:"triggers"`
}

// The set of arguments for constructing a WorkerPreRequisites resource.
type WorkerPreRequisitesArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
	// Trigger recheck on changes to this input.
	Triggers pulumi.ArrayInput
}

func (WorkerPreRequisitesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPreRequisitesArgs)(nil)).Elem()
}

type WorkerPreRequisitesInput interface {
	pulumi.Input

	ToWorkerPreRequisitesOutput() WorkerPreRequisitesOutput
	ToWorkerPreRequisitesOutputWithContext(ctx context.Context) WorkerPreRequisitesOutput
}

func (*WorkerPreRequisites) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPreRequisites)(nil)).Elem()
}

func (i *WorkerPreRequisites) ToWorkerPreRequisitesOutput() WorkerPreRequisitesOutput {
	return i.ToWorkerPreRequisitesOutputWithContext(context.Background())
}

func (i *WorkerPreRequisites) ToWorkerPreRequisitesOutputWithContext(ctx context.Context) WorkerPreRequisitesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPreRequisitesOutput)
}

// WorkerPreRequisitesArrayInput is an input type that accepts WorkerPreRequisitesArray and WorkerPreRequisitesArrayOutput values.
// You can construct a concrete instance of `WorkerPreRequisitesArrayInput` via:
//
//	WorkerPreRequisitesArray{ WorkerPreRequisitesArgs{...} }
type WorkerPreRequisitesArrayInput interface {
	pulumi.Input

	ToWorkerPreRequisitesArrayOutput() WorkerPreRequisitesArrayOutput
	ToWorkerPreRequisitesArrayOutputWithContext(context.Context) WorkerPreRequisitesArrayOutput
}

type WorkerPreRequisitesArray []WorkerPreRequisitesInput

func (WorkerPreRequisitesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPreRequisites)(nil)).Elem()
}

func (i WorkerPreRequisitesArray) ToWorkerPreRequisitesArrayOutput() WorkerPreRequisitesArrayOutput {
	return i.ToWorkerPreRequisitesArrayOutputWithContext(context.Background())
}

func (i WorkerPreRequisitesArray) ToWorkerPreRequisitesArrayOutputWithContext(ctx context.Context) WorkerPreRequisitesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPreRequisitesArrayOutput)
}

// WorkerPreRequisitesMapInput is an input type that accepts WorkerPreRequisitesMap and WorkerPreRequisitesMapOutput values.
// You can construct a concrete instance of `WorkerPreRequisitesMapInput` via:
//
//	WorkerPreRequisitesMap{ "key": WorkerPreRequisitesArgs{...} }
type WorkerPreRequisitesMapInput interface {
	pulumi.Input

	ToWorkerPreRequisitesMapOutput() WorkerPreRequisitesMapOutput
	ToWorkerPreRequisitesMapOutputWithContext(context.Context) WorkerPreRequisitesMapOutput
}

type WorkerPreRequisitesMap map[string]WorkerPreRequisitesInput

func (WorkerPreRequisitesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPreRequisites)(nil)).Elem()
}

func (i WorkerPreRequisitesMap) ToWorkerPreRequisitesMapOutput() WorkerPreRequisitesMapOutput {
	return i.ToWorkerPreRequisitesMapOutputWithContext(context.Background())
}

func (i WorkerPreRequisitesMap) ToWorkerPreRequisitesMapOutputWithContext(ctx context.Context) WorkerPreRequisitesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPreRequisitesMapOutput)
}

type WorkerPreRequisitesOutput struct{ *pulumi.OutputState }

func (WorkerPreRequisitesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerPreRequisites)(nil)).Elem()
}

func (o WorkerPreRequisitesOutput) ToWorkerPreRequisitesOutput() WorkerPreRequisitesOutput {
	return o
}

func (o WorkerPreRequisitesOutput) ToWorkerPreRequisitesOutputWithContext(ctx context.Context) WorkerPreRequisitesOutput {
	return o
}

// The parameters with which to connect to the remote host.
func (o WorkerPreRequisitesOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *WorkerPreRequisites) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// Verifies that the conntrack binary exists.
func (o WorkerPreRequisitesOutput) Conntrack() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *WorkerPreRequisites) pulumiCommand.CommandOutput { return v.Conntrack }).(pulumiCommand.CommandOutput)
}

// Verifies that the ipset binary exists.
func (o WorkerPreRequisitesOutput) Ipset() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *WorkerPreRequisites) pulumiCommand.CommandOutput { return v.Ipset }).(pulumiCommand.CommandOutput)
}

// Verifies that the socat binary exists.
func (o WorkerPreRequisitesOutput) Socat() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *WorkerPreRequisites) pulumiCommand.CommandOutput { return v.Socat }).(pulumiCommand.CommandOutput)
}

// Verifies that swap is disabled.
func (o WorkerPreRequisitesOutput) Swap() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *WorkerPreRequisites) pulumiCommand.CommandOutput { return v.Swap }).(pulumiCommand.CommandOutput)
}

// Trigger recheck on changes to this input.
func (o WorkerPreRequisitesOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *WorkerPreRequisites) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

type WorkerPreRequisitesArrayOutput struct{ *pulumi.OutputState }

func (WorkerPreRequisitesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerPreRequisites)(nil)).Elem()
}

func (o WorkerPreRequisitesArrayOutput) ToWorkerPreRequisitesArrayOutput() WorkerPreRequisitesArrayOutput {
	return o
}

func (o WorkerPreRequisitesArrayOutput) ToWorkerPreRequisitesArrayOutputWithContext(ctx context.Context) WorkerPreRequisitesArrayOutput {
	return o
}

func (o WorkerPreRequisitesArrayOutput) Index(i pulumi.IntInput) WorkerPreRequisitesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkerPreRequisites {
		return vs[0].([]*WorkerPreRequisites)[vs[1].(int)]
	}).(WorkerPreRequisitesOutput)
}

type WorkerPreRequisitesMapOutput struct{ *pulumi.OutputState }

func (WorkerPreRequisitesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerPreRequisites)(nil)).Elem()
}

func (o WorkerPreRequisitesMapOutput) ToWorkerPreRequisitesMapOutput() WorkerPreRequisitesMapOutput {
	return o
}

func (o WorkerPreRequisitesMapOutput) ToWorkerPreRequisitesMapOutputWithContext(ctx context.Context) WorkerPreRequisitesMapOutput {
	return o
}

func (o WorkerPreRequisitesMapOutput) MapIndex(k pulumi.StringInput) WorkerPreRequisitesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkerPreRequisites {
		return vs[0].(map[string]*WorkerPreRequisites)[vs[1].(string)]
	}).(WorkerPreRequisitesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPreRequisitesInput)(nil)).Elem(), &WorkerPreRequisites{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPreRequisitesArrayInput)(nil)).Elem(), WorkerPreRequisitesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPreRequisitesMapInput)(nil)).Elem(), WorkerPreRequisitesMap{})
	pulumi.RegisterOutputType(WorkerPreRequisitesOutput{})
	pulumi.RegisterOutputType(WorkerPreRequisitesArrayOutput{})
	pulumi.RegisterOutputType(WorkerPreRequisitesMapOutput{})
}
