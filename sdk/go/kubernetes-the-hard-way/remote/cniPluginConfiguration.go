// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tools"
)

// The CNI plugin configuration.
type CniPluginConfiguration struct {
	pulumi.ResourceState

	// The bridge plugin configuration.
	Bridge CniBridgePluginConfigurationOutput `pulumi:"bridge"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The plugin configuration directory.
	Directory pulumi.StringOutput `pulumi:"directory"`
	// The loopback plugin configuration.
	Loopback CniLoopbackPluginConfigurationOutput `pulumi:"loopback"`
	// The `directory` mkdir operation.
	Mkdir tools.MkdirOutput `pulumi:"mkdir"`
	// The subnet to use for the CNI bridge plugin configuration.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
}

// NewCniPluginConfiguration registers a new resource with the given unique name, arguments, and options.
func NewCniPluginConfiguration(ctx *pulumi.Context,
	name string, args *CniPluginConfigurationArgs, opts ...pulumi.ResourceOption) (*CniPluginConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CniPluginConfiguration
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:CniPluginConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type cniPluginConfigurationArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The plugin configuration directory.
	Directory *string `pulumi:"directory"`
	// The subnet to use for the CNI bridge plugin configuration.
	Subnet string `pulumi:"subnet"`
}

// The set of arguments for constructing a CniPluginConfiguration resource.
type CniPluginConfigurationArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
	// The plugin configuration directory.
	Directory pulumi.StringPtrInput
	// The subnet to use for the CNI bridge plugin configuration.
	Subnet pulumi.StringInput
}

func (CniPluginConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cniPluginConfigurationArgs)(nil)).Elem()
}

type CniPluginConfigurationInput interface {
	pulumi.Input

	ToCniPluginConfigurationOutput() CniPluginConfigurationOutput
	ToCniPluginConfigurationOutputWithContext(ctx context.Context) CniPluginConfigurationOutput
}

func (*CniPluginConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**CniPluginConfiguration)(nil)).Elem()
}

func (i *CniPluginConfiguration) ToCniPluginConfigurationOutput() CniPluginConfigurationOutput {
	return i.ToCniPluginConfigurationOutputWithContext(context.Background())
}

func (i *CniPluginConfiguration) ToCniPluginConfigurationOutputWithContext(ctx context.Context) CniPluginConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniPluginConfigurationOutput)
}

// CniPluginConfigurationArrayInput is an input type that accepts CniPluginConfigurationArray and CniPluginConfigurationArrayOutput values.
// You can construct a concrete instance of `CniPluginConfigurationArrayInput` via:
//
//	CniPluginConfigurationArray{ CniPluginConfigurationArgs{...} }
type CniPluginConfigurationArrayInput interface {
	pulumi.Input

	ToCniPluginConfigurationArrayOutput() CniPluginConfigurationArrayOutput
	ToCniPluginConfigurationArrayOutputWithContext(context.Context) CniPluginConfigurationArrayOutput
}

type CniPluginConfigurationArray []CniPluginConfigurationInput

func (CniPluginConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CniPluginConfiguration)(nil)).Elem()
}

func (i CniPluginConfigurationArray) ToCniPluginConfigurationArrayOutput() CniPluginConfigurationArrayOutput {
	return i.ToCniPluginConfigurationArrayOutputWithContext(context.Background())
}

func (i CniPluginConfigurationArray) ToCniPluginConfigurationArrayOutputWithContext(ctx context.Context) CniPluginConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniPluginConfigurationArrayOutput)
}

// CniPluginConfigurationMapInput is an input type that accepts CniPluginConfigurationMap and CniPluginConfigurationMapOutput values.
// You can construct a concrete instance of `CniPluginConfigurationMapInput` via:
//
//	CniPluginConfigurationMap{ "key": CniPluginConfigurationArgs{...} }
type CniPluginConfigurationMapInput interface {
	pulumi.Input

	ToCniPluginConfigurationMapOutput() CniPluginConfigurationMapOutput
	ToCniPluginConfigurationMapOutputWithContext(context.Context) CniPluginConfigurationMapOutput
}

type CniPluginConfigurationMap map[string]CniPluginConfigurationInput

func (CniPluginConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CniPluginConfiguration)(nil)).Elem()
}

func (i CniPluginConfigurationMap) ToCniPluginConfigurationMapOutput() CniPluginConfigurationMapOutput {
	return i.ToCniPluginConfigurationMapOutputWithContext(context.Background())
}

func (i CniPluginConfigurationMap) ToCniPluginConfigurationMapOutputWithContext(ctx context.Context) CniPluginConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniPluginConfigurationMapOutput)
}

type CniPluginConfigurationOutput struct{ *pulumi.OutputState }

func (CniPluginConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CniPluginConfiguration)(nil)).Elem()
}

func (o CniPluginConfigurationOutput) ToCniPluginConfigurationOutput() CniPluginConfigurationOutput {
	return o
}

func (o CniPluginConfigurationOutput) ToCniPluginConfigurationOutputWithContext(ctx context.Context) CniPluginConfigurationOutput {
	return o
}

// The bridge plugin configuration.
func (o CniPluginConfigurationOutput) Bridge() CniBridgePluginConfigurationOutput {
	return o.ApplyT(func(v *CniPluginConfiguration) CniBridgePluginConfigurationOutput { return v.Bridge }).(CniBridgePluginConfigurationOutput)
}

// The parameters with which to connect to the remote host.
func (o CniPluginConfigurationOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *CniPluginConfiguration) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The plugin configuration directory.
func (o CniPluginConfigurationOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v *CniPluginConfiguration) pulumi.StringOutput { return v.Directory }).(pulumi.StringOutput)
}

// The loopback plugin configuration.
func (o CniPluginConfigurationOutput) Loopback() CniLoopbackPluginConfigurationOutput {
	return o.ApplyT(func(v *CniPluginConfiguration) CniLoopbackPluginConfigurationOutput { return v.Loopback }).(CniLoopbackPluginConfigurationOutput)
}

// The `directory` mkdir operation.
func (o CniPluginConfigurationOutput) Mkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *CniPluginConfiguration) tools.MkdirOutput { return v.Mkdir }).(tools.MkdirOutput)
}

// The subnet to use for the CNI bridge plugin configuration.
func (o CniPluginConfigurationOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *CniPluginConfiguration) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

type CniPluginConfigurationArrayOutput struct{ *pulumi.OutputState }

func (CniPluginConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CniPluginConfiguration)(nil)).Elem()
}

func (o CniPluginConfigurationArrayOutput) ToCniPluginConfigurationArrayOutput() CniPluginConfigurationArrayOutput {
	return o
}

func (o CniPluginConfigurationArrayOutput) ToCniPluginConfigurationArrayOutputWithContext(ctx context.Context) CniPluginConfigurationArrayOutput {
	return o
}

func (o CniPluginConfigurationArrayOutput) Index(i pulumi.IntInput) CniPluginConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CniPluginConfiguration {
		return vs[0].([]*CniPluginConfiguration)[vs[1].(int)]
	}).(CniPluginConfigurationOutput)
}

type CniPluginConfigurationMapOutput struct{ *pulumi.OutputState }

func (CniPluginConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CniPluginConfiguration)(nil)).Elem()
}

func (o CniPluginConfigurationMapOutput) ToCniPluginConfigurationMapOutput() CniPluginConfigurationMapOutput {
	return o
}

func (o CniPluginConfigurationMapOutput) ToCniPluginConfigurationMapOutputWithContext(ctx context.Context) CniPluginConfigurationMapOutput {
	return o
}

func (o CniPluginConfigurationMapOutput) MapIndex(k pulumi.StringInput) CniPluginConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CniPluginConfiguration {
		return vs[0].(map[string]*CniPluginConfiguration)[vs[1].(string)]
	}).(CniPluginConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CniPluginConfigurationInput)(nil)).Elem(), &CniPluginConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*CniPluginConfigurationArrayInput)(nil)).Elem(), CniPluginConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CniPluginConfigurationMapInput)(nil)).Elem(), CniPluginConfigurationMap{})
	pulumi.RegisterOutputType(CniPluginConfigurationOutput{})
	pulumi.RegisterOutputType(CniPluginConfigurationArrayOutput{})
	pulumi.RegisterOutputType(CniPluginConfigurationMapOutput{})
}
