// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Containerd systemd service file. Will likely get replaced with a static function when https://github.com/pulumi/pulumi/issues/7583 gets resolved.
type ContainerdService struct {
	pulumi.ResourceState

	// Containerd configuration.
	Configuration ContainerdConfigurationOutput `pulumi:"configuration"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// Path to the containerd binary
	ContainerdPath pulumi.StringPtrOutput `pulumi:"containerdPath"`
	// Optional systemd unit description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The location to create the service file.
	Directory pulumi.StringPtrOutput `pulumi:"directory"`
	// Optional systemd unit documentation
	Documentation pulumi.StringPtrOutput `pulumi:"documentation"`
	// Optionally override the systemd service restart behaviour. Defaults to `on-failure`.
	Restart SystemdServiceRestartPtrOutput `pulumi:"restart"`
	// Optionally override the systemd service RestartSec. Defaults to `5`.
	RestartSec pulumi.StringPtrOutput `pulumi:"restartSec"`
	// The remote systemd service.
	Service SystemdServiceOutput `pulumi:"service"`
	// Optionally override the systemd service wanted-by. Defaults to `multi-user.target`.
	WantedBy pulumi.StringPtrOutput `pulumi:"wantedBy"`
}

// NewContainerdService registers a new resource with the given unique name, arguments, and options.
func NewContainerdService(ctx *pulumi.Context,
	name string, args *ContainerdServiceArgs, opts ...pulumi.ResourceOption) (*ContainerdService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerdService
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:ContainerdService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type containerdServiceArgs struct {
	// Containerd configuration.
	Configuration ContainerdConfiguration `pulumi:"configuration"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// Path to the containerd binary
	ContainerdPath *string `pulumi:"containerdPath"`
	// Optional systemd unit description.
	Description *string `pulumi:"description"`
	// The location to create the service file.
	Directory *string `pulumi:"directory"`
	// Optional systemd unit documentation
	Documentation *string `pulumi:"documentation"`
	// Optionally override the systemd service restart behaviour. Defaults to `on-failure`.
	Restart *SystemdServiceRestart `pulumi:"restart"`
	// Optionally override the systemd service RestartSec. Defaults to `5`.
	RestartSec *string `pulumi:"restartSec"`
	// Optionally override the systemd service wanted-by. Defaults to `multi-user.target`.
	WantedBy *string `pulumi:"wantedBy"`
}

// The set of arguments for constructing a ContainerdService resource.
type ContainerdServiceArgs struct {
	// Containerd configuration.
	Configuration ContainerdConfigurationInput
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
	// Path to the containerd binary
	ContainerdPath pulumi.StringPtrInput
	// Optional systemd unit description.
	Description pulumi.StringPtrInput
	// The location to create the service file.
	Directory pulumi.StringPtrInput
	// Optional systemd unit documentation
	Documentation pulumi.StringPtrInput
	// Optionally override the systemd service restart behaviour. Defaults to `on-failure`.
	Restart SystemdServiceRestartPtrInput
	// Optionally override the systemd service RestartSec. Defaults to `5`.
	RestartSec pulumi.StringPtrInput
	// Optionally override the systemd service wanted-by. Defaults to `multi-user.target`.
	WantedBy pulumi.StringPtrInput
}

func (ContainerdServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerdServiceArgs)(nil)).Elem()
}

type ContainerdServiceInput interface {
	pulumi.Input

	ToContainerdServiceOutput() ContainerdServiceOutput
	ToContainerdServiceOutputWithContext(ctx context.Context) ContainerdServiceOutput
}

func (*ContainerdService) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerdService)(nil)).Elem()
}

func (i *ContainerdService) ToContainerdServiceOutput() ContainerdServiceOutput {
	return i.ToContainerdServiceOutputWithContext(context.Background())
}

func (i *ContainerdService) ToContainerdServiceOutputWithContext(ctx context.Context) ContainerdServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerdServiceOutput)
}

// ContainerdServiceArrayInput is an input type that accepts ContainerdServiceArray and ContainerdServiceArrayOutput values.
// You can construct a concrete instance of `ContainerdServiceArrayInput` via:
//
//	ContainerdServiceArray{ ContainerdServiceArgs{...} }
type ContainerdServiceArrayInput interface {
	pulumi.Input

	ToContainerdServiceArrayOutput() ContainerdServiceArrayOutput
	ToContainerdServiceArrayOutputWithContext(context.Context) ContainerdServiceArrayOutput
}

type ContainerdServiceArray []ContainerdServiceInput

func (ContainerdServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerdService)(nil)).Elem()
}

func (i ContainerdServiceArray) ToContainerdServiceArrayOutput() ContainerdServiceArrayOutput {
	return i.ToContainerdServiceArrayOutputWithContext(context.Background())
}

func (i ContainerdServiceArray) ToContainerdServiceArrayOutputWithContext(ctx context.Context) ContainerdServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerdServiceArrayOutput)
}

// ContainerdServiceMapInput is an input type that accepts ContainerdServiceMap and ContainerdServiceMapOutput values.
// You can construct a concrete instance of `ContainerdServiceMapInput` via:
//
//	ContainerdServiceMap{ "key": ContainerdServiceArgs{...} }
type ContainerdServiceMapInput interface {
	pulumi.Input

	ToContainerdServiceMapOutput() ContainerdServiceMapOutput
	ToContainerdServiceMapOutputWithContext(context.Context) ContainerdServiceMapOutput
}

type ContainerdServiceMap map[string]ContainerdServiceInput

func (ContainerdServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerdService)(nil)).Elem()
}

func (i ContainerdServiceMap) ToContainerdServiceMapOutput() ContainerdServiceMapOutput {
	return i.ToContainerdServiceMapOutputWithContext(context.Background())
}

func (i ContainerdServiceMap) ToContainerdServiceMapOutputWithContext(ctx context.Context) ContainerdServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerdServiceMapOutput)
}

type ContainerdServiceOutput struct{ *pulumi.OutputState }

func (ContainerdServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerdService)(nil)).Elem()
}

func (o ContainerdServiceOutput) ToContainerdServiceOutput() ContainerdServiceOutput {
	return o
}

func (o ContainerdServiceOutput) ToContainerdServiceOutputWithContext(ctx context.Context) ContainerdServiceOutput {
	return o
}

// Containerd configuration.
func (o ContainerdServiceOutput) Configuration() ContainerdConfigurationOutput {
	return o.ApplyT(func(v *ContainerdService) ContainerdConfigurationOutput { return v.Configuration }).(ContainerdConfigurationOutput)
}

// The parameters with which to connect to the remote host.
func (o ContainerdServiceOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *ContainerdService) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// Path to the containerd binary
func (o ContainerdServiceOutput) ContainerdPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerdService) pulumi.StringPtrOutput { return v.ContainerdPath }).(pulumi.StringPtrOutput)
}

// Optional systemd unit description.
func (o ContainerdServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerdService) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The location to create the service file.
func (o ContainerdServiceOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerdService) pulumi.StringPtrOutput { return v.Directory }).(pulumi.StringPtrOutput)
}

// Optional systemd unit documentation
func (o ContainerdServiceOutput) Documentation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerdService) pulumi.StringPtrOutput { return v.Documentation }).(pulumi.StringPtrOutput)
}

// Optionally override the systemd service restart behaviour. Defaults to `on-failure`.
func (o ContainerdServiceOutput) Restart() SystemdServiceRestartPtrOutput {
	return o.ApplyT(func(v *ContainerdService) SystemdServiceRestartPtrOutput { return v.Restart }).(SystemdServiceRestartPtrOutput)
}

// Optionally override the systemd service RestartSec. Defaults to `5`.
func (o ContainerdServiceOutput) RestartSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerdService) pulumi.StringPtrOutput { return v.RestartSec }).(pulumi.StringPtrOutput)
}

// The remote systemd service.
func (o ContainerdServiceOutput) Service() SystemdServiceOutput {
	return o.ApplyT(func(v *ContainerdService) SystemdServiceOutput { return v.Service }).(SystemdServiceOutput)
}

// Optionally override the systemd service wanted-by. Defaults to `multi-user.target`.
func (o ContainerdServiceOutput) WantedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerdService) pulumi.StringPtrOutput { return v.WantedBy }).(pulumi.StringPtrOutput)
}

type ContainerdServiceArrayOutput struct{ *pulumi.OutputState }

func (ContainerdServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerdService)(nil)).Elem()
}

func (o ContainerdServiceArrayOutput) ToContainerdServiceArrayOutput() ContainerdServiceArrayOutput {
	return o
}

func (o ContainerdServiceArrayOutput) ToContainerdServiceArrayOutputWithContext(ctx context.Context) ContainerdServiceArrayOutput {
	return o
}

func (o ContainerdServiceArrayOutput) Index(i pulumi.IntInput) ContainerdServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerdService {
		return vs[0].([]*ContainerdService)[vs[1].(int)]
	}).(ContainerdServiceOutput)
}

type ContainerdServiceMapOutput struct{ *pulumi.OutputState }

func (ContainerdServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerdService)(nil)).Elem()
}

func (o ContainerdServiceMapOutput) ToContainerdServiceMapOutput() ContainerdServiceMapOutput {
	return o
}

func (o ContainerdServiceMapOutput) ToContainerdServiceMapOutputWithContext(ctx context.Context) ContainerdServiceMapOutput {
	return o
}

func (o ContainerdServiceMapOutput) MapIndex(k pulumi.StringInput) ContainerdServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerdService {
		return vs[0].(map[string]*ContainerdService)[vs[1].(string)]
	}).(ContainerdServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerdServiceInput)(nil)).Elem(), &ContainerdService{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerdServiceArrayInput)(nil)).Elem(), ContainerdServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerdServiceMapInput)(nil)).Elem(), ContainerdServiceMap{})
	pulumi.RegisterOutputType(ContainerdServiceOutput{})
	pulumi.RegisterOutputType(ContainerdServiceArrayOutput{})
	pulumi.RegisterOutputType(ContainerdServiceMapOutput{})
}
