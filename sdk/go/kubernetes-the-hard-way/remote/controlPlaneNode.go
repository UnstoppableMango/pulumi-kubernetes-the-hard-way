// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tools"
)

// A kubernetes control plane node.
type ControlPlaneNode struct {
	pulumi.ResourceState

	// The number of kube-apiserver instance.
	ApiServerCount pulumi.IntOutput `pulumi:"apiServerCount"`
	// The node's CPU architecture.
	Architecture ArchitectureOutput `pulumi:"architecture"`
	// The path to store the audit log file.
	AudiLogPath pulumi.StringPtrOutput `pulumi:"audiLogPath"`
	// The path to the root certificate authority certificate.
	CaCertificatePath pulumi.StringOutput `pulumi:"caCertificatePath"`
	// The path to the root certificate authority private key.
	CaPrivateKeyPath pulumi.StringOutput `pulumi:"caPrivateKeyPath"`
	// The cluster CIDR.
	ClusterCIDR pulumi.StringPtrOutput `pulumi:"clusterCIDR"`
	// The cluster name.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The remote encryption config file.
	EncryptionConfigFile FileOutput `pulumi:"encryptionConfigFile"`
	// The v1/EncryptionConfig yaml.
	EncryptionConfigYaml pulumi.StringOutput `pulumi:"encryptionConfigYaml"`
	// The path to the kube-apiserver certificate.
	KubeApiServerCertificatePath pulumi.StringOutput `pulumi:"kubeApiServerCertificatePath"`
	// The kube-apiserver install.
	KubeApiServerInstall KubeApiServerInstallOutput `pulumi:"kubeApiServerInstall"`
	// The directory to store the kube-apiserver binary.
	KubeApiServerInstallDirectory pulumi.StringPtrOutput `pulumi:"kubeApiServerInstallDirectory"`
	// The path to the kube-apiserver private key.
	KubeApiServerPrivateKeyPath pulumi.StringOutput `pulumi:"kubeApiServerPrivateKeyPath"`
	// The kube-apiserver systemd service.
	KubeApiServerService SystemdServiceOutput `pulumi:"kubeApiServerService"`
	// The kube-controller-manager install.
	KubeControllerManagerInstall KubeControllerManagerInstallOutput `pulumi:"kubeControllerManagerInstall"`
	// The directory to store the kube-controller-manager binary.
	KubeControllerManagerInstallDirectory pulumi.StringPtrOutput `pulumi:"kubeControllerManagerInstallDirectory"`
	// The path to the kube-controller-manager kubeconfig file.
	KubeControllerManagerKubeconfigPath pulumi.StringOutput `pulumi:"kubeControllerManagerKubeconfigPath"`
	// The kube-controller-manager systemd service.
	KubeControllerManagerService SystemdServiceOutput `pulumi:"kubeControllerManagerService"`
	// The kube-scheduler config yaml.
	KubeSchedulerConfigYaml pulumi.StringOutput `pulumi:"kubeSchedulerConfigYaml"`
	// The kube-scheduler isntall.
	KubeSchedulerInstall KubeSchedulerInstallOutput `pulumi:"kubeSchedulerInstall"`
	// The directory to store the kube-scheduler binary.
	KubeSchedulerInstallDirectory pulumi.StringPtrOutput `pulumi:"kubeSchedulerInstallDirectory"`
	// The path to the kube-scheduler kubeconfig file.
	KubeSchedulerKubeconfigPath pulumi.StringOutput `pulumi:"kubeSchedulerKubeconfigPath"`
	// The kube-scheduler systemd service.
	KubeSchedulerService SystemdServiceOutput `pulumi:"kubeSchedulerService"`
	// The kubectl install.
	KubectlInstall KubectlInstallOutput `pulumi:"kubectlInstall"`
	// The path to store the kubectl binary.
	KubectlInstallDirectory pulumi.StringPtrOutput `pulumi:"kubectlInstallDirectory"`
	// The kubernetes configuration mkdir operation.
	KubernetesConfigurationMkdir tools.MkdirOutput `pulumi:"kubernetesConfigurationMkdir"`
	// The version of kubernetes to use.
	KubernetesVersion pulumi.StringPtrOutput `pulumi:"kubernetesVersion"`
	// The name of the node.
	NodeName pulumi.StringPtrOutput `pulumi:"nodeName"`
	// The path to the service accounts certificate.
	ServiceAccountsCertificatePath pulumi.StringOutput `pulumi:"serviceAccountsCertificatePath"`
	// The path to the service accounts private key.
	ServiceAccountsPrivateKeyPath pulumi.StringOutput `pulumi:"serviceAccountsPrivateKeyPath"`
	// The IP range to use for cluster services.
	ServiceClusterIpRange pulumi.StringPtrOutput `pulumi:"serviceClusterIpRange"`
	// The /var/lib/kubernetes mkdir operation.
	VarLibKubernetesMkdir tools.MkdirOutput `pulumi:"varLibKubernetesMkdir"`
}

// NewControlPlaneNode registers a new resource with the given unique name, arguments, and options.
func NewControlPlaneNode(ctx *pulumi.Context,
	name string, args *ControlPlaneNodeArgs, opts ...pulumi.ResourceOption) (*ControlPlaneNode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiServerCount == nil {
		return nil, errors.New("invalid value for required argument 'ApiServerCount'")
	}
	if args.Architecture == nil {
		return nil, errors.New("invalid value for required argument 'Architecture'")
	}
	if args.CaCertificatePath == nil {
		return nil, errors.New("invalid value for required argument 'CaCertificatePath'")
	}
	if args.CaPrivateKeyPath == nil {
		return nil, errors.New("invalid value for required argument 'CaPrivateKeyPath'")
	}
	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.EncryptionConfigYaml == nil {
		return nil, errors.New("invalid value for required argument 'EncryptionConfigYaml'")
	}
	if args.KubeApiServerCertificatePath == nil {
		return nil, errors.New("invalid value for required argument 'KubeApiServerCertificatePath'")
	}
	if args.KubeApiServerPrivateKeyPath == nil {
		return nil, errors.New("invalid value for required argument 'KubeApiServerPrivateKeyPath'")
	}
	if args.KubeControllerManagerKubeconfigPath == nil {
		return nil, errors.New("invalid value for required argument 'KubeControllerManagerKubeconfigPath'")
	}
	if args.KubeSchedulerConfigYaml == nil {
		return nil, errors.New("invalid value for required argument 'KubeSchedulerConfigYaml'")
	}
	if args.KubeSchedulerKubeconfigPath == nil {
		return nil, errors.New("invalid value for required argument 'KubeSchedulerKubeconfigPath'")
	}
	if args.ServiceAccountsCertificatePath == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountsCertificatePath'")
	}
	if args.ServiceAccountsPrivateKeyPath == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountsPrivateKeyPath'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ControlPlaneNode
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:ControlPlaneNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type controlPlaneNodeArgs struct {
	// The number of kube-apiserver instance.
	ApiServerCount int `pulumi:"apiServerCount"`
	// The node's CPU architecture.
	Architecture Architecture `pulumi:"architecture"`
	// The path to store the audit log file.
	AudiLogPath *string `pulumi:"audiLogPath"`
	// The path to the root certificate authority certificate.
	CaCertificatePath string `pulumi:"caCertificatePath"`
	// The path to the root certificate authority private key.
	CaPrivateKeyPath string `pulumi:"caPrivateKeyPath"`
	// The cluster CIDR.
	ClusterCIDR *string `pulumi:"clusterCIDR"`
	// The cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The v1/EncryptionConfig yaml.
	EncryptionConfigYaml string `pulumi:"encryptionConfigYaml"`
	// The path to the kube-apiserver certificate.
	KubeApiServerCertificatePath string `pulumi:"kubeApiServerCertificatePath"`
	// The directory to store the kube-apiserver binary.
	KubeApiServerInstallDirectory *string `pulumi:"kubeApiServerInstallDirectory"`
	// The path to the kube-apiserver private key.
	KubeApiServerPrivateKeyPath string `pulumi:"kubeApiServerPrivateKeyPath"`
	// The directory to store the kube-controller-manager binary.
	KubeControllerManagerInstallDirectory *string `pulumi:"kubeControllerManagerInstallDirectory"`
	// The path to the kube-controller-manager kubeconfig file.
	KubeControllerManagerKubeconfigPath string `pulumi:"kubeControllerManagerKubeconfigPath"`
	// The kube-scheduler config yaml.
	KubeSchedulerConfigYaml string `pulumi:"kubeSchedulerConfigYaml"`
	// The directory to store the kube-scheduler binary.
	KubeSchedulerInstallDirectory *string `pulumi:"kubeSchedulerInstallDirectory"`
	// The path to the kube-scheduler kubeconfig file.
	KubeSchedulerKubeconfigPath string `pulumi:"kubeSchedulerKubeconfigPath"`
	// The path to store the kubectl binary.
	KubectlInstallDirectory *string `pulumi:"kubectlInstallDirectory"`
	// The version of kubernetes to use.
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// The name of the node.
	NodeName *string `pulumi:"nodeName"`
	// The path to the service accounts certificate.
	ServiceAccountsCertificatePath string `pulumi:"serviceAccountsCertificatePath"`
	// The path to the service accounts private key.
	ServiceAccountsPrivateKeyPath string `pulumi:"serviceAccountsPrivateKeyPath"`
	// The IP range to use for cluster services.
	ServiceClusterIpRange *string `pulumi:"serviceClusterIpRange"`
}

// The set of arguments for constructing a ControlPlaneNode resource.
type ControlPlaneNodeArgs struct {
	// The number of kube-apiserver instance.
	ApiServerCount pulumi.IntInput
	// The node's CPU architecture.
	Architecture ArchitectureInput
	// The path to store the audit log file.
	AudiLogPath pulumi.StringPtrInput
	// The path to the root certificate authority certificate.
	CaCertificatePath pulumi.StringInput
	// The path to the root certificate authority private key.
	CaPrivateKeyPath pulumi.StringInput
	// The cluster CIDR.
	ClusterCIDR pulumi.StringPtrInput
	// The cluster name.
	ClusterName pulumi.StringPtrInput
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
	// The v1/EncryptionConfig yaml.
	EncryptionConfigYaml pulumi.StringInput
	// The path to the kube-apiserver certificate.
	KubeApiServerCertificatePath pulumi.StringInput
	// The directory to store the kube-apiserver binary.
	KubeApiServerInstallDirectory pulumi.StringPtrInput
	// The path to the kube-apiserver private key.
	KubeApiServerPrivateKeyPath pulumi.StringInput
	// The directory to store the kube-controller-manager binary.
	KubeControllerManagerInstallDirectory pulumi.StringPtrInput
	// The path to the kube-controller-manager kubeconfig file.
	KubeControllerManagerKubeconfigPath pulumi.StringInput
	// The kube-scheduler config yaml.
	KubeSchedulerConfigYaml pulumi.StringInput
	// The directory to store the kube-scheduler binary.
	KubeSchedulerInstallDirectory pulumi.StringPtrInput
	// The path to the kube-scheduler kubeconfig file.
	KubeSchedulerKubeconfigPath pulumi.StringInput
	// The path to store the kubectl binary.
	KubectlInstallDirectory pulumi.StringPtrInput
	// The version of kubernetes to use.
	KubernetesVersion pulumi.StringPtrInput
	// The name of the node.
	NodeName pulumi.StringPtrInput
	// The path to the service accounts certificate.
	ServiceAccountsCertificatePath pulumi.StringInput
	// The path to the service accounts private key.
	ServiceAccountsPrivateKeyPath pulumi.StringInput
	// The IP range to use for cluster services.
	ServiceClusterIpRange pulumi.StringPtrInput
}

func (ControlPlaneNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*controlPlaneNodeArgs)(nil)).Elem()
}

type ControlPlaneNodeInput interface {
	pulumi.Input

	ToControlPlaneNodeOutput() ControlPlaneNodeOutput
	ToControlPlaneNodeOutputWithContext(ctx context.Context) ControlPlaneNodeOutput
}

func (*ControlPlaneNode) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneNode)(nil)).Elem()
}

func (i *ControlPlaneNode) ToControlPlaneNodeOutput() ControlPlaneNodeOutput {
	return i.ToControlPlaneNodeOutputWithContext(context.Background())
}

func (i *ControlPlaneNode) ToControlPlaneNodeOutputWithContext(ctx context.Context) ControlPlaneNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneNodeOutput)
}

// ControlPlaneNodeArrayInput is an input type that accepts ControlPlaneNodeArray and ControlPlaneNodeArrayOutput values.
// You can construct a concrete instance of `ControlPlaneNodeArrayInput` via:
//
//	ControlPlaneNodeArray{ ControlPlaneNodeArgs{...} }
type ControlPlaneNodeArrayInput interface {
	pulumi.Input

	ToControlPlaneNodeArrayOutput() ControlPlaneNodeArrayOutput
	ToControlPlaneNodeArrayOutputWithContext(context.Context) ControlPlaneNodeArrayOutput
}

type ControlPlaneNodeArray []ControlPlaneNodeInput

func (ControlPlaneNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ControlPlaneNode)(nil)).Elem()
}

func (i ControlPlaneNodeArray) ToControlPlaneNodeArrayOutput() ControlPlaneNodeArrayOutput {
	return i.ToControlPlaneNodeArrayOutputWithContext(context.Background())
}

func (i ControlPlaneNodeArray) ToControlPlaneNodeArrayOutputWithContext(ctx context.Context) ControlPlaneNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneNodeArrayOutput)
}

// ControlPlaneNodeMapInput is an input type that accepts ControlPlaneNodeMap and ControlPlaneNodeMapOutput values.
// You can construct a concrete instance of `ControlPlaneNodeMapInput` via:
//
//	ControlPlaneNodeMap{ "key": ControlPlaneNodeArgs{...} }
type ControlPlaneNodeMapInput interface {
	pulumi.Input

	ToControlPlaneNodeMapOutput() ControlPlaneNodeMapOutput
	ToControlPlaneNodeMapOutputWithContext(context.Context) ControlPlaneNodeMapOutput
}

type ControlPlaneNodeMap map[string]ControlPlaneNodeInput

func (ControlPlaneNodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ControlPlaneNode)(nil)).Elem()
}

func (i ControlPlaneNodeMap) ToControlPlaneNodeMapOutput() ControlPlaneNodeMapOutput {
	return i.ToControlPlaneNodeMapOutputWithContext(context.Background())
}

func (i ControlPlaneNodeMap) ToControlPlaneNodeMapOutputWithContext(ctx context.Context) ControlPlaneNodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneNodeMapOutput)
}

type ControlPlaneNodeOutput struct{ *pulumi.OutputState }

func (ControlPlaneNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneNode)(nil)).Elem()
}

func (o ControlPlaneNodeOutput) ToControlPlaneNodeOutput() ControlPlaneNodeOutput {
	return o
}

func (o ControlPlaneNodeOutput) ToControlPlaneNodeOutputWithContext(ctx context.Context) ControlPlaneNodeOutput {
	return o
}

// The number of kube-apiserver instance.
func (o ControlPlaneNodeOutput) ApiServerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.IntOutput { return v.ApiServerCount }).(pulumi.IntOutput)
}

// The node's CPU architecture.
func (o ControlPlaneNodeOutput) Architecture() ArchitectureOutput {
	return o.ApplyT(func(v *ControlPlaneNode) ArchitectureOutput { return v.Architecture }).(ArchitectureOutput)
}

// The path to store the audit log file.
func (o ControlPlaneNodeOutput) AudiLogPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.AudiLogPath }).(pulumi.StringPtrOutput)
}

// The path to the root certificate authority certificate.
func (o ControlPlaneNodeOutput) CaCertificatePath() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.CaCertificatePath }).(pulumi.StringOutput)
}

// The path to the root certificate authority private key.
func (o ControlPlaneNodeOutput) CaPrivateKeyPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.CaPrivateKeyPath }).(pulumi.StringOutput)
}

// The cluster CIDR.
func (o ControlPlaneNodeOutput) ClusterCIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.ClusterCIDR }).(pulumi.StringPtrOutput)
}

// The cluster name.
func (o ControlPlaneNodeOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// The parameters with which to connect to the remote host.
func (o ControlPlaneNodeOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The remote encryption config file.
func (o ControlPlaneNodeOutput) EncryptionConfigFile() FileOutput {
	return o.ApplyT(func(v *ControlPlaneNode) FileOutput { return v.EncryptionConfigFile }).(FileOutput)
}

// The v1/EncryptionConfig yaml.
func (o ControlPlaneNodeOutput) EncryptionConfigYaml() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.EncryptionConfigYaml }).(pulumi.StringOutput)
}

// The path to the kube-apiserver certificate.
func (o ControlPlaneNodeOutput) KubeApiServerCertificatePath() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.KubeApiServerCertificatePath }).(pulumi.StringOutput)
}

// The kube-apiserver install.
func (o ControlPlaneNodeOutput) KubeApiServerInstall() KubeApiServerInstallOutput {
	return o.ApplyT(func(v *ControlPlaneNode) KubeApiServerInstallOutput { return v.KubeApiServerInstall }).(KubeApiServerInstallOutput)
}

// The directory to store the kube-apiserver binary.
func (o ControlPlaneNodeOutput) KubeApiServerInstallDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.KubeApiServerInstallDirectory }).(pulumi.StringPtrOutput)
}

// The path to the kube-apiserver private key.
func (o ControlPlaneNodeOutput) KubeApiServerPrivateKeyPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.KubeApiServerPrivateKeyPath }).(pulumi.StringOutput)
}

// The kube-apiserver systemd service.
func (o ControlPlaneNodeOutput) KubeApiServerService() SystemdServiceOutput {
	return o.ApplyT(func(v *ControlPlaneNode) SystemdServiceOutput { return v.KubeApiServerService }).(SystemdServiceOutput)
}

// The kube-controller-manager install.
func (o ControlPlaneNodeOutput) KubeControllerManagerInstall() KubeControllerManagerInstallOutput {
	return o.ApplyT(func(v *ControlPlaneNode) KubeControllerManagerInstallOutput { return v.KubeControllerManagerInstall }).(KubeControllerManagerInstallOutput)
}

// The directory to store the kube-controller-manager binary.
func (o ControlPlaneNodeOutput) KubeControllerManagerInstallDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.KubeControllerManagerInstallDirectory }).(pulumi.StringPtrOutput)
}

// The path to the kube-controller-manager kubeconfig file.
func (o ControlPlaneNodeOutput) KubeControllerManagerKubeconfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.KubeControllerManagerKubeconfigPath }).(pulumi.StringOutput)
}

// The kube-controller-manager systemd service.
func (o ControlPlaneNodeOutput) KubeControllerManagerService() SystemdServiceOutput {
	return o.ApplyT(func(v *ControlPlaneNode) SystemdServiceOutput { return v.KubeControllerManagerService }).(SystemdServiceOutput)
}

// The kube-scheduler config yaml.
func (o ControlPlaneNodeOutput) KubeSchedulerConfigYaml() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.KubeSchedulerConfigYaml }).(pulumi.StringOutput)
}

// The kube-scheduler isntall.
func (o ControlPlaneNodeOutput) KubeSchedulerInstall() KubeSchedulerInstallOutput {
	return o.ApplyT(func(v *ControlPlaneNode) KubeSchedulerInstallOutput { return v.KubeSchedulerInstall }).(KubeSchedulerInstallOutput)
}

// The directory to store the kube-scheduler binary.
func (o ControlPlaneNodeOutput) KubeSchedulerInstallDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.KubeSchedulerInstallDirectory }).(pulumi.StringPtrOutput)
}

// The path to the kube-scheduler kubeconfig file.
func (o ControlPlaneNodeOutput) KubeSchedulerKubeconfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.KubeSchedulerKubeconfigPath }).(pulumi.StringOutput)
}

// The kube-scheduler systemd service.
func (o ControlPlaneNodeOutput) KubeSchedulerService() SystemdServiceOutput {
	return o.ApplyT(func(v *ControlPlaneNode) SystemdServiceOutput { return v.KubeSchedulerService }).(SystemdServiceOutput)
}

// The kubectl install.
func (o ControlPlaneNodeOutput) KubectlInstall() KubectlInstallOutput {
	return o.ApplyT(func(v *ControlPlaneNode) KubectlInstallOutput { return v.KubectlInstall }).(KubectlInstallOutput)
}

// The path to store the kubectl binary.
func (o ControlPlaneNodeOutput) KubectlInstallDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.KubectlInstallDirectory }).(pulumi.StringPtrOutput)
}

// The kubernetes configuration mkdir operation.
func (o ControlPlaneNodeOutput) KubernetesConfigurationMkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *ControlPlaneNode) tools.MkdirOutput { return v.KubernetesConfigurationMkdir }).(tools.MkdirOutput)
}

// The version of kubernetes to use.
func (o ControlPlaneNodeOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// The name of the node.
func (o ControlPlaneNodeOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.NodeName }).(pulumi.StringPtrOutput)
}

// The path to the service accounts certificate.
func (o ControlPlaneNodeOutput) ServiceAccountsCertificatePath() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.ServiceAccountsCertificatePath }).(pulumi.StringOutput)
}

// The path to the service accounts private key.
func (o ControlPlaneNodeOutput) ServiceAccountsPrivateKeyPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringOutput { return v.ServiceAccountsPrivateKeyPath }).(pulumi.StringOutput)
}

// The IP range to use for cluster services.
func (o ControlPlaneNodeOutput) ServiceClusterIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneNode) pulumi.StringPtrOutput { return v.ServiceClusterIpRange }).(pulumi.StringPtrOutput)
}

// The /var/lib/kubernetes mkdir operation.
func (o ControlPlaneNodeOutput) VarLibKubernetesMkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *ControlPlaneNode) tools.MkdirOutput { return v.VarLibKubernetesMkdir }).(tools.MkdirOutput)
}

type ControlPlaneNodeArrayOutput struct{ *pulumi.OutputState }

func (ControlPlaneNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ControlPlaneNode)(nil)).Elem()
}

func (o ControlPlaneNodeArrayOutput) ToControlPlaneNodeArrayOutput() ControlPlaneNodeArrayOutput {
	return o
}

func (o ControlPlaneNodeArrayOutput) ToControlPlaneNodeArrayOutputWithContext(ctx context.Context) ControlPlaneNodeArrayOutput {
	return o
}

func (o ControlPlaneNodeArrayOutput) Index(i pulumi.IntInput) ControlPlaneNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ControlPlaneNode {
		return vs[0].([]*ControlPlaneNode)[vs[1].(int)]
	}).(ControlPlaneNodeOutput)
}

type ControlPlaneNodeMapOutput struct{ *pulumi.OutputState }

func (ControlPlaneNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ControlPlaneNode)(nil)).Elem()
}

func (o ControlPlaneNodeMapOutput) ToControlPlaneNodeMapOutput() ControlPlaneNodeMapOutput {
	return o
}

func (o ControlPlaneNodeMapOutput) ToControlPlaneNodeMapOutputWithContext(ctx context.Context) ControlPlaneNodeMapOutput {
	return o
}

func (o ControlPlaneNodeMapOutput) MapIndex(k pulumi.StringInput) ControlPlaneNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ControlPlaneNode {
		return vs[0].(map[string]*ControlPlaneNode)[vs[1].(string)]
	}).(ControlPlaneNodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ControlPlaneNodeInput)(nil)).Elem(), &ControlPlaneNode{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlPlaneNodeArrayInput)(nil)).Elem(), ControlPlaneNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControlPlaneNodeMapInput)(nil)).Elem(), ControlPlaneNodeMap{})
	pulumi.RegisterOutputType(ControlPlaneNodeOutput{})
	pulumi.RegisterOutputType(ControlPlaneNodeArrayOutput{})
	pulumi.RegisterOutputType(ControlPlaneNodeMapOutput{})
}
