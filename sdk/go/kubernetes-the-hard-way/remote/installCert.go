// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tls"
)

// Creates a RemoteFile resource representing the copy operation.
func InstallCert(ctx *pulumi.Context, args *InstallCertArgs, opts ...pulumi.InvokeOption) (*InstallCertResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv InstallCertResult
	err := ctx.Invoke("kubernetes-the-hard-way:remote:installCert", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type InstallCertArgs struct {
	// The connection details.
	Connection kubernetesthehardway.Connection `pulumi:"connection"`
	// The certificate to install at the remote location.
	Keypair tls.KeyPair                           `pulumi:"keypair"`
	Name    string                                `pulumi:"name"`
	Options *kubernetesthehardway.ResourceOptions `pulumi:"options"`
	// The path to install to.
	Path *string `pulumi:"path"`
}

// Defaults sets the appropriate defaults for InstallCertArgs
func (val *InstallCertArgs) Defaults() *InstallCertArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Connection = *tmp.Connection.Defaults()

	return &tmp
}

type InstallCertResult struct {
	// A resource representing the the file on the remote machine.
	Result *File `pulumi:"result"`
}

func InstallCertOutput(ctx *pulumi.Context, args InstallCertOutputArgs, opts ...pulumi.InvokeOption) InstallCertResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (InstallCertResult, error) {
			args := v.(InstallCertArgs)
			r, err := InstallCert(ctx, &args, opts...)
			var s InstallCertResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(InstallCertResultOutput)
}

type InstallCertOutputArgs struct {
	// The connection details.
	Connection kubernetesthehardway.ConnectionInput `pulumi:"connection"`
	// The certificate to install at the remote location.
	Keypair tls.KeyPairInput                          `pulumi:"keypair"`
	Name    string                                    `pulumi:"name"`
	Options *kubernetesthehardway.ResourceOptionsArgs `pulumi:"options"`
	// The path to install to.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (InstallCertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallCertArgs)(nil)).Elem()
}

type InstallCertResultOutput struct{ *pulumi.OutputState }

func (InstallCertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallCertResult)(nil)).Elem()
}

func (o InstallCertResultOutput) ToInstallCertResultOutput() InstallCertResultOutput {
	return o
}

func (o InstallCertResultOutput) ToInstallCertResultOutputWithContext(ctx context.Context) InstallCertResultOutput {
	return o
}

// A resource representing the the file on the remote machine.
func (o InstallCertResultOutput) Result() FileOutput {
	return o.ApplyT(func(v InstallCertResult) *File { return v.Result }).(FileOutput)
}

func init() {
	pulumi.RegisterOutputType(InstallCertResultOutput{})
}
