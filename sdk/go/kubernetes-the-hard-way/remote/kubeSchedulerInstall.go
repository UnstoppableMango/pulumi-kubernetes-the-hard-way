// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Installs kube-scheduler on a remote system.
type KubeSchedulerInstall struct {
	pulumi.ResourceState

	// The kube-scheduler CPU architecture.
	Architecture ArchitectureOutput `pulumi:"architecture"`
	// The connection details.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// Directory to install the `etcd` and `etcdctl` binaries.
	InstallDirectory pulumi.StringOutput `pulumi:"installDirectory"`
	// The version of kube-scheduler to install.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewKubeSchedulerInstall registers a new resource with the given unique name, arguments, and options.
func NewKubeSchedulerInstall(ctx *pulumi.Context,
	name string, args *KubeSchedulerInstallArgs, opts ...pulumi.ResourceOption) (*KubeSchedulerInstall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	if args.InstallDirectory == nil {
		args.InstallDirectory = pulumi.StringPtr("/usr/local/bin")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubeSchedulerInstall
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:KubeSchedulerInstall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type kubeSchedulerInstallArgs struct {
	// The kube-scheduler CPU architecture.
	Architecture *Architecture `pulumi:"architecture"`
	// The connection details.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// Directory to install the `kube-scheduler` binary.
	InstallDirectory *string `pulumi:"installDirectory"`
	// The version of kube-scheduler to install.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a KubeSchedulerInstall resource.
type KubeSchedulerInstallArgs struct {
	// The kube-scheduler CPU architecture.
	Architecture ArchitecturePtrInput
	// The connection details.
	Connection pulumiCommand.ConnectionInput
	// Directory to install the `kube-scheduler` binary.
	InstallDirectory pulumi.StringPtrInput
	// The version of kube-scheduler to install.
	Version pulumi.StringPtrInput
}

func (KubeSchedulerInstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubeSchedulerInstallArgs)(nil)).Elem()
}

type KubeSchedulerInstallInput interface {
	pulumi.Input

	ToKubeSchedulerInstallOutput() KubeSchedulerInstallOutput
	ToKubeSchedulerInstallOutputWithContext(ctx context.Context) KubeSchedulerInstallOutput
}

func (*KubeSchedulerInstall) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeSchedulerInstall)(nil)).Elem()
}

func (i *KubeSchedulerInstall) ToKubeSchedulerInstallOutput() KubeSchedulerInstallOutput {
	return i.ToKubeSchedulerInstallOutputWithContext(context.Background())
}

func (i *KubeSchedulerInstall) ToKubeSchedulerInstallOutputWithContext(ctx context.Context) KubeSchedulerInstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeSchedulerInstallOutput)
}

// KubeSchedulerInstallArrayInput is an input type that accepts KubeSchedulerInstallArray and KubeSchedulerInstallArrayOutput values.
// You can construct a concrete instance of `KubeSchedulerInstallArrayInput` via:
//
//	KubeSchedulerInstallArray{ KubeSchedulerInstallArgs{...} }
type KubeSchedulerInstallArrayInput interface {
	pulumi.Input

	ToKubeSchedulerInstallArrayOutput() KubeSchedulerInstallArrayOutput
	ToKubeSchedulerInstallArrayOutputWithContext(context.Context) KubeSchedulerInstallArrayOutput
}

type KubeSchedulerInstallArray []KubeSchedulerInstallInput

func (KubeSchedulerInstallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeSchedulerInstall)(nil)).Elem()
}

func (i KubeSchedulerInstallArray) ToKubeSchedulerInstallArrayOutput() KubeSchedulerInstallArrayOutput {
	return i.ToKubeSchedulerInstallArrayOutputWithContext(context.Background())
}

func (i KubeSchedulerInstallArray) ToKubeSchedulerInstallArrayOutputWithContext(ctx context.Context) KubeSchedulerInstallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeSchedulerInstallArrayOutput)
}

// KubeSchedulerInstallMapInput is an input type that accepts KubeSchedulerInstallMap and KubeSchedulerInstallMapOutput values.
// You can construct a concrete instance of `KubeSchedulerInstallMapInput` via:
//
//	KubeSchedulerInstallMap{ "key": KubeSchedulerInstallArgs{...} }
type KubeSchedulerInstallMapInput interface {
	pulumi.Input

	ToKubeSchedulerInstallMapOutput() KubeSchedulerInstallMapOutput
	ToKubeSchedulerInstallMapOutputWithContext(context.Context) KubeSchedulerInstallMapOutput
}

type KubeSchedulerInstallMap map[string]KubeSchedulerInstallInput

func (KubeSchedulerInstallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeSchedulerInstall)(nil)).Elem()
}

func (i KubeSchedulerInstallMap) ToKubeSchedulerInstallMapOutput() KubeSchedulerInstallMapOutput {
	return i.ToKubeSchedulerInstallMapOutputWithContext(context.Background())
}

func (i KubeSchedulerInstallMap) ToKubeSchedulerInstallMapOutputWithContext(ctx context.Context) KubeSchedulerInstallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeSchedulerInstallMapOutput)
}

type KubeSchedulerInstallOutput struct{ *pulumi.OutputState }

func (KubeSchedulerInstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeSchedulerInstall)(nil)).Elem()
}

func (o KubeSchedulerInstallOutput) ToKubeSchedulerInstallOutput() KubeSchedulerInstallOutput {
	return o
}

func (o KubeSchedulerInstallOutput) ToKubeSchedulerInstallOutputWithContext(ctx context.Context) KubeSchedulerInstallOutput {
	return o
}

// The kube-scheduler CPU architecture.
func (o KubeSchedulerInstallOutput) Architecture() ArchitectureOutput {
	return o.ApplyT(func(v *KubeSchedulerInstall) ArchitectureOutput { return v.Architecture }).(ArchitectureOutput)
}

// The connection details.
func (o KubeSchedulerInstallOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *KubeSchedulerInstall) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// Directory to install the `etcd` and `etcdctl` binaries.
func (o KubeSchedulerInstallOutput) InstallDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeSchedulerInstall) pulumi.StringOutput { return v.InstallDirectory }).(pulumi.StringOutput)
}

// The version of kube-scheduler to install.
func (o KubeSchedulerInstallOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeSchedulerInstall) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type KubeSchedulerInstallArrayOutput struct{ *pulumi.OutputState }

func (KubeSchedulerInstallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeSchedulerInstall)(nil)).Elem()
}

func (o KubeSchedulerInstallArrayOutput) ToKubeSchedulerInstallArrayOutput() KubeSchedulerInstallArrayOutput {
	return o
}

func (o KubeSchedulerInstallArrayOutput) ToKubeSchedulerInstallArrayOutputWithContext(ctx context.Context) KubeSchedulerInstallArrayOutput {
	return o
}

func (o KubeSchedulerInstallArrayOutput) Index(i pulumi.IntInput) KubeSchedulerInstallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubeSchedulerInstall {
		return vs[0].([]*KubeSchedulerInstall)[vs[1].(int)]
	}).(KubeSchedulerInstallOutput)
}

type KubeSchedulerInstallMapOutput struct{ *pulumi.OutputState }

func (KubeSchedulerInstallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeSchedulerInstall)(nil)).Elem()
}

func (o KubeSchedulerInstallMapOutput) ToKubeSchedulerInstallMapOutput() KubeSchedulerInstallMapOutput {
	return o
}

func (o KubeSchedulerInstallMapOutput) ToKubeSchedulerInstallMapOutputWithContext(ctx context.Context) KubeSchedulerInstallMapOutput {
	return o
}

func (o KubeSchedulerInstallMapOutput) MapIndex(k pulumi.StringInput) KubeSchedulerInstallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubeSchedulerInstall {
		return vs[0].(map[string]*KubeSchedulerInstall)[vs[1].(string)]
	}).(KubeSchedulerInstallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubeSchedulerInstallInput)(nil)).Elem(), &KubeSchedulerInstall{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeSchedulerInstallArrayInput)(nil)).Elem(), KubeSchedulerInstallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeSchedulerInstallMapInput)(nil)).Elem(), KubeSchedulerInstallMap{})
	pulumi.RegisterOutputType(KubeSchedulerInstallOutput{})
	pulumi.RegisterOutputType(KubeSchedulerInstallArrayOutput{})
	pulumi.RegisterOutputType(KubeSchedulerInstallMapOutput{})
}
