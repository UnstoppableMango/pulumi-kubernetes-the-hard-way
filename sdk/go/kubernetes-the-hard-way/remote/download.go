// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tools"
)

// Downloads the file specified by `url` onto a remote system.
type Download struct {
	pulumi.ResourceState

	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// The fully qualified path on the remote system where the file should be downloaded to.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// The mkdir operation.
	Mkdir tools.MkdirOutput `pulumi:"mkdir"`
	// Remove the downloaded fiel when the resource is deleted.
	RemoveOnDelete pulumi.BoolOutput `pulumi:"removeOnDelete"`
	// The URL of the file to be downloaded.
	Url pulumi.StringOutput `pulumi:"url"`
	// The wget operation.
	Wget tools.WgetOutput `pulumi:"wget"`
}

// NewDownload registers a new resource with the given unique name, arguments, and options.
func NewDownload(ctx *pulumi.Context,
	name string, args *DownloadArgs, opts ...pulumi.ResourceOption) (*Download, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v pulumiCommand.Connection) pulumiCommand.Connection { return *v.Defaults() }).(pulumiCommand.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Download
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:Download", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type downloadArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.Connection `pulumi:"connection"`
	// The fully qualified path on the remote system where the file should be downloaded to.
	Destination string `pulumi:"destination"`
	// Remove the downloaded fiel when the resource is deleted.
	RemoveOnDelete *bool `pulumi:"removeOnDelete"`
	// The URL of the file to be downloaded.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Download resource.
type DownloadArgs struct {
	// The parameters with which to connect to the remote host.
	Connection pulumiCommand.ConnectionInput
	// The fully qualified path on the remote system where the file should be downloaded to.
	Destination pulumi.StringInput
	// Remove the downloaded fiel when the resource is deleted.
	RemoveOnDelete *bool
	// The URL of the file to be downloaded.
	Url pulumi.StringInput
}

func (DownloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*downloadArgs)(nil)).Elem()
}

type DownloadInput interface {
	pulumi.Input

	ToDownloadOutput() DownloadOutput
	ToDownloadOutputWithContext(ctx context.Context) DownloadOutput
}

func (*Download) ElementType() reflect.Type {
	return reflect.TypeOf((**Download)(nil)).Elem()
}

func (i *Download) ToDownloadOutput() DownloadOutput {
	return i.ToDownloadOutputWithContext(context.Background())
}

func (i *Download) ToDownloadOutputWithContext(ctx context.Context) DownloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadOutput)
}

// DownloadArrayInput is an input type that accepts DownloadArray and DownloadArrayOutput values.
// You can construct a concrete instance of `DownloadArrayInput` via:
//
//	DownloadArray{ DownloadArgs{...} }
type DownloadArrayInput interface {
	pulumi.Input

	ToDownloadArrayOutput() DownloadArrayOutput
	ToDownloadArrayOutputWithContext(context.Context) DownloadArrayOutput
}

type DownloadArray []DownloadInput

func (DownloadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Download)(nil)).Elem()
}

func (i DownloadArray) ToDownloadArrayOutput() DownloadArrayOutput {
	return i.ToDownloadArrayOutputWithContext(context.Background())
}

func (i DownloadArray) ToDownloadArrayOutputWithContext(ctx context.Context) DownloadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadArrayOutput)
}

// DownloadMapInput is an input type that accepts DownloadMap and DownloadMapOutput values.
// You can construct a concrete instance of `DownloadMapInput` via:
//
//	DownloadMap{ "key": DownloadArgs{...} }
type DownloadMapInput interface {
	pulumi.Input

	ToDownloadMapOutput() DownloadMapOutput
	ToDownloadMapOutputWithContext(context.Context) DownloadMapOutput
}

type DownloadMap map[string]DownloadInput

func (DownloadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Download)(nil)).Elem()
}

func (i DownloadMap) ToDownloadMapOutput() DownloadMapOutput {
	return i.ToDownloadMapOutputWithContext(context.Background())
}

func (i DownloadMap) ToDownloadMapOutputWithContext(ctx context.Context) DownloadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadMapOutput)
}

type DownloadOutput struct{ *pulumi.OutputState }

func (DownloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Download)(nil)).Elem()
}

func (o DownloadOutput) ToDownloadOutput() DownloadOutput {
	return o
}

func (o DownloadOutput) ToDownloadOutputWithContext(ctx context.Context) DownloadOutput {
	return o
}

// The parameters with which to connect to the remote host.
func (o DownloadOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *Download) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// The fully qualified path on the remote system where the file should be downloaded to.
func (o DownloadOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *Download) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// The mkdir operation.
func (o DownloadOutput) Mkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *Download) tools.MkdirOutput { return v.Mkdir }).(tools.MkdirOutput)
}

// Remove the downloaded fiel when the resource is deleted.
func (o DownloadOutput) RemoveOnDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v *Download) pulumi.BoolOutput { return v.RemoveOnDelete }).(pulumi.BoolOutput)
}

// The URL of the file to be downloaded.
func (o DownloadOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Download) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The wget operation.
func (o DownloadOutput) Wget() tools.WgetOutput {
	return o.ApplyT(func(v *Download) tools.WgetOutput { return v.Wget }).(tools.WgetOutput)
}

type DownloadArrayOutput struct{ *pulumi.OutputState }

func (DownloadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Download)(nil)).Elem()
}

func (o DownloadArrayOutput) ToDownloadArrayOutput() DownloadArrayOutput {
	return o
}

func (o DownloadArrayOutput) ToDownloadArrayOutputWithContext(ctx context.Context) DownloadArrayOutput {
	return o
}

func (o DownloadArrayOutput) Index(i pulumi.IntInput) DownloadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Download {
		return vs[0].([]*Download)[vs[1].(int)]
	}).(DownloadOutput)
}

type DownloadMapOutput struct{ *pulumi.OutputState }

func (DownloadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Download)(nil)).Elem()
}

func (o DownloadMapOutput) ToDownloadMapOutput() DownloadMapOutput {
	return o
}

func (o DownloadMapOutput) ToDownloadMapOutputWithContext(ctx context.Context) DownloadMapOutput {
	return o
}

func (o DownloadMapOutput) MapIndex(k pulumi.StringInput) DownloadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Download {
		return vs[0].(map[string]*Download)[vs[1].(string)]
	}).(DownloadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DownloadInput)(nil)).Elem(), &Download{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownloadArrayInput)(nil)).Elem(), DownloadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DownloadMapInput)(nil)).Elem(), DownloadMap{})
	pulumi.RegisterOutputType(DownloadOutput{})
	pulumi.RegisterOutputType(DownloadArrayOutput{})
	pulumi.RegisterOutputType(DownloadMapOutput{})
}
