// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	pulumiCommand "github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

// Installs kube-apiserver on a remote system.
type KubeApiServerInstall struct {
	pulumi.ResourceState

	// The kube-apiserver CPU architecture.
	Architecture ArchitectureOutput `pulumi:"architecture"`
	// The command resource.
	Command pulumiCommand.CommandOutput `pulumi:"command"`
	// The connection details.
	Connection pulumiCommand.ConnectionOutput `pulumi:"connection"`
	// Directory to install the `kube-apiserver` binary.
	InstallDirectory pulumi.StringOutput `pulumi:"installDirectory"`
	// The version of kube-apiserver to install.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewKubeApiServerInstall registers a new resource with the given unique name, arguments, and options.
func NewKubeApiServerInstall(ctx *pulumi.Context,
	name string, args *KubeApiServerInstallArgs, opts ...pulumi.ResourceOption) (*KubeApiServerInstall, error) {
	if args == nil {
		args = &KubeApiServerInstallArgs{}
	}

	if args.Connection != nil {
		args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v *pulumiCommand.Connection) *pulumiCommand.Connection { return v.Defaults() }).(*pulumiCommand.ConnectionOutput)
	}
	if args.InstallDirectory == nil {
		args.InstallDirectory = pulumi.StringPtr("/usr/local/bin")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubeApiServerInstall
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:remote:KubeApiServerInstall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type kubeApiServerInstallArgs struct {
	// The kube-apiserver CPU architecture.
	Architecture *Architecture `pulumi:"architecture"`
	// The connection details.
	Connection *pulumiCommand.Connection `pulumi:"connection"`
	// Directory to install the `etcd` and `etcdctl` binaries.
	InstallDirectory *string `pulumi:"installDirectory"`
	// The version of kube-apiserver to install.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a KubeApiServerInstall resource.
type KubeApiServerInstallArgs struct {
	// The kube-apiserver CPU architecture.
	Architecture ArchitecturePtrInput
	// The connection details.
	Connection *pulumiCommand.ConnectionInput
	// Directory to install the `etcd` and `etcdctl` binaries.
	InstallDirectory pulumi.StringPtrInput
	// The version of kube-apiserver to install.
	Version pulumi.StringPtrInput
}

func (KubeApiServerInstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubeApiServerInstallArgs)(nil)).Elem()
}

type KubeApiServerInstallInput interface {
	pulumi.Input

	ToKubeApiServerInstallOutput() KubeApiServerInstallOutput
	ToKubeApiServerInstallOutputWithContext(ctx context.Context) KubeApiServerInstallOutput
}

func (*KubeApiServerInstall) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeApiServerInstall)(nil)).Elem()
}

func (i *KubeApiServerInstall) ToKubeApiServerInstallOutput() KubeApiServerInstallOutput {
	return i.ToKubeApiServerInstallOutputWithContext(context.Background())
}

func (i *KubeApiServerInstall) ToKubeApiServerInstallOutputWithContext(ctx context.Context) KubeApiServerInstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeApiServerInstallOutput)
}

// KubeApiServerInstallArrayInput is an input type that accepts KubeApiServerInstallArray and KubeApiServerInstallArrayOutput values.
// You can construct a concrete instance of `KubeApiServerInstallArrayInput` via:
//
//	KubeApiServerInstallArray{ KubeApiServerInstallArgs{...} }
type KubeApiServerInstallArrayInput interface {
	pulumi.Input

	ToKubeApiServerInstallArrayOutput() KubeApiServerInstallArrayOutput
	ToKubeApiServerInstallArrayOutputWithContext(context.Context) KubeApiServerInstallArrayOutput
}

type KubeApiServerInstallArray []KubeApiServerInstallInput

func (KubeApiServerInstallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeApiServerInstall)(nil)).Elem()
}

func (i KubeApiServerInstallArray) ToKubeApiServerInstallArrayOutput() KubeApiServerInstallArrayOutput {
	return i.ToKubeApiServerInstallArrayOutputWithContext(context.Background())
}

func (i KubeApiServerInstallArray) ToKubeApiServerInstallArrayOutputWithContext(ctx context.Context) KubeApiServerInstallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeApiServerInstallArrayOutput)
}

// KubeApiServerInstallMapInput is an input type that accepts KubeApiServerInstallMap and KubeApiServerInstallMapOutput values.
// You can construct a concrete instance of `KubeApiServerInstallMapInput` via:
//
//	KubeApiServerInstallMap{ "key": KubeApiServerInstallArgs{...} }
type KubeApiServerInstallMapInput interface {
	pulumi.Input

	ToKubeApiServerInstallMapOutput() KubeApiServerInstallMapOutput
	ToKubeApiServerInstallMapOutputWithContext(context.Context) KubeApiServerInstallMapOutput
}

type KubeApiServerInstallMap map[string]KubeApiServerInstallInput

func (KubeApiServerInstallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeApiServerInstall)(nil)).Elem()
}

func (i KubeApiServerInstallMap) ToKubeApiServerInstallMapOutput() KubeApiServerInstallMapOutput {
	return i.ToKubeApiServerInstallMapOutputWithContext(context.Background())
}

func (i KubeApiServerInstallMap) ToKubeApiServerInstallMapOutputWithContext(ctx context.Context) KubeApiServerInstallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeApiServerInstallMapOutput)
}

type KubeApiServerInstallOutput struct{ *pulumi.OutputState }

func (KubeApiServerInstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeApiServerInstall)(nil)).Elem()
}

func (o KubeApiServerInstallOutput) ToKubeApiServerInstallOutput() KubeApiServerInstallOutput {
	return o
}

func (o KubeApiServerInstallOutput) ToKubeApiServerInstallOutputWithContext(ctx context.Context) KubeApiServerInstallOutput {
	return o
}

// The kube-apiserver CPU architecture.
func (o KubeApiServerInstallOutput) Architecture() ArchitectureOutput {
	return o.ApplyT(func(v *KubeApiServerInstall) ArchitectureOutput { return v.Architecture }).(ArchitectureOutput)
}

// The command resource.
func (o KubeApiServerInstallOutput) Command() pulumiCommand.CommandOutput {
	return o.ApplyT(func(v *KubeApiServerInstall) pulumiCommand.CommandOutput { return v.Command }).(pulumiCommand.CommandOutput)
}

// The connection details.
func (o KubeApiServerInstallOutput) Connection() pulumiCommand.ConnectionOutput {
	return o.ApplyT(func(v *KubeApiServerInstall) pulumiCommand.ConnectionOutput { return v.Connection }).(pulumiCommand.ConnectionOutput)
}

// Directory to install the `kube-apiserver` binary.
func (o KubeApiServerInstallOutput) InstallDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeApiServerInstall) pulumi.StringOutput { return v.InstallDirectory }).(pulumi.StringOutput)
}

// The version of kube-apiserver to install.
func (o KubeApiServerInstallOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KubeApiServerInstall) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type KubeApiServerInstallArrayOutput struct{ *pulumi.OutputState }

func (KubeApiServerInstallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubeApiServerInstall)(nil)).Elem()
}

func (o KubeApiServerInstallArrayOutput) ToKubeApiServerInstallArrayOutput() KubeApiServerInstallArrayOutput {
	return o
}

func (o KubeApiServerInstallArrayOutput) ToKubeApiServerInstallArrayOutputWithContext(ctx context.Context) KubeApiServerInstallArrayOutput {
	return o
}

func (o KubeApiServerInstallArrayOutput) Index(i pulumi.IntInput) KubeApiServerInstallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubeApiServerInstall {
		return vs[0].([]*KubeApiServerInstall)[vs[1].(int)]
	}).(KubeApiServerInstallOutput)
}

type KubeApiServerInstallMapOutput struct{ *pulumi.OutputState }

func (KubeApiServerInstallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubeApiServerInstall)(nil)).Elem()
}

func (o KubeApiServerInstallMapOutput) ToKubeApiServerInstallMapOutput() KubeApiServerInstallMapOutput {
	return o
}

func (o KubeApiServerInstallMapOutput) ToKubeApiServerInstallMapOutputWithContext(ctx context.Context) KubeApiServerInstallMapOutput {
	return o
}

func (o KubeApiServerInstallMapOutput) MapIndex(k pulumi.StringInput) KubeApiServerInstallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubeApiServerInstall {
		return vs[0].(map[string]*KubeApiServerInstall)[vs[1].(string)]
	}).(KubeApiServerInstallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubeApiServerInstallInput)(nil)).Elem(), &KubeApiServerInstall{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeApiServerInstallArrayInput)(nil)).Elem(), KubeApiServerInstallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubeApiServerInstallMapInput)(nil)).Elem(), KubeApiServerInstallMap{})
	pulumi.RegisterOutputType(KubeApiServerInstallOutput{})
	pulumi.RegisterOutputType(KubeApiServerInstallArrayOutput{})
	pulumi.RegisterOutputType(KubeApiServerInstallMapOutput{})
}
