// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetesthehardway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-command/sdk/go/command/remote"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/tools"
)

// Represents a file to be downloaded on a remote system.
type RemoteDownload struct {
	pulumi.ResourceState

	// Connection details for the remote system
	Connection remote.ConnectionOutput `pulumi:"connection"`
	// The fully qualified path on the remote system where the file should be downloaded to.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Represents the command used to create the remote directory.
	Mkdir tools.MkdirOutput `pulumi:"mkdir"`
	// The URL for the file to be downloaded.
	Url pulumi.StringOutput `pulumi:"url"`
	// Represents the wget command used to download the file.
	Wget tools.WgetOutput `pulumi:"wget"`
}

// NewRemoteDownload registers a new resource with the given unique name, arguments, and options.
func NewRemoteDownload(ctx *pulumi.Context,
	name string, args *RemoteDownloadArgs, opts ...pulumi.ResourceOption) (*RemoteDownload, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v remote.Connection) remote.Connection { return *v.Defaults() }).(remote.ConnectionOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RemoteDownload
	err := ctx.RegisterRemoteComponentResource("kubernetes-the-hard-way:index:RemoteDownload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type remoteDownloadArgs struct {
	// Connection details for the remote system
	Connection remote.Connection `pulumi:"connection"`
	// The fully qualified path on the remote system where the file should be downloaded to.
	Destination string `pulumi:"destination"`
	// Remove the downloaded file when the resource is deleted.
	RemoveOnDelete *bool `pulumi:"removeOnDelete"`
	// The URL for the file to be downloaded.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a RemoteDownload resource.
type RemoteDownloadArgs struct {
	// Connection details for the remote system
	Connection remote.ConnectionInput
	// The fully qualified path on the remote system where the file should be downloaded to.
	Destination pulumi.StringInput
	// Remove the downloaded file when the resource is deleted.
	RemoveOnDelete pulumi.BoolPtrInput
	// The URL for the file to be downloaded.
	Url pulumi.StringInput
}

func (RemoteDownloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteDownloadArgs)(nil)).Elem()
}

type RemoteDownloadInput interface {
	pulumi.Input

	ToRemoteDownloadOutput() RemoteDownloadOutput
	ToRemoteDownloadOutputWithContext(ctx context.Context) RemoteDownloadOutput
}

func (*RemoteDownload) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteDownload)(nil)).Elem()
}

func (i *RemoteDownload) ToRemoteDownloadOutput() RemoteDownloadOutput {
	return i.ToRemoteDownloadOutputWithContext(context.Background())
}

func (i *RemoteDownload) ToRemoteDownloadOutputWithContext(ctx context.Context) RemoteDownloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDownloadOutput)
}

// RemoteDownloadArrayInput is an input type that accepts RemoteDownloadArray and RemoteDownloadArrayOutput values.
// You can construct a concrete instance of `RemoteDownloadArrayInput` via:
//
//	RemoteDownloadArray{ RemoteDownloadArgs{...} }
type RemoteDownloadArrayInput interface {
	pulumi.Input

	ToRemoteDownloadArrayOutput() RemoteDownloadArrayOutput
	ToRemoteDownloadArrayOutputWithContext(context.Context) RemoteDownloadArrayOutput
}

type RemoteDownloadArray []RemoteDownloadInput

func (RemoteDownloadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteDownload)(nil)).Elem()
}

func (i RemoteDownloadArray) ToRemoteDownloadArrayOutput() RemoteDownloadArrayOutput {
	return i.ToRemoteDownloadArrayOutputWithContext(context.Background())
}

func (i RemoteDownloadArray) ToRemoteDownloadArrayOutputWithContext(ctx context.Context) RemoteDownloadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDownloadArrayOutput)
}

// RemoteDownloadMapInput is an input type that accepts RemoteDownloadMap and RemoteDownloadMapOutput values.
// You can construct a concrete instance of `RemoteDownloadMapInput` via:
//
//	RemoteDownloadMap{ "key": RemoteDownloadArgs{...} }
type RemoteDownloadMapInput interface {
	pulumi.Input

	ToRemoteDownloadMapOutput() RemoteDownloadMapOutput
	ToRemoteDownloadMapOutputWithContext(context.Context) RemoteDownloadMapOutput
}

type RemoteDownloadMap map[string]RemoteDownloadInput

func (RemoteDownloadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteDownload)(nil)).Elem()
}

func (i RemoteDownloadMap) ToRemoteDownloadMapOutput() RemoteDownloadMapOutput {
	return i.ToRemoteDownloadMapOutputWithContext(context.Background())
}

func (i RemoteDownloadMap) ToRemoteDownloadMapOutputWithContext(ctx context.Context) RemoteDownloadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteDownloadMapOutput)
}

type RemoteDownloadOutput struct{ *pulumi.OutputState }

func (RemoteDownloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteDownload)(nil)).Elem()
}

func (o RemoteDownloadOutput) ToRemoteDownloadOutput() RemoteDownloadOutput {
	return o
}

func (o RemoteDownloadOutput) ToRemoteDownloadOutputWithContext(ctx context.Context) RemoteDownloadOutput {
	return o
}

// Connection details for the remote system
func (o RemoteDownloadOutput) Connection() remote.ConnectionOutput {
	return o.ApplyT(func(v *RemoteDownload) remote.ConnectionOutput { return v.Connection }).(remote.ConnectionOutput)
}

// The fully qualified path on the remote system where the file should be downloaded to.
func (o RemoteDownloadOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteDownload) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Represents the command used to create the remote directory.
func (o RemoteDownloadOutput) Mkdir() tools.MkdirOutput {
	return o.ApplyT(func(v *RemoteDownload) tools.MkdirOutput { return v.Mkdir }).(tools.MkdirOutput)
}

// The URL for the file to be downloaded.
func (o RemoteDownloadOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteDownload) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Represents the wget command used to download the file.
func (o RemoteDownloadOutput) Wget() tools.WgetOutput {
	return o.ApplyT(func(v *RemoteDownload) tools.WgetOutput { return v.Wget }).(tools.WgetOutput)
}

type RemoteDownloadArrayOutput struct{ *pulumi.OutputState }

func (RemoteDownloadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteDownload)(nil)).Elem()
}

func (o RemoteDownloadArrayOutput) ToRemoteDownloadArrayOutput() RemoteDownloadArrayOutput {
	return o
}

func (o RemoteDownloadArrayOutput) ToRemoteDownloadArrayOutputWithContext(ctx context.Context) RemoteDownloadArrayOutput {
	return o
}

func (o RemoteDownloadArrayOutput) Index(i pulumi.IntInput) RemoteDownloadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RemoteDownload {
		return vs[0].([]*RemoteDownload)[vs[1].(int)]
	}).(RemoteDownloadOutput)
}

type RemoteDownloadMapOutput struct{ *pulumi.OutputState }

func (RemoteDownloadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteDownload)(nil)).Elem()
}

func (o RemoteDownloadMapOutput) ToRemoteDownloadMapOutput() RemoteDownloadMapOutput {
	return o
}

func (o RemoteDownloadMapOutput) ToRemoteDownloadMapOutputWithContext(ctx context.Context) RemoteDownloadMapOutput {
	return o
}

func (o RemoteDownloadMapOutput) MapIndex(k pulumi.StringInput) RemoteDownloadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RemoteDownload {
		return vs[0].(map[string]*RemoteDownload)[vs[1].(string)]
	}).(RemoteDownloadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteDownloadInput)(nil)).Elem(), &RemoteDownload{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteDownloadArrayInput)(nil)).Elem(), RemoteDownloadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteDownloadMapInput)(nil)).Elem(), RemoteDownloadMap{})
	pulumi.RegisterOutputType(RemoteDownloadOutput{})
	pulumi.RegisterOutputType(RemoteDownloadArrayOutput{})
	pulumi.RegisterOutputType(RemoteDownloadMapOutput{})
}
