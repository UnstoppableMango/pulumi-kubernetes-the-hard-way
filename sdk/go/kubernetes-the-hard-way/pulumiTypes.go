// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetesthehardway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way/internal"
)

var _ = internal.GetEnvOrDefault

type CertRequestSubject struct {
	// Distinguished name: CN
	CommonName *string `pulumi:"commonName"`
	// Distinguished name: C
	Country *string `pulumi:"country"`
	// Distinguished name: L
	Locality *string `pulumi:"locality"`
	// Distinguished name: O
	Organization *string `pulumi:"organization"`
	// Distinguished name: OU
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// Distinguished name: PC
	PostalCode *string `pulumi:"postalCode"`
	// Distinguished name: ST
	Province *string `pulumi:"province"`
	// Distinguished name: SERIALNUMBER
	SerialNumber *string `pulumi:"serialNumber"`
	// Distinguished name: STREET
	StreetAddresses []string `pulumi:"streetAddresses"`
}

// CertRequestSubjectInput is an input type that accepts CertRequestSubjectArgs and CertRequestSubjectOutput values.
// You can construct a concrete instance of `CertRequestSubjectInput` via:
//
//	CertRequestSubjectArgs{...}
type CertRequestSubjectInput interface {
	pulumi.Input

	ToCertRequestSubjectOutput() CertRequestSubjectOutput
	ToCertRequestSubjectOutputWithContext(context.Context) CertRequestSubjectOutput
}

type CertRequestSubjectArgs struct {
	// Distinguished name: CN
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// Distinguished name: C
	Country pulumi.StringPtrInput `pulumi:"country"`
	// Distinguished name: L
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// Distinguished name: O
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// Distinguished name: OU
	OrganizationalUnit pulumi.StringPtrInput `pulumi:"organizationalUnit"`
	// Distinguished name: PC
	PostalCode pulumi.StringPtrInput `pulumi:"postalCode"`
	// Distinguished name: ST
	Province pulumi.StringPtrInput `pulumi:"province"`
	// Distinguished name: SERIALNUMBER
	SerialNumber pulumi.StringPtrInput `pulumi:"serialNumber"`
	// Distinguished name: STREET
	StreetAddresses pulumi.StringArrayInput `pulumi:"streetAddresses"`
}

func (CertRequestSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertRequestSubject)(nil)).Elem()
}

func (i CertRequestSubjectArgs) ToCertRequestSubjectOutput() CertRequestSubjectOutput {
	return i.ToCertRequestSubjectOutputWithContext(context.Background())
}

func (i CertRequestSubjectArgs) ToCertRequestSubjectOutputWithContext(ctx context.Context) CertRequestSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertRequestSubjectOutput)
}

func (i CertRequestSubjectArgs) ToCertRequestSubjectPtrOutput() CertRequestSubjectPtrOutput {
	return i.ToCertRequestSubjectPtrOutputWithContext(context.Background())
}

func (i CertRequestSubjectArgs) ToCertRequestSubjectPtrOutputWithContext(ctx context.Context) CertRequestSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertRequestSubjectOutput).ToCertRequestSubjectPtrOutputWithContext(ctx)
}

// CertRequestSubjectPtrInput is an input type that accepts CertRequestSubjectArgs, CertRequestSubjectPtr and CertRequestSubjectPtrOutput values.
// You can construct a concrete instance of `CertRequestSubjectPtrInput` via:
//
//	        CertRequestSubjectArgs{...}
//
//	or:
//
//	        nil
type CertRequestSubjectPtrInput interface {
	pulumi.Input

	ToCertRequestSubjectPtrOutput() CertRequestSubjectPtrOutput
	ToCertRequestSubjectPtrOutputWithContext(context.Context) CertRequestSubjectPtrOutput
}

type certRequestSubjectPtrType CertRequestSubjectArgs

func CertRequestSubjectPtr(v *CertRequestSubjectArgs) CertRequestSubjectPtrInput {
	return (*certRequestSubjectPtrType)(v)
}

func (*certRequestSubjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertRequestSubject)(nil)).Elem()
}

func (i *certRequestSubjectPtrType) ToCertRequestSubjectPtrOutput() CertRequestSubjectPtrOutput {
	return i.ToCertRequestSubjectPtrOutputWithContext(context.Background())
}

func (i *certRequestSubjectPtrType) ToCertRequestSubjectPtrOutputWithContext(ctx context.Context) CertRequestSubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertRequestSubjectPtrOutput)
}

type CertRequestSubjectOutput struct{ *pulumi.OutputState }

func (CertRequestSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertRequestSubject)(nil)).Elem()
}

func (o CertRequestSubjectOutput) ToCertRequestSubjectOutput() CertRequestSubjectOutput {
	return o
}

func (o CertRequestSubjectOutput) ToCertRequestSubjectOutputWithContext(ctx context.Context) CertRequestSubjectOutput {
	return o
}

func (o CertRequestSubjectOutput) ToCertRequestSubjectPtrOutput() CertRequestSubjectPtrOutput {
	return o.ToCertRequestSubjectPtrOutputWithContext(context.Background())
}

func (o CertRequestSubjectOutput) ToCertRequestSubjectPtrOutputWithContext(ctx context.Context) CertRequestSubjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertRequestSubject) *CertRequestSubject {
		return &v
	}).(CertRequestSubjectPtrOutput)
}

// Distinguished name: CN
func (o CertRequestSubjectOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertRequestSubject) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// Distinguished name: C
func (o CertRequestSubjectOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertRequestSubject) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// Distinguished name: L
func (o CertRequestSubjectOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertRequestSubject) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// Distinguished name: O
func (o CertRequestSubjectOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertRequestSubject) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// Distinguished name: OU
func (o CertRequestSubjectOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertRequestSubject) *string { return v.OrganizationalUnit }).(pulumi.StringPtrOutput)
}

// Distinguished name: PC
func (o CertRequestSubjectOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertRequestSubject) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// Distinguished name: ST
func (o CertRequestSubjectOutput) Province() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertRequestSubject) *string { return v.Province }).(pulumi.StringPtrOutput)
}

// Distinguished name: SERIALNUMBER
func (o CertRequestSubjectOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertRequestSubject) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

// Distinguished name: STREET
func (o CertRequestSubjectOutput) StreetAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertRequestSubject) []string { return v.StreetAddresses }).(pulumi.StringArrayOutput)
}

type CertRequestSubjectPtrOutput struct{ *pulumi.OutputState }

func (CertRequestSubjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertRequestSubject)(nil)).Elem()
}

func (o CertRequestSubjectPtrOutput) ToCertRequestSubjectPtrOutput() CertRequestSubjectPtrOutput {
	return o
}

func (o CertRequestSubjectPtrOutput) ToCertRequestSubjectPtrOutputWithContext(ctx context.Context) CertRequestSubjectPtrOutput {
	return o
}

func (o CertRequestSubjectPtrOutput) Elem() CertRequestSubjectOutput {
	return o.ApplyT(func(v *CertRequestSubject) CertRequestSubject {
		if v != nil {
			return *v
		}
		var ret CertRequestSubject
		return ret
	}).(CertRequestSubjectOutput)
}

// Distinguished name: CN
func (o CertRequestSubjectPtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertRequestSubject) *string {
		if v == nil {
			return nil
		}
		return v.CommonName
	}).(pulumi.StringPtrOutput)
}

// Distinguished name: C
func (o CertRequestSubjectPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertRequestSubject) *string {
		if v == nil {
			return nil
		}
		return v.Country
	}).(pulumi.StringPtrOutput)
}

// Distinguished name: L
func (o CertRequestSubjectPtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertRequestSubject) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

// Distinguished name: O
func (o CertRequestSubjectPtrOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertRequestSubject) *string {
		if v == nil {
			return nil
		}
		return v.Organization
	}).(pulumi.StringPtrOutput)
}

// Distinguished name: OU
func (o CertRequestSubjectPtrOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertRequestSubject) *string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnit
	}).(pulumi.StringPtrOutput)
}

// Distinguished name: PC
func (o CertRequestSubjectPtrOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertRequestSubject) *string {
		if v == nil {
			return nil
		}
		return v.PostalCode
	}).(pulumi.StringPtrOutput)
}

// Distinguished name: ST
func (o CertRequestSubjectPtrOutput) Province() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertRequestSubject) *string {
		if v == nil {
			return nil
		}
		return v.Province
	}).(pulumi.StringPtrOutput)
}

// Distinguished name: SERIALNUMBER
func (o CertRequestSubjectPtrOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertRequestSubject) *string {
		if v == nil {
			return nil
		}
		return v.SerialNumber
	}).(pulumi.StringPtrOutput)
}

// Distinguished name: STREET
func (o CertRequestSubjectPtrOutput) StreetAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertRequestSubject) []string {
		if v == nil {
			return nil
		}
		return v.StreetAddresses
	}).(pulumi.StringArrayOutput)
}

// Instructions for how to connect to a remote endpoint.
type Connection struct {
	// SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
	AgentSocketPath *string `pulumi:"agentSocketPath"`
	// Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
	DialErrorLimit *int `pulumi:"dialErrorLimit"`
	// The address of the resource to connect to.
	Host string `pulumi:"host"`
	// The password we should use for the connection.
	Password *string `pulumi:"password"`
	// Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
	PerDialTimeout *int `pulumi:"perDialTimeout"`
	// The port to connect to.
	Port *int `pulumi:"port"`
	// The contents of an SSH key to use for the connection. This takes preference over the password if provided.
	PrivateKey *string `pulumi:"privateKey"`
	// The password to use in case the private key is encrypted.
	PrivateKeyPassword *string `pulumi:"privateKeyPassword"`
	// The user that we should use for the connection.
	User *string `pulumi:"user"`
}

// Defaults sets the appropriate defaults for Connection
func (val *Connection) Defaults() *Connection {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DialErrorLimit == nil {
		dialErrorLimit_ := 10
		tmp.DialErrorLimit = &dialErrorLimit_
	}
	if tmp.PerDialTimeout == nil {
		perDialTimeout_ := 15
		tmp.PerDialTimeout = &perDialTimeout_
	}
	if tmp.Port == nil {
		port_ := 22
		tmp.Port = &port_
	}
	if tmp.User == nil {
		user_ := "root"
		tmp.User = &user_
	}
	return &tmp
}

// ConnectionInput is an input type that accepts ConnectionArgs and ConnectionOutput values.
// You can construct a concrete instance of `ConnectionInput` via:
//
//	ConnectionArgs{...}
type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(context.Context) ConnectionOutput
}

// Instructions for how to connect to a remote endpoint.
type ConnectionArgs struct {
	// SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
	AgentSocketPath pulumi.StringPtrInput `pulumi:"agentSocketPath"`
	// Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
	DialErrorLimit pulumi.IntPtrInput `pulumi:"dialErrorLimit"`
	// The address of the resource to connect to.
	Host pulumi.StringInput `pulumi:"host"`
	// The password we should use for the connection.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
	PerDialTimeout pulumi.IntPtrInput `pulumi:"perDialTimeout"`
	// The port to connect to.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The contents of an SSH key to use for the connection. This takes preference over the password if provided.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// The password to use in case the private key is encrypted.
	PrivateKeyPassword pulumi.StringPtrInput `pulumi:"privateKeyPassword"`
	// The user that we should use for the connection.
	User pulumi.StringPtrInput `pulumi:"user"`
}

// Defaults sets the appropriate defaults for ConnectionArgs
func (val *ConnectionArgs) Defaults() *ConnectionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DialErrorLimit == nil {
		tmp.DialErrorLimit = pulumi.IntPtr(10)
	}
	if tmp.PerDialTimeout == nil {
		tmp.PerDialTimeout = pulumi.IntPtr(15)
	}
	if tmp.Port == nil {
		tmp.Port = pulumi.IntPtr(22)
	}
	if tmp.User == nil {
		tmp.User = pulumi.StringPtr("root")
	}
	return &tmp
}
func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Connection)(nil)).Elem()
}

func (i ConnectionArgs) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i ConnectionArgs) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// Instructions for how to connect to a remote endpoint.
type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
func (o ConnectionOutput) AgentSocketPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.AgentSocketPath }).(pulumi.StringPtrOutput)
}

// Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
func (o ConnectionOutput) DialErrorLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Connection) *int { return v.DialErrorLimit }).(pulumi.IntPtrOutput)
}

// The address of the resource to connect to.
func (o ConnectionOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v Connection) string { return v.Host }).(pulumi.StringOutput)
}

// The password we should use for the connection.
func (o ConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
func (o ConnectionOutput) PerDialTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Connection) *int { return v.PerDialTimeout }).(pulumi.IntPtrOutput)
}

// The port to connect to.
func (o ConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Connection) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The contents of an SSH key to use for the connection. This takes preference over the password if provided.
func (o ConnectionOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The password to use in case the private key is encrypted.
func (o ConnectionOutput) PrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.PrivateKeyPassword }).(pulumi.StringPtrOutput)
}

// The user that we should use for the connection.
func (o ConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.User }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertRequestSubjectInput)(nil)).Elem(), CertRequestSubjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertRequestSubjectPtrInput)(nil)).Elem(), CertRequestSubjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), ConnectionArgs{})
	pulumi.RegisterOutputType(CertRequestSubjectOutput{})
	pulumi.RegisterOutputType(CertRequestSubjectPtrOutput{})
	pulumi.RegisterOutputType(ConnectionOutput{})
}
