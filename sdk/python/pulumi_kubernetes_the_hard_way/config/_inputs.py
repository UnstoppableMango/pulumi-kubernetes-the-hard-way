# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *
import pulumi_kubernetes

__all__ = [
    'CniBridgeIpam',
    'CniBridgeIpamArgs',
    'CniBridgePluginConfigurationArgs',
    'CniLoopbackPluginConfigurationArgs',
    'ContainerdConfigurationArgs',
    'ContainerdCriPluginConfiguration',
    'ContainerdCriPluginConfigurationCni',
    'ContainerdCriPluginConfigurationCniArgs',
    'ContainerdCriPluginConfigurationContainerd',
    'ContainerdCriPluginConfigurationContainerdRunc',
    'ContainerdCriPluginConfigurationContainerdRuncOptions',
    'ContainerdCriPluginConfigurationContainerdRuncOptionsArgs',
    'ContainerdCriPluginConfigurationContainerdRuncArgs',
    'ContainerdCriPluginConfigurationContainerdArgs',
    'ContainerdCriPluginConfigurationArgs',
    'KubeProxyConfigurationClientConnectionArgs',
    'KubeProxyConfigurationArgs',
    'KubeconfigAdminOptions',
    'KubeconfigKubeControllerManagerOptions',
    'KubeconfigKubeProxyOptions',
    'KubeconfigKubeSchedulerOptions',
    'KubeconfigWorkerOptions',
    'KubeletConfigurationAuthenticationAnonymousArgs',
    'KubeletConfigurationAuthenticationWebhookArgs',
    'KubeletConfigurationAuthenticationx509Args',
    'KubeletConfigurationAuthenticationArgs',
    'KubeletConfigurationAuthorizationArgs',
    'KubeletConfigurationArgs',
    'PodManifestArgs',
]

@pulumi.input_type
class CniBridgeIpam:
    def __init__(__self__, *,
                 ranges: Optional[Sequence[Mapping[str, str]]] = None,
                 routes: Optional[Sequence[Mapping[str, str]]] = None,
                 type: Optional[str] = None):
        """
        The CNI plugins IPAM
        :param Sequence[Mapping[str, str]] ranges: IPAM ranges.
        :param Sequence[Mapping[str, str]] routes: IPAM routes.
        :param str type: CNI bridge IPAM type
        """
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence[Mapping[str, str]]]:
        """
        IPAM ranges.
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[Sequence[Mapping[str, str]]]):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence[Mapping[str, str]]]:
        """
        IPAM routes.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[Sequence[Mapping[str, str]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        CNI bridge IPAM type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CniBridgeIpamArgs:
    def __init__(__self__, *,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The CNI plugins IPAM
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] ranges: IPAM ranges.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] routes: IPAM routes.
        :param pulumi.Input[str] type: CNI bridge IPAM type
        """
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        IPAM ranges.
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        IPAM routes.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        CNI bridge IPAM type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CniBridgePluginConfigurationArgs:
    def __init__(__self__, *,
                 bridge: pulumi.Input[str],
                 ip_masq: pulumi.Input[bool],
                 ipam: pulumi.Input['CniBridgeIpamArgs'],
                 is_gateway: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 subnet: pulumi.Input[str],
                 type: pulumi.Input[str],
                 cni_version: Optional[pulumi.Input[str]] = None):
        """
        TODO
        :param pulumi.Input[str] bridge: Bridge name.
        :param pulumi.Input[bool] ip_masq: IP masq.
        :param pulumi.Input['CniBridgeIpamArgs'] ipam: IPAM.
        :param pulumi.Input[bool] is_gateway: Is gateway.
        :param pulumi.Input[str] name: Plugin name.
        :param pulumi.Input[str] subnet: The subnet to use.
        :param pulumi.Input[str] type: Plugin type.
        :param pulumi.Input[str] cni_version: The version of the bridge plugin.
        """
        pulumi.set(__self__, "bridge", bridge)
        pulumi.set(__self__, "ip_masq", ip_masq)
        pulumi.set(__self__, "ipam", ipam)
        pulumi.set(__self__, "is_gateway", is_gateway)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "type", type)
        if cni_version is not None:
            pulumi.set(__self__, "cni_version", cni_version)

    @property
    @pulumi.getter
    def bridge(self) -> pulumi.Input[str]:
        """
        Bridge name.
        """
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: pulumi.Input[str]):
        pulumi.set(self, "bridge", value)

    @property
    @pulumi.getter(name="ipMasq")
    def ip_masq(self) -> pulumi.Input[bool]:
        """
        IP masq.
        """
        return pulumi.get(self, "ip_masq")

    @ip_masq.setter
    def ip_masq(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ip_masq", value)

    @property
    @pulumi.getter
    def ipam(self) -> pulumi.Input['CniBridgeIpamArgs']:
        """
        IPAM.
        """
        return pulumi.get(self, "ipam")

    @ipam.setter
    def ipam(self, value: pulumi.Input['CniBridgeIpamArgs']):
        pulumi.set(self, "ipam", value)

    @property
    @pulumi.getter(name="isGateway")
    def is_gateway(self) -> pulumi.Input[bool]:
        """
        Is gateway.
        """
        return pulumi.get(self, "is_gateway")

    @is_gateway.setter
    def is_gateway(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_gateway", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Plugin name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        """
        The subnet to use.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Plugin type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cniVersion")
    def cni_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the bridge plugin.
        """
        return pulumi.get(self, "cni_version")

    @cni_version.setter
    def cni_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cni_version", value)


@pulumi.input_type
class CniLoopbackPluginConfigurationArgs:
    def __init__(__self__, *,
                 cni_version: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        CNI loopback plugin configuration.
        :param pulumi.Input[str] cni_version: The plugin CNI version.
        :param pulumi.Input[str] name: The name of the plugin.
        :param pulumi.Input[str] type: The type of the plugin.
        """
        pulumi.set(__self__, "cni_version", cni_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cniVersion")
    def cni_version(self) -> pulumi.Input[str]:
        """
        The plugin CNI version.
        """
        return pulumi.get(self, "cni_version")

    @cni_version.setter
    def cni_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "cni_version", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the plugin.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the plugin.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ContainerdConfigurationArgs:
    def __init__(__self__, *,
                 cri: Optional[pulumi.Input['ContainerdCriPluginConfigurationArgs']] = None):
        """
        The containerd configuration.
        :param pulumi.Input['ContainerdCriPluginConfigurationArgs'] cri: The cri configuration.
        """
        if cri is not None:
            pulumi.set(__self__, "cri", cri)

    @property
    @pulumi.getter
    def cri(self) -> Optional[pulumi.Input['ContainerdCriPluginConfigurationArgs']]:
        """
        The cri configuration.
        """
        return pulumi.get(self, "cri")

    @cri.setter
    def cri(self, value: Optional[pulumi.Input['ContainerdCriPluginConfigurationArgs']]):
        pulumi.set(self, "cri", value)


@pulumi.input_type
class ContainerdCriPluginConfiguration:
    def __init__(__self__, *,
                 cni: 'ContainerdCriPluginConfigurationCni',
                 containerd: 'ContainerdCriPluginConfigurationContainerd'):
        """
        containerd cri plugin configuration.
        :param 'ContainerdCriPluginConfigurationCni' cni: cni configuration.
        :param 'ContainerdCriPluginConfigurationContainerd' containerd: containerd configuration.
        """
        pulumi.set(__self__, "cni", cni)
        pulumi.set(__self__, "containerd", containerd)

    @property
    @pulumi.getter
    def cni(self) -> 'ContainerdCriPluginConfigurationCni':
        """
        cni configuration.
        """
        return pulumi.get(self, "cni")

    @cni.setter
    def cni(self, value: 'ContainerdCriPluginConfigurationCni'):
        pulumi.set(self, "cni", value)

    @property
    @pulumi.getter
    def containerd(self) -> 'ContainerdCriPluginConfigurationContainerd':
        """
        containerd configuration.
        """
        return pulumi.get(self, "containerd")

    @containerd.setter
    def containerd(self, value: 'ContainerdCriPluginConfigurationContainerd'):
        pulumi.set(self, "containerd", value)


@pulumi.input_type
class ContainerdCriPluginConfigurationCni:
    def __init__(__self__, *,
                 bin_dir: Optional[str] = None,
                 conf_dir: Optional[str] = None):
        """
        containerd cri plugin configuration.
        :param str bin_dir: bin_dir
        :param str conf_dir: conf_dir
        """
        if bin_dir is not None:
            pulumi.set(__self__, "bin_dir", bin_dir)
        if conf_dir is not None:
            pulumi.set(__self__, "conf_dir", conf_dir)

    @property
    @pulumi.getter(name="binDir")
    def bin_dir(self) -> Optional[str]:
        """
        bin_dir
        """
        return pulumi.get(self, "bin_dir")

    @bin_dir.setter
    def bin_dir(self, value: Optional[str]):
        pulumi.set(self, "bin_dir", value)

    @property
    @pulumi.getter(name="confDir")
    def conf_dir(self) -> Optional[str]:
        """
        conf_dir
        """
        return pulumi.get(self, "conf_dir")

    @conf_dir.setter
    def conf_dir(self, value: Optional[str]):
        pulumi.set(self, "conf_dir", value)


@pulumi.input_type
class ContainerdCriPluginConfigurationCniArgs:
    def __init__(__self__, *,
                 bin_dir: Optional[pulumi.Input[str]] = None,
                 conf_dir: Optional[pulumi.Input[str]] = None):
        """
        containerd cri plugin configuration.
        :param pulumi.Input[str] bin_dir: bin_dir
        :param pulumi.Input[str] conf_dir: conf_dir
        """
        if bin_dir is not None:
            pulumi.set(__self__, "bin_dir", bin_dir)
        if conf_dir is not None:
            pulumi.set(__self__, "conf_dir", conf_dir)

    @property
    @pulumi.getter(name="binDir")
    def bin_dir(self) -> Optional[pulumi.Input[str]]:
        """
        bin_dir
        """
        return pulumi.get(self, "bin_dir")

    @bin_dir.setter
    def bin_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bin_dir", value)

    @property
    @pulumi.getter(name="confDir")
    def conf_dir(self) -> Optional[pulumi.Input[str]]:
        """
        conf_dir
        """
        return pulumi.get(self, "conf_dir")

    @conf_dir.setter
    def conf_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conf_dir", value)


@pulumi.input_type
class ContainerdCriPluginConfigurationContainerd:
    def __init__(__self__, *,
                 default_runtime_name: Optional[str] = None,
                 runtimes: Optional['ContainerdCriPluginConfigurationContainerdRunc'] = None,
                 snapshotter: Optional[str] = None):
        """
        containerd cri plugin configuration.
        :param str default_runtime_name: default_runtime_name
        :param 'ContainerdCriPluginConfigurationContainerdRunc' runtimes: The containerd runtime configuration.
        :param str snapshotter: snapshotter
        """
        if default_runtime_name is not None:
            pulumi.set(__self__, "default_runtime_name", default_runtime_name)
        if runtimes is not None:
            pulumi.set(__self__, "runtimes", runtimes)
        if snapshotter is not None:
            pulumi.set(__self__, "snapshotter", snapshotter)

    @property
    @pulumi.getter(name="defaultRuntimeName")
    def default_runtime_name(self) -> Optional[str]:
        """
        default_runtime_name
        """
        return pulumi.get(self, "default_runtime_name")

    @default_runtime_name.setter
    def default_runtime_name(self, value: Optional[str]):
        pulumi.set(self, "default_runtime_name", value)

    @property
    @pulumi.getter
    def runtimes(self) -> Optional['ContainerdCriPluginConfigurationContainerdRunc']:
        """
        The containerd runtime configuration.
        """
        return pulumi.get(self, "runtimes")

    @runtimes.setter
    def runtimes(self, value: Optional['ContainerdCriPluginConfigurationContainerdRunc']):
        pulumi.set(self, "runtimes", value)

    @property
    @pulumi.getter
    def snapshotter(self) -> Optional[str]:
        """
        snapshotter
        """
        return pulumi.get(self, "snapshotter")

    @snapshotter.setter
    def snapshotter(self, value: Optional[str]):
        pulumi.set(self, "snapshotter", value)


@pulumi.input_type
class ContainerdCriPluginConfigurationContainerdRunc:
    def __init__(__self__, *,
                 options: 'ContainerdCriPluginConfigurationContainerdRuncOptions',
                 runtime_type: Optional[str] = None):
        """
        containerd cri runc plugin configuration.
        :param 'ContainerdCriPluginConfigurationContainerdRuncOptions' options: runc options.
        :param str runtime_type: runtime_type
        """
        pulumi.set(__self__, "options", options)
        if runtime_type is not None:
            pulumi.set(__self__, "runtime_type", runtime_type)

    @property
    @pulumi.getter
    def options(self) -> 'ContainerdCriPluginConfigurationContainerdRuncOptions':
        """
        runc options.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: 'ContainerdCriPluginConfigurationContainerdRuncOptions'):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="runtimeType")
    def runtime_type(self) -> Optional[str]:
        """
        runtime_type
        """
        return pulumi.get(self, "runtime_type")

    @runtime_type.setter
    def runtime_type(self, value: Optional[str]):
        pulumi.set(self, "runtime_type", value)


@pulumi.input_type
class ContainerdCriPluginConfigurationContainerdRuncOptions:
    def __init__(__self__, *,
                 systemd_cgroup: Optional[bool] = None):
        """
        containerd cri runc plugin configuration.
        :param bool systemd_cgroup: SystemdCgroup
        """
        if systemd_cgroup is not None:
            pulumi.set(__self__, "systemd_cgroup", systemd_cgroup)

    @property
    @pulumi.getter(name="systemdCgroup")
    def systemd_cgroup(self) -> Optional[bool]:
        """
        SystemdCgroup
        """
        return pulumi.get(self, "systemd_cgroup")

    @systemd_cgroup.setter
    def systemd_cgroup(self, value: Optional[bool]):
        pulumi.set(self, "systemd_cgroup", value)


@pulumi.input_type
class ContainerdCriPluginConfigurationContainerdRuncOptionsArgs:
    def __init__(__self__, *,
                 systemd_cgroup: Optional[pulumi.Input[bool]] = None):
        """
        containerd cri runc plugin configuration.
        :param pulumi.Input[bool] systemd_cgroup: SystemdCgroup
        """
        if systemd_cgroup is not None:
            pulumi.set(__self__, "systemd_cgroup", systemd_cgroup)

    @property
    @pulumi.getter(name="systemdCgroup")
    def systemd_cgroup(self) -> Optional[pulumi.Input[bool]]:
        """
        SystemdCgroup
        """
        return pulumi.get(self, "systemd_cgroup")

    @systemd_cgroup.setter
    def systemd_cgroup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "systemd_cgroup", value)


@pulumi.input_type
class ContainerdCriPluginConfigurationContainerdRuncArgs:
    def __init__(__self__, *,
                 options: 'ContainerdCriPluginConfigurationContainerdRuncOptionsArgs',
                 runtime_type: Optional[pulumi.Input[str]] = None):
        """
        containerd cri runc plugin configuration.
        :param 'ContainerdCriPluginConfigurationContainerdRuncOptionsArgs' options: runc options.
        :param pulumi.Input[str] runtime_type: runtime_type
        """
        pulumi.set(__self__, "options", options)
        if runtime_type is not None:
            pulumi.set(__self__, "runtime_type", runtime_type)

    @property
    @pulumi.getter
    def options(self) -> 'ContainerdCriPluginConfigurationContainerdRuncOptionsArgs':
        """
        runc options.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: 'ContainerdCriPluginConfigurationContainerdRuncOptionsArgs'):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="runtimeType")
    def runtime_type(self) -> Optional[pulumi.Input[str]]:
        """
        runtime_type
        """
        return pulumi.get(self, "runtime_type")

    @runtime_type.setter
    def runtime_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_type", value)


@pulumi.input_type
class ContainerdCriPluginConfigurationContainerdArgs:
    def __init__(__self__, *,
                 default_runtime_name: Optional[pulumi.Input[str]] = None,
                 runtimes: Optional['ContainerdCriPluginConfigurationContainerdRuncArgs'] = None,
                 snapshotter: Optional[pulumi.Input[str]] = None):
        """
        containerd cri plugin configuration.
        :param pulumi.Input[str] default_runtime_name: default_runtime_name
        :param 'ContainerdCriPluginConfigurationContainerdRuncArgs' runtimes: The containerd runtime configuration.
        :param pulumi.Input[str] snapshotter: snapshotter
        """
        if default_runtime_name is not None:
            pulumi.set(__self__, "default_runtime_name", default_runtime_name)
        if runtimes is not None:
            pulumi.set(__self__, "runtimes", runtimes)
        if snapshotter is not None:
            pulumi.set(__self__, "snapshotter", snapshotter)

    @property
    @pulumi.getter(name="defaultRuntimeName")
    def default_runtime_name(self) -> Optional[pulumi.Input[str]]:
        """
        default_runtime_name
        """
        return pulumi.get(self, "default_runtime_name")

    @default_runtime_name.setter
    def default_runtime_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_runtime_name", value)

    @property
    @pulumi.getter
    def runtimes(self) -> Optional['ContainerdCriPluginConfigurationContainerdRuncArgs']:
        """
        The containerd runtime configuration.
        """
        return pulumi.get(self, "runtimes")

    @runtimes.setter
    def runtimes(self, value: Optional['ContainerdCriPluginConfigurationContainerdRuncArgs']):
        pulumi.set(self, "runtimes", value)

    @property
    @pulumi.getter
    def snapshotter(self) -> Optional[pulumi.Input[str]]:
        """
        snapshotter
        """
        return pulumi.get(self, "snapshotter")

    @snapshotter.setter
    def snapshotter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshotter", value)


@pulumi.input_type
class ContainerdCriPluginConfigurationArgs:
    def __init__(__self__, *,
                 cni: 'ContainerdCriPluginConfigurationCniArgs',
                 containerd: 'ContainerdCriPluginConfigurationContainerdArgs'):
        """
        containerd cri plugin configuration.
        :param 'ContainerdCriPluginConfigurationCniArgs' cni: cni configuration.
        :param 'ContainerdCriPluginConfigurationContainerdArgs' containerd: containerd configuration.
        """
        pulumi.set(__self__, "cni", cni)
        pulumi.set(__self__, "containerd", containerd)

    @property
    @pulumi.getter
    def cni(self) -> 'ContainerdCriPluginConfigurationCniArgs':
        """
        cni configuration.
        """
        return pulumi.get(self, "cni")

    @cni.setter
    def cni(self, value: 'ContainerdCriPluginConfigurationCniArgs'):
        pulumi.set(self, "cni", value)

    @property
    @pulumi.getter
    def containerd(self) -> 'ContainerdCriPluginConfigurationContainerdArgs':
        """
        containerd configuration.
        """
        return pulumi.get(self, "containerd")

    @containerd.setter
    def containerd(self, value: 'ContainerdCriPluginConfigurationContainerdArgs'):
        pulumi.set(self, "containerd", value)


@pulumi.input_type
class KubeProxyConfigurationClientConnectionArgs:
    def __init__(__self__, *,
                 kubeconfig: pulumi.Input[str]):
        """
        :param pulumi.Input[str] kubeconfig: Path to the kubeconfig.
        """
        pulumi.set(__self__, "kubeconfig", kubeconfig)

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Input[str]:
        """
        Path to the kubeconfig.
        """
        return pulumi.get(self, "kubeconfig")

    @kubeconfig.setter
    def kubeconfig(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubeconfig", value)


@pulumi.input_type
class KubeProxyConfigurationArgs:
    def __init__(__self__, *,
                 cluster_cidr: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None,
                 client_connection: Optional[pulumi.Input['KubeProxyConfigurationClientConnectionArgs']] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_cidr: TODO
        :param pulumi.Input[str] mode: TODO
        """
        pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        if api_version is not None:
            pulumi.set(__self__, "api_version", 'kubeproxy.config.k8s.io/v1alpha1')
        if client_connection is not None:
            pulumi.set(__self__, "client_connection", client_connection)
        if kind is not None:
            pulumi.set(__self__, "kind", 'KubeProxyConfiguration')
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="clusterCIDR")
    def cluster_cidr(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="clientConnection")
    def client_connection(self) -> Optional[pulumi.Input['KubeProxyConfigurationClientConnectionArgs']]:
        return pulumi.get(self, "client_connection")

    @client_connection.setter
    def client_connection(self, value: Optional[pulumi.Input['KubeProxyConfigurationClientConnectionArgs']]):
        pulumi.set(self, "client_connection", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class KubeconfigAdminOptions:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[str] = None):
        """
        :param str public_ip: TODO
        """
        pulumi.set(__self__, "type", 'admin')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        """
        TODO
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[str]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigKubeControllerManagerOptions:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[str] = None):
        """
        :param str public_ip: TODO
        """
        pulumi.set(__self__, "type", 'kube-controller-manager')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        """
        TODO
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[str]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigKubeProxyOptions:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[str] = None):
        """
        :param str public_ip: TODO
        """
        pulumi.set(__self__, "type", 'kube-proxy')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        """
        TODO
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[str]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigKubeSchedulerOptions:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[str] = None):
        """
        :param str public_ip: TODO
        """
        pulumi.set(__self__, "type", 'kube-scheduler')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        """
        TODO
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[str]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigWorkerOptions:
    def __init__(__self__, *,
                 name: str,
                 public_ip: str,
                 type: Optional[str] = None):
        """
        :param str name: TODO
        :param str public_ip: TODO
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_ip", public_ip)
        if type is not None:
            pulumi.set(__self__, "type", 'worker')

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        TODO
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        TODO
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: str):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KubeletConfigurationAuthenticationAnonymousArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled: TODO
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        TODO
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class KubeletConfigurationAuthenticationWebhookArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled: TODO
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        TODO
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class KubeletConfigurationAuthenticationx509Args:
    def __init__(__self__, *,
                 client_ca_file: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_ca_file: TODO
        """
        pulumi.set(__self__, "client_ca_file", client_ca_file)

    @property
    @pulumi.getter(name="clientCAFile")
    def client_ca_file(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "client_ca_file")

    @client_ca_file.setter
    def client_ca_file(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_ca_file", value)


@pulumi.input_type
class KubeletConfigurationAuthenticationArgs:
    def __init__(__self__, *,
                 anonymous: pulumi.Input['KubeletConfigurationAuthenticationAnonymousArgs'],
                 webhook: pulumi.Input['KubeletConfigurationAuthenticationWebhookArgs'],
                 x509: pulumi.Input['KubeletConfigurationAuthenticationx509Args']):
        pulumi.set(__self__, "anonymous", anonymous)
        pulumi.set(__self__, "webhook", webhook)
        pulumi.set(__self__, "x509", x509)

    @property
    @pulumi.getter
    def anonymous(self) -> pulumi.Input['KubeletConfigurationAuthenticationAnonymousArgs']:
        return pulumi.get(self, "anonymous")

    @anonymous.setter
    def anonymous(self, value: pulumi.Input['KubeletConfigurationAuthenticationAnonymousArgs']):
        pulumi.set(self, "anonymous", value)

    @property
    @pulumi.getter
    def webhook(self) -> pulumi.Input['KubeletConfigurationAuthenticationWebhookArgs']:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(self, value: pulumi.Input['KubeletConfigurationAuthenticationWebhookArgs']):
        pulumi.set(self, "webhook", value)

    @property
    @pulumi.getter
    def x509(self) -> pulumi.Input['KubeletConfigurationAuthenticationx509Args']:
        return pulumi.get(self, "x509")

    @x509.setter
    def x509(self, value: pulumi.Input['KubeletConfigurationAuthenticationx509Args']):
        pulumi.set(self, "x509", value)


@pulumi.input_type
class KubeletConfigurationAuthorizationArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class KubeletConfigurationArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 authentication: pulumi.Input['KubeletConfigurationAuthenticationArgs'],
                 authorization: pulumi.Input['KubeletConfigurationAuthorizationArgs'],
                 cgroup_driver: pulumi.Input[str],
                 cluster_dns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cluster_domain: pulumi.Input[str],
                 container_runtime_endpoint: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 pod_cidr: pulumi.Input[str],
                 resolv_conf: pulumi.Input[str],
                 runtime_request_timeout: pulumi.Input[str],
                 tls_cert_file: pulumi.Input[str],
                 tls_private_key_file: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cgroup_driver: TODO
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_dns: TODO
        :param pulumi.Input[str] cluster_domain: TODO
        :param pulumi.Input[str] container_runtime_endpoint: TODO
        :param pulumi.Input[str] pod_cidr: TODO
        :param pulumi.Input[str] resolv_conf: TODO
        :param pulumi.Input[str] runtime_request_timeout: TODO
        :param pulumi.Input[str] tls_cert_file: TODO
        :param pulumi.Input[str] tls_private_key_file: TODO
        """
        pulumi.set(__self__, "api_version", 'kubelet.config.k8s.io/v1beta1')
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "cgroup_driver", cgroup_driver)
        pulumi.set(__self__, "cluster_dns", cluster_dns)
        pulumi.set(__self__, "cluster_domain", cluster_domain)
        pulumi.set(__self__, "container_runtime_endpoint", container_runtime_endpoint)
        pulumi.set(__self__, "kind", 'KubeletConfiguration')
        pulumi.set(__self__, "pod_cidr", pod_cidr)
        pulumi.set(__self__, "resolv_conf", resolv_conf)
        pulumi.set(__self__, "runtime_request_timeout", runtime_request_timeout)
        pulumi.set(__self__, "tls_cert_file", tls_cert_file)
        pulumi.set(__self__, "tls_private_key_file", tls_private_key_file)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Input['KubeletConfigurationAuthenticationArgs']:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: pulumi.Input['KubeletConfigurationAuthenticationArgs']):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Input['KubeletConfigurationAuthorizationArgs']:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: pulumi.Input['KubeletConfigurationAuthorizationArgs']):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="cgroupDriver")
    def cgroup_driver(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "cgroup_driver")

    @cgroup_driver.setter
    def cgroup_driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "cgroup_driver", value)

    @property
    @pulumi.getter(name="clusterDNS")
    def cluster_dns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        TODO
        """
        return pulumi.get(self, "cluster_dns")

    @cluster_dns.setter
    def cluster_dns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "cluster_dns", value)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="containerRuntimeEndpoint")
    def container_runtime_endpoint(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "container_runtime_endpoint")

    @container_runtime_endpoint.setter
    def container_runtime_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_runtime_endpoint", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="podCIDR")
    def pod_cidr(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "pod_cidr")

    @pod_cidr.setter
    def pod_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "pod_cidr", value)

    @property
    @pulumi.getter(name="resolvConf")
    def resolv_conf(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "resolv_conf")

    @resolv_conf.setter
    def resolv_conf(self, value: pulumi.Input[str]):
        pulumi.set(self, "resolv_conf", value)

    @property
    @pulumi.getter(name="runtimeRequestTimeout")
    def runtime_request_timeout(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "runtime_request_timeout")

    @runtime_request_timeout.setter
    def runtime_request_timeout(self, value: pulumi.Input[str]):
        pulumi.set(self, "runtime_request_timeout", value)

    @property
    @pulumi.getter(name="tlsCertFile")
    def tls_cert_file(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "tls_cert_file")

    @tls_cert_file.setter
    def tls_cert_file(self, value: pulumi.Input[str]):
        pulumi.set(self, "tls_cert_file", value)

    @property
    @pulumi.getter(name="tlsPrivateKeyFile")
    def tls_private_key_file(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "tls_private_key_file")

    @tls_private_key_file.setter
    def tls_private_key_file(self, value: pulumi.Input[str]):
        pulumi.set(self, "tls_private_key_file", value)


@pulumi.input_type
class PodManifestArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['pulumi_kubernetes.meta.v1.ObjectMetaArgs']] = None,
                 spec: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSpecArgs']] = None,
                 status: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodStatusArgs']] = None):
        """
        Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.

        This resource waits until its status is ready before registering success
        for create/update, and populating output properties from the current state of the resource.
        The following conditions are used to determine whether the resource creation has
        succeeded or failed:

        1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
        2. The Pod is initialized ("Initialized" '.status.condition' is true).
        3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
           set to "Running".
        Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").

        If the Pod has not reached a Ready state after 10 minutes, it will
        time out and mark the resource update as Failed. You can override the default timeout value
        by setting the 'customTimeouts' option on the resource.

        {{% examples %}}
        ## Example Usage
        {{% example %}}
        ### Create a Pod with auto-naming

        ```typescript
        import * as pulumi from "@pulumi/pulumi";
        import * as kubernetes from "@pulumi/kubernetes";

        const pod = new kubernetes.core.v1.Pod("pod", {spec: {
            containers: [{
                image: "nginx:1.14.2",
                name: "nginx",
                ports: [{
                    containerPort: 80,
                }],
            }],
        }});
        ```
        ```python
        import pulumi
        import pulumi_kubernetes as kubernetes

        pod = kubernetes.core.v1.Pod("pod", spec=kubernetes.core.v1.PodSpecArgs(
            containers=[kubernetes.core.v1.ContainerArgs(
                image="nginx:1.14.2",
                name="nginx",
                ports=[kubernetes.core.v1.ContainerPortArgs(
                    container_port=80,
                )],
            )],
        ))
        ```
        ```csharp
        using System.Collections.Generic;
        using System.Linq;
        using Pulumi;
        using Kubernetes = Pulumi.Kubernetes;

        return await Deployment.RunAsync(() => 
        {
            var pod = new Kubernetes.Core.V1.Pod("pod", new()
            {
                Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs
                {
                    Containers = new[]
                    {
                        new Kubernetes.Types.Inputs.Core.V1.ContainerArgs
                        {
                            Image = "nginx:1.14.2",
                            Name = "nginx",
                            Ports = new[]
                            {
                                new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs
                                {
                                    ContainerPortValue = 80,
                                },
                            },
                        },
                    },
                },
            });

        });

        ```
        ```go
        package main

        import (
        	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
        	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        )

        func main() {
        	pulumi.Run(func(ctx *pulumi.Context) error {
        		_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
        			Spec: &corev1.PodSpecArgs{
        				Containers: corev1.ContainerArray{
        					&corev1.ContainerArgs{
        						Image: pulumi.String("nginx:1.14.2"),
        						Name:  pulumi.String("nginx"),
        						Ports: corev1.ContainerPortArray{
        							&corev1.ContainerPortArgs{
        								ContainerPort: pulumi.Int(80),
        							},
        						},
        					},
        				},
        			},
        		})
        		if err != nil {
        			return err
        		}
        		return nil
        	})
        }
        ```
        ```java
        package generated_program;

        import com.pulumi.Context;
        import com.pulumi.Pulumi;
        import com.pulumi.core.Output;
        import com.pulumi.kubernetes.core_v1.Pod;
        import com.pulumi.kubernetes.core_v1.PodArgs;
        import com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;
        import java.util.List;
        import java.util.ArrayList;
        import java.util.Map;
        import java.io.File;
        import java.nio.file.Files;
        import java.nio.file.Paths;

        public class App {
            public static void main(String[] args) {
                Pulumi.run(App::stack);
            }

            public static void stack(Context ctx) {
                var pod = new Pod("pod", PodArgs.builder()        
                    .spec(PodSpecArgs.builder()
                        .containers(ContainerArgs.builder()
                            .image("nginx:1.14.2")
                            .name("nginx")
                            .ports(ContainerPortArgs.builder()
                                .containerPort(80)
                                .build())
                            .build())
                        .build())
                    .build());

            }
        }
        ```
        ```yaml
        description: Create a Pod with auto-naming
        name: yaml-example
        resources:
            pod:
                properties:
                    spec:
                        containers:
                            - image: nginx:1.14.2
                              name: nginx
                              ports:
                                - containerPort: 80
                type: kubernetes:core/v1:Pod
        runtime: yaml
        ```
        {{% /example %}}
        {{% example %}}
        ### Create a Pod with a user-specified name

        ```typescript
        import * as pulumi from "@pulumi/pulumi";
        import * as kubernetes from "@pulumi/kubernetes";

        const pod = new kubernetes.core.v1.Pod("pod", {
            metadata: {
                name: "nginx",
            },
            spec: {
                containers: [{
                    image: "nginx:1.14.2",
                    name: "nginx",
                    ports: [{
                        containerPort: 80,
                    }],
                }],
            },
        });
        ```
        ```python
        import pulumi
        import pulumi_kubernetes as kubernetes

        pod = kubernetes.core.v1.Pod("pod",
            metadata=kubernetes.meta.v1.ObjectMetaArgs(
                name="nginx",
            ),
            spec=kubernetes.core.v1.PodSpecArgs(
                containers=[kubernetes.core.v1.ContainerArgs(
                    image="nginx:1.14.2",
                    name="nginx",
                    ports=[kubernetes.core.v1.ContainerPortArgs(
                        container_port=80,
                    )],
                )],
            ))
        ```
        ```csharp
        using System.Collections.Generic;
        using System.Linq;
        using Pulumi;
        using Kubernetes = Pulumi.Kubernetes;

        return await Deployment.RunAsync(() => 
        {
            var pod = new Kubernetes.Core.V1.Pod("pod", new()
            {
                Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs
                {
                    Name = "nginx",
                },
                Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs
                {
                    Containers = new[]
                    {
                        new Kubernetes.Types.Inputs.Core.V1.ContainerArgs
                        {
                            Image = "nginx:1.14.2",
                            Name = "nginx",
                            Ports = new[]
                            {
                                new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs
                                {
                                    ContainerPortValue = 80,
                                },
                            },
                        },
                    },
                },
            });

        });

        ```
        ```go
        package main

        import (
        	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
        	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
        	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        )

        func main() {
        	pulumi.Run(func(ctx *pulumi.Context) error {
        		_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
        			Metadata: &metav1.ObjectMetaArgs{
        				Name: pulumi.String("nginx"),
        			},
        			Spec: &corev1.PodSpecArgs{
        				Containers: corev1.ContainerArray{
        					&corev1.ContainerArgs{
        						Image: pulumi.String("nginx:1.14.2"),
        						Name:  pulumi.String("nginx"),
        						Ports: corev1.ContainerPortArray{
        							&corev1.ContainerPortArgs{
        								ContainerPort: pulumi.Int(80),
        							},
        						},
        					},
        				},
        			},
        		})
        		if err != nil {
        			return err
        		}
        		return nil
        	})
        }
        ```
        ```java
        package generated_program;

        import com.pulumi.Context;
        import com.pulumi.Pulumi;
        import com.pulumi.core.Output;
        import com.pulumi.kubernetes.core_v1.Pod;
        import com.pulumi.kubernetes.core_v1.PodArgs;
        import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
        import com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;
        import java.util.List;
        import java.util.ArrayList;
        import java.util.Map;
        import java.io.File;
        import java.nio.file.Files;
        import java.nio.file.Paths;

        public class App {
            public static void main(String[] args) {
                Pulumi.run(App::stack);
            }

            public static void stack(Context ctx) {
                var pod = new Pod("pod", PodArgs.builder()        
                    .metadata(ObjectMetaArgs.builder()
                        .name("nginx")
                        .build())
                    .spec(PodSpecArgs.builder()
                        .containers(ContainerArgs.builder()
                            .image("nginx:1.14.2")
                            .name("nginx")
                            .ports(ContainerPortArgs.builder()
                                .containerPort(80)
                                .build())
                            .build())
                        .build())
                    .build());

            }
        }
        ```
        ```yaml
        description: Create a Pod with a user-specified name
        name: yaml-example
        resources:
            pod:
                properties:
                    metadata:
                        name: nginx
                    spec:
                        containers:
                            - image: nginx:1.14.2
                              name: nginx
                              ports:
                                - containerPort: 80
                type: kubernetes:core/v1:Pod
        runtime: yaml
        ```
        {{% /example %}}
        {{% /examples %}}

        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['pulumi_kubernetes.meta.v1.ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['pulumi_kubernetes.core.v1.PodSpecArgs'] spec: Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['pulumi_kubernetes.core.v1.PodStatusArgs'] status: Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", 'v1')
        if kind is not None:
            pulumi.set(__self__, "kind", 'Pod')
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['pulumi_kubernetes.meta.v1.ObjectMetaArgs']]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['pulumi_kubernetes.meta.v1.ObjectMetaArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSpecArgs']]:
        """
        Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSpecArgs']]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodStatusArgs']]:
        """
        Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodStatusArgs']]):
        pulumi.set(self, "status", value)


