# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KubeconfigArgs', 'Kubeconfig']

@pulumi.input_type
class KubeconfigArgs:
    def __init__(__self__, *,
                 ca_pem: pulumi.Input[str],
                 options: Union[pulumi.Input['KubeconfigAdminOptionsArgs'], pulumi.Input['KubeconfigKubeControllerManagerOptionsArgs'], pulumi.Input['KubeconfigKubeProxyOptionsArgs'], pulumi.Input['KubeconfigKubeSchedulerOptionsArgs'], pulumi.Input['KubeconfigWorkerOptionsArgs']]):
        """
        The set of arguments for constructing a Kubeconfig resource.
        :param pulumi.Input[str] ca_pem: Certificate authority data.
        :param Union[pulumi.Input['KubeconfigAdminOptionsArgs'], pulumi.Input['KubeconfigKubeControllerManagerOptionsArgs'], pulumi.Input['KubeconfigKubeProxyOptionsArgs'], pulumi.Input['KubeconfigKubeSchedulerOptionsArgs'], pulumi.Input['KubeconfigWorkerOptionsArgs']] options: Options for creating the kubeconfig.
        """
        pulumi.set(__self__, "ca_pem", ca_pem)
        pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="caPem")
    def ca_pem(self) -> pulumi.Input[str]:
        """
        Certificate authority data.
        """
        return pulumi.get(self, "ca_pem")

    @ca_pem.setter
    def ca_pem(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_pem", value)

    @property
    @pulumi.getter
    def options(self) -> Union[pulumi.Input['KubeconfigAdminOptionsArgs'], pulumi.Input['KubeconfigKubeControllerManagerOptionsArgs'], pulumi.Input['KubeconfigKubeProxyOptionsArgs'], pulumi.Input['KubeconfigKubeSchedulerOptionsArgs'], pulumi.Input['KubeconfigWorkerOptionsArgs']]:
        """
        Options for creating the kubeconfig.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Union[pulumi.Input['KubeconfigAdminOptionsArgs'], pulumi.Input['KubeconfigKubeControllerManagerOptionsArgs'], pulumi.Input['KubeconfigKubeProxyOptionsArgs'], pulumi.Input['KubeconfigKubeSchedulerOptionsArgs'], pulumi.Input['KubeconfigWorkerOptionsArgs']]):
        pulumi.set(self, "options", value)


class Kubeconfig(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_pem: Optional[pulumi.Input[str]] = None,
                 options: Optional[Union[pulumi.Input[pulumi.InputType['KubeconfigAdminOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigKubeControllerManagerOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigKubeProxyOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigKubeSchedulerOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigWorkerOptionsArgs']]]] = None,
                 __props__=None):
        """
        TODO

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ca_pem: Certificate authority data.
        :param Union[pulumi.Input[pulumi.InputType['KubeconfigAdminOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigKubeControllerManagerOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigKubeProxyOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigKubeSchedulerOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigWorkerOptionsArgs']]] options: Options for creating the kubeconfig.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KubeconfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        TODO

        :param str resource_name: The name of the resource.
        :param KubeconfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KubeconfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_pem: Optional[pulumi.Input[str]] = None,
                 options: Optional[Union[pulumi.Input[pulumi.InputType['KubeconfigAdminOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigKubeControllerManagerOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigKubeProxyOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigKubeSchedulerOptionsArgs']], pulumi.Input[pulumi.InputType['KubeconfigWorkerOptionsArgs']]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KubeconfigArgs.__new__(KubeconfigArgs)

            if ca_pem is None and not opts.urn:
                raise TypeError("Missing required property 'ca_pem'")
            __props__.__dict__["ca_pem"] = ca_pem
            if options is None and not opts.urn:
                raise TypeError("Missing required property 'options'")
            __props__.__dict__["options"] = options
            __props__.__dict__["result"] = None
            __props__.__dict__["yaml"] = None
        super(Kubeconfig, __self__).__init__(
            'kubernetes-the-hard-way:config:Kubeconfig',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def result(self) -> pulumi.Output['outputs.Kubeconfig']:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter
    def yaml(self) -> pulumi.Output[str]:
        """
        The yaml representation of the manifest.
        """
        return pulumi.get(self, "yaml")

