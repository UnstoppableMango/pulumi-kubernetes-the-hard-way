# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
import pulumi_command

__all__ = ['KubeApiServerConfigurationArgs', 'KubeApiServerConfiguration']

@pulumi.input_type
class KubeApiServerConfigurationArgs:
    def __init__(__self__, *,
                 ca_key: pulumi.Input[str],
                 ca_pem: pulumi.Input[str],
                 cert_pem: pulumi.Input[str],
                 connection: pulumi.Input['pulumi_command.remote.ConnectionArgs'],
                 encryption_config: pulumi.Input[str],
                 key_pem: pulumi.Input[str],
                 service_accounts_key: pulumi.Input[str],
                 service_accounts_pem: pulumi.Input[str],
                 configuration_directory: Optional[pulumi.Input[str]] = None,
                 kubectl_path: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KubeApiServerConfiguration resource.
        :param pulumi.Input[str] ca_key: The PEM encoded certificate authority key.
        :param pulumi.Input[str] ca_pem: The PEM encoded certificate authority data.
        :param pulumi.Input[str] cert_pem: The PEM encoded Kube API Server certificate data.
        :param pulumi.Input['pulumi_command.remote.ConnectionArgs'] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] encryption_config: The YAML encryption configuration manifest.
        :param pulumi.Input[str] key_pem: The PEM encoded Kube API Server certificate key.
        :param pulumi.Input[str] service_accounts_key: The PEM encoded Service Accounts certificate key.
        :param pulumi.Input[str] service_accounts_pem: The PEM encoded Service Accounts certificate data.
        :param pulumi.Input[str] configuration_directory: The directory to store Kubernetes Control Plane configuration.
        :param pulumi.Input[str] kubectl_path: The path to the 'kubectl' binary.
        :param pulumi.Input[str] path: The path to the 'kube-apiserver' binary.
        """
        pulumi.set(__self__, "ca_key", ca_key)
        pulumi.set(__self__, "ca_pem", ca_pem)
        pulumi.set(__self__, "cert_pem", cert_pem)
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "encryption_config", encryption_config)
        pulumi.set(__self__, "key_pem", key_pem)
        pulumi.set(__self__, "service_accounts_key", service_accounts_key)
        pulumi.set(__self__, "service_accounts_pem", service_accounts_pem)
        if configuration_directory is None:
            configuration_directory = '/etc/kubernetes/config'
        if configuration_directory is not None:
            pulumi.set(__self__, "configuration_directory", configuration_directory)
        if kubectl_path is not None:
            pulumi.set(__self__, "kubectl_path", kubectl_path)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="caKey")
    def ca_key(self) -> pulumi.Input[str]:
        """
        The PEM encoded certificate authority key.
        """
        return pulumi.get(self, "ca_key")

    @ca_key.setter
    def ca_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_key", value)

    @property
    @pulumi.getter(name="caPem")
    def ca_pem(self) -> pulumi.Input[str]:
        """
        The PEM encoded certificate authority data.
        """
        return pulumi.get(self, "ca_pem")

    @ca_pem.setter
    def ca_pem(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_pem", value)

    @property
    @pulumi.getter(name="certPem")
    def cert_pem(self) -> pulumi.Input[str]:
        """
        The PEM encoded Kube API Server certificate data.
        """
        return pulumi.get(self, "cert_pem")

    @cert_pem.setter
    def cert_pem(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert_pem", value)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['pulumi_command.remote.ConnectionArgs']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['pulumi_command.remote.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> pulumi.Input[str]:
        """
        The YAML encryption configuration manifest.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_config", value)

    @property
    @pulumi.getter(name="keyPem")
    def key_pem(self) -> pulumi.Input[str]:
        """
        The PEM encoded Kube API Server certificate key.
        """
        return pulumi.get(self, "key_pem")

    @key_pem.setter
    def key_pem(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_pem", value)

    @property
    @pulumi.getter(name="serviceAccountsKey")
    def service_accounts_key(self) -> pulumi.Input[str]:
        """
        The PEM encoded Service Accounts certificate key.
        """
        return pulumi.get(self, "service_accounts_key")

    @service_accounts_key.setter
    def service_accounts_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_accounts_key", value)

    @property
    @pulumi.getter(name="serviceAccountsPem")
    def service_accounts_pem(self) -> pulumi.Input[str]:
        """
        The PEM encoded Service Accounts certificate data.
        """
        return pulumi.get(self, "service_accounts_pem")

    @service_accounts_pem.setter
    def service_accounts_pem(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_accounts_pem", value)

    @property
    @pulumi.getter(name="configurationDirectory")
    def configuration_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store Kubernetes Control Plane configuration.
        """
        return pulumi.get(self, "configuration_directory")

    @configuration_directory.setter
    def configuration_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_directory", value)

    @property
    @pulumi.getter(name="kubectlPath")
    def kubectl_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the 'kubectl' binary.
        """
        return pulumi.get(self, "kubectl_path")

    @kubectl_path.setter
    def kubectl_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubectl_path", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the 'kube-apiserver' binary.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


class KubeApiServerConfiguration(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_key: Optional[pulumi.Input[str]] = None,
                 ca_pem: Optional[pulumi.Input[str]] = None,
                 cert_pem: Optional[pulumi.Input[str]] = None,
                 configuration_directory: Optional[pulumi.Input[str]] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 encryption_config: Optional[pulumi.Input[str]] = None,
                 key_pem: Optional[pulumi.Input[str]] = None,
                 kubectl_path: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 service_accounts_key: Optional[pulumi.Input[str]] = None,
                 service_accounts_pem: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configures Kubernetes API Server on a remote system.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ca_key: The PEM encoded certificate authority key.
        :param pulumi.Input[str] ca_pem: The PEM encoded certificate authority data.
        :param pulumi.Input[str] cert_pem: The PEM encoded Kube API Server certificate data.
        :param pulumi.Input[str] configuration_directory: The directory to store Kubernetes Control Plane configuration.
        :param pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] encryption_config: The YAML encryption configuration manifest.
        :param pulumi.Input[str] key_pem: The PEM encoded Kube API Server certificate key.
        :param pulumi.Input[str] kubectl_path: The path to the 'kubectl' binary.
        :param pulumi.Input[str] path: The path to the 'kube-apiserver' binary.
        :param pulumi.Input[str] service_accounts_key: The PEM encoded Service Accounts certificate key.
        :param pulumi.Input[str] service_accounts_pem: The PEM encoded Service Accounts certificate data.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KubeApiServerConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configures Kubernetes API Server on a remote system.

        :param str resource_name: The name of the resource.
        :param KubeApiServerConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KubeApiServerConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_key: Optional[pulumi.Input[str]] = None,
                 ca_pem: Optional[pulumi.Input[str]] = None,
                 cert_pem: Optional[pulumi.Input[str]] = None,
                 configuration_directory: Optional[pulumi.Input[str]] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 encryption_config: Optional[pulumi.Input[str]] = None,
                 key_pem: Optional[pulumi.Input[str]] = None,
                 kubectl_path: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 service_accounts_key: Optional[pulumi.Input[str]] = None,
                 service_accounts_pem: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KubeApiServerConfigurationArgs.__new__(KubeApiServerConfigurationArgs)

            if ca_key is None and not opts.urn:
                raise TypeError("Missing required property 'ca_key'")
            __props__.__dict__["ca_key"] = ca_key
            if ca_pem is None and not opts.urn:
                raise TypeError("Missing required property 'ca_pem'")
            __props__.__dict__["ca_pem"] = ca_pem
            if cert_pem is None and not opts.urn:
                raise TypeError("Missing required property 'cert_pem'")
            __props__.__dict__["cert_pem"] = cert_pem
            if configuration_directory is None:
                configuration_directory = '/etc/kubernetes/config'
            __props__.__dict__["configuration_directory"] = configuration_directory
            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            if encryption_config is None and not opts.urn:
                raise TypeError("Missing required property 'encryption_config'")
            __props__.__dict__["encryption_config"] = encryption_config
            if key_pem is None and not opts.urn:
                raise TypeError("Missing required property 'key_pem'")
            __props__.__dict__["key_pem"] = key_pem
            __props__.__dict__["kubectl_path"] = kubectl_path
            __props__.__dict__["path"] = path
            if service_accounts_key is None and not opts.urn:
                raise TypeError("Missing required property 'service_accounts_key'")
            __props__.__dict__["service_accounts_key"] = service_accounts_key
            if service_accounts_pem is None and not opts.urn:
                raise TypeError("Missing required property 'service_accounts_pem'")
            __props__.__dict__["service_accounts_pem"] = service_accounts_pem
            __props__.__dict__["configuration_mkdir"] = None
        super(KubeApiServerConfiguration, __self__).__init__(
            'kubernetes-the-hard-way:remote:KubeApiServerConfiguration',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="caKey")
    def ca_key(self) -> pulumi.Output[str]:
        """
        The PEM encoded certificate authority key.
        """
        return pulumi.get(self, "ca_key")

    @property
    @pulumi.getter(name="caPem")
    def ca_pem(self) -> pulumi.Output[str]:
        """
        The PEM encoded certificate authority data.
        """
        return pulumi.get(self, "ca_pem")

    @property
    @pulumi.getter(name="certPem")
    def cert_pem(self) -> pulumi.Output[str]:
        """
        The PEM encoded Kube API Server certificate data.
        """
        return pulumi.get(self, "cert_pem")

    @property
    @pulumi.getter(name="configurationDirectory")
    def configuration_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store Kubernetes Control Plane configuration.
        """
        return pulumi.get(self, "configuration_directory")

    @property
    @pulumi.getter(name="configurationMkdir")
    def configuration_mkdir(self) -> pulumi.Output[Optional[Any]]:
        """
        Configuration mkdir operation
        """
        return pulumi.get(self, "configuration_mkdir")

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Output['pulumi_command.remote.outputs.Connection']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> pulumi.Output[str]:
        """
        The YAML encryption configuration manifest.
        """
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="keyPem")
    def key_pem(self) -> pulumi.Output[str]:
        """
        The PEM encoded Kube API Server certificate key.
        """
        return pulumi.get(self, "key_pem")

    @property
    @pulumi.getter(name="kubectlPath")
    def kubectl_path(self) -> pulumi.Output[Optional[str]]:
        """
        The path to the 'kubectl' binary.
        """
        return pulumi.get(self, "kubectl_path")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[str]]:
        """
        The path to the 'kube-apiserver' binary.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="serviceAccountsKey")
    def service_accounts_key(self) -> pulumi.Output[str]:
        """
        The PEM encoded Service Accounts certificate key.
        """
        return pulumi.get(self, "service_accounts_key")

    @property
    @pulumi.getter(name="serviceAccountsPem")
    def service_accounts_pem(self) -> pulumi.Output[str]:
        """
        The PEM encoded Service Accounts certificate data.
        """
        return pulumi.get(self, "service_accounts_pem")

