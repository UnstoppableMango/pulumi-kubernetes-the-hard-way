# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *
import pulumi_command

__all__ = ['CniPluginConfigurationArgs', 'CniPluginConfiguration']

@pulumi.input_type
class CniPluginConfigurationArgs:
    def __init__(__self__, *,
                 connection: pulumi.Input['pulumi_command.remote.ConnectionArgs'],
                 bridge: Optional[pulumi.Input['CniBridgePluginConfigurationArgs']] = None,
                 loopback: Optional[pulumi.Input['CniLoopbackPluginConfigurationArgs']] = None):
        """
        The set of arguments for constructing a CniPluginConfiguration resource.
        :param pulumi.Input['pulumi_command.remote.ConnectionArgs'] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input['CniBridgePluginConfigurationArgs'] bridge: The CNI bridge configuration.
        :param pulumi.Input['CniLoopbackPluginConfigurationArgs'] loopback: The CNI loopback configuration.
        """
        pulumi.set(__self__, "connection", connection)
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if loopback is not None:
            pulumi.set(__self__, "loopback", loopback)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['pulumi_command.remote.ConnectionArgs']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['pulumi_command.remote.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter
    def bridge(self) -> Optional[pulumi.Input['CniBridgePluginConfigurationArgs']]:
        """
        The CNI bridge configuration.
        """
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: Optional[pulumi.Input['CniBridgePluginConfigurationArgs']]):
        pulumi.set(self, "bridge", value)

    @property
    @pulumi.getter
    def loopback(self) -> Optional[pulumi.Input['CniLoopbackPluginConfigurationArgs']]:
        """
        The CNI loopback configuration.
        """
        return pulumi.get(self, "loopback")

    @loopback.setter
    def loopback(self, value: Optional[pulumi.Input['CniLoopbackPluginConfigurationArgs']]):
        pulumi.set(self, "loopback", value)


class CniPluginConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bridge: Optional[pulumi.Input[pulumi.InputType['CniBridgePluginConfigurationArgs']]] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 loopback: Optional[pulumi.Input[pulumi.InputType['CniLoopbackPluginConfigurationArgs']]] = None,
                 __props__=None):
        """
        CNI plugin configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CniBridgePluginConfigurationArgs']] bridge: The CNI bridge configuration.
        :param pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[pulumi.InputType['CniLoopbackPluginConfigurationArgs']] loopback: The CNI loopback configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CniPluginConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        CNI plugin configuration.

        :param str resource_name: The name of the resource.
        :param CniPluginConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CniPluginConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bridge: Optional[pulumi.Input[pulumi.InputType['CniBridgePluginConfigurationArgs']]] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 loopback: Optional[pulumi.Input[pulumi.InputType['CniLoopbackPluginConfigurationArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CniPluginConfigurationArgs.__new__(CniPluginConfigurationArgs)

            __props__.__dict__["bridge"] = bridge
            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            __props__.__dict__["loopback"] = loopback
        super(CniPluginConfiguration, __self__).__init__(
            'kubernetes-the-hard-way:remote:CniPluginConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CniPluginConfiguration':
        """
        Get an existing CniPluginConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CniPluginConfigurationArgs.__new__(CniPluginConfigurationArgs)

        __props__.__dict__["bridge"] = None
        __props__.__dict__["connection"] = None
        __props__.__dict__["loopback"] = None
        return CniPluginConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bridge(self) -> pulumi.Output['outputs.CniBridgePluginConfiguration']:
        """
        The CNI bridge configuration.
        """
        return pulumi.get(self, "bridge")

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Output['pulumi_command.remote.outputs.Connection']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def loopback(self) -> pulumi.Output['outputs.CniLoopbackPluginConfiguration']:
        """
        The CNI loopback configuration.
        """
        return pulumi.get(self, "loopback")

