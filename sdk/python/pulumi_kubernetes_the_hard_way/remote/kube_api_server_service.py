# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *
from .systemd_service import SystemdService
import pulumi_command

__all__ = ['KubeApiServerServiceArgs', 'KubeApiServerService']

@pulumi.input_type
class KubeApiServerServiceArgs:
    def __init__(__self__, *,
                 configuration: Any,
                 connection: pulumi.Input['pulumi_command.remote.ConnectionArgs'],
                 client_ca_file: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 documentation: Optional[pulumi.Input[str]] = None,
                 etcd_servers: Optional[pulumi.Input[str]] = None,
                 restart: Optional[pulumi.Input['SystemdServiceRestart']] = None,
                 restart_sec: Optional[pulumi.Input[str]] = None,
                 wanted_by: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KubeApiServerService resource.
        :param Any configuration: KubeApiServer configuration.
        :param pulumi.Input['pulumi_command.remote.ConnectionArgs'] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] client_ca_file: If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate
        :param pulumi.Input[str] description: Optional systemd unit description.
        :param pulumi.Input[str] directory: The location to create the service file.
        :param pulumi.Input[str] documentation: Optional systemd unit documentation
        :param pulumi.Input[str] etcd_servers: List of etcd servers to connect with (scheme://ip:port), comma separatedList of etcd servers to connect with (scheme://ip:port), comma separated
        :param pulumi.Input['SystemdServiceRestart'] restart: Optionally override the systemd service restart behaviour. Defaults to `on-failure`.
        :param pulumi.Input[str] restart_sec: Optionally override the systemd service RestartSec. Defaults to `5`.
        :param pulumi.Input[str] wanted_by: Optionally override the systemd service wanted-by. Defaults to `multi-user.target`.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "connection", connection)
        if client_ca_file is not None:
            pulumi.set(__self__, "client_ca_file", client_ca_file)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if documentation is not None:
            pulumi.set(__self__, "documentation", documentation)
        if etcd_servers is not None:
            pulumi.set(__self__, "etcd_servers", etcd_servers)
        if restart is not None:
            pulumi.set(__self__, "restart", restart)
        if restart_sec is not None:
            pulumi.set(__self__, "restart_sec", restart_sec)
        if wanted_by is not None:
            pulumi.set(__self__, "wanted_by", wanted_by)

    @property
    @pulumi.getter
    def configuration(self) -> Any:
        """
        KubeApiServer configuration.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Any):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['pulumi_command.remote.ConnectionArgs']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['pulumi_command.remote.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="clientCaFile")
    def client_ca_file(self) -> Optional[pulumi.Input[str]]:
        """
        If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate
        """
        return pulumi.get(self, "client_ca_file")

    @client_ca_file.setter
    def client_ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ca_file", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional systemd unit description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        The location to create the service file.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def documentation(self) -> Optional[pulumi.Input[str]]:
        """
        Optional systemd unit documentation
        """
        return pulumi.get(self, "documentation")

    @documentation.setter
    def documentation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "documentation", value)

    @property
    @pulumi.getter(name="etcdServers")
    def etcd_servers(self) -> Optional[pulumi.Input[str]]:
        """
        List of etcd servers to connect with (scheme://ip:port), comma separatedList of etcd servers to connect with (scheme://ip:port), comma separated
        """
        return pulumi.get(self, "etcd_servers")

    @etcd_servers.setter
    def etcd_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etcd_servers", value)

    @property
    @pulumi.getter
    def restart(self) -> Optional[pulumi.Input['SystemdServiceRestart']]:
        """
        Optionally override the systemd service restart behaviour. Defaults to `on-failure`.
        """
        return pulumi.get(self, "restart")

    @restart.setter
    def restart(self, value: Optional[pulumi.Input['SystemdServiceRestart']]):
        pulumi.set(self, "restart", value)

    @property
    @pulumi.getter(name="restartSec")
    def restart_sec(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally override the systemd service RestartSec. Defaults to `5`.
        """
        return pulumi.get(self, "restart_sec")

    @restart_sec.setter
    def restart_sec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_sec", value)

    @property
    @pulumi.getter(name="wantedBy")
    def wanted_by(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally override the systemd service wanted-by. Defaults to `multi-user.target`.
        """
        return pulumi.get(self, "wanted_by")

    @wanted_by.setter
    def wanted_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanted_by", value)


class KubeApiServerService(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_ca_file: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[Any] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 documentation: Optional[pulumi.Input[str]] = None,
                 etcd_servers: Optional[pulumi.Input[str]] = None,
                 restart: Optional[pulumi.Input['SystemdServiceRestart']] = None,
                 restart_sec: Optional[pulumi.Input[str]] = None,
                 wanted_by: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Kube API Server systemd service file. Will likely get replaced with a static function when https://github.com/pulumi/pulumi/issues/7583 gets resolved.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_ca_file: If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate
        :param Any configuration: KubeApiServer configuration.
        :param pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] description: Optional systemd unit description.
        :param pulumi.Input[str] directory: The location to create the service file.
        :param pulumi.Input[str] documentation: Optional systemd unit documentation
        :param pulumi.Input[str] etcd_servers: List of etcd servers to connect with (scheme://ip:port), comma separatedList of etcd servers to connect with (scheme://ip:port), comma separated
        :param pulumi.Input['SystemdServiceRestart'] restart: Optionally override the systemd service restart behaviour. Defaults to `on-failure`.
        :param pulumi.Input[str] restart_sec: Optionally override the systemd service RestartSec. Defaults to `5`.
        :param pulumi.Input[str] wanted_by: Optionally override the systemd service wanted-by. Defaults to `multi-user.target`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KubeApiServerServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Kube API Server systemd service file. Will likely get replaced with a static function when https://github.com/pulumi/pulumi/issues/7583 gets resolved.

        :param str resource_name: The name of the resource.
        :param KubeApiServerServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KubeApiServerServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_ca_file: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[Any] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 documentation: Optional[pulumi.Input[str]] = None,
                 etcd_servers: Optional[pulumi.Input[str]] = None,
                 restart: Optional[pulumi.Input['SystemdServiceRestart']] = None,
                 restart_sec: Optional[pulumi.Input[str]] = None,
                 wanted_by: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KubeApiServerServiceArgs.__new__(KubeApiServerServiceArgs)

            __props__.__dict__["client_ca_file"] = client_ca_file
            if configuration is None and not opts.urn:
                raise TypeError("Missing required property 'configuration'")
            __props__.__dict__["configuration"] = configuration
            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            __props__.__dict__["description"] = description
            __props__.__dict__["directory"] = directory
            __props__.__dict__["documentation"] = documentation
            __props__.__dict__["etcd_servers"] = etcd_servers
            __props__.__dict__["restart"] = restart
            __props__.__dict__["restart_sec"] = restart_sec
            __props__.__dict__["wanted_by"] = wanted_by
            __props__.__dict__["service"] = None
        super(KubeApiServerService, __self__).__init__(
            'kubernetes-the-hard-way:remote:KubeApiServerService',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="clientCaFile")
    def client_ca_file(self) -> pulumi.Output[Optional[str]]:
        """
        If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate
        """
        return pulumi.get(self, "client_ca_file")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Any]:
        """
        KubeApiServer configuration.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Output['pulumi_command.remote.outputs.Connection']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Optional systemd unit description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def directory(self) -> pulumi.Output[Optional[str]]:
        """
        The location to create the service file.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def documentation(self) -> pulumi.Output[Optional[str]]:
        """
        Optional systemd unit documentation
        """
        return pulumi.get(self, "documentation")

    @property
    @pulumi.getter(name="etcdServers")
    def etcd_servers(self) -> pulumi.Output[Optional[str]]:
        """
        List of etcd servers to connect with (scheme://ip:port), comma separatedList of etcd servers to connect with (scheme://ip:port), comma separated
        """
        return pulumi.get(self, "etcd_servers")

    @property
    @pulumi.getter
    def restart(self) -> pulumi.Output[Optional['SystemdServiceRestart']]:
        """
        Optionally override the systemd service restart behaviour. Defaults to `on-failure`.
        """
        return pulumi.get(self, "restart")

    @property
    @pulumi.getter(name="restartSec")
    def restart_sec(self) -> pulumi.Output[Optional[str]]:
        """
        Optionally override the systemd service RestartSec. Defaults to `5`.
        """
        return pulumi.get(self, "restart_sec")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output['SystemdService']:
        """
        The remote systemd service.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="wantedBy")
    def wanted_by(self) -> pulumi.Output[Optional[str]]:
        """
        Optionally override the systemd service wanted-by. Defaults to `multi-user.target`.
        """
        return pulumi.get(self, "wanted_by")

