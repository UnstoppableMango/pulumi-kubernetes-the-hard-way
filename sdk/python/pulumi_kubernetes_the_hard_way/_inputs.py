# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *

__all__ = [
    'CertRequestSubject',
    'Connection',
    'ResourceOptions',
]

@pulumi.input_type
class CertRequestSubject:
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 locality: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 street_addresses: Optional[Sequence[str]] = None):
        """
        Polyfill for `tls.CertRequestSubject`.
        :param str common_name: Distinguished name: CN
        :param str country: Distinguished name: C
        :param str locality: Distinguished name: L
        :param str organization: Distinguished name: O
        :param str organizational_unit: Distinguished name: OU
        :param str postal_code: Distinguished name: PC
        :param str province: Distinguished name: ST
        :param str serial_number: Distinguished name: SERIALNUMBER
        :param Sequence[str] street_addresses: Distinguished name: STREET
        """
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if street_addresses is not None:
            pulumi.set(__self__, "street_addresses", street_addresses)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        """
        Distinguished name: CN
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[str]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        Distinguished name: C
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        """
        Distinguished name: L
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[str]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        Distinguished name: O
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        """
        Distinguished name: OU
        """
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: Optional[str]):
        pulumi.set(self, "organizational_unit", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        """
        Distinguished name: PC
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[str]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        """
        Distinguished name: ST
        """
        return pulumi.get(self, "province")

    @province.setter
    def province(self, value: Optional[str]):
        pulumi.set(self, "province", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        """
        Distinguished name: SERIALNUMBER
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[str]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Optional[Sequence[str]]:
        """
        Distinguished name: STREET
        """
        return pulumi.get(self, "street_addresses")

    @street_addresses.setter
    def street_addresses(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "street_addresses", value)


@pulumi.input_type
class Connection:
    def __init__(__self__, *,
                 host: str,
                 agent_socket_path: Optional[str] = None,
                 dial_error_limit: Optional[int] = None,
                 password: Optional[str] = None,
                 per_dial_timeout: Optional[int] = None,
                 port: Optional[int] = None,
                 private_key: Optional[str] = None,
                 private_key_password: Optional[str] = None,
                 user: Optional[str] = None):
        """
        Instructions for how to connect to a remote endpoint. Polyfill for `command.ConnectionArgs`.
        :param str host: The address of the resource to connect to.
        :param str agent_socket_path: SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
        :param int dial_error_limit: Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
        :param str password: The password we should use for the connection.
        :param int per_dial_timeout: Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
        :param int port: The port to connect to.
        :param str private_key: The contents of an SSH key to use for the connection. This takes preference over the password if provided.
        :param str private_key_password: The password to use in case the private key is encrypted.
        :param str user: The user that we should use for the connection.
        """
        pulumi.set(__self__, "host", host)
        if agent_socket_path is not None:
            pulumi.set(__self__, "agent_socket_path", agent_socket_path)
        if dial_error_limit is None:
            dial_error_limit = 10
        if dial_error_limit is not None:
            pulumi.set(__self__, "dial_error_limit", dial_error_limit)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if per_dial_timeout is None:
            per_dial_timeout = 15
        if per_dial_timeout is not None:
            pulumi.set(__self__, "per_dial_timeout", per_dial_timeout)
        if port is None:
            port = 22
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)
        if user is None:
            user = 'root'
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The address of the resource to connect to.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="agentSocketPath")
    def agent_socket_path(self) -> Optional[str]:
        """
        SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
        """
        return pulumi.get(self, "agent_socket_path")

    @agent_socket_path.setter
    def agent_socket_path(self, value: Optional[str]):
        pulumi.set(self, "agent_socket_path", value)

    @property
    @pulumi.getter(name="dialErrorLimit")
    def dial_error_limit(self) -> Optional[int]:
        """
        Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
        """
        return pulumi.get(self, "dial_error_limit")

    @dial_error_limit.setter
    def dial_error_limit(self, value: Optional[int]):
        pulumi.set(self, "dial_error_limit", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password we should use for the connection.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="perDialTimeout")
    def per_dial_timeout(self) -> Optional[int]:
        """
        Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
        """
        return pulumi.get(self, "per_dial_timeout")

    @per_dial_timeout.setter
    def per_dial_timeout(self, value: Optional[int]):
        pulumi.set(self, "per_dial_timeout", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port to connect to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        """
        The contents of an SSH key to use for the connection. This takes preference over the password if provided.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[str]:
        """
        The password to use in case the private key is encrypted.
        """
        return pulumi.get(self, "private_key_password")

    @private_key_password.setter
    def private_key_password(self, value: Optional[str]):
        pulumi.set(self, "private_key_password", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        The user that we should use for the connection.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[str]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ResourceOptions:
    def __init__(__self__, *,
                 parent: Optional[Any] = None):
        """
        Polyfill for `pulumi.ComponentResourceOptions`.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[Any]:
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[Any]):
        pulumi.set(self, "parent", value)


