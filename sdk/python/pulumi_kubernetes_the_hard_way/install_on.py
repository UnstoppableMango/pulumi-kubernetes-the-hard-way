# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
import pulumi_command

__all__ = [
    'InstallOnResult',
    'AwaitableInstallOnResult',
    'install_on',
    'install_on_output',
]

@pulumi.output_type
class InstallOnResult:
    def __init__(__self__, file=None):
        if file and not isinstance(file, str):
            raise TypeError("Expected argument 'file' to be a str")
        pulumi.set(__self__, "file", file)

    @property
    @pulumi.getter
    def file(self) -> Optional[str]:
        return pulumi.get(self, "file")


class AwaitableInstallOnResult(InstallOnResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return InstallOnResult(
            file=self.file)


def install_on(connection: Optional[pulumi.InputType['pulumi_command.remote.Connection']] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableInstallOnResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['connection'] = connection
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kubernetes-the-hard-way:index:installOn', __args__, opts=opts, typ=InstallOnResult).value

    return AwaitableInstallOnResult(
        file=pulumi.get(__ret__, 'file'))


@_utilities.lift_output_func(install_on)
def install_on_output(connection: Optional[pulumi.Input[Optional[pulumi.InputType['pulumi_command.remote.Connection']]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[InstallOnResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
