# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import remote as _remote
from ._inputs import *
import pulumi_tls

__all__ = [
    'InstallCertResult',
    'AwaitableInstallCertResult',
    'install_cert',
    'install_cert_output',
]

@pulumi.output_type
class InstallCertResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, _remote.File):
            raise TypeError("Expected argument 'result' to be a _remote.File")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> '_remote.File':
        """
        A resource representing the the file on the remote machine.
        """
        return pulumi.get(self, "result")


class AwaitableInstallCertResult(InstallCertResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return InstallCertResult(
            result=self.result)


def install_cert(connection: Optional[pulumi.InputType['Connection']] = None,
                 keypair: Optional[pulumi.InputType['KeyPair']] = None,
                 name: Optional[str] = None,
                 options: Optional[pulumi.InputType['ResourceOptions']] = None,
                 path: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableInstallCertResult:
    """
    Creates a RemoteFile resource representing the copy operation.


    :param pulumi.InputType['Connection'] connection: The connection details.
    :param pulumi.InputType['KeyPair'] keypair: The certificate to install at the remote location.
    :param str path: The path to install to.
    """
    __args__ = dict()
    __args__['connection'] = connection
    __args__['keypair'] = keypair
    __args__['name'] = name
    __args__['options'] = options
    __args__['path'] = path
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kubernetes-the-hard-way:index:installCert', __args__, opts=opts, typ=InstallCertResult).value

    return AwaitableInstallCertResult(
        result=pulumi.get(__ret__, 'result'))


@_utilities.lift_output_func(install_cert)
def install_cert_output(connection: Optional[pulumi.Input[pulumi.InputType['Connection']]] = None,
                        keypair: Optional[pulumi.Input[pulumi.InputType['KeyPair']]] = None,
                        name: Optional[pulumi.Input[str]] = None,
                        options: Optional[pulumi.Input[Optional[pulumi.InputType['ResourceOptions']]]] = None,
                        path: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[InstallCertResult]:
    """
    Creates a RemoteFile resource representing the copy operation.


    :param pulumi.InputType['Connection'] connection: The connection details.
    :param pulumi.InputType['KeyPair'] keypair: The certificate to install at the remote location.
    :param str path: The path to install to.
    """
    ...
