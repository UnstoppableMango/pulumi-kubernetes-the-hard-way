// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import * as pulumiRandom from "@pulumi/random";

/**
 * A cluster encryption key.
 */
export class EncryptionKey extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:tls:EncryptionKey';

    /**
     * Returns true if the given object is an instance of EncryptionKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EncryptionKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EncryptionKey.__pulumiType;
    }

    /**
     * The number of bytes requested. The minimum value for length is 1.
     */
    public readonly bytes!: pulumi.Output<number>;
    /**
     * The generated `v1/EncryptionConfig`.
     */
    public /*out*/ readonly config!: pulumi.Output<string>;
    /**
     * The generated random key.
     */
    public /*out*/ readonly key!: pulumi.Output<pulumiRandom.RandomBytes>;

    /**
     * Create a EncryptionKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EncryptionKeyArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.bytes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bytes'");
            }
            resourceInputs["bytes"] = args ? args.bytes : undefined;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
        } else {
            resourceInputs["bytes"] = undefined /*out*/;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EncryptionKey.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a EncryptionKey resource.
 */
export interface EncryptionKeyArgs {
    /**
     * The number of bytes requested. The minimum value for length is 1.
     */
    bytes: pulumi.Input<number>;
}
