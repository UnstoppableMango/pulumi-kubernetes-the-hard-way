// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
 */
export class Kubeconfig extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:config:Kubeconfig';

    /**
     * Returns true if the given object is an instance of Kubeconfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Kubeconfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Kubeconfig.__pulumiType;
    }

    public /*out*/ readonly result!: pulumi.Output<outputs.config.Kubeconfig>;
    /**
     * The yaml representation of the manifest.
     */
    public /*out*/ readonly yaml!: pulumi.Output<string>;

    /**
     * Create a Kubeconfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubeconfigArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.caPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caPem'");
            }
            if ((!args || args.clientCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientCert'");
            }
            if ((!args || args.clientKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientKey'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["caPem"] = args ? args.caPem : undefined;
            resourceInputs["clientCert"] = args ? args.clientCert : undefined;
            resourceInputs["clientKey"] = args ? args.clientKey : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["contextName"] = args ? args.contextName : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["result"] = undefined /*out*/;
            resourceInputs["yaml"] = undefined /*out*/;
        } else {
            resourceInputs["result"] = undefined /*out*/;
            resourceInputs["yaml"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Kubeconfig.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Kubeconfig resource.
 */
export interface KubeconfigArgs {
    /**
     * Certificate authority data.
     */
    caPem: pulumi.Input<string>;
    /**
     * The PEM encoded certificate data of the client.
     */
    clientCert: pulumi.Input<string>;
    /**
     * The PEM encoded private key data of the client.
     */
    clientKey: pulumi.Input<string>;
    /**
     * A name to identify the cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * A name to use for the kubeconfig context
     */
    contextName?: pulumi.Input<string>;
    /**
     * The address and port of the Kubernetes API server.
     */
    server: pulumi.Input<string>;
    /**
     * The username of the user
     */
    username: pulumi.Input<string>;
}
