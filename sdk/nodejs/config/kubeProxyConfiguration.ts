// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * kube-proxy configuration.
 */
export class KubeProxyConfiguration extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:config:KubeProxyConfiguration';

    /**
     * Returns true if the given object is an instance of KubeProxyConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubeProxyConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubeProxyConfiguration.__pulumiType;
    }

    public /*out*/ readonly result!: pulumi.Output<outputs.config.KubeProxyConfiguration>;
    /**
     * The yaml representation of the manifest.
     */
    public /*out*/ readonly yaml!: pulumi.Output<string>;

    /**
     * Create a KubeProxyConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubeProxyConfigurationArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterCIDR === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterCIDR'");
            }
            if ((!args || args.kubeconfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeconfig'");
            }
            resourceInputs["clusterCIDR"] = args ? args.clusterCIDR : undefined;
            resourceInputs["kubeconfig"] = args ? args.kubeconfig : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["result"] = undefined /*out*/;
            resourceInputs["yaml"] = undefined /*out*/;
        } else {
            resourceInputs["result"] = undefined /*out*/;
            resourceInputs["yaml"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubeProxyConfiguration.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a KubeProxyConfiguration resource.
 */
export interface KubeProxyConfigurationArgs {
    /**
     * Cluster CIDR.
     */
    clusterCIDR: pulumi.Input<string>;
    /**
     * Path to the kubeconfig.
     */
    kubeconfig: pulumi.Input<string>;
    /**
     * TODO
     */
    mode?: pulumi.Input<string>;
}
