// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * kube-proxy configuration.
 */
export function getKubeProxyConfiguration(args: GetKubeProxyConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetKubeProxyConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("kubernetes-the-hard-way:config:getKubeProxyConfiguration", {
        "clusterCIDR": args.clusterCIDR,
        "kubeconfig": args.kubeconfig,
        "mode": args.mode,
    }, opts);
}

export interface GetKubeProxyConfigurationArgs {
    /**
     * Cluster CIDR.
     */
    clusterCIDR: string;
    /**
     * Path to the kubeconfig.
     */
    kubeconfig: string;
    /**
     * TODO
     */
    mode?: string;
}

/**
 * kube-proxy configuration.
 */
export interface GetKubeProxyConfigurationResult {
    readonly result: outputs.config.KubeProxyConfiguration;
}
/**
 * kube-proxy configuration.
 */
export function getKubeProxyConfigurationOutput(args: GetKubeProxyConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubeProxyConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getKubeProxyConfiguration(a, opts))
}

export interface GetKubeProxyConfigurationOutputArgs {
    /**
     * Cluster CIDR.
     */
    clusterCIDR: pulumi.Input<string>;
    /**
     * Path to the kubeconfig.
     */
    kubeconfig: pulumi.Input<string>;
    /**
     * TODO
     */
    mode?: pulumi.Input<string>;
}
