// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
 */
export function getKubeconfig(args: GetKubeconfigArgs, opts?: pulumi.InvokeOptions): Promise<GetKubeconfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("kubernetes-the-hard-way:config:getKubeconfig", {
        "caPem": args.caPem,
        "clientCert": args.clientCert,
        "clientKey": args.clientKey,
        "clusterName": args.clusterName,
        "contextName": args.contextName,
        "server": args.server,
        "username": args.username,
    }, opts);
}

export interface GetKubeconfigArgs {
    /**
     * Certificate authority data.
     */
    caPem: string;
    /**
     * The PEM encoded certificate data of the client.
     */
    clientCert: string;
    /**
     * The PEM encoded private key data of the client.
     */
    clientKey: string;
    /**
     * A name to identify the cluster.
     */
    clusterName: string;
    /**
     * A name to use for the kubeconfig context
     */
    contextName?: string;
    /**
     * The address and port of the Kubernetes API server.
     */
    server: string;
    /**
     * The username of the user
     */
    username: string;
}

/**
 * https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
 */
export interface GetKubeconfigResult {
    readonly result: outputs.config.Kubeconfig;
}
/**
 * https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
 */
export function getKubeconfigOutput(args: GetKubeconfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubeconfigResult> {
    return pulumi.output(args).apply((a: any) => getKubeconfig(a, opts))
}

export interface GetKubeconfigOutputArgs {
    /**
     * Certificate authority data.
     */
    caPem: pulumi.Input<string>;
    /**
     * The PEM encoded certificate data of the client.
     */
    clientCert: pulumi.Input<string>;
    /**
     * The PEM encoded private key data of the client.
     */
    clientKey: pulumi.Input<string>;
    /**
     * A name to identify the cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * A name to use for the kubeconfig context
     */
    contextName?: pulumi.Input<string>;
    /**
     * The address and port of the Kubernetes API server.
     */
    server: pulumi.Input<string>;
    /**
     * The username of the user
     */
    username: pulumi.Input<string>;
}
