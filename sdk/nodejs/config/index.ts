// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CniBridgePluginConfigurationArgs } from "./cniBridgePluginConfiguration";
export type CniBridgePluginConfiguration = import("./cniBridgePluginConfiguration").CniBridgePluginConfiguration;
export const CniBridgePluginConfiguration: typeof import("./cniBridgePluginConfiguration").CniBridgePluginConfiguration = null as any;
utilities.lazyLoad(exports, ["CniBridgePluginConfiguration"], () => require("./cniBridgePluginConfiguration"));

export { CniLoopbackPluginConfigurationArgs } from "./cniLoopbackPluginConfiguration";
export type CniLoopbackPluginConfiguration = import("./cniLoopbackPluginConfiguration").CniLoopbackPluginConfiguration;
export const CniLoopbackPluginConfiguration: typeof import("./cniLoopbackPluginConfiguration").CniLoopbackPluginConfiguration = null as any;
utilities.lazyLoad(exports, ["CniLoopbackPluginConfiguration"], () => require("./cniLoopbackPluginConfiguration"));

export { ContainerdConfigurationArgs } from "./containerdConfiguration";
export type ContainerdConfiguration = import("./containerdConfiguration").ContainerdConfiguration;
export const ContainerdConfiguration: typeof import("./containerdConfiguration").ContainerdConfiguration = null as any;
utilities.lazyLoad(exports, ["ContainerdConfiguration"], () => require("./containerdConfiguration"));

export { GetCniBridgePluginConfigurationArgs, GetCniBridgePluginConfigurationResult, GetCniBridgePluginConfigurationOutputArgs } from "./getCniBridgePluginConfiguration";
export const getCniBridgePluginConfiguration: typeof import("./getCniBridgePluginConfiguration").getCniBridgePluginConfiguration = null as any;
export const getCniBridgePluginConfigurationOutput: typeof import("./getCniBridgePluginConfiguration").getCniBridgePluginConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getCniBridgePluginConfiguration","getCniBridgePluginConfigurationOutput"], () => require("./getCniBridgePluginConfiguration"));

export { GetCniLoopbackPluginConfigurationArgs, GetCniLoopbackPluginConfigurationResult, GetCniLoopbackPluginConfigurationOutputArgs } from "./getCniLoopbackPluginConfiguration";
export const getCniLoopbackPluginConfiguration: typeof import("./getCniLoopbackPluginConfiguration").getCniLoopbackPluginConfiguration = null as any;
export const getCniLoopbackPluginConfigurationOutput: typeof import("./getCniLoopbackPluginConfiguration").getCniLoopbackPluginConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getCniLoopbackPluginConfiguration","getCniLoopbackPluginConfigurationOutput"], () => require("./getCniLoopbackPluginConfiguration"));

export { GetContainerdConfigurationArgs, GetContainerdConfigurationResult, GetContainerdConfigurationOutputArgs } from "./getContainerdConfiguration";
export const getContainerdConfiguration: typeof import("./getContainerdConfiguration").getContainerdConfiguration = null as any;
export const getContainerdConfigurationOutput: typeof import("./getContainerdConfiguration").getContainerdConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getContainerdConfiguration","getContainerdConfigurationOutput"], () => require("./getContainerdConfiguration"));

export { GetKubeProxyConfigurationArgs, GetKubeProxyConfigurationResult, GetKubeProxyConfigurationOutputArgs } from "./getKubeProxyConfiguration";
export const getKubeProxyConfiguration: typeof import("./getKubeProxyConfiguration").getKubeProxyConfiguration = null as any;
export const getKubeProxyConfigurationOutput: typeof import("./getKubeProxyConfiguration").getKubeProxyConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getKubeProxyConfiguration","getKubeProxyConfigurationOutput"], () => require("./getKubeProxyConfiguration"));

export { GetKubeVipManifestArgs, GetKubeVipManifestResult, GetKubeVipManifestOutputArgs } from "./getKubeVipManifest";
export const getKubeVipManifest: typeof import("./getKubeVipManifest").getKubeVipManifest = null as any;
export const getKubeVipManifestOutput: typeof import("./getKubeVipManifest").getKubeVipManifestOutput = null as any;
utilities.lazyLoad(exports, ["getKubeVipManifest","getKubeVipManifestOutput"], () => require("./getKubeVipManifest"));

export { GetKubeconfigArgs, GetKubeconfigResult, GetKubeconfigOutputArgs } from "./getKubeconfig";
export const getKubeconfig: typeof import("./getKubeconfig").getKubeconfig = null as any;
export const getKubeconfigOutput: typeof import("./getKubeconfig").getKubeconfigOutput = null as any;
utilities.lazyLoad(exports, ["getKubeconfig","getKubeconfigOutput"], () => require("./getKubeconfig"));

export { GetKubeletConfigurationArgs, GetKubeletConfigurationResult, GetKubeletConfigurationOutputArgs } from "./getKubeletConfiguration";
export const getKubeletConfiguration: typeof import("./getKubeletConfiguration").getKubeletConfiguration = null as any;
export const getKubeletConfigurationOutput: typeof import("./getKubeletConfiguration").getKubeletConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getKubeletConfiguration","getKubeletConfigurationOutput"], () => require("./getKubeletConfiguration"));

export { KubeProxyConfigurationArgs } from "./kubeProxyConfiguration";
export type KubeProxyConfiguration = import("./kubeProxyConfiguration").KubeProxyConfiguration;
export const KubeProxyConfiguration: typeof import("./kubeProxyConfiguration").KubeProxyConfiguration = null as any;
utilities.lazyLoad(exports, ["KubeProxyConfiguration"], () => require("./kubeProxyConfiguration"));

export { KubeVipManifestArgs } from "./kubeVipManifest";
export type KubeVipManifest = import("./kubeVipManifest").KubeVipManifest;
export const KubeVipManifest: typeof import("./kubeVipManifest").KubeVipManifest = null as any;
utilities.lazyLoad(exports, ["KubeVipManifest"], () => require("./kubeVipManifest"));

export { KubeconfigArgs } from "./kubeconfig";
export type Kubeconfig = import("./kubeconfig").Kubeconfig;
export const Kubeconfig: typeof import("./kubeconfig").Kubeconfig = null as any;
utilities.lazyLoad(exports, ["Kubeconfig"], () => require("./kubeconfig"));

export { KubeletConfigurationArgs } from "./kubeletConfiguration";
export type KubeletConfiguration = import("./kubeletConfiguration").KubeletConfiguration;
export const KubeletConfiguration: typeof import("./kubeletConfiguration").KubeletConfiguration = null as any;
utilities.lazyLoad(exports, ["KubeletConfiguration"], () => require("./kubeletConfiguration"));


// Export enums:
export * from "../types/enums/config";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes-the-hard-way:config:CniBridgePluginConfiguration":
                return new CniBridgePluginConfiguration(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:config:CniLoopbackPluginConfiguration":
                return new CniLoopbackPluginConfiguration(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:config:ContainerdConfiguration":
                return new ContainerdConfiguration(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:config:KubeProxyConfiguration":
                return new KubeProxyConfiguration(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:config:KubeVipManifest":
                return new KubeVipManifest(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:config:Kubeconfig":
                return new Kubeconfig(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:config:KubeletConfiguration":
                return new KubeletConfiguration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes-the-hard-way", "config", _module)
