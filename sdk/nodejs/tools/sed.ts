// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

/**
 * Abstraction over the `sed` utility on a remote system.
 */
export class Sed extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:tools:Sed';

    /**
     * Returns true if the given object is an instance of Sed.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sed {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sed.__pulumiType;
    }

    /**
     * Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     */
    public readonly binaryPath!: pulumi.Output<string>;
    /**
     * The underlying command
     */
    public /*out*/ readonly command!: pulumi.Output<pulumiCommand.remote.Command>;
    /**
     * Connection details for the remote system
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * annotate program execution.
     */
    public readonly debug!: pulumi.Output<boolean>;
    /**
     * Environment variables
     */
    public readonly environment!: pulumi.Output<{[key: string]: string}>;
    /**
     * add the script to the commands to be executed.
     */
    public readonly expressions!: pulumi.Output<string | string[]>;
    /**
     * add the contents of script-file to the commands to be executed.
     */
    public readonly files!: pulumi.Output<string | string[]>;
    /**
     * follow symlinks when processing in place
     */
    public readonly followSymlinks!: pulumi.Output<boolean>;
    /**
     * display this help and exit.
     */
    public readonly help!: pulumi.Output<boolean>;
    /**
     * edit files in place (makes backup if SUFFIX supplied)
     */
    public readonly inPlace!: pulumi.Output<string>;
    /**
     * corresponds to the [input-file]... argument(s).
     */
    public readonly inputFiles!: pulumi.Output<string | string[]>;
    /**
     * At what stage(s) in the resource lifecycle should the command be run
     */
    public readonly lifecycle!: pulumi.Output<enums.tools.CommandLifecycle | undefined>;
    /**
     * specify the desired line-wrap length for the `l' command
     */
    public readonly lineLength!: pulumi.Output<boolean | undefined>;
    /**
     * separate lines by NUL characters
     */
    public readonly nullData!: pulumi.Output<boolean>;
    /**
     * disable all GNU extensions.
     */
    public readonly posix!: pulumi.Output<boolean>;
    /**
     * suppress automatic printing of pattern space. Same as `silent`.
     */
    public readonly quiet!: pulumi.Output<boolean>;
    /**
     * use extended regular expressions in the script (for portability use POSIX -E).
     */
    public readonly regexpExtended!: pulumi.Output<boolean>;
    /**
     * operate in sandbox mode (disable e/r/w commands).
     */
    public readonly sandbox!: pulumi.Output<boolean>;
    /**
     * script only if no other script.
     */
    public readonly script!: pulumi.Output<string | undefined>;
    /**
     * consider files as separate rather than as a single, continuous long stream.
     */
    public readonly separate!: pulumi.Output<boolean>;
    /**
     * suppress automatic printing of pattern space. Same as `quiet`.
     */
    public readonly silent!: pulumi.Output<boolean>;
    /**
     * TODO
     */
    public /*out*/ readonly stderr!: pulumi.Output<string>;
    /**
     * TODO
     */
    public readonly stdin!: pulumi.Output<string | undefined>;
    /**
     * TODO
     */
    public /*out*/ readonly stdout!: pulumi.Output<string>;
    /**
     * TODO
     */
    public readonly triggers!: pulumi.Output<any[]>;
    /**
     * load minimal amounts of data from the input files and flush the output buffers more often.
     */
    public readonly unbuffered!: pulumi.Output<boolean>;
    /**
     * output version information and exit.
     */
    public readonly version!: pulumi.Output<boolean>;

    /**
     * Create a Sed resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SedArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            resourceInputs["binaryPath"] = args ? args.binaryPath : undefined;
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["debug"] = args ? args.debug : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["expressions"] = args ? args.expressions : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["followSymlinks"] = args ? args.followSymlinks : undefined;
            resourceInputs["help"] = args ? args.help : undefined;
            resourceInputs["inPlace"] = args ? args.inPlace : undefined;
            resourceInputs["inputFiles"] = args ? args.inputFiles : undefined;
            resourceInputs["lifecycle"] = args ? args.lifecycle : undefined;
            resourceInputs["lineLength"] = args ? args.lineLength : undefined;
            resourceInputs["nullData"] = args ? args.nullData : undefined;
            resourceInputs["posix"] = args ? args.posix : undefined;
            resourceInputs["quiet"] = args ? args.quiet : undefined;
            resourceInputs["regexpExtended"] = args ? args.regexpExtended : undefined;
            resourceInputs["sandbox"] = args ? args.sandbox : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["separate"] = args ? args.separate : undefined;
            resourceInputs["silent"] = args ? args.silent : undefined;
            resourceInputs["stdin"] = args ? args.stdin : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["unbuffered"] = args ? args.unbuffered : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["command"] = undefined /*out*/;
            resourceInputs["stderr"] = undefined /*out*/;
            resourceInputs["stdout"] = undefined /*out*/;
        } else {
            resourceInputs["binaryPath"] = undefined /*out*/;
            resourceInputs["command"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["debug"] = undefined /*out*/;
            resourceInputs["environment"] = undefined /*out*/;
            resourceInputs["expressions"] = undefined /*out*/;
            resourceInputs["files"] = undefined /*out*/;
            resourceInputs["followSymlinks"] = undefined /*out*/;
            resourceInputs["help"] = undefined /*out*/;
            resourceInputs["inPlace"] = undefined /*out*/;
            resourceInputs["inputFiles"] = undefined /*out*/;
            resourceInputs["lifecycle"] = undefined /*out*/;
            resourceInputs["lineLength"] = undefined /*out*/;
            resourceInputs["nullData"] = undefined /*out*/;
            resourceInputs["posix"] = undefined /*out*/;
            resourceInputs["quiet"] = undefined /*out*/;
            resourceInputs["regexpExtended"] = undefined /*out*/;
            resourceInputs["sandbox"] = undefined /*out*/;
            resourceInputs["script"] = undefined /*out*/;
            resourceInputs["separate"] = undefined /*out*/;
            resourceInputs["silent"] = undefined /*out*/;
            resourceInputs["stderr"] = undefined /*out*/;
            resourceInputs["stdin"] = undefined /*out*/;
            resourceInputs["stdout"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["unbuffered"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sed.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Sed resource.
 */
export interface SedArgs {
    /**
     * Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     */
    binaryPath?: pulumi.Input<string>;
    /**
     * Connection details for the remote system
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * annotate program execution.
     */
    debug?: pulumi.Input<boolean>;
    /**
     * Environment variables
     */
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * add the script to the commands to be executed.
     */
    expressions?: pulumi.Input<string | pulumi.Input<string>[]>;
    /**
     * add the contents of script-file to the commands to be executed.
     */
    files?: pulumi.Input<string | pulumi.Input<string>[]>;
    /**
     * follow symlinks when processing in place
     */
    followSymlinks?: pulumi.Input<boolean>;
    /**
     * display this help and exit.
     */
    help?: pulumi.Input<boolean>;
    /**
     * edit files in place (makes backup if SUFFIX supplied)
     */
    inPlace?: pulumi.Input<string>;
    /**
     * corresponds to the [input-file]... argument(s).
     */
    inputFiles?: pulumi.Input<string | pulumi.Input<string>[]>;
    /**
     * At what stage(s) in the resource lifecycle should the command be run
     */
    lifecycle?: enums.tools.CommandLifecycle;
    /**
     * specify the desired line-wrap length for the `l' command
     */
    lineLength?: pulumi.Input<boolean>;
    /**
     * separate lines by NUL characters
     */
    nullData?: pulumi.Input<boolean>;
    /**
     * disable all GNU extensions.
     */
    posix?: pulumi.Input<boolean>;
    /**
     * suppress automatic printing of pattern space. Same as `silent`.
     */
    quiet?: pulumi.Input<boolean>;
    /**
     * use extended regular expressions in the script (for portability use POSIX -E).
     */
    regexpExtended?: pulumi.Input<boolean>;
    /**
     * operate in sandbox mode (disable e/r/w commands).
     */
    sandbox?: pulumi.Input<boolean>;
    /**
     * script only if no other script.
     */
    script?: pulumi.Input<string>;
    /**
     * consider files as separate rather than as a single, continuous long stream.
     */
    separate?: pulumi.Input<boolean>;
    /**
     * suppress automatic printing of pattern space. Same as `quiet`.
     */
    silent?: pulumi.Input<boolean>;
    /**
     * TODO
     */
    stdin?: pulumi.Input<string>;
    /**
     * TODO
     */
    triggers?: pulumi.Input<any[]>;
    /**
     * load minimal amounts of data from the input files and flush the output buffers more often.
     */
    unbuffered?: pulumi.Input<boolean>;
    /**
     * output version information and exit.
     */
    version?: pulumi.Input<boolean>;
}
