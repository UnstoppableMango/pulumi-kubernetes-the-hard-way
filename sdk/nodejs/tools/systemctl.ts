// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

/**
 * Abstraction over the `systemctl` utility on a remote system.
 */
export class Systemctl extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:tools:Systemctl';

    /**
     * Returns true if the given object is an instance of Systemctl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Systemctl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Systemctl.__pulumiType;
    }

    /**
     * Represents the command run on the remote system.
     */
    public /*out*/ readonly command!: pulumi.Output<pulumiCommand.remote.Command>;
    /**
     * Connection details for the remote system.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    public readonly daemonReload!: pulumi.Output<boolean>;
    public readonly enable!: pulumi.Output<string>;
    public readonly start!: pulumi.Output<string>;

    /**
     * Create a Systemctl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemctlArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["daemonReload"] = args ? args.daemonReload : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["start"] = args ? args.start : undefined;
            resourceInputs["command"] = undefined /*out*/;
        } else {
            resourceInputs["command"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["daemonReload"] = undefined /*out*/;
            resourceInputs["enable"] = undefined /*out*/;
            resourceInputs["start"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Systemctl.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Systemctl resource.
 */
export interface SystemctlArgs {
    /**
     * Connection details for the remote system.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    daemonReload?: pulumi.Input<boolean>;
    enable?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}
