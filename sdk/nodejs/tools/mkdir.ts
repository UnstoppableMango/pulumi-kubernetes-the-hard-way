// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

/**
 * Represents the `mkdir` utility.
 */
export class Mkdir extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:tools:Mkdir';

    /**
     * Returns true if the given object is an instance of Mkdir.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mkdir {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mkdir.__pulumiType;
    }

    /**
     * The remote command.
     */
    public /*out*/ readonly command!: pulumi.Output<pulumiCommand.remote.Command>;
    /**
     * The fully qualified path of the directory on the remote system.
     */
    public readonly directory!: pulumi.Output<string>;
    /**
     * Corresponds to the `--parents` option.
     */
    public readonly parents!: pulumi.Output<boolean>;
    /**
     * Remove the created directory when the `Mkdir` resource is deleted or updated.
     */
    public readonly removeOnDelete!: pulumi.Output<boolean>;
    /**
     * The command's stderr.
     */
    public /*out*/ readonly stderr!: pulumi.Output<string>;
    /**
     * The command's stdout.
     */
    public /*out*/ readonly stdout!: pulumi.Output<string>;

    /**
     * Create a Mkdir resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MkdirArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.directory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directory'");
            }
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["directory"] = args ? args.directory : undefined;
            resourceInputs["lifecycle"] = args ? args.lifecycle : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["removeOnDelete"] = args ? args.removeOnDelete : undefined;
            resourceInputs["command"] = undefined /*out*/;
            resourceInputs["stderr"] = undefined /*out*/;
            resourceInputs["stdout"] = undefined /*out*/;
        } else {
            resourceInputs["command"] = undefined /*out*/;
            resourceInputs["directory"] = undefined /*out*/;
            resourceInputs["parents"] = undefined /*out*/;
            resourceInputs["removeOnDelete"] = undefined /*out*/;
            resourceInputs["stderr"] = undefined /*out*/;
            resourceInputs["stdout"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Mkdir.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Mkdir resource.
 */
export interface MkdirArgs {
    /**
     * The connection details for the remote system.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * The fully qualified path of the directory on the remote system.
     */
    directory: pulumi.Input<string>;
    /**
     * At what stage(s) in the resource lifecycle should the command be run.
     */
    lifecycle?: enums.tools.CommandLifecycle;
    /**
     * Corresponds to the `--parents` option.
     */
    parents?: pulumi.Input<boolean>;
    /**
     * Remove the created directory when the `Mkdir` resource is deleted or updated.
     */
    removeOnDelete?: pulumi.Input<boolean>;
}
