// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { EtcdArgs } from "./etcd";
export type Etcd = import("./etcd").Etcd;
export const Etcd: typeof import("./etcd").Etcd = null as any;
utilities.lazyLoad(exports, ["Etcd"], () => require("./etcd"));

export { KubeconfigArgs } from "./kubeconfig";
export type Kubeconfig = import("./kubeconfig").Kubeconfig;
export const Kubeconfig: typeof import("./kubeconfig").Kubeconfig = null as any;
utilities.lazyLoad(exports, ["Kubeconfig"], () => require("./kubeconfig"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export enums:
export * from "./types/enums";

// Export sub-modules:
import * as config from "./config";
import * as remote from "./remote";
import * as tls from "./tls";
import * as tools from "./tools";
import * as types from "./types";

export {
    config,
    remote,
    tls,
    tools,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes-the-hard-way:index:Etcd":
                return new Etcd(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:index:Kubeconfig":
                return new Kubeconfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes-the-hard-way", "index", _module)
pulumi.runtime.registerResourcePackage("kubernetes-the-hard-way", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kubernetes-the-hard-way") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
