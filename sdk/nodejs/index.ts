// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CertificateArgs } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RemoteFileArgs } from "./remoteFile";
export type RemoteFile = import("./remoteFile").RemoteFile;
export const RemoteFile: typeof import("./remoteFile").RemoteFile = null as any;
utilities.lazyLoad(exports, ["RemoteFile"], () => require("./remoteFile"));

export * from "./rootCa";
import { RootCa } from "./rootCa";


// Export sub-modules:
import * as remote from "./remote";

export {
    remote,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes-the-hard-way:index:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:index:RemoteFile":
                return new RemoteFile(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:index:RootCa":
                return new RootCa(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes-the-hard-way", "index", _module)
pulumi.runtime.registerResourcePackage("kubernetes-the-hard-way", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kubernetes-the-hard-way") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
