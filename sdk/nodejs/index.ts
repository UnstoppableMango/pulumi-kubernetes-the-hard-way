// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./certificate";
import { Certificate } from "./certificate";

export { ClusterPkiArgs } from "./clusterPki";
export type ClusterPki = import("./clusterPki").ClusterPki;
export const ClusterPki: typeof import("./clusterPki").ClusterPki = null as any;
utilities.lazyLoad(exports, ["ClusterPki"], () => require("./clusterPki"));

export { EncryptionKeyArgs } from "./encryptionKey";
export type EncryptionKey = import("./encryptionKey").EncryptionKey;
export const EncryptionKey: typeof import("./encryptionKey").EncryptionKey = null as any;
utilities.lazyLoad(exports, ["EncryptionKey"], () => require("./encryptionKey"));

export { InstallCertArgs, InstallCertResult, InstallCertOutputArgs } from "./installCert";
export const installCert: typeof import("./installCert").installCert = null as any;
export const installCertOutput: typeof import("./installCert").installCertOutput = null as any;
utilities.lazyLoad(exports, ["installCert","installCertOutput"], () => require("./installCert"));

export { InstallControlPlaneArgs } from "./installControlPlane";
export const installControlPlane: typeof import("./installControlPlane").installControlPlane = null as any;
utilities.lazyLoad(exports, ["installControlPlane"], () => require("./installControlPlane"));

export { InstallKeyArgs, InstallKeyResult, InstallKeyOutputArgs } from "./installKey";
export const installKey: typeof import("./installKey").installKey = null as any;
export const installKeyOutput: typeof import("./installKey").installKeyOutput = null as any;
utilities.lazyLoad(exports, ["installKey","installKeyOutput"], () => require("./installKey"));

export { NewCertificateArgs, NewCertificateResult, NewCertificateOutputArgs } from "./newCertificate";
export const newCertificate: typeof import("./newCertificate").newCertificate = null as any;
export const newCertificateOutput: typeof import("./newCertificate").newCertificateOutput = null as any;
utilities.lazyLoad(exports, ["newCertificate","newCertificateOutput"], () => require("./newCertificate"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export * from "./rootCa";
import { RootCa } from "./rootCa";


// Export enums:
export * from "./types/enums";

// Export sub-modules:
import * as remote from "./remote";
import * as tools from "./tools";
import * as types from "./types";

export {
    remote,
    tools,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes-the-hard-way:index:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:index:ClusterPki":
                return new ClusterPki(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:index:EncryptionKey":
                return new EncryptionKey(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:index:RootCa":
                return new RootCa(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes-the-hard-way", "index", _module)
pulumi.runtime.registerResourcePackage("kubernetes-the-hard-way", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kubernetes-the-hard-way") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
