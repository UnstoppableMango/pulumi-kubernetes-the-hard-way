// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

import {ClusterPki} from "./tls";

/**
 * Kubeconfig
 */
export class Kubeconfig extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:index:Kubeconfig';

    /**
     * Returns true if the given object is an instance of Kubeconfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Kubeconfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Kubeconfig.__pulumiType;
    }

    /**
     * The type of config this resource is intended for.
     */
    public /*out*/ readonly type!: pulumi.Output<enums.config.KubeconfigType | undefined>;
    public /*out*/ readonly value!: pulumi.Output<outputs.config.Kubeconfig>;
    /**
     * The yaml representation of the kubeconfig.
     */
    public /*out*/ readonly yaml!: pulumi.Output<string>;

    /**
     * Create a Kubeconfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubeconfigArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.options === undefined) && !opts.urn) {
                throw new Error("Missing required property 'options'");
            }
            if ((!args || args.pki === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pki'");
            }
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["pki"] = args ? args.pki : undefined;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
            resourceInputs["yaml"] = undefined /*out*/;
        } else {
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
            resourceInputs["yaml"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Kubeconfig.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Kubeconfig resource.
 */
export interface KubeconfigArgs {
    options: pulumi.Input<inputs.config.KubeconfigAdminOptionsArgs> | pulumi.Input<inputs.config.KubeconfigKubeControllerManagerOptionsArgs> | pulumi.Input<inputs.config.KubeconfigKubeProxyOptionsArgs> | pulumi.Input<inputs.config.KubeconfigKubeSchedulerOptionsArgs> | pulumi.Input<inputs.config.KubeconfigWorkerOptionsArgs>;
    /**
     * The PKI containing certificate data.
     */
    pki: pulumi.Input<ClusterPki>;
}
