// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

import {CniBridgePluginConfiguration, CniLoopbackPluginConfiguration, ContainerdConfiguration, KubeProxyConfiguration, KubeletConfiguration} from "../config";
import {Mkdir} from "../tools";
import {CniPluginsInstall, ContainerdInstall, ContainerdService, CrictlInstall, File, KubeProxyInstall, KubeProxyService, KubectlInstall, KubeletInstall, KubeletService, RuncInstall} from "./index";

/**
 * A Kubernetes worker node.
 */
export class WorkerNode extends pulumi.CustomResource {
    /**
     * Get an existing WorkerNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WorkerNode {
        return new WorkerNode(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:WorkerNode';

    /**
     * Returns true if the given object is an instance of WorkerNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkerNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkerNode.__pulumiType;
    }

    /**
     * The CPU architecture of the node.
     */
    public readonly architecture!: pulumi.Output<enums.remote.Architecture>;
    /**
     * The CIDR to use for the cluster.
     */
    public readonly clusterCIDR!: pulumi.Output<string | undefined>;
    /**
     * The CNI bridge plugin configuration.
     */
    public /*out*/ readonly cniBridgeConfiguration!: pulumi.Output<CniBridgePluginConfiguration>;
    /**
     * The CNI bridge plugin configuration file.
     */
    public /*out*/ readonly cniBridgeConfigurationFile!: pulumi.Output<File>;
    /**
     * The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
     */
    public readonly cniConfigurationDirectory!: pulumi.Output<string | undefined>;
    /**
     * The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
     */
    public readonly cniInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The CNI loopback plugin configuration.
     */
    public /*out*/ readonly cniLoopbackConfiguration!: pulumi.Output<CniLoopbackPluginConfiguration>;
    /**
     * The CNI loopback plugin configuration file.
     */
    public /*out*/ readonly cniLoopbackConfigurationFile!: pulumi.Output<File>;
    /**
     * The CNI configuration mkdir operation.
     */
    public /*out*/ readonly cniMkdir!: pulumi.Output<Mkdir>;
    /**
     * The CNI plugin install.
     */
    public /*out*/ readonly cniPluginsInstall!: pulumi.Output<CniPluginsInstall | undefined>;
    /**
     * The CNI version to use.
     */
    public readonly cniVersion!: pulumi.Output<string | undefined>;
    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * The containerd configuration.
     */
    public /*out*/ readonly containerdConfiguration!: pulumi.Output<ContainerdConfiguration>;
    /**
     * The directory to store containerd configuration files. Defaults to /etc/containerd.
     */
    public readonly containerdConfigurationDirectory!: pulumi.Output<string | undefined>;
    /**
     * The containerd configuration file.
     */
    public /*out*/ readonly containerdConfigurationFile!: pulumi.Output<File>;
    /**
     * The containerd install.
     */
    public /*out*/ readonly containerdInstall!: pulumi.Output<ContainerdInstall>;
    /**
     * The directory to store the containerd binary. Defaults to /bin.
     */
    public readonly containerdInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The containerd configuration mkdir operation.
     */
    public /*out*/ readonly containerdMkdir!: pulumi.Output<Mkdir>;
    /**
     * The containerd systemd service.
     */
    public /*out*/ readonly containerdService!: pulumi.Output<ContainerdService>;
    /**
     * The containerd version to use.
     */
    public readonly containerdVersion!: pulumi.Output<string | undefined>;
    /**
     * The crictl install.
     */
    public /*out*/ readonly crictlInstall!: pulumi.Output<CrictlInstall>;
    /**
     * The directory to store the crictl binary. Defaults to /usr/local/bin.
     */
    public readonly crictlInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The kube-proxy configuration
     */
    public /*out*/ readonly kubeProxyConfiguration!: pulumi.Output<KubeProxyConfiguration>;
    /**
     * The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
     */
    public readonly kubeProxyConfigurationDirectory!: pulumi.Output<string | undefined>;
    /**
     * The kube-proxy configuration file.
     */
    public /*out*/ readonly kubeProxyConfigurationFile!: pulumi.Output<File>;
    /**
     * The kube-proxy install.
     */
    public /*out*/ readonly kubeProxyInstall!: pulumi.Output<KubeProxyInstall | undefined>;
    /**
     * The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
     */
    public readonly kubeProxyInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The path to the kube-proxy's kubeconfig file.
     */
    public readonly kubeProxyKubeconfigPath!: pulumi.Output<string | undefined>;
    /**
     * The kube-proxy configuration mkdir operation.
     */
    public /*out*/ readonly kubeProxyMkdir!: pulumi.Output<Mkdir>;
    /**
     * The kubelet systemd service.
     */
    public /*out*/ readonly kubeProxyService!: pulumi.Output<KubeProxyService>;
    /**
     * The kubectl install.
     */
    public /*out*/ readonly kubectlInstall!: pulumi.Output<KubectlInstall>;
    /**
     * The directory to store the kubectl binary. Defaults to /usr/local/bin.
     */
    public readonly kubectlInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The kubelet configuration
     */
    public /*out*/ readonly kubeletConfiguration!: pulumi.Output<KubeletConfiguration>;
    /**
     * The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
     */
    public readonly kubeletConfigurationDirectory!: pulumi.Output<string | undefined>;
    /**
     * The kubelet configuration file.
     */
    public /*out*/ readonly kubeletConfigurationFile!: pulumi.Output<File>;
    /**
     * The kubelet install.
     */
    public /*out*/ readonly kubeletInstall!: pulumi.Output<KubeletInstall>;
    /**
     * The directory to store the kubelet binary. Defaults to /usr/local/bin.
     */
    public readonly kubeletInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The path to the kubelet's kubeconfig file.
     */
    public readonly kubeletKubeconfigPath!: pulumi.Output<string | undefined>;
    /**
     * The kubelet configuration mkdir operation.
     */
    public /*out*/ readonly kubeletMkdir!: pulumi.Output<Mkdir>;
    /**
     * The kubelet systemd service.
     */
    public /*out*/ readonly kubeletService!: pulumi.Output<KubeletService>;
    /**
     * The kubernetes version to use.
     */
    public readonly kubernetesVersion!: pulumi.Output<string | undefined>;
    /**
     * The pod CIDR to use.
     */
    public readonly podCIDR!: pulumi.Output<string>;
    /**
     * The runc install.
     */
    public /*out*/ readonly runcInstall!: pulumi.Output<RuncInstall | undefined>;
    /**
     * The subnet for the CNI.
     */
    public readonly subnet!: pulumi.Output<string>;
    /**
     * The /var/lib/kubernetes mkdir operation.
     */
    public /*out*/ readonly varLibKubernetesMkdir!: pulumi.Output<Mkdir>;
    /**
     * The /var/run/kubernetes mkdir operation.
     */
    public /*out*/ readonly varRunKubernetesMkdir!: pulumi.Output<Mkdir>;

    /**
     * Create a WorkerNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkerNodeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.architecture === undefined) && !opts.urn) {
                throw new Error("Missing required property 'architecture'");
            }
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.podCIDR === undefined) && !opts.urn) {
                throw new Error("Missing required property 'podCIDR'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["clusterCIDR"] = args ? args.clusterCIDR : undefined;
            resourceInputs["cniConfigurationDirectory"] = args ? args.cniConfigurationDirectory : undefined;
            resourceInputs["cniInstallDirectory"] = args ? args.cniInstallDirectory : undefined;
            resourceInputs["cniVersion"] = args ? args.cniVersion : undefined;
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["containerdConfigurationDirectory"] = args ? args.containerdConfigurationDirectory : undefined;
            resourceInputs["containerdInstallDirectory"] = args ? args.containerdInstallDirectory : undefined;
            resourceInputs["containerdVersion"] = args ? args.containerdVersion : undefined;
            resourceInputs["crictlInstallDirectory"] = args ? args.crictlInstallDirectory : undefined;
            resourceInputs["kubeProxyConfigurationDirectory"] = args ? args.kubeProxyConfigurationDirectory : undefined;
            resourceInputs["kubeProxyInstallDirectory"] = args ? args.kubeProxyInstallDirectory : undefined;
            resourceInputs["kubeProxyKubeconfigPath"] = args ? args.kubeProxyKubeconfigPath : undefined;
            resourceInputs["kubectlInstallDirectory"] = args ? args.kubectlInstallDirectory : undefined;
            resourceInputs["kubeletConfigurationDirectory"] = args ? args.kubeletConfigurationDirectory : undefined;
            resourceInputs["kubeletInstallDirectory"] = args ? args.kubeletInstallDirectory : undefined;
            resourceInputs["kubeletKubeconfigPath"] = args ? args.kubeletKubeconfigPath : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["podCIDR"] = args ? args.podCIDR : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["cniBridgeConfiguration"] = undefined /*out*/;
            resourceInputs["cniBridgeConfigurationFile"] = undefined /*out*/;
            resourceInputs["cniLoopbackConfiguration"] = undefined /*out*/;
            resourceInputs["cniLoopbackConfigurationFile"] = undefined /*out*/;
            resourceInputs["cniMkdir"] = undefined /*out*/;
            resourceInputs["cniPluginsInstall"] = undefined /*out*/;
            resourceInputs["containerdConfiguration"] = undefined /*out*/;
            resourceInputs["containerdConfigurationFile"] = undefined /*out*/;
            resourceInputs["containerdInstall"] = undefined /*out*/;
            resourceInputs["containerdMkdir"] = undefined /*out*/;
            resourceInputs["containerdService"] = undefined /*out*/;
            resourceInputs["crictlInstall"] = undefined /*out*/;
            resourceInputs["kubeProxyConfiguration"] = undefined /*out*/;
            resourceInputs["kubeProxyConfigurationFile"] = undefined /*out*/;
            resourceInputs["kubeProxyInstall"] = undefined /*out*/;
            resourceInputs["kubeProxyMkdir"] = undefined /*out*/;
            resourceInputs["kubeProxyService"] = undefined /*out*/;
            resourceInputs["kubectlInstall"] = undefined /*out*/;
            resourceInputs["kubeletConfiguration"] = undefined /*out*/;
            resourceInputs["kubeletConfigurationFile"] = undefined /*out*/;
            resourceInputs["kubeletInstall"] = undefined /*out*/;
            resourceInputs["kubeletMkdir"] = undefined /*out*/;
            resourceInputs["kubeletService"] = undefined /*out*/;
            resourceInputs["runcInstall"] = undefined /*out*/;
            resourceInputs["varLibKubernetesMkdir"] = undefined /*out*/;
            resourceInputs["varRunKubernetesMkdir"] = undefined /*out*/;
        } else {
            resourceInputs["architecture"] = undefined /*out*/;
            resourceInputs["clusterCIDR"] = undefined /*out*/;
            resourceInputs["cniBridgeConfiguration"] = undefined /*out*/;
            resourceInputs["cniBridgeConfigurationFile"] = undefined /*out*/;
            resourceInputs["cniConfigurationDirectory"] = undefined /*out*/;
            resourceInputs["cniInstallDirectory"] = undefined /*out*/;
            resourceInputs["cniLoopbackConfiguration"] = undefined /*out*/;
            resourceInputs["cniLoopbackConfigurationFile"] = undefined /*out*/;
            resourceInputs["cniMkdir"] = undefined /*out*/;
            resourceInputs["cniPluginsInstall"] = undefined /*out*/;
            resourceInputs["cniVersion"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["containerdConfiguration"] = undefined /*out*/;
            resourceInputs["containerdConfigurationDirectory"] = undefined /*out*/;
            resourceInputs["containerdConfigurationFile"] = undefined /*out*/;
            resourceInputs["containerdInstall"] = undefined /*out*/;
            resourceInputs["containerdInstallDirectory"] = undefined /*out*/;
            resourceInputs["containerdMkdir"] = undefined /*out*/;
            resourceInputs["containerdService"] = undefined /*out*/;
            resourceInputs["containerdVersion"] = undefined /*out*/;
            resourceInputs["crictlInstall"] = undefined /*out*/;
            resourceInputs["crictlInstallDirectory"] = undefined /*out*/;
            resourceInputs["kubeProxyConfiguration"] = undefined /*out*/;
            resourceInputs["kubeProxyConfigurationDirectory"] = undefined /*out*/;
            resourceInputs["kubeProxyConfigurationFile"] = undefined /*out*/;
            resourceInputs["kubeProxyInstall"] = undefined /*out*/;
            resourceInputs["kubeProxyInstallDirectory"] = undefined /*out*/;
            resourceInputs["kubeProxyKubeconfigPath"] = undefined /*out*/;
            resourceInputs["kubeProxyMkdir"] = undefined /*out*/;
            resourceInputs["kubeProxyService"] = undefined /*out*/;
            resourceInputs["kubectlInstall"] = undefined /*out*/;
            resourceInputs["kubectlInstallDirectory"] = undefined /*out*/;
            resourceInputs["kubeletConfiguration"] = undefined /*out*/;
            resourceInputs["kubeletConfigurationDirectory"] = undefined /*out*/;
            resourceInputs["kubeletConfigurationFile"] = undefined /*out*/;
            resourceInputs["kubeletInstall"] = undefined /*out*/;
            resourceInputs["kubeletInstallDirectory"] = undefined /*out*/;
            resourceInputs["kubeletKubeconfigPath"] = undefined /*out*/;
            resourceInputs["kubeletMkdir"] = undefined /*out*/;
            resourceInputs["kubeletService"] = undefined /*out*/;
            resourceInputs["kubernetesVersion"] = undefined /*out*/;
            resourceInputs["podCIDR"] = undefined /*out*/;
            resourceInputs["runcInstall"] = undefined /*out*/;
            resourceInputs["subnet"] = undefined /*out*/;
            resourceInputs["varLibKubernetesMkdir"] = undefined /*out*/;
            resourceInputs["varRunKubernetesMkdir"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkerNode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a WorkerNode resource.
 */
export interface WorkerNodeArgs {
    /**
     * The CPU architecture of the node.
     */
    architecture: pulumi.Input<enums.remote.Architecture>;
    /**
     * The CIDR to use for the cluster.
     */
    clusterCIDR?: pulumi.Input<string>;
    /**
     * The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
     */
    cniConfigurationDirectory?: pulumi.Input<string>;
    /**
     * The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
     */
    cniInstallDirectory?: pulumi.Input<string>;
    /**
     * The CNI version to use.
     */
    cniVersion?: pulumi.Input<string>;
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * The directory to store containerd configuration files. Defaults to /etc/containerd.
     */
    containerdConfigurationDirectory?: pulumi.Input<string>;
    /**
     * The directory to store the containerd binary. Defaults to /bin.
     */
    containerdInstallDirectory?: pulumi.Input<string>;
    /**
     * The containerd version to use.
     */
    containerdVersion?: pulumi.Input<string>;
    /**
     * The directory to store the crictl binary. Defaults to /usr/local/bin.
     */
    crictlInstallDirectory?: pulumi.Input<string>;
    /**
     * The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
     */
    kubeProxyConfigurationDirectory?: pulumi.Input<string>;
    /**
     * The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
     */
    kubeProxyInstallDirectory?: pulumi.Input<string>;
    /**
     * The path to the kube-proxy's kubeconfig file.
     */
    kubeProxyKubeconfigPath?: pulumi.Input<string>;
    /**
     * The directory to store the kubectl binary. Defaults to /usr/local/bin.
     */
    kubectlInstallDirectory?: pulumi.Input<string>;
    /**
     * The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
     */
    kubeletConfigurationDirectory?: pulumi.Input<string>;
    /**
     * The directory to store the kubelet binary. Defaults to /usr/local/bin.
     */
    kubeletInstallDirectory?: pulumi.Input<string>;
    /**
     * The path to the kubelet's kubeconfig file.
     */
    kubeletKubeconfigPath?: pulumi.Input<string>;
    /**
     * The kubernetes version to use.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * The pod CIDR to use.
     */
    podCIDR: pulumi.Input<string>;
    /**
     * The subnet for the CNI.
     */
    subnet: pulumi.Input<string>;
}
