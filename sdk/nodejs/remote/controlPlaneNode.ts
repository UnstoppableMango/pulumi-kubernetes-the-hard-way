// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

import {Mkdir} from "../tools";
import {File, KubeApiServerInstall, KubeControllerManagerInstall, KubeSchedulerInstall, KubectlInstall, SystemdService} from "./index";

/**
 * A kubernetes control plane node.
 */
export class ControlPlaneNode extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:ControlPlaneNode';

    /**
     * Returns true if the given object is an instance of ControlPlaneNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ControlPlaneNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ControlPlaneNode.__pulumiType;
    }

    /**
     * The number of kube-apiserver instance.
     */
    public readonly apiServerCount!: pulumi.Output<number>;
    /**
     * The node's CPU architecture.
     */
    public readonly architecture!: pulumi.Output<enums.remote.Architecture>;
    /**
     * The path to store the audit log file.
     */
    public readonly audiLogPath!: pulumi.Output<string | undefined>;
    /**
     * The path to the root certificate authority certificate.
     */
    public readonly caCertificatePath!: pulumi.Output<string>;
    /**
     * The path to the root certificate authority private key.
     */
    public readonly caPrivateKeyPath!: pulumi.Output<string>;
    /**
     * The cluster CIDR.
     */
    public readonly clusterCIDR!: pulumi.Output<string | undefined>;
    /**
     * The cluster name.
     */
    public readonly clusterName!: pulumi.Output<string | undefined>;
    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * The remote encryption config file.
     */
    public /*out*/ readonly encryptionConfigFile!: pulumi.Output<File | undefined>;
    /**
     * The v1/EncryptionConfig yaml.
     */
    public readonly encryptionConfigYaml!: pulumi.Output<string>;
    /**
     * The path to the kube-apiserver certificate.
     */
    public readonly kubeApiServerCertificatePath!: pulumi.Output<string>;
    /**
     * The kube-apiserver install.
     */
    public /*out*/ readonly kubeApiServerInstall!: pulumi.Output<KubeApiServerInstall>;
    /**
     * The directory to store the kube-apiserver binary.
     */
    public readonly kubeApiServerInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The path to the kube-apiserver private key.
     */
    public readonly kubeApiServerPrivateKeyPath!: pulumi.Output<string>;
    /**
     * The kube-apiserver systemd service.
     */
    public /*out*/ readonly kubeApiServerService!: pulumi.Output<SystemdService | undefined>;
    /**
     * The kube-controller-manager install.
     */
    public /*out*/ readonly kubeControllerManagerInstall!: pulumi.Output<KubeControllerManagerInstall>;
    /**
     * The directory to store the kube-controller-manager binary.
     */
    public readonly kubeControllerManagerInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The path to the kube-controller-manager kubeconfig file.
     */
    public readonly kubeControllerManagerKubeconfigPath!: pulumi.Output<string>;
    /**
     * The kube-controller-manager systemd service.
     */
    public /*out*/ readonly kubeControllerManagerService!: pulumi.Output<SystemdService | undefined>;
    /**
     * The kube-scheduler config yaml.
     */
    public readonly kubeSchedulerConfigYaml!: pulumi.Output<string>;
    /**
     * The kube-scheduler isntall.
     */
    public /*out*/ readonly kubeSchedulerInstall!: pulumi.Output<KubeSchedulerInstall>;
    /**
     * The directory to store the kube-scheduler binary.
     */
    public readonly kubeSchedulerInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The path to the kube-scheduler kubeconfig file.
     */
    public readonly kubeSchedulerKubeconfigPath!: pulumi.Output<string>;
    /**
     * The kube-scheduler systemd service.
     */
    public /*out*/ readonly kubeSchedulerService!: pulumi.Output<SystemdService | undefined>;
    /**
     * The kubectl install.
     */
    public /*out*/ readonly kubectlInstall!: pulumi.Output<KubectlInstall>;
    /**
     * The path to store the kubectl binary.
     */
    public readonly kubectlInstallDirectory!: pulumi.Output<string | undefined>;
    /**
     * The kubernetes configuration mkdir operation.
     */
    public /*out*/ readonly kubernetesConfigurationMkdir!: pulumi.Output<Mkdir>;
    /**
     * The version of kubernetes to use.
     */
    public readonly kubernetesVersion!: pulumi.Output<string | undefined>;
    /**
     * The name of the node.
     */
    public readonly nodeName!: pulumi.Output<string | undefined>;
    /**
     * The path to the service accounts certificate.
     */
    public readonly serviceAccountsCertificatePath!: pulumi.Output<string>;
    /**
     * The path to the service accounts private key.
     */
    public readonly serviceAccountsPrivateKeyPath!: pulumi.Output<string>;
    /**
     * The IP range to use for cluster services.
     */
    public readonly serviceClusterIpRange!: pulumi.Output<string | undefined>;
    /**
     * The /var/lib/kubernetes mkdir operation.
     */
    public /*out*/ readonly varLibKubernetesMkdir!: pulumi.Output<Mkdir>;

    /**
     * Create a ControlPlaneNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ControlPlaneNodeArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.apiServerCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiServerCount'");
            }
            if ((!args || args.architecture === undefined) && !opts.urn) {
                throw new Error("Missing required property 'architecture'");
            }
            if ((!args || args.caCertificatePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caCertificatePath'");
            }
            if ((!args || args.caPrivateKeyPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caPrivateKeyPath'");
            }
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.encryptionConfigYaml === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionConfigYaml'");
            }
            if ((!args || args.kubeApiServerCertificatePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeApiServerCertificatePath'");
            }
            if ((!args || args.kubeApiServerPrivateKeyPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeApiServerPrivateKeyPath'");
            }
            if ((!args || args.kubeControllerManagerKubeconfigPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeControllerManagerKubeconfigPath'");
            }
            if ((!args || args.kubeSchedulerConfigYaml === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeSchedulerConfigYaml'");
            }
            if ((!args || args.kubeSchedulerKubeconfigPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeSchedulerKubeconfigPath'");
            }
            if ((!args || args.serviceAccountsCertificatePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountsCertificatePath'");
            }
            if ((!args || args.serviceAccountsPrivateKeyPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountsPrivateKeyPath'");
            }
            resourceInputs["apiServerCount"] = args ? args.apiServerCount : undefined;
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["audiLogPath"] = args ? args.audiLogPath : undefined;
            resourceInputs["caCertificatePath"] = args ? args.caCertificatePath : undefined;
            resourceInputs["caPrivateKeyPath"] = args ? args.caPrivateKeyPath : undefined;
            resourceInputs["clusterCIDR"] = args ? args.clusterCIDR : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["encryptionConfigYaml"] = args ? args.encryptionConfigYaml : undefined;
            resourceInputs["kubeApiServerCertificatePath"] = args ? args.kubeApiServerCertificatePath : undefined;
            resourceInputs["kubeApiServerInstallDirectory"] = args ? args.kubeApiServerInstallDirectory : undefined;
            resourceInputs["kubeApiServerPrivateKeyPath"] = args ? args.kubeApiServerPrivateKeyPath : undefined;
            resourceInputs["kubeControllerManagerInstallDirectory"] = args ? args.kubeControllerManagerInstallDirectory : undefined;
            resourceInputs["kubeControllerManagerKubeconfigPath"] = args ? args.kubeControllerManagerKubeconfigPath : undefined;
            resourceInputs["kubeSchedulerConfigYaml"] = args ? args.kubeSchedulerConfigYaml : undefined;
            resourceInputs["kubeSchedulerInstallDirectory"] = args ? args.kubeSchedulerInstallDirectory : undefined;
            resourceInputs["kubeSchedulerKubeconfigPath"] = args ? args.kubeSchedulerKubeconfigPath : undefined;
            resourceInputs["kubectlInstallDirectory"] = args ? args.kubectlInstallDirectory : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["nodeName"] = args ? args.nodeName : undefined;
            resourceInputs["serviceAccountsCertificatePath"] = args ? args.serviceAccountsCertificatePath : undefined;
            resourceInputs["serviceAccountsPrivateKeyPath"] = args ? args.serviceAccountsPrivateKeyPath : undefined;
            resourceInputs["serviceClusterIpRange"] = args ? args.serviceClusterIpRange : undefined;
            resourceInputs["encryptionConfigFile"] = undefined /*out*/;
            resourceInputs["kubeApiServerInstall"] = undefined /*out*/;
            resourceInputs["kubeApiServerService"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerInstall"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerService"] = undefined /*out*/;
            resourceInputs["kubeSchedulerInstall"] = undefined /*out*/;
            resourceInputs["kubeSchedulerService"] = undefined /*out*/;
            resourceInputs["kubectlInstall"] = undefined /*out*/;
            resourceInputs["kubernetesConfigurationMkdir"] = undefined /*out*/;
            resourceInputs["varLibKubernetesMkdir"] = undefined /*out*/;
        } else {
            resourceInputs["apiServerCount"] = undefined /*out*/;
            resourceInputs["architecture"] = undefined /*out*/;
            resourceInputs["audiLogPath"] = undefined /*out*/;
            resourceInputs["caCertificatePath"] = undefined /*out*/;
            resourceInputs["caPrivateKeyPath"] = undefined /*out*/;
            resourceInputs["clusterCIDR"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["encryptionConfigFile"] = undefined /*out*/;
            resourceInputs["encryptionConfigYaml"] = undefined /*out*/;
            resourceInputs["kubeApiServerCertificatePath"] = undefined /*out*/;
            resourceInputs["kubeApiServerInstall"] = undefined /*out*/;
            resourceInputs["kubeApiServerInstallDirectory"] = undefined /*out*/;
            resourceInputs["kubeApiServerPrivateKeyPath"] = undefined /*out*/;
            resourceInputs["kubeApiServerService"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerInstall"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerInstallDirectory"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerKubeconfigPath"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerService"] = undefined /*out*/;
            resourceInputs["kubeSchedulerConfigYaml"] = undefined /*out*/;
            resourceInputs["kubeSchedulerInstall"] = undefined /*out*/;
            resourceInputs["kubeSchedulerInstallDirectory"] = undefined /*out*/;
            resourceInputs["kubeSchedulerKubeconfigPath"] = undefined /*out*/;
            resourceInputs["kubeSchedulerService"] = undefined /*out*/;
            resourceInputs["kubectlInstall"] = undefined /*out*/;
            resourceInputs["kubectlInstallDirectory"] = undefined /*out*/;
            resourceInputs["kubernetesConfigurationMkdir"] = undefined /*out*/;
            resourceInputs["kubernetesVersion"] = undefined /*out*/;
            resourceInputs["nodeName"] = undefined /*out*/;
            resourceInputs["serviceAccountsCertificatePath"] = undefined /*out*/;
            resourceInputs["serviceAccountsPrivateKeyPath"] = undefined /*out*/;
            resourceInputs["serviceClusterIpRange"] = undefined /*out*/;
            resourceInputs["varLibKubernetesMkdir"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ControlPlaneNode.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a ControlPlaneNode resource.
 */
export interface ControlPlaneNodeArgs {
    /**
     * The number of kube-apiserver instance.
     */
    apiServerCount: pulumi.Input<number>;
    /**
     * The node's CPU architecture.
     */
    architecture: pulumi.Input<enums.remote.Architecture>;
    /**
     * The path to store the audit log file.
     */
    audiLogPath?: pulumi.Input<string>;
    /**
     * The path to the root certificate authority certificate.
     */
    caCertificatePath: pulumi.Input<string>;
    /**
     * The path to the root certificate authority private key.
     */
    caPrivateKeyPath: pulumi.Input<string>;
    /**
     * The cluster CIDR.
     */
    clusterCIDR?: pulumi.Input<string>;
    /**
     * The cluster name.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * The v1/EncryptionConfig yaml.
     */
    encryptionConfigYaml: pulumi.Input<string>;
    /**
     * The path to the kube-apiserver certificate.
     */
    kubeApiServerCertificatePath: pulumi.Input<string>;
    /**
     * The directory to store the kube-apiserver binary.
     */
    kubeApiServerInstallDirectory?: pulumi.Input<string>;
    /**
     * The path to the kube-apiserver private key.
     */
    kubeApiServerPrivateKeyPath: pulumi.Input<string>;
    /**
     * The directory to store the kube-controller-manager binary.
     */
    kubeControllerManagerInstallDirectory?: pulumi.Input<string>;
    /**
     * The path to the kube-controller-manager kubeconfig file.
     */
    kubeControllerManagerKubeconfigPath: pulumi.Input<string>;
    /**
     * The kube-scheduler config yaml.
     */
    kubeSchedulerConfigYaml: pulumi.Input<string>;
    /**
     * The directory to store the kube-scheduler binary.
     */
    kubeSchedulerInstallDirectory?: pulumi.Input<string>;
    /**
     * The path to the kube-scheduler kubeconfig file.
     */
    kubeSchedulerKubeconfigPath: pulumi.Input<string>;
    /**
     * The path to store the kubectl binary.
     */
    kubectlInstallDirectory?: pulumi.Input<string>;
    /**
     * The version of kubernetes to use.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * The name of the node.
     */
    nodeName?: pulumi.Input<string>;
    /**
     * The path to the service accounts certificate.
     */
    serviceAccountsCertificatePath: pulumi.Input<string>;
    /**
     * The path to the service accounts private key.
     */
    serviceAccountsPrivateKeyPath: pulumi.Input<string>;
    /**
     * The IP range to use for cluster services.
     */
    serviceClusterIpRange?: pulumi.Input<string>;
}
