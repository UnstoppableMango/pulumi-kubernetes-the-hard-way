// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

import {Mkdir} from "../tools";
import {KubeApiServerInstall, KubeControllerManagerInstall, KubeSchedulerInstall, KubectlInstall, SystemdService} from "./index";

/**
 * A kubernetes control plane node.
 */
export class ControlPlaneNode extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:ControlPlaneNode';

    /**
     * Returns true if the given object is an instance of ControlPlaneNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ControlPlaneNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ControlPlaneNode.__pulumiType;
    }

    /**
     * The path to the root certificate authority certificate.
     */
    public readonly caCertificatePath!: pulumi.Output<string | undefined>;
    /**
     * The path to the root certificate authority private key.
     */
    public readonly caPrivateKeyPath!: pulumi.Output<string | undefined>;
    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * The v1/EncryptionConfig yaml.
     */
    public readonly encryptionConfigYaml!: pulumi.Output<string | undefined>;
    /**
     * The path to the kube-apiserver certificate.
     */
    public readonly kubeApiServerCertificatePath!: pulumi.Output<string | undefined>;
    /**
     * The kube-apiserver install.
     */
    public /*out*/ readonly kubeApiServerInstall!: pulumi.Output<KubeApiServerInstall>;
    /**
     * The path to the kube-apiserver private key.
     */
    public readonly kubeApiServerPrivateKeyPath!: pulumi.Output<string | undefined>;
    /**
     * The kube-apiserver systemd service.
     */
    public /*out*/ readonly kubeApiServerService!: pulumi.Output<SystemdService | undefined>;
    /**
     * The kube-controller-manager install.
     */
    public /*out*/ readonly kubeControllerManagerInstall!: pulumi.Output<KubeControllerManagerInstall>;
    /**
     * The path to the kube-controller-manager kubeconfig file.
     */
    public readonly kubeControllerManagerKubeconfigPath!: pulumi.Output<string | undefined>;
    /**
     * The kube-controller-manager systemd service.
     */
    public /*out*/ readonly kubeControllerManagerService!: pulumi.Output<SystemdService | undefined>;
    /**
     * The kube-scheduler config yaml.
     */
    public readonly kubeSchedulerConfigYaml!: pulumi.Output<string | undefined>;
    /**
     * The kube-scheduler isntall.
     */
    public /*out*/ readonly kubeSchedulerInstall!: pulumi.Output<KubeSchedulerInstall>;
    /**
     * The path to the kube-scheduler kubeconfig file.
     */
    public readonly kubeSchedulerKubeconfigPath!: pulumi.Output<string | undefined>;
    /**
     * The kube-scheduler systemd service.
     */
    public /*out*/ readonly kubeSchedulerService!: pulumi.Output<SystemdService | undefined>;
    /**
     * The kubectl install.
     */
    public /*out*/ readonly kubectlInstall!: pulumi.Output<KubectlInstall>;
    /**
     * The kubernetes configuration mkdir operation.
     */
    public /*out*/ readonly kubernetesConfigurationMkdir!: pulumi.Output<Mkdir>;
    /**
     * The path to the service accounts certificate.
     */
    public readonly serviceAccountsCertificatePath!: pulumi.Output<string | undefined>;
    /**
     * The path to the service accounts private key.
     */
    public readonly serviceAccountsPrivateKeyPath!: pulumi.Output<string | undefined>;
    /**
     * The /var/lib/kubernetes mkdir operation.
     */
    public /*out*/ readonly varLibKubernetesMkdir!: pulumi.Output<Mkdir>;

    /**
     * Create a ControlPlaneNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ControlPlaneNodeArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            resourceInputs["caCertificatePath"] = args ? args.caCertificatePath : undefined;
            resourceInputs["caPrivateKeyPath"] = args ? args.caPrivateKeyPath : undefined;
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["encryptionConfigYaml"] = args ? args.encryptionConfigYaml : undefined;
            resourceInputs["kubeApiServerCertificatePath"] = args ? args.kubeApiServerCertificatePath : undefined;
            resourceInputs["kubeApiServerPrivateKeyPath"] = args ? args.kubeApiServerPrivateKeyPath : undefined;
            resourceInputs["kubeControllerManagerKubeconfigPath"] = args ? args.kubeControllerManagerKubeconfigPath : undefined;
            resourceInputs["kubeSchedulerConfigYaml"] = args ? args.kubeSchedulerConfigYaml : undefined;
            resourceInputs["kubeSchedulerKubeconfigPath"] = args ? args.kubeSchedulerKubeconfigPath : undefined;
            resourceInputs["serviceAccountsCertificatePath"] = args ? args.serviceAccountsCertificatePath : undefined;
            resourceInputs["serviceAccountsPrivateKeyPath"] = args ? args.serviceAccountsPrivateKeyPath : undefined;
            resourceInputs["kubeApiServerInstall"] = undefined /*out*/;
            resourceInputs["kubeApiServerService"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerInstall"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerService"] = undefined /*out*/;
            resourceInputs["kubeSchedulerInstall"] = undefined /*out*/;
            resourceInputs["kubeSchedulerService"] = undefined /*out*/;
            resourceInputs["kubectlInstall"] = undefined /*out*/;
            resourceInputs["kubernetesConfigurationMkdir"] = undefined /*out*/;
            resourceInputs["varLibKubernetesMkdir"] = undefined /*out*/;
        } else {
            resourceInputs["caCertificatePath"] = undefined /*out*/;
            resourceInputs["caPrivateKeyPath"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["encryptionConfigYaml"] = undefined /*out*/;
            resourceInputs["kubeApiServerCertificatePath"] = undefined /*out*/;
            resourceInputs["kubeApiServerInstall"] = undefined /*out*/;
            resourceInputs["kubeApiServerPrivateKeyPath"] = undefined /*out*/;
            resourceInputs["kubeApiServerService"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerInstall"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerKubeconfigPath"] = undefined /*out*/;
            resourceInputs["kubeControllerManagerService"] = undefined /*out*/;
            resourceInputs["kubeSchedulerConfigYaml"] = undefined /*out*/;
            resourceInputs["kubeSchedulerInstall"] = undefined /*out*/;
            resourceInputs["kubeSchedulerKubeconfigPath"] = undefined /*out*/;
            resourceInputs["kubeSchedulerService"] = undefined /*out*/;
            resourceInputs["kubectlInstall"] = undefined /*out*/;
            resourceInputs["kubernetesConfigurationMkdir"] = undefined /*out*/;
            resourceInputs["serviceAccountsCertificatePath"] = undefined /*out*/;
            resourceInputs["serviceAccountsPrivateKeyPath"] = undefined /*out*/;
            resourceInputs["varLibKubernetesMkdir"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ControlPlaneNode.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a ControlPlaneNode resource.
 */
export interface ControlPlaneNodeArgs {
    /**
     * The path to the root certificate authority certificate.
     */
    caCertificatePath?: pulumi.Input<string>;
    /**
     * The path to the root certificate authority private key.
     */
    caPrivateKeyPath?: pulumi.Input<string>;
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * The v1/EncryptionConfig yaml.
     */
    encryptionConfigYaml?: pulumi.Input<string>;
    /**
     * The path to the kube-apiserver certificate.
     */
    kubeApiServerCertificatePath?: pulumi.Input<string>;
    /**
     * The path to the kube-apiserver private key.
     */
    kubeApiServerPrivateKeyPath?: pulumi.Input<string>;
    /**
     * The path to the kube-controller-manager kubeconfig file.
     */
    kubeControllerManagerKubeconfigPath?: pulumi.Input<string>;
    /**
     * The kube-scheduler config yaml.
     */
    kubeSchedulerConfigYaml?: pulumi.Input<string>;
    /**
     * The path to the kube-scheduler kubeconfig file.
     */
    kubeSchedulerKubeconfigPath?: pulumi.Input<string>;
    /**
     * The path to the service accounts certificate.
     */
    serviceAccountsCertificatePath?: pulumi.Input<string>;
    /**
     * The path to the service accounts private key.
     */
    serviceAccountsPrivateKeyPath?: pulumi.Input<string>;
}
