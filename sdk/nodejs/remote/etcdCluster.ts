// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

import {EtcdConfiguration, EtcdInstall, EtcdService, StartEtcd} from "./index";

/**
 * Creates an etcd cluster from one or more remote systems.
 */
export class EtcdCluster extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:EtcdCluster';

    /**
     * Returns true if the given object is an instance of EtcdCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EtcdCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EtcdCluster.__pulumiType;
    }

    /**
     * TODO
     */
    public readonly architecture!: pulumi.Output<enums.remote.Architecture | undefined>;
    /**
     * TODO
     */
    public readonly binaryDirectory!: pulumi.Output<string | undefined>;
    /**
     * The TLS bundle.
     */
    public readonly bundle!: pulumi.Output<outputs.tls.Bundle>;
    /**
     * Map of node name to etcd configuration.
     */
    public /*out*/ readonly configuration!: pulumi.Output<{[key: string]: EtcdConfiguration}>;
    /**
     * The directory to use for etcd configuration.
     */
    public readonly configurationDirectory!: pulumi.Output<string | undefined>;
    /**
     * The directory to use for etcd data.
     */
    public readonly dataDirectory!: pulumi.Output<string | undefined>;
    /**
     * Map of node name to etcd install.
     */
    public /*out*/ readonly install!: pulumi.Output<{[key: string]: EtcdInstall}>;
    /**
     * Etcd node configuration. The key should be a name used to identify the node.
     */
    public readonly nodes!: pulumi.Output<{[key: string]: outputs.remote.EtcdNode}>;
    /**
     * Map of node name to etcd systemd service.
     */
    public /*out*/ readonly service!: pulumi.Output<{[key: string]: EtcdService}>;
    /**
     * Map of node name to etcd start commands.
     */
    public /*out*/ readonly start!: pulumi.Output<{[key: string]: StartEtcd}>;
    /**
     * The version to install.
     */
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a EtcdCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EtcdClusterArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.bundle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bundle'");
            }
            if ((!args || args.nodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["binaryDirectory"] = args ? args.binaryDirectory : undefined;
            resourceInputs["bundle"] = args ? args.bundle : undefined;
            resourceInputs["configurationDirectory"] = args ? args.configurationDirectory : undefined;
            resourceInputs["dataDirectory"] = args ? args.dataDirectory : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["configuration"] = undefined /*out*/;
            resourceInputs["install"] = undefined /*out*/;
            resourceInputs["service"] = undefined /*out*/;
            resourceInputs["start"] = undefined /*out*/;
        } else {
            resourceInputs["architecture"] = undefined /*out*/;
            resourceInputs["binaryDirectory"] = undefined /*out*/;
            resourceInputs["bundle"] = undefined /*out*/;
            resourceInputs["configuration"] = undefined /*out*/;
            resourceInputs["configurationDirectory"] = undefined /*out*/;
            resourceInputs["dataDirectory"] = undefined /*out*/;
            resourceInputs["install"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["service"] = undefined /*out*/;
            resourceInputs["start"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EtcdCluster.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a EtcdCluster resource.
 */
export interface EtcdClusterArgs {
    /**
     * TODO
     */
    architecture?: pulumi.Input<enums.remote.Architecture>;
    /**
     * TODO
     */
    binaryDirectory?: pulumi.Input<string>;
    /**
     * The TLS bundle.
     */
    bundle: pulumi.Input<inputs.tls.BundleArgs>;
    /**
     * The directory to use for etcd configuration.
     */
    configurationDirectory?: pulumi.Input<string>;
    /**
     * The directory to use for etcd data.
     */
    dataDirectory?: pulumi.Input<string>;
    /**
     * Etcd node configuration. The key should be a name used to identify the node.
     */
    nodes: {[key: string]: pulumi.Input<inputs.remote.EtcdNodeArgs>};
    /**
     * The version to install.
     */
    version?: pulumi.Input<string>;
}
