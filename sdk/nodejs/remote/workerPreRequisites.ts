// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

/**
 * Verifies that all worker node pre-requisites have been met.
 */
export class WorkerPreRequisites extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:WorkerPreRequisites';

    /**
     * Returns true if the given object is an instance of WorkerPreRequisites.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkerPreRequisites {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkerPreRequisites.__pulumiType;
    }

    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * Verifies that the conntrack binary exists.
     */
    public /*out*/ readonly conntrack!: pulumi.Output<pulumiCommand.remote.Command>;
    /**
     * Verifies that the ipset binary exists.
     */
    public /*out*/ readonly ipset!: pulumi.Output<pulumiCommand.remote.Command>;
    /**
     * Verifies that the socat binary exists.
     */
    public /*out*/ readonly socat!: pulumi.Output<pulumiCommand.remote.Command>;
    /**
     * Verifies that swap is disabled.
     */
    public /*out*/ readonly swap!: pulumi.Output<pulumiCommand.remote.Command>;
    /**
     * Trigger recheck on changes to this input.
     */
    public readonly triggers!: pulumi.Output<any[] | undefined>;

    /**
     * Create a WorkerPreRequisites resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkerPreRequisitesArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["conntrack"] = undefined /*out*/;
            resourceInputs["ipset"] = undefined /*out*/;
            resourceInputs["socat"] = undefined /*out*/;
            resourceInputs["swap"] = undefined /*out*/;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["conntrack"] = undefined /*out*/;
            resourceInputs["ipset"] = undefined /*out*/;
            resourceInputs["socat"] = undefined /*out*/;
            resourceInputs["swap"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkerPreRequisites.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a WorkerPreRequisites resource.
 */
export interface WorkerPreRequisitesArgs {
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * Trigger recheck on changes to this input.
     */
    triggers?: pulumi.Input<any[]>;
}
