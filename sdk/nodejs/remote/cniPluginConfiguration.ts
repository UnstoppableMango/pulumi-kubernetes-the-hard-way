// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

import {Mkdir} from "../tools";
import {CniBridgePluginConfiguration, CniLoopbackPluginConfiguration} from "./index";

/**
 * The CNI plugin configuration.
 */
export class CniPluginConfiguration extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:CniPluginConfiguration';

    /**
     * Returns true if the given object is an instance of CniPluginConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CniPluginConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CniPluginConfiguration.__pulumiType;
    }

    /**
     * The bridge plugin configuration.
     */
    public /*out*/ readonly bridge!: pulumi.Output<CniBridgePluginConfiguration>;
    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * The plugin configuration directory.
     */
    public readonly directory!: pulumi.Output<string>;
    /**
     * The loopback plugin configuration.
     */
    public /*out*/ readonly loopback!: pulumi.Output<CniLoopbackPluginConfiguration>;
    /**
     * The `directory` mkdir operation.
     */
    public /*out*/ readonly mkdir!: pulumi.Output<Mkdir>;
    /**
     * The subnet to use for the CNI bridge plugin configuration.
     */
    public readonly subnet!: pulumi.Output<string>;

    /**
     * Create a CniPluginConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CniPluginConfigurationArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["directory"] = args ? args.directory : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["bridge"] = undefined /*out*/;
            resourceInputs["loopback"] = undefined /*out*/;
            resourceInputs["mkdir"] = undefined /*out*/;
        } else {
            resourceInputs["bridge"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["directory"] = undefined /*out*/;
            resourceInputs["loopback"] = undefined /*out*/;
            resourceInputs["mkdir"] = undefined /*out*/;
            resourceInputs["subnet"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CniPluginConfiguration.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a CniPluginConfiguration resource.
 */
export interface CniPluginConfigurationArgs {
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * The plugin configuration directory.
     */
    directory?: pulumi.Input<string>;
    /**
     * The subnet to use for the CNI bridge plugin configuration.
     */
    subnet: pulumi.Input<string>;
}
