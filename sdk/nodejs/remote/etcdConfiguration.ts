// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

import {Chmod, Mkdir} from "../tools";
import {File} from "./index";

/**
 * Configures etcd on a remote system.
 */
export class EtcdConfiguration extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:EtcdConfiguration';

    /**
     * Returns true if the given object is an instance of EtcdConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EtcdConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EtcdConfiguration.__pulumiType;
    }

    /**
     * The remote certificate authority file.
     */
    public /*out*/ readonly caFile!: pulumi.Output<File>;
    /**
     * The PEM encoded certificate authority data.
     */
    public readonly caPem!: pulumi.Output<string>;
    /**
     * The remote certificate file.
     */
    public /*out*/ readonly certFile!: pulumi.Output<File>;
    /**
     * The PEM encoded certificate data.
     */
    public readonly certPem!: pulumi.Output<string>;
    /**
     * The configuration chmod operation.
     */
    public /*out*/ readonly configurationChmod!: pulumi.Output<Chmod | undefined>;
    /**
     * The directory to store etcd configuration.
     */
    public readonly configurationDirectory!: pulumi.Output<string>;
    /**
     * The configuration mkdir operation.
     */
    public /*out*/ readonly configurationMkdir!: pulumi.Output<Mkdir>;
    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * The directory etcd will store its data.
     */
    public readonly dataDirectory!: pulumi.Output<string>;
    /**
     * The data mkdir operation.
     */
    public /*out*/ readonly dataMkdir!: pulumi.Output<Mkdir>;
    /**
     * The path to the `etcd` binary.
     */
    public readonly etcdPath!: pulumi.Output<string>;
    /**
     * The IP used to serve client requests and communicate with etcd peers.
     */
    public readonly internalIp!: pulumi.Output<string>;
    /**
     * The remote key file.
     */
    public /*out*/ readonly keyFile!: pulumi.Output<File>;
    /**
     * The PEM encoded key data.
     */
    public readonly keyPem!: pulumi.Output<string>;
    /**
     * A bag of properties to be consumed by other resources.
     */
    public /*out*/ readonly value!: pulumi.Output<outputs.remote.EtcdConfigurationProps>;

    /**
     * Create a EtcdConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EtcdConfigurationArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.caPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caPem'");
            }
            if ((!args || args.certPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certPem'");
            }
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.etcdPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'etcdPath'");
            }
            if ((!args || args.internalIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'internalIp'");
            }
            if ((!args || args.keyPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyPem'");
            }
            resourceInputs["caPem"] = args ? args.caPem : undefined;
            resourceInputs["certPem"] = args ? args.certPem : undefined;
            resourceInputs["configurationDirectory"] = (args ? args.configurationDirectory : undefined) ?? "/etc/etcd";
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["dataDirectory"] = (args ? args.dataDirectory : undefined) ?? "/var/lib/etcd";
            resourceInputs["etcdPath"] = args ? args.etcdPath : undefined;
            resourceInputs["internalIp"] = args ? args.internalIp : undefined;
            resourceInputs["keyPem"] = args ? args.keyPem : undefined;
            resourceInputs["caFile"] = undefined /*out*/;
            resourceInputs["certFile"] = undefined /*out*/;
            resourceInputs["configurationChmod"] = undefined /*out*/;
            resourceInputs["configurationMkdir"] = undefined /*out*/;
            resourceInputs["dataMkdir"] = undefined /*out*/;
            resourceInputs["keyFile"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
        } else {
            resourceInputs["caFile"] = undefined /*out*/;
            resourceInputs["caPem"] = undefined /*out*/;
            resourceInputs["certFile"] = undefined /*out*/;
            resourceInputs["certPem"] = undefined /*out*/;
            resourceInputs["configurationChmod"] = undefined /*out*/;
            resourceInputs["configurationDirectory"] = undefined /*out*/;
            resourceInputs["configurationMkdir"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["dataDirectory"] = undefined /*out*/;
            resourceInputs["dataMkdir"] = undefined /*out*/;
            resourceInputs["etcdPath"] = undefined /*out*/;
            resourceInputs["internalIp"] = undefined /*out*/;
            resourceInputs["keyFile"] = undefined /*out*/;
            resourceInputs["keyPem"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EtcdConfiguration.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a EtcdConfiguration resource.
 */
export interface EtcdConfigurationArgs {
    /**
     * The PEM encoded certificate authority data.
     */
    caPem: pulumi.Input<string>;
    /**
     * The PEM encoded certificate data.
     */
    certPem: pulumi.Input<string>;
    /**
     * The directory to store etcd configuration.
     */
    configurationDirectory?: pulumi.Input<string>;
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * The directory etcd will store its data.
     */
    dataDirectory?: pulumi.Input<string>;
    /**
     * The path to the `etcd` binary.
     */
    etcdPath: pulumi.Input<string>;
    /**
     * The IP used to serve client requests and communicate with etcd peers.
     */
    internalIp: pulumi.Input<string>;
    /**
     * The PEM encoded key data.
     */
    keyPem: pulumi.Input<string>;
}
