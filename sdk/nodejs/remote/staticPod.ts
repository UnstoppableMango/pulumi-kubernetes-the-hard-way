// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";
import * as pulumiKubernetes from "@pulumi/kubernetes";

import {File} from "./index";

/**
 * Create a static pod manifest on a remote system.
 */
export class StaticPod extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:StaticPod';

    /**
     * Returns true if the given object is an instance of StaticPod.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StaticPod {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StaticPod.__pulumiType;
    }

    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * The remote manifest file.
     */
    public /*out*/ readonly file!: pulumi.Output<File>;
    /**
     * The name of the file on the remote system.
     */
    public readonly fileName!: pulumi.Output<string>;
    /**
     * The path to the manifest on the remote system.
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * The pod manifest.
     */
    public readonly pod!: pulumi.Output<outputs.config.PodManifest>;

    /**
     * Create a StaticPod resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StaticPodArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.pod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pod'");
            }
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["pod"] = args ? args.pod : undefined;
            resourceInputs["file"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["file"] = undefined /*out*/;
            resourceInputs["fileName"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["pod"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StaticPod.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a StaticPod resource.
 */
export interface StaticPodArgs {
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * The name of the file on the remote system.
     */
    fileName?: pulumi.Input<string>;
    /**
     * The pod manifest.
     */
    pod: pulumi.Input<inputs.config.PodManifestArgs>;
}
