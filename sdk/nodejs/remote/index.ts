// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CniPluginsInstallArgs } from "./cniPluginsInstall";
export type CniPluginsInstall = import("./cniPluginsInstall").CniPluginsInstall;
export const CniPluginsInstall: typeof import("./cniPluginsInstall").CniPluginsInstall = null as any;
utilities.lazyLoad(exports, ["CniPluginsInstall"], () => require("./cniPluginsInstall"));

export { ContainerdInstallArgs } from "./containerdInstall";
export type ContainerdInstall = import("./containerdInstall").ContainerdInstall;
export const ContainerdInstall: typeof import("./containerdInstall").ContainerdInstall = null as any;
utilities.lazyLoad(exports, ["ContainerdInstall"], () => require("./containerdInstall"));

export { CrictlInstallArgs } from "./crictlInstall";
export type CrictlInstall = import("./crictlInstall").CrictlInstall;
export const CrictlInstall: typeof import("./crictlInstall").CrictlInstall = null as any;
utilities.lazyLoad(exports, ["CrictlInstall"], () => require("./crictlInstall"));

export { DownloadArgs } from "./download";
export type Download = import("./download").Download;
export const Download: typeof import("./download").Download = null as any;
utilities.lazyLoad(exports, ["Download"], () => require("./download"));

export { EtcdClusterArgs } from "./etcdCluster";
export type EtcdCluster = import("./etcdCluster").EtcdCluster;
export const EtcdCluster: typeof import("./etcdCluster").EtcdCluster = null as any;
utilities.lazyLoad(exports, ["EtcdCluster"], () => require("./etcdCluster"));

export { EtcdConfigurationArgs } from "./etcdConfiguration";
export type EtcdConfiguration = import("./etcdConfiguration").EtcdConfiguration;
export const EtcdConfiguration: typeof import("./etcdConfiguration").EtcdConfiguration = null as any;
utilities.lazyLoad(exports, ["EtcdConfiguration"], () => require("./etcdConfiguration"));

export { EtcdInstallArgs } from "./etcdInstall";
export type EtcdInstall = import("./etcdInstall").EtcdInstall;
export const EtcdInstall: typeof import("./etcdInstall").EtcdInstall = null as any;
utilities.lazyLoad(exports, ["EtcdInstall"], () => require("./etcdInstall"));

export { EtcdServiceArgs } from "./etcdService";
export type EtcdService = import("./etcdService").EtcdService;
export const EtcdService: typeof import("./etcdService").EtcdService = null as any;
utilities.lazyLoad(exports, ["EtcdService"], () => require("./etcdService"));

export { FileArgs } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { KubeApiServerInstallArgs } from "./kubeApiServerInstall";
export type KubeApiServerInstall = import("./kubeApiServerInstall").KubeApiServerInstall;
export const KubeApiServerInstall: typeof import("./kubeApiServerInstall").KubeApiServerInstall = null as any;
utilities.lazyLoad(exports, ["KubeApiServerInstall"], () => require("./kubeApiServerInstall"));

export { KubeControllerManagerInstallArgs } from "./kubeControllerManagerInstall";
export type KubeControllerManagerInstall = import("./kubeControllerManagerInstall").KubeControllerManagerInstall;
export const KubeControllerManagerInstall: typeof import("./kubeControllerManagerInstall").KubeControllerManagerInstall = null as any;
utilities.lazyLoad(exports, ["KubeControllerManagerInstall"], () => require("./kubeControllerManagerInstall"));

export { KubeProxyInstallArgs } from "./kubeProxyInstall";
export type KubeProxyInstall = import("./kubeProxyInstall").KubeProxyInstall;
export const KubeProxyInstall: typeof import("./kubeProxyInstall").KubeProxyInstall = null as any;
utilities.lazyLoad(exports, ["KubeProxyInstall"], () => require("./kubeProxyInstall"));

export { KubeProxyServiceArgs } from "./kubeProxyService";
export type KubeProxyService = import("./kubeProxyService").KubeProxyService;
export const KubeProxyService: typeof import("./kubeProxyService").KubeProxyService = null as any;
utilities.lazyLoad(exports, ["KubeProxyService"], () => require("./kubeProxyService"));

export { KubeSchedulerInstallArgs } from "./kubeSchedulerInstall";
export type KubeSchedulerInstall = import("./kubeSchedulerInstall").KubeSchedulerInstall;
export const KubeSchedulerInstall: typeof import("./kubeSchedulerInstall").KubeSchedulerInstall = null as any;
utilities.lazyLoad(exports, ["KubeSchedulerInstall"], () => require("./kubeSchedulerInstall"));

export { KubectlInstallArgs } from "./kubectlInstall";
export type KubectlInstall = import("./kubectlInstall").KubectlInstall;
export const KubectlInstall: typeof import("./kubectlInstall").KubectlInstall = null as any;
utilities.lazyLoad(exports, ["KubectlInstall"], () => require("./kubectlInstall"));

export { KubeletInstallArgs } from "./kubeletInstall";
export type KubeletInstall = import("./kubeletInstall").KubeletInstall;
export const KubeletInstall: typeof import("./kubeletInstall").KubeletInstall = null as any;
utilities.lazyLoad(exports, ["KubeletInstall"], () => require("./kubeletInstall"));

export { KubeletServiceArgs } from "./kubeletService";
export type KubeletService = import("./kubeletService").KubeletService;
export const KubeletService: typeof import("./kubeletService").KubeletService = null as any;
utilities.lazyLoad(exports, ["KubeletService"], () => require("./kubeletService"));

export { ProvisionEtcdArgs } from "./provisionEtcd";
export type ProvisionEtcd = import("./provisionEtcd").ProvisionEtcd;
export const ProvisionEtcd: typeof import("./provisionEtcd").ProvisionEtcd = null as any;
utilities.lazyLoad(exports, ["ProvisionEtcd"], () => require("./provisionEtcd"));

export { RuncInstallArgs } from "./runcInstall";
export type RuncInstall = import("./runcInstall").RuncInstall;
export const RuncInstall: typeof import("./runcInstall").RuncInstall = null as any;
utilities.lazyLoad(exports, ["RuncInstall"], () => require("./runcInstall"));

export { StartContainerdArgs } from "./startContainerd";
export type StartContainerd = import("./startContainerd").StartContainerd;
export const StartContainerd: typeof import("./startContainerd").StartContainerd = null as any;
utilities.lazyLoad(exports, ["StartContainerd"], () => require("./startContainerd"));

export { StartEtcdArgs } from "./startEtcd";
export type StartEtcd = import("./startEtcd").StartEtcd;
export const StartEtcd: typeof import("./startEtcd").StartEtcd = null as any;
utilities.lazyLoad(exports, ["StartEtcd"], () => require("./startEtcd"));

export { StartKubeProxyArgs } from "./startKubeProxy";
export type StartKubeProxy = import("./startKubeProxy").StartKubeProxy;
export const StartKubeProxy: typeof import("./startKubeProxy").StartKubeProxy = null as any;
utilities.lazyLoad(exports, ["StartKubeProxy"], () => require("./startKubeProxy"));

export { StartKubeletArgs } from "./startKubelet";
export type StartKubelet = import("./startKubelet").StartKubelet;
export const StartKubelet: typeof import("./startKubelet").StartKubelet = null as any;
utilities.lazyLoad(exports, ["StartKubelet"], () => require("./startKubelet"));

export { StaticPodArgs } from "./staticPod";
export type StaticPod = import("./staticPod").StaticPod;
export const StaticPod: typeof import("./staticPod").StaticPod = null as any;
utilities.lazyLoad(exports, ["StaticPod"], () => require("./staticPod"));

export { SystemdServiceArgs } from "./systemdService";
export type SystemdService = import("./systemdService").SystemdService;
export const SystemdService: typeof import("./systemdService").SystemdService = null as any;
utilities.lazyLoad(exports, ["SystemdService"], () => require("./systemdService"));


// Export enums:
export * from "../types/enums/remote";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes-the-hard-way:remote:CniPluginsInstall":
                return new CniPluginsInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:ContainerdInstall":
                return new ContainerdInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:CrictlInstall":
                return new CrictlInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:Download":
                return new Download(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:EtcdCluster":
                return new EtcdCluster(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:EtcdConfiguration":
                return new EtcdConfiguration(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:EtcdInstall":
                return new EtcdInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:EtcdService":
                return new EtcdService(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:File":
                return new File(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:KubeApiServerInstall":
                return new KubeApiServerInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:KubeControllerManagerInstall":
                return new KubeControllerManagerInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:KubeProxyInstall":
                return new KubeProxyInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:KubeProxyService":
                return new KubeProxyService(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:KubeSchedulerInstall":
                return new KubeSchedulerInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:KubectlInstall":
                return new KubectlInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:KubeletInstall":
                return new KubeletInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:KubeletService":
                return new KubeletService(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:ProvisionEtcd":
                return new ProvisionEtcd(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:RuncInstall":
                return new RuncInstall(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:StartContainerd":
                return new StartContainerd(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:StartEtcd":
                return new StartEtcd(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:StartKubeProxy":
                return new StartKubeProxy(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:StartKubelet":
                return new StartKubelet(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:StaticPod":
                return new StaticPod(name, <any>undefined, { urn })
            case "kubernetes-the-hard-way:remote:SystemdService":
                return new SystemdService(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes-the-hard-way", "remote", _module)
