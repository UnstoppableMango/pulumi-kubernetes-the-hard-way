// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

import {Systemctl} from "../tools";
import {File} from "./index";

export class SystemdService extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:SystemdService';

    /**
     * Returns true if the given object is an instance of SystemdService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemdService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemdService.__pulumiType;
    }

    /**
     * The connection details.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * The location to create the service file.
     */
    public readonly directory!: pulumi.Output<string>;
    /**
     * Represents the service file on the remote machine.
     */
    public /*out*/ readonly file!: pulumi.Output<File>;
    /**
     * Describes the [Install] section of a systemd service file.
     */
    public readonly install!: pulumi.Output<outputs.remote.SystemdInstallSection | undefined>;
    /**
     * Describes the [Service] section of a systemd service file.
     */
    public readonly service!: pulumi.Output<outputs.remote.SystemdServiceSection>;
    /**
     * Describes the [Unit] section of a systemd service file.
     */
    public readonly unit!: pulumi.Output<outputs.remote.SystemdUnitSection | undefined>;

    /**
     * Create a SystemdService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemdServiceArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["directory"] = (args ? args.directory : undefined) ?? "/etc/systemd/system";
            resourceInputs["install"] = args ? args.install : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["file"] = undefined /*out*/;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["directory"] = undefined /*out*/;
            resourceInputs["file"] = undefined /*out*/;
            resourceInputs["install"] = undefined /*out*/;
            resourceInputs["service"] = undefined /*out*/;
            resourceInputs["unit"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemdService.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }

    disable(): pulumi.Output<Systemctl | undefined> {
        const result: pulumi.Output<SystemdService.DisableResult> = pulumi.runtime.call("kubernetes-the-hard-way:remote:SystemdService/disable", {
            "__self__": this,
        }, this);
        return result.result;
    }

    enable(): pulumi.Output<Systemctl | undefined> {
        const result: pulumi.Output<SystemdService.EnableResult> = pulumi.runtime.call("kubernetes-the-hard-way:remote:SystemdService/enable", {
            "__self__": this,
        }, this);
        return result.result;
    }

    start(): pulumi.Output<Systemctl | undefined> {
        const result: pulumi.Output<SystemdService.StartResult> = pulumi.runtime.call("kubernetes-the-hard-way:remote:SystemdService/start", {
            "__self__": this,
        }, this);
        return result.result;
    }
}

/**
 * The set of arguments for constructing a SystemdService resource.
 */
export interface SystemdServiceArgs {
    /**
     * The connection details.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * The location to create the service file.
     */
    directory?: pulumi.Input<string>;
    /**
     * Describes the [Install] section of a systemd service file.
     */
    install?: pulumi.Input<inputs.remote.SystemdInstallSectionArgs>;
    /**
     * Describes the [Service] section of a systemd service file.
     */
    service: pulumi.Input<inputs.remote.SystemdServiceSectionArgs>;
    /**
     * Describes the [Unit] section of a systemd service file.
     */
    unit?: pulumi.Input<inputs.remote.SystemdUnitSectionArgs>;
}

export namespace SystemdService {
    /**
     * The results of the SystemdService.disable method.
     */
    export interface DisableResult {
        readonly result?: Systemctl;
    }

    /**
     * The results of the SystemdService.enable method.
     */
    export interface EnableResult {
        readonly result?: Systemctl;
    }

    /**
     * The results of the SystemdService.start method.
     */
    export interface StartResult {
        readonly result?: Systemctl;
    }

}
