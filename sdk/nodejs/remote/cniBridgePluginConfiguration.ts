// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

import {File} from "./index";

/**
 * The CNI bridge plugin configuration.
 */
export class CniBridgePluginConfiguration extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:CniBridgePluginConfiguration';

    /**
     * Returns true if the given object is an instance of CniBridgePluginConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CniBridgePluginConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CniBridgePluginConfiguration.__pulumiType;
    }

    /**
     * Bridge name.
     */
    public readonly bridge!: pulumi.Output<string>;
    /**
     * CNI version.
     */
    public readonly cniVersion!: pulumi.Output<string>;
    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * The file on the remote system.
     */
    public /*out*/ readonly file!: pulumi.Output<File | undefined>;
    /**
     * IP masq.
     */
    public readonly ipMasq!: pulumi.Output<boolean>;
    /**
     * IPAM
     */
    public readonly ipam!: pulumi.Output<outputs.remote.CniBridgeIpam>;
    /**
     * Is gateway.
     */
    public readonly isGateway!: pulumi.Output<boolean>;
    /**
     * CNI plugin name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Path to put the configuration file on the remote system
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The subnet to use.
     */
    public readonly subnet!: pulumi.Output<string | undefined>;
    /**
     * CNI plugin type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CniBridgePluginConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CniBridgePluginConfigurationArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            resourceInputs["bridge"] = args ? args.bridge : undefined;
            resourceInputs["cniVersion"] = args ? args.cniVersion : undefined;
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["ipMasq"] = args ? args.ipMasq : undefined;
            resourceInputs["ipam"] = args ? args.ipam : undefined;
            resourceInputs["isGateway"] = args ? args.isGateway : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["file"] = undefined /*out*/;
        } else {
            resourceInputs["bridge"] = undefined /*out*/;
            resourceInputs["cniVersion"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["file"] = undefined /*out*/;
            resourceInputs["ipMasq"] = undefined /*out*/;
            resourceInputs["ipam"] = undefined /*out*/;
            resourceInputs["isGateway"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["subnet"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CniBridgePluginConfiguration.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a CniBridgePluginConfiguration resource.
 */
export interface CniBridgePluginConfigurationArgs {
    /**
     * Bridge name.
     */
    bridge?: pulumi.Input<string>;
    /**
     * CNI version.
     */
    cniVersion?: pulumi.Input<string>;
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * IP masq.
     */
    ipMasq?: pulumi.Input<boolean>;
    /**
     * IPAM
     */
    ipam?: pulumi.Input<inputs.remote.CniBridgeIpamArgs>;
    /**
     * Is gateway.
     */
    isGateway?: pulumi.Input<boolean>;
    /**
     * CNI plugin name.
     */
    name?: pulumi.Input<string>;
    /**
     * Path to put the configuration file on the remote system
     */
    path?: pulumi.Input<string>;
    /**
     * The subnet to use.
     */
    subnet?: pulumi.Input<string>;
    /**
     * CNI plugin type.
     */
    type?: pulumi.Input<string>;
}
