// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import * as pulumiCommand from "@pulumi/command";

import {Mkdir} from "../tools";

/**
 * Configures Kubernetes API Server on a remote system.
 */
export class KubeApiServerConfiguration extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubernetes-the-hard-way:remote:KubeApiServerConfiguration';

    /**
     * Returns true if the given object is an instance of KubeApiServerConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubeApiServerConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubeApiServerConfiguration.__pulumiType;
    }

    /**
     * The PEM encoded certificate authority key.
     */
    public readonly caKey!: pulumi.Output<string>;
    /**
     * The PEM encoded certificate authority data.
     */
    public readonly caPem!: pulumi.Output<string>;
    /**
     * The PEM encoded Kube API Server certificate data.
     */
    public readonly certPem!: pulumi.Output<string>;
    /**
     * The directory to store Kubernetes Control Plane configuration.
     */
    public readonly configurationDirectory!: pulumi.Output<string | undefined>;
    /**
     * Configuration mkdir operation
     */
    public /*out*/ readonly configurationMkdir!: pulumi.Output<Mkdir | undefined>;
    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<pulumiCommand.types.output.remote.Connection>;
    /**
     * The YAML encryption configuration manifest.
     */
    public readonly encryptionConfig!: pulumi.Output<string>;
    /**
     * The PEM encoded Kube API Server certificate key.
     */
    public readonly keyPem!: pulumi.Output<string>;
    /**
     * The path to the 'kubectl' binary.
     */
    public readonly kubectlPath!: pulumi.Output<string | undefined>;
    /**
     * The path to the 'kube-apiserver' binary.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * The PEM encoded Service Accounts certificate key.
     */
    public readonly serviceAccountsKey!: pulumi.Output<string>;
    /**
     * The PEM encoded Service Accounts certificate data.
     */
    public readonly serviceAccountsPem!: pulumi.Output<string>;

    /**
     * Create a KubeApiServerConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubeApiServerConfigurationArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.caKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caKey'");
            }
            if ((!args || args.caPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caPem'");
            }
            if ((!args || args.certPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certPem'");
            }
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.encryptionConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionConfig'");
            }
            if ((!args || args.keyPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyPem'");
            }
            if ((!args || args.serviceAccountsKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountsKey'");
            }
            if ((!args || args.serviceAccountsPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountsPem'");
            }
            resourceInputs["caKey"] = args ? args.caKey : undefined;
            resourceInputs["caPem"] = args ? args.caPem : undefined;
            resourceInputs["certPem"] = args ? args.certPem : undefined;
            resourceInputs["configurationDirectory"] = (args ? args.configurationDirectory : undefined) ?? "/etc/kubernetes/config";
            resourceInputs["connection"] = args ? (args.connection ? pulumi.output(args.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["encryptionConfig"] = args ? args.encryptionConfig : undefined;
            resourceInputs["keyPem"] = args ? args.keyPem : undefined;
            resourceInputs["kubectlPath"] = args ? args.kubectlPath : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["serviceAccountsKey"] = args ? args.serviceAccountsKey : undefined;
            resourceInputs["serviceAccountsPem"] = args ? args.serviceAccountsPem : undefined;
            resourceInputs["configurationMkdir"] = undefined /*out*/;
        } else {
            resourceInputs["caKey"] = undefined /*out*/;
            resourceInputs["caPem"] = undefined /*out*/;
            resourceInputs["certPem"] = undefined /*out*/;
            resourceInputs["configurationDirectory"] = undefined /*out*/;
            resourceInputs["configurationMkdir"] = undefined /*out*/;
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["encryptionConfig"] = undefined /*out*/;
            resourceInputs["keyPem"] = undefined /*out*/;
            resourceInputs["kubectlPath"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["serviceAccountsKey"] = undefined /*out*/;
            resourceInputs["serviceAccountsPem"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubeApiServerConfiguration.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a KubeApiServerConfiguration resource.
 */
export interface KubeApiServerConfigurationArgs {
    /**
     * The PEM encoded certificate authority key.
     */
    caKey: pulumi.Input<string>;
    /**
     * The PEM encoded certificate authority data.
     */
    caPem: pulumi.Input<string>;
    /**
     * The PEM encoded Kube API Server certificate data.
     */
    certPem: pulumi.Input<string>;
    /**
     * The directory to store Kubernetes Control Plane configuration.
     */
    configurationDirectory?: pulumi.Input<string>;
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
    /**
     * The YAML encryption configuration manifest.
     */
    encryptionConfig: pulumi.Input<string>;
    /**
     * The PEM encoded Kube API Server certificate key.
     */
    keyPem: pulumi.Input<string>;
    /**
     * The path to the 'kubectl' binary.
     */
    kubectlPath?: pulumi.Input<string>;
    /**
     * The path to the 'kube-apiserver' binary.
     */
    path?: pulumi.Input<string>;
    /**
     * The PEM encoded Service Accounts certificate key.
     */
    serviceAccountsKey: pulumi.Input<string>;
    /**
     * The PEM encoded Service Accounts certificate data.
     */
    serviceAccountsPem: pulumi.Input<string>;
}
