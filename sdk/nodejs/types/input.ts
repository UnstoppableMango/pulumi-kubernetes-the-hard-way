// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

import * as pulumiCommand from "@pulumi/command";
import * as pulumiKubernetes from "@pulumi/kubernetes";
import * as pulumiTls from "@pulumi/tls";
import * as utilities from "../utilities";

export namespace config {
    /**
     * The CNI plugins IPAM
     */
    export interface CniBridgeIpam {
        /**
         * IPAM ranges.
         */
        ranges?: {[key: string]: string}[];
        /**
         * IPAM routes.
         */
        routes?: {[key: string]: string}[];
        /**
         * CNI bridge IPAM type
         */
        type?: string;
    }

    /**
     * The CNI plugins IPAM
     */
    export interface CniBridgeIpamArgs {
        /**
         * IPAM ranges.
         */
        ranges?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
        /**
         * IPAM routes.
         */
        routes?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
        /**
         * CNI bridge IPAM type
         */
        type?: pulumi.Input<string>;
    }

    /**
     * containerd cri plugin configuration.
     */
    export interface ContainerdCriPluginConfiguration {
        /**
         * cni configuration.
         */
        cni: inputs.config.ContainerdCriPluginConfigurationCni;
        /**
         * containerd configuration.
         */
        containerd: inputs.config.ContainerdCriPluginConfigurationContainerd;
    }

    /**
     * containerd cri plugin configuration.
     */
    export interface ContainerdCriPluginConfigurationArgs {
        /**
         * cni configuration.
         */
        cni: inputs.config.ContainerdCriPluginConfigurationCniArgs;
        /**
         * containerd configuration.
         */
        containerd: inputs.config.ContainerdCriPluginConfigurationContainerdArgs;
    }

    /**
     * containerd cri plugin configuration.
     */
    export interface ContainerdCriPluginConfigurationCni {
        /**
         * bin_dir
         */
        binDir?: string;
        /**
         * conf_dir
         */
        confDir?: string;
    }

    /**
     * containerd cri plugin configuration.
     */
    export interface ContainerdCriPluginConfigurationCniArgs {
        /**
         * bin_dir
         */
        binDir?: pulumi.Input<string>;
        /**
         * conf_dir
         */
        confDir?: pulumi.Input<string>;
    }

    /**
     * containerd cri plugin configuration.
     */
    export interface ContainerdCriPluginConfigurationContainerd {
        /**
         * default_runtime_name
         */
        defaultRuntimeName?: string;
        /**
         * The containerd runtime configuration.
         */
        runtimes?: inputs.config.ContainerdCriPluginConfigurationContainerdRunc;
        /**
         * snapshotter
         */
        snapshotter?: string;
    }

    /**
     * containerd cri plugin configuration.
     */
    export interface ContainerdCriPluginConfigurationContainerdArgs {
        /**
         * default_runtime_name
         */
        defaultRuntimeName?: pulumi.Input<string>;
        /**
         * The containerd runtime configuration.
         */
        runtimes?: inputs.config.ContainerdCriPluginConfigurationContainerdRuncArgs;
        /**
         * snapshotter
         */
        snapshotter?: pulumi.Input<string>;
    }

    /**
     * containerd cri runc plugin configuration.
     */
    export interface ContainerdCriPluginConfigurationContainerdRunc {
        /**
         * runc options.
         */
        options: inputs.config.ContainerdCriPluginConfigurationContainerdRuncOptions;
        /**
         * runtime_type
         */
        runtimeType?: string;
    }

    /**
     * containerd cri runc plugin configuration.
     */
    export interface ContainerdCriPluginConfigurationContainerdRuncArgs {
        /**
         * runc options.
         */
        options: inputs.config.ContainerdCriPluginConfigurationContainerdRuncOptionsArgs;
        /**
         * runtime_type
         */
        runtimeType?: pulumi.Input<string>;
    }

    /**
     * containerd cri runc plugin configuration.
     */
    export interface ContainerdCriPluginConfigurationContainerdRuncOptions {
        /**
         * SystemdCgroup
         */
        systemdCgroup?: boolean;
    }

    /**
     * containerd cri runc plugin configuration.
     */
    export interface ContainerdCriPluginConfigurationContainerdRuncOptionsArgs {
        /**
         * SystemdCgroup
         */
        systemdCgroup?: pulumi.Input<boolean>;
    }

    export interface KubeconfigAdminOptions {
        /**
         * TODO
         */
        publicIp?: string;
        type: "admin";
    }

    export interface KubeconfigAdminOptionsArgs {
        /**
         * TODO
         */
        publicIp?: pulumi.Input<string>;
        type: "admin";
    }

    export interface KubeconfigKubeControllerManagerOptions {
        /**
         * TODO
         */
        publicIp?: string;
        type: "kube-controller-manager";
    }

    export interface KubeconfigKubeControllerManagerOptionsArgs {
        /**
         * TODO
         */
        publicIp?: pulumi.Input<string>;
        type: "kube-controller-manager";
    }

    export interface KubeconfigKubeProxyOptions {
        /**
         * TODO
         */
        publicIp?: string;
        type: "kube-proxy";
    }

    export interface KubeconfigKubeProxyOptionsArgs {
        /**
         * TODO
         */
        publicIp?: pulumi.Input<string>;
        type: "kube-proxy";
    }

    export interface KubeconfigKubeSchedulerOptions {
        /**
         * TODO
         */
        publicIp?: string;
        type: "kube-scheduler";
    }

    export interface KubeconfigKubeSchedulerOptionsArgs {
        /**
         * TODO
         */
        publicIp?: pulumi.Input<string>;
        type: "kube-scheduler";
    }

    export interface KubeconfigWorkerOptions {
        /**
         * TODO
         */
        name: string;
        /**
         * TODO
         */
        publicIp: string;
        type?: "worker";
    }

    export interface KubeconfigWorkerOptionsArgs {
        /**
         * TODO
         */
        name: pulumi.Input<string>;
        /**
         * TODO
         */
        publicIp: pulumi.Input<string>;
        type?: "worker";
    }

    /**
     * Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
     *
     * This resource waits until its status is ready before registering success
     * for create/update, and populating output properties from the current state of the resource.
     * The following conditions are used to determine whether the resource creation has
     * succeeded or failed:
     *
     * 1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
     * 2. The Pod is initialized ("Initialized" '.status.condition' is true).
     * 3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
     *    set to "Running".
     * Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
     *
     * If the Pod has not reached a Ready state after 10 minutes, it will
     * time out and mark the resource update as Failed. You can override the default timeout value
     * by setting the 'customTimeouts' option on the resource.
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Create a Pod with auto-naming
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as kubernetes from "@pulumi/kubernetes";
     *
     * const pod = new kubernetes.core.v1.Pod("pod", {spec: {
     *     containers: [{
     *         image: "nginx:1.14.2",
     *         name: "nginx",
     *         ports: [{
     *             containerPort: 80,
     *         }],
     *     }],
     * }});
     * ```
     * ```python
     * import pulumi
     * import pulumi_kubernetes as kubernetes
     *
     * pod = kubernetes.core.v1.Pod("pod", spec=kubernetes.core.v1.PodSpecArgs(
     *     containers=[kubernetes.core.v1.ContainerArgs(
     *         image="nginx:1.14.2",
     *         name="nginx",
     *         ports=[kubernetes.core.v1.ContainerPortArgs(
     *             container_port=80,
     *         )],
     *     )],
     * ))
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Kubernetes = Pulumi.Kubernetes;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var pod = new Kubernetes.Core.V1.Pod("pod", new()
     *     {
     *         Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs
     *         {
     *             Containers = new[]
     *             {
     *                 new Kubernetes.Types.Inputs.Core.V1.ContainerArgs
     *                 {
     *                     Image = "nginx:1.14.2",
     *                     Name = "nginx",
     *                     Ports = new[]
     *                     {
     *                         new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs
     *                         {
     *                             ContainerPortValue = 80,
     *                         },
     *                     },
     *                 },
     *             },
     *         },
     *     });
     *
     * });
     *
     * ```
     * ```go
     * package main
     *
     * import (
     * 	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
     * 			Spec: &corev1.PodSpecArgs{
     * 				Containers: corev1.ContainerArray{
     * 					&corev1.ContainerArgs{
     * 						Image: pulumi.String("nginx:1.14.2"),
     * 						Name:  pulumi.String("nginx"),
     * 						Ports: corev1.ContainerPortArray{
     * 							&corev1.ContainerPortArgs{
     * 								ContainerPort: pulumi.Int(80),
     * 							},
     * 						},
     * 					},
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.kubernetes.core_v1.Pod;
     * import com.pulumi.kubernetes.core_v1.PodArgs;
     * import com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var pod = new Pod("pod", PodArgs.builder()        
     *             .spec(PodSpecArgs.builder()
     *                 .containers(ContainerArgs.builder()
     *                     .image("nginx:1.14.2")
     *                     .name("nginx")
     *                     .ports(ContainerPortArgs.builder()
     *                         .containerPort(80)
     *                         .build())
     *                     .build())
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * description: Create a Pod with auto-naming
     * name: yaml-example
     * resources:
     *     pod:
     *         properties:
     *             spec:
     *                 containers:
     *                     - image: nginx:1.14.2
     *                       name: nginx
     *                       ports:
     *                         - containerPort: 80
     *         type: kubernetes:core/v1:Pod
     * runtime: yaml
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Create a Pod with a user-specified name
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as kubernetes from "@pulumi/kubernetes";
     *
     * const pod = new kubernetes.core.v1.Pod("pod", {
     *     metadata: {
     *         name: "nginx",
     *     },
     *     spec: {
     *         containers: [{
     *             image: "nginx:1.14.2",
     *             name: "nginx",
     *             ports: [{
     *                 containerPort: 80,
     *             }],
     *         }],
     *     },
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_kubernetes as kubernetes
     *
     * pod = kubernetes.core.v1.Pod("pod",
     *     metadata=kubernetes.meta.v1.ObjectMetaArgs(
     *         name="nginx",
     *     ),
     *     spec=kubernetes.core.v1.PodSpecArgs(
     *         containers=[kubernetes.core.v1.ContainerArgs(
     *             image="nginx:1.14.2",
     *             name="nginx",
     *             ports=[kubernetes.core.v1.ContainerPortArgs(
     *                 container_port=80,
     *             )],
     *         )],
     *     ))
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Kubernetes = Pulumi.Kubernetes;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var pod = new Kubernetes.Core.V1.Pod("pod", new()
     *     {
     *         Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs
     *         {
     *             Name = "nginx",
     *         },
     *         Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs
     *         {
     *             Containers = new[]
     *             {
     *                 new Kubernetes.Types.Inputs.Core.V1.ContainerArgs
     *                 {
     *                     Image = "nginx:1.14.2",
     *                     Name = "nginx",
     *                     Ports = new[]
     *                     {
     *                         new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs
     *                         {
     *                             ContainerPortValue = 80,
     *                         },
     *                     },
     *                 },
     *             },
     *         },
     *     });
     *
     * });
     *
     * ```
     * ```go
     * package main
     *
     * import (
     * 	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
     * 	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
     * 			Metadata: &metav1.ObjectMetaArgs{
     * 				Name: pulumi.String("nginx"),
     * 			},
     * 			Spec: &corev1.PodSpecArgs{
     * 				Containers: corev1.ContainerArray{
     * 					&corev1.ContainerArgs{
     * 						Image: pulumi.String("nginx:1.14.2"),
     * 						Name:  pulumi.String("nginx"),
     * 						Ports: corev1.ContainerPortArray{
     * 							&corev1.ContainerPortArgs{
     * 								ContainerPort: pulumi.Int(80),
     * 							},
     * 						},
     * 					},
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.kubernetes.core_v1.Pod;
     * import com.pulumi.kubernetes.core_v1.PodArgs;
     * import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
     * import com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var pod = new Pod("pod", PodArgs.builder()        
     *             .metadata(ObjectMetaArgs.builder()
     *                 .name("nginx")
     *                 .build())
     *             .spec(PodSpecArgs.builder()
     *                 .containers(ContainerArgs.builder()
     *                     .image("nginx:1.14.2")
     *                     .name("nginx")
     *                     .ports(ContainerPortArgs.builder()
     *                         .containerPort(80)
     *                         .build())
     *                     .build())
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * description: Create a Pod with a user-specified name
     * name: yaml-example
     * resources:
     *     pod:
     *         properties:
     *             metadata:
     *                 name: nginx
     *             spec:
     *                 containers:
     *                     - image: nginx:1.14.2
     *                       name: nginx
     *                       ports:
     *                         - containerPort: 80
     *         type: kubernetes:core/v1:Pod
     * runtime: yaml
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     */
    export interface PodManifestArgs {
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
         */
        apiVersion?: pulumi.Input<"v1">;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
         */
        kind?: pulumi.Input<"Pod">;
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        metadata?: pulumi.Input<pulumiKubernetes.types.input.meta.v1.ObjectMeta>;
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        spec?: pulumi.Input<pulumiKubernetes.types.input.core.v1.PodSpec>;
        /**
         * Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        status?: pulumi.Input<pulumiKubernetes.types.input.core.v1.PodStatus>;
    }

}

export namespace remote {
    /**
     * Props for resources that consume etcd configuration.
     */
    export interface EtcdConfigurationPropsArgs {
        /**
         * Path to the certificate authority file on the remote system.
         */
        caFilePath: pulumi.Input<string>;
        /**
         * Path to the certificate file on the remote system.
         */
        certFilePath: pulumi.Input<string>;
        /**
         * Etcd's data directory.
         */
        dataDirectory: pulumi.Input<string>;
        /**
         * Path to the etcd binary.
         */
        etcdPath: pulumi.Input<string>;
        /**
         * Internal IP of the etcd node.
         */
        internalIp: pulumi.Input<string>;
        /**
         * Path to the private key file on the remote system.
         */
        keyFilePath: pulumi.Input<string>;
        /**
         * Name of the etcd node.
         */
        name: pulumi.Input<string>;
    }

    /**
     * Etcd node description.
     */
    export interface EtcdNodeArgs {
        /**
         * The CPU architecture of the node.
         */
        architecture?: pulumi.Input<enums.remote.Architecture>;
        /**
         * The parameters with which to connect to the remote host.
         */
        connection: pulumi.Input<pulumiCommand.types.input.remote.ConnectionArgs>;
        /**
         * The internal IP of the node.
         */
        internalIp: pulumi.Input<string>;
    }
    /**
     * etcdNodeArgsProvideDefaults sets the appropriate defaults for EtcdNodeArgs
     */
    export function etcdNodeArgsProvideDefaults(val: EtcdNodeArgs): EtcdNodeArgs {
        return {
            ...val,
            connection: pulumi.output(val.connection).apply(pulumiCommand.types.input.remote.connectionArgsProvideDefaults),
        };
    }

    /**
     * Props for resources that consume kube-proxy configuration.
     */
    export interface KubeProxyConfigurationPropsArgs {
        /**
         * Path to the kube proxy configuration file
         */
        configurationFilePath: pulumi.Input<string>;
        /**
         * Path to the kube-proxy binary.
         */
        kubeProxyPath: pulumi.Input<string>;
    }

    /**
     * Props for resources that consume kubelet configuration.
     */
    export interface KubeletConfigurationPropsArgs {
        /**
         * Path to the kubelet configuration.
         */
        configurationFilePath: pulumi.Input<string>;
        /**
         * Path to the kubeconfig the kubelet will use
         */
        kubeconfigPath: pulumi.Input<string>;
        /**
         * Path to the kubelet binary.
         */
        kubeletPath: pulumi.Input<string>;
        /**
         * Whether to register the node. Defaults to `true`.
         */
        registerNode: pulumi.Input<boolean>;
        /**
         * Verbosity. Defaults to `2`.
         */
        v: pulumi.Input<number>;
    }

    /**
     * https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BInstall%5D%20Section%20Options
     */
    export interface SystemdInstallSectionArgs {
        /**
         * A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable.
         */
        wantedBy?: pulumi.Input<pulumi.Input<string>[]>;
    }

    /**
     * https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#
     */
    export interface SystemdServiceSectionArgs {
        /**
         * Turns on delegation of further resource control partitioning to processes of the unit.
         */
        delegate?: pulumi.Input<enums.remote.SystemdDelegate>;
        /**
         * Commands that are executed when this service is started.
         */
        execStart?: pulumi.Input<string>;
        /**
         * Additional commands that are executed before the command in ExecStart=.
         */
        execStartPre?: pulumi.Input<string>;
        /**
         * Specifies when the manager should consider the service to be finished.
         */
        exitType?: pulumi.Input<enums.remote.SystemdServiceExitType>;
        /**
         * Specifies how processes of this unit shall be killed.
         */
        killMode?: pulumi.Input<enums.remote.SystemdKillMode>;
        /**
         * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#Process%20Properties
         */
        limitCore?: pulumi.Input<string>;
        /**
         * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#Process%20Properties
         */
        limitNProc?: pulumi.Input<string>;
        /**
         * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#Process%20Properties
         */
        limitNoFile?: pulumi.Input<number>;
        /**
         * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#OOMScoreAdjust=
         */
        oomScoreAdjust?: pulumi.Input<number>;
        /**
         * Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
         */
        restart?: pulumi.Input<enums.remote.SystemdServiceRestart>;
        /**
         * Configures the time to sleep before restarting a service (as configured with Restart=).
         */
        restartSec?: pulumi.Input<string>;
        /**
         * Configures the mechanism via which the service notifies the manager that the service start-up has finished.
         */
        type?: pulumi.Input<enums.remote.SystemdServiceType>;
    }

    /**
     * https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#
     */
    export interface SystemdUnitSectionArgs {
        /**
         * Those two settings configure ordering dependencies between units.
         */
        after?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Those two settings configure ordering dependencies between units.
         */
        before?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Configures requirement dependencies, very similar in style to Requires=.
         */
        bindsTo?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * A short human readable title of the unit.
         */
        description?: pulumi.Input<string>;
        /**
         * A space-separated list of URIs referencing documentation for this unit or its configuration.
         */
        documentation?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Similar to Wants=, but declares a stronger requirement dependency.
         */
        requires?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.
         */
        requisite?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Configures (weak) requirement dependencies on other units.
         */
        wants?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace tls {
    /**
     * A CA + Cert + Key bundle
     */
    export interface BundleArgs {
        /**
         * The PEM encoded certificate authority data.
         */
        caPem: pulumi.Input<string>;
        /**
         * The PEM encoded certificate data.
         */
        certPem: pulumi.Input<string>;
        /**
         * The PEM encoded private key data
         */
        keyPem: pulumi.Input<string>;
    }

    /**
     * TODO
     */
    export interface ClusterPkiNodeArgs {
        /**
         * The IP address of the node
         */
        ip: pulumi.Input<string>;
        /**
         * The role a node should be configured for
         */
        role: pulumi.Input<enums.tls.NodeRole>;
    }

}

export namespace tools {
    /**
     * Abstraction over the `chmod` utility on a remote system.
     */
    export interface ChmodOptsArgs {
        /**
         * Like verbose but report only when a change is made.
         */
        changes?: pulumi.Input<boolean>;
        /**
         * Corresponds to the [FILE] argument.
         */
        files: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Display help and exit.
         */
        help?: pulumi.Input<boolean>;
        /**
         * Modes may be absolute or symbolic. An absolute mode is an octal number...
         */
        mode: pulumi.Input<string>;
        /**
         * Do not treat '/' specially (the default).
         */
        noPreserveRoot?: pulumi.Input<boolean>;
        /**
         * Fail to operate recursively on '/'.
         */
        preserveRoot?: pulumi.Input<boolean>;
        /**
         * Suppress most error messages. Same as `silent`.
         */
        quiet?: pulumi.Input<boolean>;
        /**
         * Change files and directories recursively.
         */
        recursive?: pulumi.Input<boolean>;
        /**
         * Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
         */
        reference?: pulumi.Input<string>;
        /**
         * Suppress most error messages. Same as `quiet`.
         */
        silent?: pulumi.Input<boolean>;
        /**
         * Output version information and exit.
         */
        version?: pulumi.Input<boolean>;
    }

    /**
     * Abstraction over the `etcdctl` utility on a remote system.
     */
    export interface EtcdctlOptsArgs {
        /**
         * TODO
         */
        caCert?: pulumi.Input<string>;
        /**
         * TODO
         */
        cert?: pulumi.Input<string>;
        /**
         * TODO
         */
        commands: pulumi.Input<enums.tools.EtcdctlCommand>;
        /**
         * TODO
         */
        endpoints?: pulumi.Input<string>;
        /**
         * TODO
         */
        key?: pulumi.Input<string>;
    }

    /**
     * Abstraction over the `hostnamectl` utility on a remote system.
     */
    export interface HostnamectlOptsArgs {
        /**
         * The argument for the specified `command`.
         */
        arg?: pulumi.Input<string>;
        /**
         * Corresponds to the {COMMAND} argument.
         */
        command: pulumi.Input<enums.tools.HostnamectlCommand>;
        /**
         * Print a short help text and exit.
         */
        help?: pulumi.Input<boolean>;
        /**
         * Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
         */
        host?: pulumi.Input<string>;
        /**
         * Shows output formatted as JSON.
         */
        json?: pulumi.Input<enums.tools.HostnamectlJsonMode>;
        /**
         * Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
         */
        machine?: pulumi.Input<string>;
        /**
         * Do not query the user for authentication for privileged operations.
         */
        noAskPassword?: pulumi.Input<boolean>;
        /**
         * If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
         */
        pretty?: pulumi.Input<boolean>;
        /**
         * If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
         */
        static?: pulumi.Input<boolean>;
        /**
         * If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
         */
        transient?: pulumi.Input<boolean>;
        /**
         * Print a short version string and exit.
         */
        version?: pulumi.Input<boolean>;
    }

    /**
     * Abstraction over the `mkdir` utility on a remote system.
     */
    export interface MkdirOptsArgs {
        /**
         * The fully qualified path of the directory on the remote system.
         */
        directory: pulumi.Input<string>;
        /**
         * Corresponds to the `--parents` option.
         */
        parents?: pulumi.Input<boolean>;
        /**
         * Remove the created directory when the `Mkdir` resource is deleted or updated.
         */
        removeOnDelete?: pulumi.Input<boolean>;
    }

    /**
     * Abstraction over the `mktemp` utility on a remote system.
     */
    export interface MktempOptsArgs {
        /**
         * Corresponds to the `--directory` option.
         */
        directory?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--dry-run` option.
         */
        dryRun?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--quiet` option.
         */
        quiet?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--suffix` option.
         */
        suffix?: pulumi.Input<string>;
        /**
         * Corresponds to the [TEMPLATE] argument.
         */
        template?: pulumi.Input<string>;
        /**
         * Corresponds to the `--tmpdir` option.
         */
        tmpdir?: pulumi.Input<string>;
    }

    /**
     * Abstraction over the `mv` utility on a remote system.
     */
    export interface MvOptsArgs {
        /**
         * Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
         */
        backup?: boolean;
        /**
         * Corresponds to the `--context` option.
         */
        context?: pulumi.Input<boolean>;
        /**
         * Corresponds to the [CONTROL] argument for the `--backup` option.
         */
        control?: pulumi.Input<boolean>;
        /**
         * Corresponds to the [DEST] argument.
         */
        dest?: pulumi.Input<string>;
        /**
         * Corresponds to the [DIRECTORY] argument.
         */
        directory?: pulumi.Input<string>;
        /**
         * Corresponds to the `--force` option.
         */
        force?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--no-clobber` option.
         */
        noClobber?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--no-target-directory` option.
         */
        noTargetDirectory?: pulumi.Input<boolean>;
        /**
         * Corresponds to the [SOURCE] argument.
         */
        source: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Corresponds to the `--strip-trailing-slashes` option.
         */
        stripTrailingSlashes?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--suffix` option.
         */
        suffix?: pulumi.Input<string>;
        /**
         * Corresponds to the `--target-directory` option.
         */
        targetDirectory?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--update` option.
         */
        update?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--verbose` option.
         */
        verbose?: pulumi.Input<boolean>;
    }

    /**
     * Abstraction over the `rm` utility on a remote system.
     */
    export interface RmOptsArgs {
        /**
         * Corresponds to the `--dir` option.
         */
        dir?: pulumi.Input<boolean>;
        /**
         * Corresponds to the [FILE] argument.
         */
        files: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Corresponds to the `--force` option.
         */
        force?: pulumi.Input<boolean>;
        /**
         * Whether rm should be run when the resource is created or deleted.
         */
        onDelete?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--recursive` option.
         */
        recursive?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--verbose` option.
         */
        verbose?: pulumi.Input<boolean>;
    }

    /**
     * Abstraction over the `sed` utility on a remote system.
     */
    export interface SedOptsArgs {
        /**
         * annotate program execution.
         */
        debug?: pulumi.Input<boolean>;
        /**
         * add the script to the commands to be executed.
         */
        expressions?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * add the contents of script-file to the commands to be executed.
         */
        files?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * follow symlinks when processing in place
         */
        followSymlinks?: pulumi.Input<boolean>;
        /**
         * display this help and exit.
         */
        help?: pulumi.Input<boolean>;
        /**
         * edit files in place (makes backup if SUFFIX supplied)
         */
        inPlace?: pulumi.Input<string>;
        /**
         * corresponds to the [input-file]... argument(s).
         */
        inputFiles?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * specify the desired line-wrap length for the `l' command
         */
        lineLength?: pulumi.Input<number>;
        /**
         * separate lines by NUL characters
         */
        nullData?: pulumi.Input<boolean>;
        /**
         * disable all GNU extensions.
         */
        posix?: pulumi.Input<boolean>;
        /**
         * suppress automatic printing of pattern space. Same as `silent`.
         */
        quiet?: pulumi.Input<boolean>;
        /**
         * use extended regular expressions in the script (for portability use POSIX -E).
         */
        regexpExtended?: pulumi.Input<boolean>;
        /**
         * operate in sandbox mode (disable e/r/w commands).
         */
        sandbox?: pulumi.Input<boolean>;
        /**
         * script only if no other script.
         */
        script?: pulumi.Input<string>;
        /**
         * consider files as separate rather than as a single, continuous long stream.
         */
        separate?: pulumi.Input<boolean>;
        /**
         * suppress automatic printing of pattern space. Same as `quiet`.
         */
        silent?: pulumi.Input<boolean>;
        /**
         * load minimal amounts of data from the input files and flush the output buffers more often.
         */
        unbuffered?: pulumi.Input<boolean>;
        /**
         * output version information and exit.
         */
        version?: pulumi.Input<boolean>;
    }

    /**
     * Abstraction over the `systemctl` utility on a remote system.
     */
    export interface SystemctlOptsArgs {
        /**
         * Corresponds to the COMMAND argument.
         */
        command: enums.tools.SystemctlCommand;
        /**
         * Corresponds to the [PATTERN] argument
         */
        pattern?: pulumi.Input<string>;
        /**
         * Corresponds to the [UNIT...] argument.
         */
        unit?: pulumi.Input<string>;
    }

    /**
     * Abstraction over the `tar` utility on a remote system.
     */
    export interface TarOptsArgs {
        /**
         * Corresponds to the [ARCHIVE] argument.
         */
        archive: pulumi.Input<string>;
        /**
         * Corresponds to the `--directory` option.
         */
        directory?: pulumi.Input<string>;
        /**
         * Corresponds to the `--extract` option.
         */
        extract?: pulumi.Input<boolean>;
        /**
         * Corresponds to the [FILE] argument.
         */
        files?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Corresponds to the `--gzip` option.
         */
        gzip?: pulumi.Input<boolean>;
        /**
         * Whether rm should be run when the resource is created or deleted.
         */
        onDelete?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--recursive` option.
         */
        recursive?: pulumi.Input<boolean>;
        /**
         * Corresponds to the `--strip-components` option.
         */
        stripComponents?: pulumi.Input<number>;
    }

    /**
     * Abstraction over the `rm` utility on a remote system.
     */
    export interface TeeOptsArgs {
        /**
         * Append to the given FILEs, do not overwrite
         */
        append?: pulumi.Input<boolean>;
        /**
         * Corresponds to the [FILE] argument.
         */
        files: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Ignore interrupt signals.
         */
        ignoreInterrupts?: pulumi.Input<boolean>;
        /**
         * Set behavior on write error.
         */
        outputError?: pulumi.Input<enums.tools.TeeMode>;
        /**
         * Operate in a more appropriate MODE with pipes.
         */
        pipe?: pulumi.Input<boolean>;
        /**
         * Output version information and exit.
         */
        version?: pulumi.Input<boolean>;
    }

    /**
     * Abstraction over the `wget` utility on a remote system.
     */
    export interface WgetOptsArgs {
        /**
         * The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory).
         */
        directoryPrefix?: pulumi.Input<string>;
        /**
         * When in recursive mode, only HTTPS links are followed.
         */
        httpsOnly?: pulumi.Input<boolean>;
        /**
         * Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed.
         */
        noVerbose?: pulumi.Input<boolean>;
        /**
         * The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file.
         */
        outputDocument?: pulumi.Input<string>;
        /**
         * Turn off Wget's output.
         */
        quiet?: pulumi.Input<boolean>;
        /**
         * Turn on time-stamping.
         */
        timestamping?: pulumi.Input<boolean>;
        /**
         * Corresponds to the [URL...] argument.
         */
        url: pulumi.Input<pulumi.Input<string>[]>;
    }
}
