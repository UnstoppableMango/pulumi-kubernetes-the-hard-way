// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.command.remote.inputs.ConnectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.config.inputs.KubeconfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesControlPlaneConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesControlPlaneConfigurationArgs Empty = new KubernetesControlPlaneConfigurationArgs();

    /**
     * The PEM encoded certificate authority key.
     * 
     */
    @Import(name="caKey", required=true)
    private Output<String> caKey;

    /**
     * @return The PEM encoded certificate authority key.
     * 
     */
    public Output<String> caKey() {
        return this.caKey;
    }

    /**
     * The PEM encoded certificate authority data.
     * 
     */
    @Import(name="caPem", required=true)
    private Output<String> caPem;

    /**
     * @return The PEM encoded certificate authority data.
     * 
     */
    public Output<String> caPem() {
        return this.caPem;
    }

    /**
     * The directory to store Kubernetes Control Plane configuration.
     * 
     */
    @Import(name="configurationDirectory")
    private @Nullable Output<String> configurationDirectory;

    /**
     * @return The directory to store Kubernetes Control Plane configuration.
     * 
     */
    public Optional<Output<String>> configurationDirectory() {
        return Optional.ofNullable(this.configurationDirectory);
    }

    /**
     * The parameters with which to connect to the remote host.
     * 
     */
    @Import(name="connection", required=true)
    private Output<ConnectionArgs> connection;

    /**
     * @return The parameters with which to connect to the remote host.
     * 
     */
    public Output<ConnectionArgs> connection() {
        return this.connection;
    }

    /**
     * The YAML encryption configuration manifest.
     * 
     */
    @Import(name="encryptionConfig", required=true)
    private Output<String> encryptionConfig;

    /**
     * @return The YAML encryption configuration manifest.
     * 
     */
    public Output<String> encryptionConfig() {
        return this.encryptionConfig;
    }

    /**
     * The PEM encoded Kube API Server certificate key.
     * 
     */
    @Import(name="kubeApiServerKey", required=true)
    private Output<String> kubeApiServerKey;

    /**
     * @return The PEM encoded Kube API Server certificate key.
     * 
     */
    public Output<String> kubeApiServerKey() {
        return this.kubeApiServerKey;
    }

    /**
     * The path to the &#39;kube-apiserver&#39; binary.
     * 
     */
    @Import(name="kubeApiServerPath")
    private @Nullable Output<String> kubeApiServerPath;

    /**
     * @return The path to the &#39;kube-apiserver&#39; binary.
     * 
     */
    public Optional<Output<String>> kubeApiServerPath() {
        return Optional.ofNullable(this.kubeApiServerPath);
    }

    /**
     * The PEM encoded Kube API Server certificate data.
     * 
     */
    @Import(name="kubeApiServerPem", required=true)
    private Output<String> kubeApiServerPem;

    /**
     * @return The PEM encoded Kube API Server certificate data.
     * 
     */
    public Output<String> kubeApiServerPem() {
        return this.kubeApiServerPem;
    }

    /**
     * The kube-controller-manager kubeconfig configuration
     * 
     */
    @Import(name="kubeControllerManagerKubeconfig", required=true)
    private Output<KubeconfigArgs> kubeControllerManagerKubeconfig;

    /**
     * @return The kube-controller-manager kubeconfig configuration
     * 
     */
    public Output<KubeconfigArgs> kubeControllerManagerKubeconfig() {
        return this.kubeControllerManagerKubeconfig;
    }

    /**
     * The kube-scheduler configuration manifest.
     * 
     */
    @Import(name="kubeSchedulerConfig", required=true)
    private Output<String> kubeSchedulerConfig;

    /**
     * @return The kube-scheduler configuration manifest.
     * 
     */
    public Output<String> kubeSchedulerConfig() {
        return this.kubeSchedulerConfig;
    }

    /**
     * The kube-scheduler kubeconfig configuration
     * 
     */
    @Import(name="kubeSchedulerKubeconfig", required=true)
    private Output<KubeconfigArgs> kubeSchedulerKubeconfig;

    /**
     * @return The kube-scheduler kubeconfig configuration
     * 
     */
    public Output<KubeconfigArgs> kubeSchedulerKubeconfig() {
        return this.kubeSchedulerKubeconfig;
    }

    /**
     * The path to the &#39;kube-scheduler&#39; binary.
     * 
     */
    @Import(name="kubeSchedulerPath")
    private @Nullable Output<String> kubeSchedulerPath;

    /**
     * @return The path to the &#39;kube-scheduler&#39; binary.
     * 
     */
    public Optional<Output<String>> kubeSchedulerPath() {
        return Optional.ofNullable(this.kubeSchedulerPath);
    }

    /**
     * The path to the &#39;kubectl&#39; binary.
     * 
     */
    @Import(name="kubectlPath")
    private @Nullable Output<String> kubectlPath;

    /**
     * @return The path to the &#39;kubectl&#39; binary.
     * 
     */
    public Optional<Output<String>> kubectlPath() {
        return Optional.ofNullable(this.kubectlPath);
    }

    /**
     * The PEM encoded Service Accounts certificate key.
     * 
     */
    @Import(name="serviceAccountsKey", required=true)
    private Output<String> serviceAccountsKey;

    /**
     * @return The PEM encoded Service Accounts certificate key.
     * 
     */
    public Output<String> serviceAccountsKey() {
        return this.serviceAccountsKey;
    }

    /**
     * The PEM encoded Service Accounts certificate data.
     * 
     */
    @Import(name="serviceAccountsPem", required=true)
    private Output<String> serviceAccountsPem;

    /**
     * @return The PEM encoded Service Accounts certificate data.
     * 
     */
    public Output<String> serviceAccountsPem() {
        return this.serviceAccountsPem;
    }

    private KubernetesControlPlaneConfigurationArgs() {}

    private KubernetesControlPlaneConfigurationArgs(KubernetesControlPlaneConfigurationArgs $) {
        this.caKey = $.caKey;
        this.caPem = $.caPem;
        this.configurationDirectory = $.configurationDirectory;
        this.connection = $.connection;
        this.encryptionConfig = $.encryptionConfig;
        this.kubeApiServerKey = $.kubeApiServerKey;
        this.kubeApiServerPath = $.kubeApiServerPath;
        this.kubeApiServerPem = $.kubeApiServerPem;
        this.kubeControllerManagerKubeconfig = $.kubeControllerManagerKubeconfig;
        this.kubeSchedulerConfig = $.kubeSchedulerConfig;
        this.kubeSchedulerKubeconfig = $.kubeSchedulerKubeconfig;
        this.kubeSchedulerPath = $.kubeSchedulerPath;
        this.kubectlPath = $.kubectlPath;
        this.serviceAccountsKey = $.serviceAccountsKey;
        this.serviceAccountsPem = $.serviceAccountsPem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesControlPlaneConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesControlPlaneConfigurationArgs $;

        public Builder() {
            $ = new KubernetesControlPlaneConfigurationArgs();
        }

        public Builder(KubernetesControlPlaneConfigurationArgs defaults) {
            $ = new KubernetesControlPlaneConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caKey The PEM encoded certificate authority key.
         * 
         * @return builder
         * 
         */
        public Builder caKey(Output<String> caKey) {
            $.caKey = caKey;
            return this;
        }

        /**
         * @param caKey The PEM encoded certificate authority key.
         * 
         * @return builder
         * 
         */
        public Builder caKey(String caKey) {
            return caKey(Output.of(caKey));
        }

        /**
         * @param caPem The PEM encoded certificate authority data.
         * 
         * @return builder
         * 
         */
        public Builder caPem(Output<String> caPem) {
            $.caPem = caPem;
            return this;
        }

        /**
         * @param caPem The PEM encoded certificate authority data.
         * 
         * @return builder
         * 
         */
        public Builder caPem(String caPem) {
            return caPem(Output.of(caPem));
        }

        /**
         * @param configurationDirectory The directory to store Kubernetes Control Plane configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationDirectory(@Nullable Output<String> configurationDirectory) {
            $.configurationDirectory = configurationDirectory;
            return this;
        }

        /**
         * @param configurationDirectory The directory to store Kubernetes Control Plane configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationDirectory(String configurationDirectory) {
            return configurationDirectory(Output.of(configurationDirectory));
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(Output<ConnectionArgs> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(ConnectionArgs connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param encryptionConfig The YAML encryption configuration manifest.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfig(Output<String> encryptionConfig) {
            $.encryptionConfig = encryptionConfig;
            return this;
        }

        /**
         * @param encryptionConfig The YAML encryption configuration manifest.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfig(String encryptionConfig) {
            return encryptionConfig(Output.of(encryptionConfig));
        }

        /**
         * @param kubeApiServerKey The PEM encoded Kube API Server certificate key.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerKey(Output<String> kubeApiServerKey) {
            $.kubeApiServerKey = kubeApiServerKey;
            return this;
        }

        /**
         * @param kubeApiServerKey The PEM encoded Kube API Server certificate key.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerKey(String kubeApiServerKey) {
            return kubeApiServerKey(Output.of(kubeApiServerKey));
        }

        /**
         * @param kubeApiServerPath The path to the &#39;kube-apiserver&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerPath(@Nullable Output<String> kubeApiServerPath) {
            $.kubeApiServerPath = kubeApiServerPath;
            return this;
        }

        /**
         * @param kubeApiServerPath The path to the &#39;kube-apiserver&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerPath(String kubeApiServerPath) {
            return kubeApiServerPath(Output.of(kubeApiServerPath));
        }

        /**
         * @param kubeApiServerPem The PEM encoded Kube API Server certificate data.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerPem(Output<String> kubeApiServerPem) {
            $.kubeApiServerPem = kubeApiServerPem;
            return this;
        }

        /**
         * @param kubeApiServerPem The PEM encoded Kube API Server certificate data.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerPem(String kubeApiServerPem) {
            return kubeApiServerPem(Output.of(kubeApiServerPem));
        }

        /**
         * @param kubeControllerManagerKubeconfig The kube-controller-manager kubeconfig configuration
         * 
         * @return builder
         * 
         */
        public Builder kubeControllerManagerKubeconfig(Output<KubeconfigArgs> kubeControllerManagerKubeconfig) {
            $.kubeControllerManagerKubeconfig = kubeControllerManagerKubeconfig;
            return this;
        }

        /**
         * @param kubeControllerManagerKubeconfig The kube-controller-manager kubeconfig configuration
         * 
         * @return builder
         * 
         */
        public Builder kubeControllerManagerKubeconfig(KubeconfigArgs kubeControllerManagerKubeconfig) {
            return kubeControllerManagerKubeconfig(Output.of(kubeControllerManagerKubeconfig));
        }

        /**
         * @param kubeSchedulerConfig The kube-scheduler configuration manifest.
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerConfig(Output<String> kubeSchedulerConfig) {
            $.kubeSchedulerConfig = kubeSchedulerConfig;
            return this;
        }

        /**
         * @param kubeSchedulerConfig The kube-scheduler configuration manifest.
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerConfig(String kubeSchedulerConfig) {
            return kubeSchedulerConfig(Output.of(kubeSchedulerConfig));
        }

        /**
         * @param kubeSchedulerKubeconfig The kube-scheduler kubeconfig configuration
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerKubeconfig(Output<KubeconfigArgs> kubeSchedulerKubeconfig) {
            $.kubeSchedulerKubeconfig = kubeSchedulerKubeconfig;
            return this;
        }

        /**
         * @param kubeSchedulerKubeconfig The kube-scheduler kubeconfig configuration
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerKubeconfig(KubeconfigArgs kubeSchedulerKubeconfig) {
            return kubeSchedulerKubeconfig(Output.of(kubeSchedulerKubeconfig));
        }

        /**
         * @param kubeSchedulerPath The path to the &#39;kube-scheduler&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerPath(@Nullable Output<String> kubeSchedulerPath) {
            $.kubeSchedulerPath = kubeSchedulerPath;
            return this;
        }

        /**
         * @param kubeSchedulerPath The path to the &#39;kube-scheduler&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerPath(String kubeSchedulerPath) {
            return kubeSchedulerPath(Output.of(kubeSchedulerPath));
        }

        /**
         * @param kubectlPath The path to the &#39;kubectl&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder kubectlPath(@Nullable Output<String> kubectlPath) {
            $.kubectlPath = kubectlPath;
            return this;
        }

        /**
         * @param kubectlPath The path to the &#39;kubectl&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder kubectlPath(String kubectlPath) {
            return kubectlPath(Output.of(kubectlPath));
        }

        /**
         * @param serviceAccountsKey The PEM encoded Service Accounts certificate key.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsKey(Output<String> serviceAccountsKey) {
            $.serviceAccountsKey = serviceAccountsKey;
            return this;
        }

        /**
         * @param serviceAccountsKey The PEM encoded Service Accounts certificate key.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsKey(String serviceAccountsKey) {
            return serviceAccountsKey(Output.of(serviceAccountsKey));
        }

        /**
         * @param serviceAccountsPem The PEM encoded Service Accounts certificate data.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsPem(Output<String> serviceAccountsPem) {
            $.serviceAccountsPem = serviceAccountsPem;
            return this;
        }

        /**
         * @param serviceAccountsPem The PEM encoded Service Accounts certificate data.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsPem(String serviceAccountsPem) {
            return serviceAccountsPem(Output.of(serviceAccountsPem));
        }

        public KubernetesControlPlaneConfigurationArgs build() {
            if ($.caKey == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "caKey");
            }
            if ($.caPem == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "caPem");
            }
            $.configurationDirectory = Codegen.stringProp("configurationDirectory").output().arg($.configurationDirectory).def("/etc/kubernetes/config").getNullable();
            if ($.connection == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "connection");
            }
            if ($.encryptionConfig == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "encryptionConfig");
            }
            if ($.kubeApiServerKey == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "kubeApiServerKey");
            }
            if ($.kubeApiServerPem == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "kubeApiServerPem");
            }
            if ($.kubeControllerManagerKubeconfig == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "kubeControllerManagerKubeconfig");
            }
            if ($.kubeSchedulerConfig == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "kubeSchedulerConfig");
            }
            if ($.kubeSchedulerKubeconfig == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "kubeSchedulerKubeconfig");
            }
            if ($.serviceAccountsKey == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "serviceAccountsKey");
            }
            if ($.serviceAccountsPem == null) {
                throw new MissingRequiredPropertyException("KubernetesControlPlaneConfigurationArgs", "serviceAccountsPem");
            }
            return $;
        }
    }

}
