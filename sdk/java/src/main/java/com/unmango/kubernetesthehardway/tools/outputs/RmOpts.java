// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RmOpts {
    /**
     * @return Corresponds to the `--dir` option.
     * 
     */
    private @Nullable Boolean dir;
    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    private List<String> files;
    /**
     * @return Corresponds to the `--force` option.
     * 
     */
    private @Nullable Boolean force;
    /**
     * @return Whether rm should be run when the resource is created or deleted.
     * 
     */
    private @Nullable Boolean onDelete;
    /**
     * @return Corresponds to the `--recursive` option.
     * 
     */
    private @Nullable Boolean recursive;
    /**
     * @return Corresponds to the `--verbose` option.
     * 
     */
    private @Nullable Boolean verbose;

    private RmOpts() {}
    /**
     * @return Corresponds to the `--dir` option.
     * 
     */
    public Optional<Boolean> dir() {
        return Optional.ofNullable(this.dir);
    }
    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    public List<String> files() {
        return this.files;
    }
    /**
     * @return Corresponds to the `--force` option.
     * 
     */
    public Optional<Boolean> force() {
        return Optional.ofNullable(this.force);
    }
    /**
     * @return Whether rm should be run when the resource is created or deleted.
     * 
     */
    public Optional<Boolean> onDelete() {
        return Optional.ofNullable(this.onDelete);
    }
    /**
     * @return Corresponds to the `--recursive` option.
     * 
     */
    public Optional<Boolean> recursive() {
        return Optional.ofNullable(this.recursive);
    }
    /**
     * @return Corresponds to the `--verbose` option.
     * 
     */
    public Optional<Boolean> verbose() {
        return Optional.ofNullable(this.verbose);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RmOpts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean dir;
        private List<String> files;
        private @Nullable Boolean force;
        private @Nullable Boolean onDelete;
        private @Nullable Boolean recursive;
        private @Nullable Boolean verbose;
        public Builder() {}
        public Builder(RmOpts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dir = defaults.dir;
    	      this.files = defaults.files;
    	      this.force = defaults.force;
    	      this.onDelete = defaults.onDelete;
    	      this.recursive = defaults.recursive;
    	      this.verbose = defaults.verbose;
        }

        @CustomType.Setter
        public Builder dir(@Nullable Boolean dir) {

            this.dir = dir;
            return this;
        }
        @CustomType.Setter
        public Builder files(List<String> files) {
            if (files == null) {
              throw new MissingRequiredPropertyException("RmOpts", "files");
            }
            this.files = files;
            return this;
        }
        public Builder files(String... files) {
            return files(List.of(files));
        }
        @CustomType.Setter
        public Builder force(@Nullable Boolean force) {

            this.force = force;
            return this;
        }
        @CustomType.Setter
        public Builder onDelete(@Nullable Boolean onDelete) {

            this.onDelete = onDelete;
            return this;
        }
        @CustomType.Setter
        public Builder recursive(@Nullable Boolean recursive) {

            this.recursive = recursive;
            return this;
        }
        @CustomType.Setter
        public Builder verbose(@Nullable Boolean verbose) {

            this.verbose = verbose;
            return this;
        }
        public RmOpts build() {
            final var _resultValue = new RmOpts();
            _resultValue.dir = dir;
            _resultValue.files = files;
            _resultValue.force = force;
            _resultValue.onDelete = onDelete;
            _resultValue.recursive = recursive;
            _resultValue.verbose = verbose;
            return _resultValue;
        }
    }
}
