// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.config.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetKubeVipManifestPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetKubeVipManifestPlainArgs Empty = new GetKubeVipManifestPlainArgs();

    /**
     * TODO
     * 
     */
    @Import(name="address", required=true)
    private String address;

    /**
     * @return TODO
     * 
     */
    public String address() {
        return this.address;
    }

    /**
     * TODO
     * 
     */
    @Import(name="bgpAs")
    private @Nullable Integer bgpAs;

    /**
     * @return TODO
     * 
     */
    public Optional<Integer> bgpAs() {
        return Optional.ofNullable(this.bgpAs);
    }

    /**
     * TODO
     * 
     */
    @Import(name="bgpEnable")
    private @Nullable Boolean bgpEnable;

    /**
     * @return TODO
     * 
     */
    public Optional<Boolean> bgpEnable() {
        return Optional.ofNullable(this.bgpEnable);
    }

    /**
     * TODO
     * 
     */
    @Import(name="bgpPeerAddress")
    private @Nullable String bgpPeerAddress;

    /**
     * @return TODO
     * 
     */
    public Optional<String> bgpPeerAddress() {
        return Optional.ofNullable(this.bgpPeerAddress);
    }

    /**
     * TODO
     * 
     */
    @Import(name="bgpPeerAs")
    private @Nullable Integer bgpPeerAs;

    /**
     * @return TODO
     * 
     */
    public Optional<Integer> bgpPeerAs() {
        return Optional.ofNullable(this.bgpPeerAs);
    }

    /**
     * TODO
     * 
     */
    @Import(name="bgpPeerPass")
    private @Nullable String bgpPeerPass;

    /**
     * @return TODO
     * 
     */
    public Optional<String> bgpPeerPass() {
        return Optional.ofNullable(this.bgpPeerPass);
    }

    /**
     * TODO
     * 
     */
    @Import(name="bgpPeers")
    private @Nullable String bgpPeers;

    /**
     * @return TODO
     * 
     */
    public Optional<String> bgpPeers() {
        return Optional.ofNullable(this.bgpPeers);
    }

    /**
     * TODO
     * 
     */
    @Import(name="bgpRouterId")
    private @Nullable String bgpRouterId;

    /**
     * @return TODO
     * 
     */
    public Optional<String> bgpRouterId() {
        return Optional.ofNullable(this.bgpRouterId);
    }

    /**
     * TODO
     * 
     */
    @Import(name="cpEnable")
    private @Nullable Boolean cpEnable;

    /**
     * @return TODO
     * 
     */
    public Optional<Boolean> cpEnable() {
        return Optional.ofNullable(this.cpEnable);
    }

    /**
     * TODO
     * 
     */
    @Import(name="cpNamespace")
    private @Nullable String cpNamespace;

    /**
     * @return TODO
     * 
     */
    public Optional<String> cpNamespace() {
        return Optional.ofNullable(this.cpNamespace);
    }

    /**
     * Override the kube-vip image.
     * 
     */
    @Import(name="image")
    private @Nullable String image;

    /**
     * @return Override the kube-vip image.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Path to the kubeconfig on the remote host.
     * 
     */
    @Import(name="kubeconfigPath", required=true)
    private String kubeconfigPath;

    /**
     * @return Path to the kubeconfig on the remote host.
     * 
     */
    public String kubeconfigPath() {
        return this.kubeconfigPath;
    }

    /**
     * Name of the static pod. Defaults to kube-vip.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the static pod. Defaults to kube-vip.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Namespace for the static pod. Defaults to kube-system.
     * 
     */
    @Import(name="namespace")
    private @Nullable String namespace;

    /**
     * @return Namespace for the static pod. Defaults to kube-system.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * TODO
     * 
     */
    @Import(name="port")
    private @Nullable Integer port;

    /**
     * @return TODO
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * TODO
     * 
     */
    @Import(name="svcEnable")
    private @Nullable Boolean svcEnable;

    /**
     * @return TODO
     * 
     */
    public Optional<Boolean> svcEnable() {
        return Optional.ofNullable(this.svcEnable);
    }

    /**
     * Version of kube-vip to use.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return Version of kube-vip to use.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipArp")
    private @Nullable Boolean vipArp;

    /**
     * @return TODO
     * 
     */
    public Optional<Boolean> vipArp() {
        return Optional.ofNullable(this.vipArp);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipCidr", required=true)
    private Integer vipCidr;

    /**
     * @return TODO
     * 
     */
    public Integer vipCidr() {
        return this.vipCidr;
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipDdns")
    private @Nullable Boolean vipDdns;

    /**
     * @return TODO
     * 
     */
    public Optional<Boolean> vipDdns() {
        return Optional.ofNullable(this.vipDdns);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipInterface")
    private @Nullable String vipInterface;

    /**
     * @return TODO
     * 
     */
    public Optional<String> vipInterface() {
        return Optional.ofNullable(this.vipInterface);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipLeaderElection")
    private @Nullable Boolean vipLeaderElection;

    /**
     * @return TODO
     * 
     */
    public Optional<Boolean> vipLeaderElection() {
        return Optional.ofNullable(this.vipLeaderElection);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipLeaseDuration")
    private @Nullable Integer vipLeaseDuration;

    /**
     * @return TODO
     * 
     */
    public Optional<Integer> vipLeaseDuration() {
        return Optional.ofNullable(this.vipLeaseDuration);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipRenewDeadline")
    private @Nullable Integer vipRenewDeadline;

    /**
     * @return TODO
     * 
     */
    public Optional<Integer> vipRenewDeadline() {
        return Optional.ofNullable(this.vipRenewDeadline);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipRetryPeriod")
    private @Nullable Integer vipRetryPeriod;

    /**
     * @return TODO
     * 
     */
    public Optional<Integer> vipRetryPeriod() {
        return Optional.ofNullable(this.vipRetryPeriod);
    }

    private GetKubeVipManifestPlainArgs() {}

    private GetKubeVipManifestPlainArgs(GetKubeVipManifestPlainArgs $) {
        this.address = $.address;
        this.bgpAs = $.bgpAs;
        this.bgpEnable = $.bgpEnable;
        this.bgpPeerAddress = $.bgpPeerAddress;
        this.bgpPeerAs = $.bgpPeerAs;
        this.bgpPeerPass = $.bgpPeerPass;
        this.bgpPeers = $.bgpPeers;
        this.bgpRouterId = $.bgpRouterId;
        this.cpEnable = $.cpEnable;
        this.cpNamespace = $.cpNamespace;
        this.image = $.image;
        this.kubeconfigPath = $.kubeconfigPath;
        this.name = $.name;
        this.namespace = $.namespace;
        this.port = $.port;
        this.svcEnable = $.svcEnable;
        this.version = $.version;
        this.vipArp = $.vipArp;
        this.vipCidr = $.vipCidr;
        this.vipDdns = $.vipDdns;
        this.vipInterface = $.vipInterface;
        this.vipLeaderElection = $.vipLeaderElection;
        this.vipLeaseDuration = $.vipLeaseDuration;
        this.vipRenewDeadline = $.vipRenewDeadline;
        this.vipRetryPeriod = $.vipRetryPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetKubeVipManifestPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetKubeVipManifestPlainArgs $;

        public Builder() {
            $ = new GetKubeVipManifestPlainArgs();
        }

        public Builder(GetKubeVipManifestPlainArgs defaults) {
            $ = new GetKubeVipManifestPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address TODO
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            $.address = address;
            return this;
        }

        /**
         * @param bgpAs TODO
         * 
         * @return builder
         * 
         */
        public Builder bgpAs(@Nullable Integer bgpAs) {
            $.bgpAs = bgpAs;
            return this;
        }

        /**
         * @param bgpEnable TODO
         * 
         * @return builder
         * 
         */
        public Builder bgpEnable(@Nullable Boolean bgpEnable) {
            $.bgpEnable = bgpEnable;
            return this;
        }

        /**
         * @param bgpPeerAddress TODO
         * 
         * @return builder
         * 
         */
        public Builder bgpPeerAddress(@Nullable String bgpPeerAddress) {
            $.bgpPeerAddress = bgpPeerAddress;
            return this;
        }

        /**
         * @param bgpPeerAs TODO
         * 
         * @return builder
         * 
         */
        public Builder bgpPeerAs(@Nullable Integer bgpPeerAs) {
            $.bgpPeerAs = bgpPeerAs;
            return this;
        }

        /**
         * @param bgpPeerPass TODO
         * 
         * @return builder
         * 
         */
        public Builder bgpPeerPass(@Nullable String bgpPeerPass) {
            $.bgpPeerPass = bgpPeerPass;
            return this;
        }

        /**
         * @param bgpPeers TODO
         * 
         * @return builder
         * 
         */
        public Builder bgpPeers(@Nullable String bgpPeers) {
            $.bgpPeers = bgpPeers;
            return this;
        }

        /**
         * @param bgpRouterId TODO
         * 
         * @return builder
         * 
         */
        public Builder bgpRouterId(@Nullable String bgpRouterId) {
            $.bgpRouterId = bgpRouterId;
            return this;
        }

        /**
         * @param cpEnable TODO
         * 
         * @return builder
         * 
         */
        public Builder cpEnable(@Nullable Boolean cpEnable) {
            $.cpEnable = cpEnable;
            return this;
        }

        /**
         * @param cpNamespace TODO
         * 
         * @return builder
         * 
         */
        public Builder cpNamespace(@Nullable String cpNamespace) {
            $.cpNamespace = cpNamespace;
            return this;
        }

        /**
         * @param image Override the kube-vip image.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable String image) {
            $.image = image;
            return this;
        }

        /**
         * @param kubeconfigPath Path to the kubeconfig on the remote host.
         * 
         * @return builder
         * 
         */
        public Builder kubeconfigPath(String kubeconfigPath) {
            $.kubeconfigPath = kubeconfigPath;
            return this;
        }

        /**
         * @param name Name of the static pod. Defaults to kube-vip.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param namespace Namespace for the static pod. Defaults to kube-system.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable String namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param port TODO
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param svcEnable TODO
         * 
         * @return builder
         * 
         */
        public Builder svcEnable(@Nullable Boolean svcEnable) {
            $.svcEnable = svcEnable;
            return this;
        }

        /**
         * @param version Version of kube-vip to use.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        /**
         * @param vipArp TODO
         * 
         * @return builder
         * 
         */
        public Builder vipArp(@Nullable Boolean vipArp) {
            $.vipArp = vipArp;
            return this;
        }

        /**
         * @param vipCidr TODO
         * 
         * @return builder
         * 
         */
        public Builder vipCidr(Integer vipCidr) {
            $.vipCidr = vipCidr;
            return this;
        }

        /**
         * @param vipDdns TODO
         * 
         * @return builder
         * 
         */
        public Builder vipDdns(@Nullable Boolean vipDdns) {
            $.vipDdns = vipDdns;
            return this;
        }

        /**
         * @param vipInterface TODO
         * 
         * @return builder
         * 
         */
        public Builder vipInterface(@Nullable String vipInterface) {
            $.vipInterface = vipInterface;
            return this;
        }

        /**
         * @param vipLeaderElection TODO
         * 
         * @return builder
         * 
         */
        public Builder vipLeaderElection(@Nullable Boolean vipLeaderElection) {
            $.vipLeaderElection = vipLeaderElection;
            return this;
        }

        /**
         * @param vipLeaseDuration TODO
         * 
         * @return builder
         * 
         */
        public Builder vipLeaseDuration(@Nullable Integer vipLeaseDuration) {
            $.vipLeaseDuration = vipLeaseDuration;
            return this;
        }

        /**
         * @param vipRenewDeadline TODO
         * 
         * @return builder
         * 
         */
        public Builder vipRenewDeadline(@Nullable Integer vipRenewDeadline) {
            $.vipRenewDeadline = vipRenewDeadline;
            return this;
        }

        /**
         * @param vipRetryPeriod TODO
         * 
         * @return builder
         * 
         */
        public Builder vipRetryPeriod(@Nullable Integer vipRetryPeriod) {
            $.vipRetryPeriod = vipRetryPeriod;
            return this;
        }

        public GetKubeVipManifestPlainArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("GetKubeVipManifestPlainArgs", "address");
            }
            if ($.kubeconfigPath == null) {
                throw new MissingRequiredPropertyException("GetKubeVipManifestPlainArgs", "kubeconfigPath");
            }
            $.name = Codegen.stringProp("name").arg($.name).def("kube-vip").getNullable();
            $.namespace = Codegen.stringProp("namespace").arg($.namespace).def("kube-system").getNullable();
            $.port = Codegen.integerProp("port").arg($.port).def(6443).getNullable();
            if ($.vipCidr == null) {
                throw new MissingRequiredPropertyException("GetKubeVipManifestPlainArgs", "vipCidr");
            }
            return $;
        }
    }

}
