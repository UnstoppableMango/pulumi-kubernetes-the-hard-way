// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.config.inputs;

import com.pulumi.core.annotations.Import;
import com.unmango.kubernetesthehardway.config.inputs.ContainerdCriPluginConfigurationContainerdRunc;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * containerd cri plugin configuration.
 * 
 */
public final class ContainerdCriPluginConfigurationContainerd extends com.pulumi.resources.InvokeArgs {

    public static final ContainerdCriPluginConfigurationContainerd Empty = new ContainerdCriPluginConfigurationContainerd();

    /**
     * default_runtime_name
     * 
     */
    @Import(name="defaultRuntimeName")
    private @Nullable String defaultRuntimeName;

    /**
     * @return default_runtime_name
     * 
     */
    public Optional<String> defaultRuntimeName() {
        return Optional.ofNullable(this.defaultRuntimeName);
    }

    /**
     * The containerd runtime configuration.
     * 
     */
    @Import(name="runtimes")
    private @Nullable ContainerdCriPluginConfigurationContainerdRunc runtimes;

    /**
     * @return The containerd runtime configuration.
     * 
     */
    public Optional<ContainerdCriPluginConfigurationContainerdRunc> runtimes() {
        return Optional.ofNullable(this.runtimes);
    }

    /**
     * snapshotter
     * 
     */
    @Import(name="snapshotter")
    private @Nullable String snapshotter;

    /**
     * @return snapshotter
     * 
     */
    public Optional<String> snapshotter() {
        return Optional.ofNullable(this.snapshotter);
    }

    private ContainerdCriPluginConfigurationContainerd() {}

    private ContainerdCriPluginConfigurationContainerd(ContainerdCriPluginConfigurationContainerd $) {
        this.defaultRuntimeName = $.defaultRuntimeName;
        this.runtimes = $.runtimes;
        this.snapshotter = $.snapshotter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerdCriPluginConfigurationContainerd defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerdCriPluginConfigurationContainerd $;

        public Builder() {
            $ = new ContainerdCriPluginConfigurationContainerd();
        }

        public Builder(ContainerdCriPluginConfigurationContainerd defaults) {
            $ = new ContainerdCriPluginConfigurationContainerd(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultRuntimeName default_runtime_name
         * 
         * @return builder
         * 
         */
        public Builder defaultRuntimeName(@Nullable String defaultRuntimeName) {
            $.defaultRuntimeName = defaultRuntimeName;
            return this;
        }

        /**
         * @param runtimes The containerd runtime configuration.
         * 
         * @return builder
         * 
         */
        public Builder runtimes(@Nullable ContainerdCriPluginConfigurationContainerdRunc runtimes) {
            $.runtimes = runtimes;
            return this;
        }

        /**
         * @param snapshotter snapshotter
         * 
         * @return builder
         * 
         */
        public Builder snapshotter(@Nullable String snapshotter) {
            $.snapshotter = snapshotter;
            return this;
        }

        public ContainerdCriPluginConfigurationContainerd build() {
            return $;
        }
    }

}
