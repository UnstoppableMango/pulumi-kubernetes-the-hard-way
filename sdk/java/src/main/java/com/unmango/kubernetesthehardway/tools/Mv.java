// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools;

import com.pulumi.command.remote.Command;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.tools.MvArgs;
import com.unmango.kubernetesthehardway.tools.enums.CommandLifecycle;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Abstraction over the `mv` utility on a remote system.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:tools:Mv")
public class Mv extends com.pulumi.resources.ComponentResource {
    /**
     * Corresponds to both the -b and --backup options depending on whether [CONTROL] is supplied.
     * 
     */
    @Export(name="backup", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> backup;

    /**
     * @return Corresponds to both the -b and --backup options depending on whether [CONTROL] is supplied.
     * 
     */
    public Output<Boolean> backup() {
        return this.backup;
    }
    /**
     * Represents the command run on the remote system.
     * 
     */
    @Export(name="command", refs={Command.class}, tree="[0]")
    private Output<Command> command;

    /**
     * @return Represents the command run on the remote system.
     * 
     */
    public Output<Command> command() {
        return this.command;
    }
    /**
     * Corresponds to the --context option.
     * 
     */
    @Export(name="context", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> context;

    /**
     * @return Corresponds to the --context option.
     * 
     */
    public Output<Boolean> context() {
        return this.context;
    }
    /**
     * Corresponds to the [CONTROL] argument for the --backup option.
     * 
     */
    @Export(name="control", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> control;

    /**
     * @return Corresponds to the [CONTROL] argument for the --backup option.
     * 
     */
    public Output<Optional<String>> control() {
        return Codegen.optional(this.control);
    }
    /**
     * Corresponds to the [DEST] argument.
     * 
     */
    @Export(name="dest", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dest;

    /**
     * @return Corresponds to the [DEST] argument.
     * 
     */
    public Output<Optional<String>> dest() {
        return Codegen.optional(this.dest);
    }
    /**
     * Corresponds to the [DIRECTORY] argument.
     * 
     */
    @Export(name="directory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> directory;

    /**
     * @return Corresponds to the [DIRECTORY] argument.
     * 
     */
    public Output<Optional<String>> directory() {
        return Codegen.optional(this.directory);
    }
    /**
     * Corresponds to the --force option.
     * 
     */
    @Export(name="force", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> force;

    /**
     * @return Corresponds to the --force option.
     * 
     */
    public Output<Boolean> force() {
        return this.force;
    }
    /**
     * At what stage(s) in the resource lifecycle should the command be run.
     * 
     */
    @Export(name="lifecycle", refs={CommandLifecycle.class}, tree="[0]")
    private Output</* @Nullable */ CommandLifecycle> lifecycle;

    /**
     * @return At what stage(s) in the resource lifecycle should the command be run.
     * 
     */
    public Output<Optional<CommandLifecycle>> lifecycle() {
        return Codegen.optional(this.lifecycle);
    }
    /**
     * Corresponds to the --no-clobber option.
     * 
     */
    @Export(name="noClobber", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> noClobber;

    /**
     * @return Corresponds to the --no-clobber option.
     * 
     */
    public Output<Boolean> noClobber() {
        return this.noClobber;
    }
    /**
     * Corresponds to the --no-target-directory option.
     * 
     */
    @Export(name="noTargetDirectory", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> noTargetDirectory;

    /**
     * @return Corresponds to the --no-target-directory option.
     * 
     */
    public Output<Boolean> noTargetDirectory() {
        return this.noTargetDirectory;
    }
    /**
     * Corresponds to the [SOURCE] argument.
     * 
     */
    @Export(name="source", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> source;

    /**
     * @return Corresponds to the [SOURCE] argument.
     * 
     */
    public Output<List<String>> source() {
        return this.source;
    }
    /**
     * Corresponds to the --strip-trailing-suffix option.
     * 
     */
    @Export(name="stripTrailingSlashes", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> stripTrailingSlashes;

    /**
     * @return Corresponds to the --strip-trailing-suffix option.
     * 
     */
    public Output<Boolean> stripTrailingSlashes() {
        return this.stripTrailingSlashes;
    }
    /**
     * Corresponds to the --suffix option.
     * 
     */
    @Export(name="suffix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> suffix;

    /**
     * @return Corresponds to the --suffix option.
     * 
     */
    public Output<Optional<String>> suffix() {
        return Codegen.optional(this.suffix);
    }
    /**
     * Corresponds to the --target-directory option.
     * 
     */
    @Export(name="targetDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetDirectory;

    /**
     * @return Corresponds to the --target-directory option.
     * 
     */
    public Output<Optional<String>> targetDirectory() {
        return Codegen.optional(this.targetDirectory);
    }
    /**
     * Corresponds to the --update option.
     * 
     */
    @Export(name="update", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> update;

    /**
     * @return Corresponds to the --update option.
     * 
     */
    public Output<Boolean> update() {
        return this.update;
    }
    /**
     * Corresponds to the --verbose option.
     * 
     */
    @Export(name="verbose", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> verbose;

    /**
     * @return Corresponds to the --verbose option.
     * 
     */
    public Output<Boolean> verbose() {
        return this.verbose;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Mv(String name) {
        this(name, MvArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Mv(String name, MvArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Mv(String name, MvArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes-the-hard-way:tools:Mv", name, args == null ? MvArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
