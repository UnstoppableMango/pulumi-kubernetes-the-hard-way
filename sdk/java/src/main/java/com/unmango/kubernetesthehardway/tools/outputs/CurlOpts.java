// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.tools.enums.CurlCertType;
import com.unmango.kubernetesthehardway.tools.enums.CurlDelegationLevel;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CurlOpts {
    /**
     * @return (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
     * 
     */
    private @Nullable String abstractUnixSocket;
    /**
     * @return (HTTPS)  This  option enables the alt-svc parser in curl.
     * 
     */
    private @Nullable String altSvc;
    /**
     * @return (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
     * 
     */
    private @Nullable Boolean anyAuth;
    /**
     * @return (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
     * 
     */
    private @Nullable Boolean append;
    /**
     * @return Use AWS V4 signature authentication in the transfer.
     * 
     */
    private @Nullable String awsSigv4;
    /**
     * @return (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
     * 
     */
    private @Nullable Boolean basic;
    /**
     * @return (TLS)  Tells curl to use the specified certificate file to verify the peer.
     * 
     */
    private @Nullable String cacert;
    /**
     * @return (TLS) Tells curl to use the specified certificate directory to verify the peer.
     * 
     */
    private @Nullable String capath;
    /**
     * @return (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
     * 
     */
    private @Nullable String cert;
    /**
     * @return (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
     * 
     */
    private @Nullable Boolean certStatus;
    /**
     * @return (TLS) Tells curl what type the provided client certificate is using.
     * 
     */
    private @Nullable CurlCertType certType;
    /**
     * @return (TLS) Specifies which ciphers to use in the connection.
     * 
     */
    private @Nullable String ciphers;
    /**
     * @return (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
     * 
     */
    private @Nullable Boolean compressed;
    /**
     * @return (SCP SFTP) Enables built-in SSH compression.
     * 
     */
    private @Nullable Boolean compressedSsh;
    /**
     * @return Specify a text file to read curl arguments from.
     * 
     */
    private @Nullable String config;
    /**
     * @return Maximum  time  in seconds that you allow curl&#39;s connection to take.
     * 
     */
    private @Nullable Integer connectTimeout;
    /**
     * @return For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
     * 
     */
    private @Nullable String connectTo;
    /**
     * @return Continue/Resume a previous file transfer at the given offset.
     * 
     */
    private @Nullable String continueAt;
    /**
     * @return (HTTP) Pass the data to the HTTP server in the Cookie header.
     * 
     */
    private @Nullable String cookie;
    /**
     * @return (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
     * 
     */
    private @Nullable String cookieJar;
    /**
     * @return When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
     * 
     */
    private @Nullable Boolean createDirs;
    /**
     * @return (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which &#39;mode&#39; to set on the file at creation time, instead of the default 0644.
     * 
     */
    private @Nullable String createFileMode;
    /**
     * @return (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
     * 
     */
    private @Nullable Boolean crlf;
    /**
     * @return (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
     * 
     */
    private @Nullable String crlfFile;
    /**
     * @return (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
     * 
     */
    private @Nullable String curves;
    /**
     * @return (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
     * 
     */
    private @Nullable String data;
    /**
     * @return (HTTP) This is just an alias for -d, --data.
     * 
     */
    private @Nullable String dataAscii;
    /**
     * @return (HTTP) This posts data exactly as specified with no extra processing whatsoever.
     * 
     */
    private @Nullable String dataBinary;
    /**
     * @return (HTTP) This posts data similarly to -d, --data but without the special interpretation of the{@literal @} character.
     * 
     */
    private @Nullable String dataRaw;
    /**
     * @return (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
     * 
     */
    private @Nullable String dataUrlEncode;
    /**
     * @return (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
     * 
     */
    private @Nullable CurlDelegationLevel delegation;
    /**
     * @return (HTTP) Enables HTTP Digest authentication.
     * 
     */
    private @Nullable Boolean digest;
    /**
     * @return If used as the first parameter on the command line, the curlrc config file will not be read and used.
     * 
     */
    private @Nullable Boolean disable;
    /**
     * @return (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
     * 
     */
    private @Nullable Boolean disableEprt;
    /**
     * @return (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
     * 
     */
    private @Nullable Boolean disableEpsv;
    /**
     * @return (HTTP) This tells curl to exit if passed a url containing a username.
     * 
     */
    private @Nullable Boolean disallowUsernameInUrl;
    /**
     * @return (DNS)  Tell  curl  to send outgoing DNS requests through &lt;interface&gt;.
     * 
     */
    private @Nullable String dnsInterface;
    /**
     * @return (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    private @Nullable String dnsIpv4Addr;
    /**
     * @return (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    private @Nullable String dnsIpv6Addr;
    /**
     * @return Set the list of DNS servers to be used instead of the system default.
     * 
     */
    private @Nullable String dnsServers;
    /**
     * @return Same as --cert-status but used for DoH (DNS-over-HTTPS).
     * 
     */
    private @Nullable Boolean dohCertStatus;
    /**
     * @return Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
     * 
     */
    private @Nullable Boolean dohInsecure;
    /**
     * @return Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
     * 
     */
    private @Nullable String dohUrl;
    /**
     * @return (HTTP FTP) Write the received protocol headers to the specified file.
     * 
     */
    private @Nullable String dumpHeader;
    /**
     * @return (TLS) Specify the path name to the Entropy Gathering Daemon socket.
     * 
     */
    private @Nullable String egdFile;
    /**
     * @return (TLS) Select the OpenSSL crypto engine to use for cipher operations.
     * 
     */
    private @Nullable String engine;
    /**
     * @return (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
     * 
     */
    private @Nullable String etagCompare;
    /**
     * @return (HTTP) This option saves an HTTP ETag to the specified file.
     * 
     */
    private @Nullable String etagSave;
    /**
     * @return (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
     * 
     */
    private @Nullable Integer expect100Timeout;
    /**
     * @return (HTTP) Fail silently (no output at all) on server errors.
     * 
     */
    private @Nullable Boolean fail;
    /**
     * @return Fail and exit on the first detected transfer error.
     * 
     */
    private @Nullable Boolean failEarly;
    /**
     * @return (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
     * 
     */
    private @Nullable Boolean failWithBody;
    /**
     * @return (TLS) Tells curl to use false start during the TLS handshake.
     * 
     */
    private @Nullable Boolean falseStart;
    /**
     * @return (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
     * 
     */
    private @Nullable String form;
    /**
     * @return (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
     * 
     */
    private @Nullable Boolean formEscape;
    /**
     * @return (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
     * 
     */
    private @Nullable String formName;
    /**
     * @return (FTP) When an FTP server asks for &#39;account data&#39; after user name and password has been provided, this data is sent off using the ACCT command.
     * 
     */
    private @Nullable String ftpAccount;
    /**
     * @return (FTP) If authenticating with the USER and PASS commands fails, send this command.
     * 
     */
    private @Nullable String ftpAlternativeUser;
    /**
     * @return (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
     * 
     */
    private @Nullable Boolean ftpCreateDirs;
    /**
     * @return (FTP) Control what method curl should use to reach a file on an FTP(S) server.
     * 
     */
    private @Nullable String ftpMethod;
    /**
     * @return (FTP) Use passive mode for the data connection.
     * 
     */
    private @Nullable Boolean ftpPasv;
    /**
     * @return (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
     * 
     */
    private @Nullable String ftpPort;
    /**
     * @return (FTP) Tell curl to send a PRET command before PASV (and EPSV).
     * 
     */
    private @Nullable Boolean ftpPret;
    /**
     * @return (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl&#39;s PASV command when curl connects the data connection.
     * 
     */
    private @Nullable Boolean ftpSkipPasvIp;
    /**
     * @return (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
     * 
     */
    private @Nullable String ftpSslCccMode;
    /**
     * @return Corresponds to the URLs argument.
     * 
     */
    private List<String> urls;

    private CurlOpts() {}
    /**
     * @return (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
     * 
     */
    public Optional<String> abstractUnixSocket() {
        return Optional.ofNullable(this.abstractUnixSocket);
    }
    /**
     * @return (HTTPS)  This  option enables the alt-svc parser in curl.
     * 
     */
    public Optional<String> altSvc() {
        return Optional.ofNullable(this.altSvc);
    }
    /**
     * @return (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
     * 
     */
    public Optional<Boolean> anyAuth() {
        return Optional.ofNullable(this.anyAuth);
    }
    /**
     * @return (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
     * 
     */
    public Optional<Boolean> append() {
        return Optional.ofNullable(this.append);
    }
    /**
     * @return Use AWS V4 signature authentication in the transfer.
     * 
     */
    public Optional<String> awsSigv4() {
        return Optional.ofNullable(this.awsSigv4);
    }
    /**
     * @return (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
     * 
     */
    public Optional<Boolean> basic() {
        return Optional.ofNullable(this.basic);
    }
    /**
     * @return (TLS)  Tells curl to use the specified certificate file to verify the peer.
     * 
     */
    public Optional<String> cacert() {
        return Optional.ofNullable(this.cacert);
    }
    /**
     * @return (TLS) Tells curl to use the specified certificate directory to verify the peer.
     * 
     */
    public Optional<String> capath() {
        return Optional.ofNullable(this.capath);
    }
    /**
     * @return (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
     * 
     */
    public Optional<String> cert() {
        return Optional.ofNullable(this.cert);
    }
    /**
     * @return (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
     * 
     */
    public Optional<Boolean> certStatus() {
        return Optional.ofNullable(this.certStatus);
    }
    /**
     * @return (TLS) Tells curl what type the provided client certificate is using.
     * 
     */
    public Optional<CurlCertType> certType() {
        return Optional.ofNullable(this.certType);
    }
    /**
     * @return (TLS) Specifies which ciphers to use in the connection.
     * 
     */
    public Optional<String> ciphers() {
        return Optional.ofNullable(this.ciphers);
    }
    /**
     * @return (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
     * 
     */
    public Optional<Boolean> compressed() {
        return Optional.ofNullable(this.compressed);
    }
    /**
     * @return (SCP SFTP) Enables built-in SSH compression.
     * 
     */
    public Optional<Boolean> compressedSsh() {
        return Optional.ofNullable(this.compressedSsh);
    }
    /**
     * @return Specify a text file to read curl arguments from.
     * 
     */
    public Optional<String> config() {
        return Optional.ofNullable(this.config);
    }
    /**
     * @return Maximum  time  in seconds that you allow curl&#39;s connection to take.
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
     * 
     */
    public Optional<String> connectTo() {
        return Optional.ofNullable(this.connectTo);
    }
    /**
     * @return Continue/Resume a previous file transfer at the given offset.
     * 
     */
    public Optional<String> continueAt() {
        return Optional.ofNullable(this.continueAt);
    }
    /**
     * @return (HTTP) Pass the data to the HTTP server in the Cookie header.
     * 
     */
    public Optional<String> cookie() {
        return Optional.ofNullable(this.cookie);
    }
    /**
     * @return (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
     * 
     */
    public Optional<String> cookieJar() {
        return Optional.ofNullable(this.cookieJar);
    }
    /**
     * @return When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
     * 
     */
    public Optional<Boolean> createDirs() {
        return Optional.ofNullable(this.createDirs);
    }
    /**
     * @return (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which &#39;mode&#39; to set on the file at creation time, instead of the default 0644.
     * 
     */
    public Optional<String> createFileMode() {
        return Optional.ofNullable(this.createFileMode);
    }
    /**
     * @return (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
     * 
     */
    public Optional<Boolean> crlf() {
        return Optional.ofNullable(this.crlf);
    }
    /**
     * @return (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
     * 
     */
    public Optional<String> crlfFile() {
        return Optional.ofNullable(this.crlfFile);
    }
    /**
     * @return (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
     * 
     */
    public Optional<String> curves() {
        return Optional.ofNullable(this.curves);
    }
    /**
     * @return (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
     * 
     */
    public Optional<String> data() {
        return Optional.ofNullable(this.data);
    }
    /**
     * @return (HTTP) This is just an alias for -d, --data.
     * 
     */
    public Optional<String> dataAscii() {
        return Optional.ofNullable(this.dataAscii);
    }
    /**
     * @return (HTTP) This posts data exactly as specified with no extra processing whatsoever.
     * 
     */
    public Optional<String> dataBinary() {
        return Optional.ofNullable(this.dataBinary);
    }
    /**
     * @return (HTTP) This posts data similarly to -d, --data but without the special interpretation of the{@literal @} character.
     * 
     */
    public Optional<String> dataRaw() {
        return Optional.ofNullable(this.dataRaw);
    }
    /**
     * @return (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
     * 
     */
    public Optional<String> dataUrlEncode() {
        return Optional.ofNullable(this.dataUrlEncode);
    }
    /**
     * @return (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
     * 
     */
    public Optional<CurlDelegationLevel> delegation() {
        return Optional.ofNullable(this.delegation);
    }
    /**
     * @return (HTTP) Enables HTTP Digest authentication.
     * 
     */
    public Optional<Boolean> digest() {
        return Optional.ofNullable(this.digest);
    }
    /**
     * @return If used as the first parameter on the command line, the curlrc config file will not be read and used.
     * 
     */
    public Optional<Boolean> disable() {
        return Optional.ofNullable(this.disable);
    }
    /**
     * @return (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
     * 
     */
    public Optional<Boolean> disableEprt() {
        return Optional.ofNullable(this.disableEprt);
    }
    /**
     * @return (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
     * 
     */
    public Optional<Boolean> disableEpsv() {
        return Optional.ofNullable(this.disableEpsv);
    }
    /**
     * @return (HTTP) This tells curl to exit if passed a url containing a username.
     * 
     */
    public Optional<Boolean> disallowUsernameInUrl() {
        return Optional.ofNullable(this.disallowUsernameInUrl);
    }
    /**
     * @return (DNS)  Tell  curl  to send outgoing DNS requests through &lt;interface&gt;.
     * 
     */
    public Optional<String> dnsInterface() {
        return Optional.ofNullable(this.dnsInterface);
    }
    /**
     * @return (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    public Optional<String> dnsIpv4Addr() {
        return Optional.ofNullable(this.dnsIpv4Addr);
    }
    /**
     * @return (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    public Optional<String> dnsIpv6Addr() {
        return Optional.ofNullable(this.dnsIpv6Addr);
    }
    /**
     * @return Set the list of DNS servers to be used instead of the system default.
     * 
     */
    public Optional<String> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }
    /**
     * @return Same as --cert-status but used for DoH (DNS-over-HTTPS).
     * 
     */
    public Optional<Boolean> dohCertStatus() {
        return Optional.ofNullable(this.dohCertStatus);
    }
    /**
     * @return Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
     * 
     */
    public Optional<Boolean> dohInsecure() {
        return Optional.ofNullable(this.dohInsecure);
    }
    /**
     * @return Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
     * 
     */
    public Optional<String> dohUrl() {
        return Optional.ofNullable(this.dohUrl);
    }
    /**
     * @return (HTTP FTP) Write the received protocol headers to the specified file.
     * 
     */
    public Optional<String> dumpHeader() {
        return Optional.ofNullable(this.dumpHeader);
    }
    /**
     * @return (TLS) Specify the path name to the Entropy Gathering Daemon socket.
     * 
     */
    public Optional<String> egdFile() {
        return Optional.ofNullable(this.egdFile);
    }
    /**
     * @return (TLS) Select the OpenSSL crypto engine to use for cipher operations.
     * 
     */
    public Optional<String> engine() {
        return Optional.ofNullable(this.engine);
    }
    /**
     * @return (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
     * 
     */
    public Optional<String> etagCompare() {
        return Optional.ofNullable(this.etagCompare);
    }
    /**
     * @return (HTTP) This option saves an HTTP ETag to the specified file.
     * 
     */
    public Optional<String> etagSave() {
        return Optional.ofNullable(this.etagSave);
    }
    /**
     * @return (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
     * 
     */
    public Optional<Integer> expect100Timeout() {
        return Optional.ofNullable(this.expect100Timeout);
    }
    /**
     * @return (HTTP) Fail silently (no output at all) on server errors.
     * 
     */
    public Optional<Boolean> fail() {
        return Optional.ofNullable(this.fail);
    }
    /**
     * @return Fail and exit on the first detected transfer error.
     * 
     */
    public Optional<Boolean> failEarly() {
        return Optional.ofNullable(this.failEarly);
    }
    /**
     * @return (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
     * 
     */
    public Optional<Boolean> failWithBody() {
        return Optional.ofNullable(this.failWithBody);
    }
    /**
     * @return (TLS) Tells curl to use false start during the TLS handshake.
     * 
     */
    public Optional<Boolean> falseStart() {
        return Optional.ofNullable(this.falseStart);
    }
    /**
     * @return (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
     * 
     */
    public Optional<String> form() {
        return Optional.ofNullable(this.form);
    }
    /**
     * @return (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
     * 
     */
    public Optional<Boolean> formEscape() {
        return Optional.ofNullable(this.formEscape);
    }
    /**
     * @return (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
     * 
     */
    public Optional<String> formName() {
        return Optional.ofNullable(this.formName);
    }
    /**
     * @return (FTP) When an FTP server asks for &#39;account data&#39; after user name and password has been provided, this data is sent off using the ACCT command.
     * 
     */
    public Optional<String> ftpAccount() {
        return Optional.ofNullable(this.ftpAccount);
    }
    /**
     * @return (FTP) If authenticating with the USER and PASS commands fails, send this command.
     * 
     */
    public Optional<String> ftpAlternativeUser() {
        return Optional.ofNullable(this.ftpAlternativeUser);
    }
    /**
     * @return (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
     * 
     */
    public Optional<Boolean> ftpCreateDirs() {
        return Optional.ofNullable(this.ftpCreateDirs);
    }
    /**
     * @return (FTP) Control what method curl should use to reach a file on an FTP(S) server.
     * 
     */
    public Optional<String> ftpMethod() {
        return Optional.ofNullable(this.ftpMethod);
    }
    /**
     * @return (FTP) Use passive mode for the data connection.
     * 
     */
    public Optional<Boolean> ftpPasv() {
        return Optional.ofNullable(this.ftpPasv);
    }
    /**
     * @return (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
     * 
     */
    public Optional<String> ftpPort() {
        return Optional.ofNullable(this.ftpPort);
    }
    /**
     * @return (FTP) Tell curl to send a PRET command before PASV (and EPSV).
     * 
     */
    public Optional<Boolean> ftpPret() {
        return Optional.ofNullable(this.ftpPret);
    }
    /**
     * @return (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl&#39;s PASV command when curl connects the data connection.
     * 
     */
    public Optional<Boolean> ftpSkipPasvIp() {
        return Optional.ofNullable(this.ftpSkipPasvIp);
    }
    /**
     * @return (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
     * 
     */
    public Optional<String> ftpSslCccMode() {
        return Optional.ofNullable(this.ftpSslCccMode);
    }
    /**
     * @return Corresponds to the URLs argument.
     * 
     */
    public List<String> urls() {
        return this.urls;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CurlOpts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String abstractUnixSocket;
        private @Nullable String altSvc;
        private @Nullable Boolean anyAuth;
        private @Nullable Boolean append;
        private @Nullable String awsSigv4;
        private @Nullable Boolean basic;
        private @Nullable String cacert;
        private @Nullable String capath;
        private @Nullable String cert;
        private @Nullable Boolean certStatus;
        private @Nullable CurlCertType certType;
        private @Nullable String ciphers;
        private @Nullable Boolean compressed;
        private @Nullable Boolean compressedSsh;
        private @Nullable String config;
        private @Nullable Integer connectTimeout;
        private @Nullable String connectTo;
        private @Nullable String continueAt;
        private @Nullable String cookie;
        private @Nullable String cookieJar;
        private @Nullable Boolean createDirs;
        private @Nullable String createFileMode;
        private @Nullable Boolean crlf;
        private @Nullable String crlfFile;
        private @Nullable String curves;
        private @Nullable String data;
        private @Nullable String dataAscii;
        private @Nullable String dataBinary;
        private @Nullable String dataRaw;
        private @Nullable String dataUrlEncode;
        private @Nullable CurlDelegationLevel delegation;
        private @Nullable Boolean digest;
        private @Nullable Boolean disable;
        private @Nullable Boolean disableEprt;
        private @Nullable Boolean disableEpsv;
        private @Nullable Boolean disallowUsernameInUrl;
        private @Nullable String dnsInterface;
        private @Nullable String dnsIpv4Addr;
        private @Nullable String dnsIpv6Addr;
        private @Nullable String dnsServers;
        private @Nullable Boolean dohCertStatus;
        private @Nullable Boolean dohInsecure;
        private @Nullable String dohUrl;
        private @Nullable String dumpHeader;
        private @Nullable String egdFile;
        private @Nullable String engine;
        private @Nullable String etagCompare;
        private @Nullable String etagSave;
        private @Nullable Integer expect100Timeout;
        private @Nullable Boolean fail;
        private @Nullable Boolean failEarly;
        private @Nullable Boolean failWithBody;
        private @Nullable Boolean falseStart;
        private @Nullable String form;
        private @Nullable Boolean formEscape;
        private @Nullable String formName;
        private @Nullable String ftpAccount;
        private @Nullable String ftpAlternativeUser;
        private @Nullable Boolean ftpCreateDirs;
        private @Nullable String ftpMethod;
        private @Nullable Boolean ftpPasv;
        private @Nullable String ftpPort;
        private @Nullable Boolean ftpPret;
        private @Nullable Boolean ftpSkipPasvIp;
        private @Nullable String ftpSslCccMode;
        private List<String> urls;
        public Builder() {}
        public Builder(CurlOpts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abstractUnixSocket = defaults.abstractUnixSocket;
    	      this.altSvc = defaults.altSvc;
    	      this.anyAuth = defaults.anyAuth;
    	      this.append = defaults.append;
    	      this.awsSigv4 = defaults.awsSigv4;
    	      this.basic = defaults.basic;
    	      this.cacert = defaults.cacert;
    	      this.capath = defaults.capath;
    	      this.cert = defaults.cert;
    	      this.certStatus = defaults.certStatus;
    	      this.certType = defaults.certType;
    	      this.ciphers = defaults.ciphers;
    	      this.compressed = defaults.compressed;
    	      this.compressedSsh = defaults.compressedSsh;
    	      this.config = defaults.config;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.connectTo = defaults.connectTo;
    	      this.continueAt = defaults.continueAt;
    	      this.cookie = defaults.cookie;
    	      this.cookieJar = defaults.cookieJar;
    	      this.createDirs = defaults.createDirs;
    	      this.createFileMode = defaults.createFileMode;
    	      this.crlf = defaults.crlf;
    	      this.crlfFile = defaults.crlfFile;
    	      this.curves = defaults.curves;
    	      this.data = defaults.data;
    	      this.dataAscii = defaults.dataAscii;
    	      this.dataBinary = defaults.dataBinary;
    	      this.dataRaw = defaults.dataRaw;
    	      this.dataUrlEncode = defaults.dataUrlEncode;
    	      this.delegation = defaults.delegation;
    	      this.digest = defaults.digest;
    	      this.disable = defaults.disable;
    	      this.disableEprt = defaults.disableEprt;
    	      this.disableEpsv = defaults.disableEpsv;
    	      this.disallowUsernameInUrl = defaults.disallowUsernameInUrl;
    	      this.dnsInterface = defaults.dnsInterface;
    	      this.dnsIpv4Addr = defaults.dnsIpv4Addr;
    	      this.dnsIpv6Addr = defaults.dnsIpv6Addr;
    	      this.dnsServers = defaults.dnsServers;
    	      this.dohCertStatus = defaults.dohCertStatus;
    	      this.dohInsecure = defaults.dohInsecure;
    	      this.dohUrl = defaults.dohUrl;
    	      this.dumpHeader = defaults.dumpHeader;
    	      this.egdFile = defaults.egdFile;
    	      this.engine = defaults.engine;
    	      this.etagCompare = defaults.etagCompare;
    	      this.etagSave = defaults.etagSave;
    	      this.expect100Timeout = defaults.expect100Timeout;
    	      this.fail = defaults.fail;
    	      this.failEarly = defaults.failEarly;
    	      this.failWithBody = defaults.failWithBody;
    	      this.falseStart = defaults.falseStart;
    	      this.form = defaults.form;
    	      this.formEscape = defaults.formEscape;
    	      this.formName = defaults.formName;
    	      this.ftpAccount = defaults.ftpAccount;
    	      this.ftpAlternativeUser = defaults.ftpAlternativeUser;
    	      this.ftpCreateDirs = defaults.ftpCreateDirs;
    	      this.ftpMethod = defaults.ftpMethod;
    	      this.ftpPasv = defaults.ftpPasv;
    	      this.ftpPort = defaults.ftpPort;
    	      this.ftpPret = defaults.ftpPret;
    	      this.ftpSkipPasvIp = defaults.ftpSkipPasvIp;
    	      this.ftpSslCccMode = defaults.ftpSslCccMode;
    	      this.urls = defaults.urls;
        }

        @CustomType.Setter
        public Builder abstractUnixSocket(@Nullable String abstractUnixSocket) {

            this.abstractUnixSocket = abstractUnixSocket;
            return this;
        }
        @CustomType.Setter
        public Builder altSvc(@Nullable String altSvc) {

            this.altSvc = altSvc;
            return this;
        }
        @CustomType.Setter
        public Builder anyAuth(@Nullable Boolean anyAuth) {

            this.anyAuth = anyAuth;
            return this;
        }
        @CustomType.Setter
        public Builder append(@Nullable Boolean append) {

            this.append = append;
            return this;
        }
        @CustomType.Setter
        public Builder awsSigv4(@Nullable String awsSigv4) {

            this.awsSigv4 = awsSigv4;
            return this;
        }
        @CustomType.Setter
        public Builder basic(@Nullable Boolean basic) {

            this.basic = basic;
            return this;
        }
        @CustomType.Setter
        public Builder cacert(@Nullable String cacert) {

            this.cacert = cacert;
            return this;
        }
        @CustomType.Setter
        public Builder capath(@Nullable String capath) {

            this.capath = capath;
            return this;
        }
        @CustomType.Setter
        public Builder cert(@Nullable String cert) {

            this.cert = cert;
            return this;
        }
        @CustomType.Setter
        public Builder certStatus(@Nullable Boolean certStatus) {

            this.certStatus = certStatus;
            return this;
        }
        @CustomType.Setter
        public Builder certType(@Nullable CurlCertType certType) {

            this.certType = certType;
            return this;
        }
        @CustomType.Setter
        public Builder ciphers(@Nullable String ciphers) {

            this.ciphers = ciphers;
            return this;
        }
        @CustomType.Setter
        public Builder compressed(@Nullable Boolean compressed) {

            this.compressed = compressed;
            return this;
        }
        @CustomType.Setter
        public Builder compressedSsh(@Nullable Boolean compressedSsh) {

            this.compressedSsh = compressedSsh;
            return this;
        }
        @CustomType.Setter
        public Builder config(@Nullable String config) {

            this.config = config;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {

            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder connectTo(@Nullable String connectTo) {

            this.connectTo = connectTo;
            return this;
        }
        @CustomType.Setter
        public Builder continueAt(@Nullable String continueAt) {

            this.continueAt = continueAt;
            return this;
        }
        @CustomType.Setter
        public Builder cookie(@Nullable String cookie) {

            this.cookie = cookie;
            return this;
        }
        @CustomType.Setter
        public Builder cookieJar(@Nullable String cookieJar) {

            this.cookieJar = cookieJar;
            return this;
        }
        @CustomType.Setter
        public Builder createDirs(@Nullable Boolean createDirs) {

            this.createDirs = createDirs;
            return this;
        }
        @CustomType.Setter
        public Builder createFileMode(@Nullable String createFileMode) {

            this.createFileMode = createFileMode;
            return this;
        }
        @CustomType.Setter
        public Builder crlf(@Nullable Boolean crlf) {

            this.crlf = crlf;
            return this;
        }
        @CustomType.Setter
        public Builder crlfFile(@Nullable String crlfFile) {

            this.crlfFile = crlfFile;
            return this;
        }
        @CustomType.Setter
        public Builder curves(@Nullable String curves) {

            this.curves = curves;
            return this;
        }
        @CustomType.Setter
        public Builder data(@Nullable String data) {

            this.data = data;
            return this;
        }
        @CustomType.Setter
        public Builder dataAscii(@Nullable String dataAscii) {

            this.dataAscii = dataAscii;
            return this;
        }
        @CustomType.Setter
        public Builder dataBinary(@Nullable String dataBinary) {

            this.dataBinary = dataBinary;
            return this;
        }
        @CustomType.Setter
        public Builder dataRaw(@Nullable String dataRaw) {

            this.dataRaw = dataRaw;
            return this;
        }
        @CustomType.Setter
        public Builder dataUrlEncode(@Nullable String dataUrlEncode) {

            this.dataUrlEncode = dataUrlEncode;
            return this;
        }
        @CustomType.Setter
        public Builder delegation(@Nullable CurlDelegationLevel delegation) {

            this.delegation = delegation;
            return this;
        }
        @CustomType.Setter
        public Builder digest(@Nullable Boolean digest) {

            this.digest = digest;
            return this;
        }
        @CustomType.Setter
        public Builder disable(@Nullable Boolean disable) {

            this.disable = disable;
            return this;
        }
        @CustomType.Setter
        public Builder disableEprt(@Nullable Boolean disableEprt) {

            this.disableEprt = disableEprt;
            return this;
        }
        @CustomType.Setter
        public Builder disableEpsv(@Nullable Boolean disableEpsv) {

            this.disableEpsv = disableEpsv;
            return this;
        }
        @CustomType.Setter
        public Builder disallowUsernameInUrl(@Nullable Boolean disallowUsernameInUrl) {

            this.disallowUsernameInUrl = disallowUsernameInUrl;
            return this;
        }
        @CustomType.Setter
        public Builder dnsInterface(@Nullable String dnsInterface) {

            this.dnsInterface = dnsInterface;
            return this;
        }
        @CustomType.Setter
        public Builder dnsIpv4Addr(@Nullable String dnsIpv4Addr) {

            this.dnsIpv4Addr = dnsIpv4Addr;
            return this;
        }
        @CustomType.Setter
        public Builder dnsIpv6Addr(@Nullable String dnsIpv6Addr) {

            this.dnsIpv6Addr = dnsIpv6Addr;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(@Nullable String dnsServers) {

            this.dnsServers = dnsServers;
            return this;
        }
        @CustomType.Setter
        public Builder dohCertStatus(@Nullable Boolean dohCertStatus) {

            this.dohCertStatus = dohCertStatus;
            return this;
        }
        @CustomType.Setter
        public Builder dohInsecure(@Nullable Boolean dohInsecure) {

            this.dohInsecure = dohInsecure;
            return this;
        }
        @CustomType.Setter
        public Builder dohUrl(@Nullable String dohUrl) {

            this.dohUrl = dohUrl;
            return this;
        }
        @CustomType.Setter
        public Builder dumpHeader(@Nullable String dumpHeader) {

            this.dumpHeader = dumpHeader;
            return this;
        }
        @CustomType.Setter
        public Builder egdFile(@Nullable String egdFile) {

            this.egdFile = egdFile;
            return this;
        }
        @CustomType.Setter
        public Builder engine(@Nullable String engine) {

            this.engine = engine;
            return this;
        }
        @CustomType.Setter
        public Builder etagCompare(@Nullable String etagCompare) {

            this.etagCompare = etagCompare;
            return this;
        }
        @CustomType.Setter
        public Builder etagSave(@Nullable String etagSave) {

            this.etagSave = etagSave;
            return this;
        }
        @CustomType.Setter
        public Builder expect100Timeout(@Nullable Integer expect100Timeout) {

            this.expect100Timeout = expect100Timeout;
            return this;
        }
        @CustomType.Setter
        public Builder fail(@Nullable Boolean fail) {

            this.fail = fail;
            return this;
        }
        @CustomType.Setter
        public Builder failEarly(@Nullable Boolean failEarly) {

            this.failEarly = failEarly;
            return this;
        }
        @CustomType.Setter
        public Builder failWithBody(@Nullable Boolean failWithBody) {

            this.failWithBody = failWithBody;
            return this;
        }
        @CustomType.Setter
        public Builder falseStart(@Nullable Boolean falseStart) {

            this.falseStart = falseStart;
            return this;
        }
        @CustomType.Setter
        public Builder form(@Nullable String form) {

            this.form = form;
            return this;
        }
        @CustomType.Setter
        public Builder formEscape(@Nullable Boolean formEscape) {

            this.formEscape = formEscape;
            return this;
        }
        @CustomType.Setter
        public Builder formName(@Nullable String formName) {

            this.formName = formName;
            return this;
        }
        @CustomType.Setter
        public Builder ftpAccount(@Nullable String ftpAccount) {

            this.ftpAccount = ftpAccount;
            return this;
        }
        @CustomType.Setter
        public Builder ftpAlternativeUser(@Nullable String ftpAlternativeUser) {

            this.ftpAlternativeUser = ftpAlternativeUser;
            return this;
        }
        @CustomType.Setter
        public Builder ftpCreateDirs(@Nullable Boolean ftpCreateDirs) {

            this.ftpCreateDirs = ftpCreateDirs;
            return this;
        }
        @CustomType.Setter
        public Builder ftpMethod(@Nullable String ftpMethod) {

            this.ftpMethod = ftpMethod;
            return this;
        }
        @CustomType.Setter
        public Builder ftpPasv(@Nullable Boolean ftpPasv) {

            this.ftpPasv = ftpPasv;
            return this;
        }
        @CustomType.Setter
        public Builder ftpPort(@Nullable String ftpPort) {

            this.ftpPort = ftpPort;
            return this;
        }
        @CustomType.Setter
        public Builder ftpPret(@Nullable Boolean ftpPret) {

            this.ftpPret = ftpPret;
            return this;
        }
        @CustomType.Setter
        public Builder ftpSkipPasvIp(@Nullable Boolean ftpSkipPasvIp) {

            this.ftpSkipPasvIp = ftpSkipPasvIp;
            return this;
        }
        @CustomType.Setter
        public Builder ftpSslCccMode(@Nullable String ftpSslCccMode) {

            this.ftpSslCccMode = ftpSslCccMode;
            return this;
        }
        @CustomType.Setter
        public Builder urls(List<String> urls) {
            if (urls == null) {
              throw new MissingRequiredPropertyException("CurlOpts", "urls");
            }
            this.urls = urls;
            return this;
        }
        public Builder urls(String... urls) {
            return urls(List.of(urls));
        }
        public CurlOpts build() {
            final var _resultValue = new CurlOpts();
            _resultValue.abstractUnixSocket = abstractUnixSocket;
            _resultValue.altSvc = altSvc;
            _resultValue.anyAuth = anyAuth;
            _resultValue.append = append;
            _resultValue.awsSigv4 = awsSigv4;
            _resultValue.basic = basic;
            _resultValue.cacert = cacert;
            _resultValue.capath = capath;
            _resultValue.cert = cert;
            _resultValue.certStatus = certStatus;
            _resultValue.certType = certType;
            _resultValue.ciphers = ciphers;
            _resultValue.compressed = compressed;
            _resultValue.compressedSsh = compressedSsh;
            _resultValue.config = config;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.connectTo = connectTo;
            _resultValue.continueAt = continueAt;
            _resultValue.cookie = cookie;
            _resultValue.cookieJar = cookieJar;
            _resultValue.createDirs = createDirs;
            _resultValue.createFileMode = createFileMode;
            _resultValue.crlf = crlf;
            _resultValue.crlfFile = crlfFile;
            _resultValue.curves = curves;
            _resultValue.data = data;
            _resultValue.dataAscii = dataAscii;
            _resultValue.dataBinary = dataBinary;
            _resultValue.dataRaw = dataRaw;
            _resultValue.dataUrlEncode = dataUrlEncode;
            _resultValue.delegation = delegation;
            _resultValue.digest = digest;
            _resultValue.disable = disable;
            _resultValue.disableEprt = disableEprt;
            _resultValue.disableEpsv = disableEpsv;
            _resultValue.disallowUsernameInUrl = disallowUsernameInUrl;
            _resultValue.dnsInterface = dnsInterface;
            _resultValue.dnsIpv4Addr = dnsIpv4Addr;
            _resultValue.dnsIpv6Addr = dnsIpv6Addr;
            _resultValue.dnsServers = dnsServers;
            _resultValue.dohCertStatus = dohCertStatus;
            _resultValue.dohInsecure = dohInsecure;
            _resultValue.dohUrl = dohUrl;
            _resultValue.dumpHeader = dumpHeader;
            _resultValue.egdFile = egdFile;
            _resultValue.engine = engine;
            _resultValue.etagCompare = etagCompare;
            _resultValue.etagSave = etagSave;
            _resultValue.expect100Timeout = expect100Timeout;
            _resultValue.fail = fail;
            _resultValue.failEarly = failEarly;
            _resultValue.failWithBody = failWithBody;
            _resultValue.falseStart = falseStart;
            _resultValue.form = form;
            _resultValue.formEscape = formEscape;
            _resultValue.formName = formName;
            _resultValue.ftpAccount = ftpAccount;
            _resultValue.ftpAlternativeUser = ftpAlternativeUser;
            _resultValue.ftpCreateDirs = ftpCreateDirs;
            _resultValue.ftpMethod = ftpMethod;
            _resultValue.ftpPasv = ftpPasv;
            _resultValue.ftpPort = ftpPort;
            _resultValue.ftpPret = ftpPret;
            _resultValue.ftpSkipPasvIp = ftpSkipPasvIp;
            _resultValue.ftpSslCccMode = ftpSslCccMode;
            _resultValue.urls = urls;
            return _resultValue;
        }
    }
}
