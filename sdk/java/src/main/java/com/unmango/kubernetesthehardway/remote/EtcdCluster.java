// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.remote.EtcdClusterArgs;
import com.unmango.kubernetesthehardway.remote.EtcdConfiguration;
import com.unmango.kubernetesthehardway.remote.EtcdInstall;
import com.unmango.kubernetesthehardway.remote.EtcdService;
import com.unmango.kubernetesthehardway.remote.StartEtcd;
import com.unmango.kubernetesthehardway.remote.enums.Architecture;
import com.unmango.kubernetesthehardway.remote.outputs.EtcdNode;
import com.unmango.kubernetesthehardway.tls.outputs.Bundle;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates an etcd cluster from one or more remote systems.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:remote:EtcdCluster")
public class EtcdCluster extends com.pulumi.resources.ComponentResource {
    /**
     * TODO
     * 
     */
    @Export(name="architecture", refs={Architecture.class}, tree="[0]")
    private Output</* @Nullable */ Architecture> architecture;

    /**
     * @return TODO
     * 
     */
    public Output<Optional<Architecture>> architecture() {
        return Codegen.optional(this.architecture);
    }
    /**
     * TODO
     * 
     */
    @Export(name="binaryDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> binaryDirectory;

    /**
     * @return TODO
     * 
     */
    public Output<Optional<String>> binaryDirectory() {
        return Codegen.optional(this.binaryDirectory);
    }
    /**
     * The TLS bundle.
     * 
     */
    @Export(name="bundle", refs={Bundle.class}, tree="[0]")
    private Output<Bundle> bundle;

    /**
     * @return The TLS bundle.
     * 
     */
    public Output<Bundle> bundle() {
        return this.bundle;
    }
    /**
     * Map of node name to etcd configuration.
     * 
     */
    @Export(name="configuration", refs={Map.class,String.class,EtcdConfiguration.class}, tree="[0,1,2]")
    private Output<Map<String,EtcdConfiguration>> configuration;

    /**
     * @return Map of node name to etcd configuration.
     * 
     */
    public Output<Map<String,EtcdConfiguration>> configuration() {
        return this.configuration;
    }
    /**
     * The directory to use for etcd configuration.
     * 
     */
    @Export(name="configurationDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> configurationDirectory;

    /**
     * @return The directory to use for etcd configuration.
     * 
     */
    public Output<Optional<String>> configurationDirectory() {
        return Codegen.optional(this.configurationDirectory);
    }
    /**
     * The directory to use for etcd data.
     * 
     */
    @Export(name="dataDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dataDirectory;

    /**
     * @return The directory to use for etcd data.
     * 
     */
    public Output<Optional<String>> dataDirectory() {
        return Codegen.optional(this.dataDirectory);
    }
    /**
     * Map of node name to etcd install.
     * 
     */
    @Export(name="install", refs={Map.class,String.class,EtcdInstall.class}, tree="[0,1,2]")
    private Output<Map<String,EtcdInstall>> install;

    /**
     * @return Map of node name to etcd install.
     * 
     */
    public Output<Map<String,EtcdInstall>> install() {
        return this.install;
    }
    /**
     * Etcd node configuration. The key should be a name used to identify the node.
     * 
     */
    @Export(name="nodes", refs={Map.class,String.class,EtcdNode.class}, tree="[0,1,2]")
    private Output<Map<String,EtcdNode>> nodes;

    /**
     * @return Etcd node configuration. The key should be a name used to identify the node.
     * 
     */
    public Output<Map<String,EtcdNode>> nodes() {
        return this.nodes;
    }
    /**
     * Map of node name to etcd systemd service.
     * 
     */
    @Export(name="service", refs={Map.class,String.class,EtcdService.class}, tree="[0,1,2]")
    private Output<Map<String,EtcdService>> service;

    /**
     * @return Map of node name to etcd systemd service.
     * 
     */
    public Output<Map<String,EtcdService>> service() {
        return this.service;
    }
    /**
     * Map of node name to etcd start commands.
     * 
     */
    @Export(name="start", refs={Map.class,String.class,StartEtcd.class}, tree="[0,1,2]")
    private Output<Map<String,StartEtcd>> start;

    /**
     * @return Map of node name to etcd start commands.
     * 
     */
    public Output<Map<String,StartEtcd>> start() {
        return this.start;
    }
    /**
     * The version to install.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> version;

    /**
     * @return The version to install.
     * 
     */
    public Output<Optional<String>> version() {
        return Codegen.optional(this.version);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EtcdCluster(String name) {
        this(name, EtcdClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EtcdCluster(String name, EtcdClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EtcdCluster(String name, EtcdClusterArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes-the-hard-way:remote:EtcdCluster", name, args == null ? EtcdClusterArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
