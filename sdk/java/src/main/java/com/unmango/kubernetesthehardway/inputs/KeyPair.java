// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.tls.PrivateKey;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A certificate and key pair.
 * 
 */
public final class KeyPair extends com.pulumi.resources.InvokeArgs {

    public static final KeyPair Empty = new KeyPair();

    /**
     * The PEM encoded certificate data
     * 
     */
    @Import(name="certPem")
    private @Nullable String certPem;

    /**
     * @return The PEM encoded certificate data
     * 
     */
    public Optional<String> certPem() {
        return Optional.ofNullable(this.certPem);
    }

    /**
     * The private key.
     * 
     */
    @Import(name="key")
    private @Nullable PrivateKey key;

    /**
     * @return The private key.
     * 
     */
    public Optional<PrivateKey> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The PEM encoded private key data.
     * 
     */
    @Import(name="privateKeyPem")
    private @Nullable String privateKeyPem;

    /**
     * @return The PEM encoded private key data.
     * 
     */
    public Optional<String> privateKeyPem() {
        return Optional.ofNullable(this.privateKeyPem);
    }

    /**
     * The PEM encoded public key data.
     * 
     */
    @Import(name="publicKeyPem")
    private @Nullable String publicKeyPem;

    /**
     * @return The PEM encoded public key data.
     * 
     */
    public Optional<String> publicKeyPem() {
        return Optional.ofNullable(this.publicKeyPem);
    }

    private KeyPair() {}

    private KeyPair(KeyPair $) {
        this.certPem = $.certPem;
        this.key = $.key;
        this.privateKeyPem = $.privateKeyPem;
        this.publicKeyPem = $.publicKeyPem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyPair defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyPair $;

        public Builder() {
            $ = new KeyPair();
        }

        public Builder(KeyPair defaults) {
            $ = new KeyPair(Objects.requireNonNull(defaults));
        }

        /**
         * @param certPem The PEM encoded certificate data
         * 
         * @return builder
         * 
         */
        public Builder certPem(@Nullable String certPem) {
            $.certPem = certPem;
            return this;
        }

        /**
         * @param key The private key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable PrivateKey key) {
            $.key = key;
            return this;
        }

        /**
         * @param privateKeyPem The PEM encoded private key data.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPem(@Nullable String privateKeyPem) {
            $.privateKeyPem = privateKeyPem;
            return this;
        }

        /**
         * @param publicKeyPem The PEM encoded public key data.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyPem(@Nullable String publicKeyPem) {
            $.publicKeyPem = publicKeyPem;
            return this;
        }

        public KeyPair build() {
            return $;
        }
    }

}
