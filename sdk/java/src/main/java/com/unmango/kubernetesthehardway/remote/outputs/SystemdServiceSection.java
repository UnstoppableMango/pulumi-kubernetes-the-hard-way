// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote.outputs;

import com.pulumi.core.annotations.CustomType;
import com.unmango.kubernetesthehardway.remote.enums.SystemdServiceExitType;
import com.unmango.kubernetesthehardway.remote.enums.SystemdServiceRestart;
import com.unmango.kubernetesthehardway.remote.enums.SystemdServiceType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SystemdServiceSection {
    /**
     * @return Commands that are executed when this service is started.
     * 
     */
    private @Nullable String execStart;
    /**
     * @return Specifies when the manager should consider the service to be finished.
     * 
     */
    private @Nullable SystemdServiceExitType exitType;
    /**
     * @return Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
     * 
     */
    private @Nullable SystemdServiceRestart restart;
    /**
     * @return Configures the time to sleep before restarting a service (as configured with Restart=).
     * 
     */
    private @Nullable String restartSec;
    /**
     * @return Configures the mechanism via which the service notifies the manager that the service start-up has finished.
     * 
     */
    private @Nullable SystemdServiceType type;

    private SystemdServiceSection() {}
    /**
     * @return Commands that are executed when this service is started.
     * 
     */
    public Optional<String> execStart() {
        return Optional.ofNullable(this.execStart);
    }
    /**
     * @return Specifies when the manager should consider the service to be finished.
     * 
     */
    public Optional<SystemdServiceExitType> exitType() {
        return Optional.ofNullable(this.exitType);
    }
    /**
     * @return Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
     * 
     */
    public Optional<SystemdServiceRestart> restart() {
        return Optional.ofNullable(this.restart);
    }
    /**
     * @return Configures the time to sleep before restarting a service (as configured with Restart=).
     * 
     */
    public Optional<String> restartSec() {
        return Optional.ofNullable(this.restartSec);
    }
    /**
     * @return Configures the mechanism via which the service notifies the manager that the service start-up has finished.
     * 
     */
    public Optional<SystemdServiceType> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SystemdServiceSection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String execStart;
        private @Nullable SystemdServiceExitType exitType;
        private @Nullable SystemdServiceRestart restart;
        private @Nullable String restartSec;
        private @Nullable SystemdServiceType type;
        public Builder() {}
        public Builder(SystemdServiceSection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.execStart = defaults.execStart;
    	      this.exitType = defaults.exitType;
    	      this.restart = defaults.restart;
    	      this.restartSec = defaults.restartSec;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder execStart(@Nullable String execStart) {

            this.execStart = execStart;
            return this;
        }
        @CustomType.Setter
        public Builder exitType(@Nullable SystemdServiceExitType exitType) {

            this.exitType = exitType;
            return this;
        }
        @CustomType.Setter
        public Builder restart(@Nullable SystemdServiceRestart restart) {

            this.restart = restart;
            return this;
        }
        @CustomType.Setter
        public Builder restartSec(@Nullable String restartSec) {

            this.restartSec = restartSec;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable SystemdServiceType type) {

            this.type = type;
            return this;
        }
        public SystemdServiceSection build() {
            final var _resultValue = new SystemdServiceSection();
            _resultValue.execStart = execStart;
            _resultValue.exitType = exitType;
            _resultValue.restart = restart;
            _resultValue.restartSec = restartSec;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
