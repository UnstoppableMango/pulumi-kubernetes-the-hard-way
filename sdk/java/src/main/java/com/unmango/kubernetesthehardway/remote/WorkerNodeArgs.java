// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.command.remote.inputs.ConnectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.remote.enums.Architecture;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerNodeArgs Empty = new WorkerNodeArgs();

    /**
     * The CPU architecture of the node.
     * 
     */
    @Import(name="architecture", required=true)
    private Output<Architecture> architecture;

    /**
     * @return The CPU architecture of the node.
     * 
     */
    public Output<Architecture> architecture() {
        return this.architecture;
    }

    /**
     * The path to the cluster certificate authority file.
     * 
     */
    @Import(name="caPath", required=true)
    private Output<String> caPath;

    /**
     * @return The path to the cluster certificate authority file.
     * 
     */
    public Output<String> caPath() {
        return this.caPath;
    }

    /**
     * The CIDR to use for the cluster.
     * 
     */
    @Import(name="clusterCIDR")
    private @Nullable Output<String> clusterCIDR;

    /**
     * @return The CIDR to use for the cluster.
     * 
     */
    public Optional<Output<String>> clusterCIDR() {
        return Optional.ofNullable(this.clusterCIDR);
    }

    /**
     * The domain for the cluster to use. Defaults to cluster.local.
     * 
     */
    @Import(name="clusterDomain")
    private @Nullable Output<String> clusterDomain;

    /**
     * @return The domain for the cluster to use. Defaults to cluster.local.
     * 
     */
    public Optional<Output<String>> clusterDomain() {
        return Optional.ofNullable(this.clusterDomain);
    }

    /**
     * The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
     * 
     */
    @Import(name="cniConfigurationDirectory")
    private @Nullable Output<String> cniConfigurationDirectory;

    /**
     * @return The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
     * 
     */
    public Optional<Output<String>> cniConfigurationDirectory() {
        return Optional.ofNullable(this.cniConfigurationDirectory);
    }

    /**
     * The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
     * 
     */
    @Import(name="cniInstallDirectory")
    private @Nullable Output<String> cniInstallDirectory;

    /**
     * @return The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
     * 
     */
    public Optional<Output<String>> cniInstallDirectory() {
        return Optional.ofNullable(this.cniInstallDirectory);
    }

    /**
     * The CNI version to use.
     * 
     */
    @Import(name="cniVersion")
    private @Nullable Output<String> cniVersion;

    /**
     * @return The CNI version to use.
     * 
     */
    public Optional<Output<String>> cniVersion() {
        return Optional.ofNullable(this.cniVersion);
    }

    /**
     * The parameters with which to connect to the remote host.
     * 
     */
    @Import(name="connection", required=true)
    private Output<ConnectionArgs> connection;

    /**
     * @return The parameters with which to connect to the remote host.
     * 
     */
    public Output<ConnectionArgs> connection() {
        return this.connection;
    }

    /**
     * The directory to store containerd configuration files. Defaults to /etc/containerd.
     * 
     */
    @Import(name="containerdConfigurationDirectory")
    private @Nullable Output<String> containerdConfigurationDirectory;

    /**
     * @return The directory to store containerd configuration files. Defaults to /etc/containerd.
     * 
     */
    public Optional<Output<String>> containerdConfigurationDirectory() {
        return Optional.ofNullable(this.containerdConfigurationDirectory);
    }

    /**
     * The directory to store the containerd binary. Defaults to /bin.
     * 
     */
    @Import(name="containerdInstallDirectory")
    private @Nullable Output<String> containerdInstallDirectory;

    /**
     * @return The directory to store the containerd binary. Defaults to /bin.
     * 
     */
    public Optional<Output<String>> containerdInstallDirectory() {
        return Optional.ofNullable(this.containerdInstallDirectory);
    }

    /**
     * The containerd version to use.
     * 
     */
    @Import(name="containerdVersion")
    private @Nullable Output<String> containerdVersion;

    /**
     * @return The containerd version to use.
     * 
     */
    public Optional<Output<String>> containerdVersion() {
        return Optional.ofNullable(this.containerdVersion);
    }

    /**
     * The directory to store the crictl binary. Defaults to /usr/local/bin.
     * 
     */
    @Import(name="crictlInstallDirectory")
    private @Nullable Output<String> crictlInstallDirectory;

    /**
     * @return The directory to store the crictl binary. Defaults to /usr/local/bin.
     * 
     */
    public Optional<Output<String>> crictlInstallDirectory() {
        return Optional.ofNullable(this.crictlInstallDirectory);
    }

    /**
     * The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
     * 
     */
    @Import(name="kubeProxyConfigurationDirectory")
    private @Nullable Output<String> kubeProxyConfigurationDirectory;

    /**
     * @return The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
     * 
     */
    public Optional<Output<String>> kubeProxyConfigurationDirectory() {
        return Optional.ofNullable(this.kubeProxyConfigurationDirectory);
    }

    /**
     * The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
     * 
     */
    @Import(name="kubeProxyInstallDirectory")
    private @Nullable Output<String> kubeProxyInstallDirectory;

    /**
     * @return The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
     * 
     */
    public Optional<Output<String>> kubeProxyInstallDirectory() {
        return Optional.ofNullable(this.kubeProxyInstallDirectory);
    }

    /**
     * The path to the kube-proxy&#39;s kubeconfig file.
     * 
     */
    @Import(name="kubeProxyKubeconfigPath")
    private @Nullable Output<String> kubeProxyKubeconfigPath;

    /**
     * @return The path to the kube-proxy&#39;s kubeconfig file.
     * 
     */
    public Optional<Output<String>> kubeProxyKubeconfigPath() {
        return Optional.ofNullable(this.kubeProxyKubeconfigPath);
    }

    /**
     * The directory to store the kubectl binary. Defaults to /usr/local/bin.
     * 
     */
    @Import(name="kubectlInstallDirectory")
    private @Nullable Output<String> kubectlInstallDirectory;

    /**
     * @return The directory to store the kubectl binary. Defaults to /usr/local/bin.
     * 
     */
    public Optional<Output<String>> kubectlInstallDirectory() {
        return Optional.ofNullable(this.kubectlInstallDirectory);
    }

    /**
     * The path to the kubelet certificate.
     * 
     */
    @Import(name="kubeletCertificatePath", required=true)
    private Output<String> kubeletCertificatePath;

    /**
     * @return The path to the kubelet certificate.
     * 
     */
    public Output<String> kubeletCertificatePath() {
        return this.kubeletCertificatePath;
    }

    /**
     * The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
     * 
     */
    @Import(name="kubeletConfigurationDirectory")
    private @Nullable Output<String> kubeletConfigurationDirectory;

    /**
     * @return The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
     * 
     */
    public Optional<Output<String>> kubeletConfigurationDirectory() {
        return Optional.ofNullable(this.kubeletConfigurationDirectory);
    }

    /**
     * The directory to store the kubelet binary. Defaults to /usr/local/bin.
     * 
     */
    @Import(name="kubeletInstallDirectory")
    private @Nullable Output<String> kubeletInstallDirectory;

    /**
     * @return The directory to store the kubelet binary. Defaults to /usr/local/bin.
     * 
     */
    public Optional<Output<String>> kubeletInstallDirectory() {
        return Optional.ofNullable(this.kubeletInstallDirectory);
    }

    /**
     * The path to the kubelet&#39;s kubeconfig file.
     * 
     */
    @Import(name="kubeletKubeconfigPath")
    private @Nullable Output<String> kubeletKubeconfigPath;

    /**
     * @return The path to the kubelet&#39;s kubeconfig file.
     * 
     */
    public Optional<Output<String>> kubeletKubeconfigPath() {
        return Optional.ofNullable(this.kubeletKubeconfigPath);
    }

    /**
     * The path to the kubelet private key file.
     * 
     */
    @Import(name="kubeletPrivateKeyPath", required=true)
    private Output<String> kubeletPrivateKeyPath;

    /**
     * @return The path to the kubelet private key file.
     * 
     */
    public Output<String> kubeletPrivateKeyPath() {
        return this.kubeletPrivateKeyPath;
    }

    /**
     * The kubernetes version to use.
     * 
     */
    @Import(name="kubernetesVersion")
    private @Nullable Output<String> kubernetesVersion;

    /**
     * @return The kubernetes version to use.
     * 
     */
    public Optional<Output<String>> kubernetesVersion() {
        return Optional.ofNullable(this.kubernetesVersion);
    }

    /**
     * The subnet for the cluster.
     * 
     */
    @Import(name="subnet", required=true)
    private Output<String> subnet;

    /**
     * @return The subnet for the cluster.
     * 
     */
    public Output<String> subnet() {
        return this.subnet;
    }

    private WorkerNodeArgs() {}

    private WorkerNodeArgs(WorkerNodeArgs $) {
        this.architecture = $.architecture;
        this.caPath = $.caPath;
        this.clusterCIDR = $.clusterCIDR;
        this.clusterDomain = $.clusterDomain;
        this.cniConfigurationDirectory = $.cniConfigurationDirectory;
        this.cniInstallDirectory = $.cniInstallDirectory;
        this.cniVersion = $.cniVersion;
        this.connection = $.connection;
        this.containerdConfigurationDirectory = $.containerdConfigurationDirectory;
        this.containerdInstallDirectory = $.containerdInstallDirectory;
        this.containerdVersion = $.containerdVersion;
        this.crictlInstallDirectory = $.crictlInstallDirectory;
        this.kubeProxyConfigurationDirectory = $.kubeProxyConfigurationDirectory;
        this.kubeProxyInstallDirectory = $.kubeProxyInstallDirectory;
        this.kubeProxyKubeconfigPath = $.kubeProxyKubeconfigPath;
        this.kubectlInstallDirectory = $.kubectlInstallDirectory;
        this.kubeletCertificatePath = $.kubeletCertificatePath;
        this.kubeletConfigurationDirectory = $.kubeletConfigurationDirectory;
        this.kubeletInstallDirectory = $.kubeletInstallDirectory;
        this.kubeletKubeconfigPath = $.kubeletKubeconfigPath;
        this.kubeletPrivateKeyPath = $.kubeletPrivateKeyPath;
        this.kubernetesVersion = $.kubernetesVersion;
        this.subnet = $.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerNodeArgs $;

        public Builder() {
            $ = new WorkerNodeArgs();
        }

        public Builder(WorkerNodeArgs defaults) {
            $ = new WorkerNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture The CPU architecture of the node.
         * 
         * @return builder
         * 
         */
        public Builder architecture(Output<Architecture> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The CPU architecture of the node.
         * 
         * @return builder
         * 
         */
        public Builder architecture(Architecture architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param caPath The path to the cluster certificate authority file.
         * 
         * @return builder
         * 
         */
        public Builder caPath(Output<String> caPath) {
            $.caPath = caPath;
            return this;
        }

        /**
         * @param caPath The path to the cluster certificate authority file.
         * 
         * @return builder
         * 
         */
        public Builder caPath(String caPath) {
            return caPath(Output.of(caPath));
        }

        /**
         * @param clusterCIDR The CIDR to use for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterCIDR(@Nullable Output<String> clusterCIDR) {
            $.clusterCIDR = clusterCIDR;
            return this;
        }

        /**
         * @param clusterCIDR The CIDR to use for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterCIDR(String clusterCIDR) {
            return clusterCIDR(Output.of(clusterCIDR));
        }

        /**
         * @param clusterDomain The domain for the cluster to use. Defaults to cluster.local.
         * 
         * @return builder
         * 
         */
        public Builder clusterDomain(@Nullable Output<String> clusterDomain) {
            $.clusterDomain = clusterDomain;
            return this;
        }

        /**
         * @param clusterDomain The domain for the cluster to use. Defaults to cluster.local.
         * 
         * @return builder
         * 
         */
        public Builder clusterDomain(String clusterDomain) {
            return clusterDomain(Output.of(clusterDomain));
        }

        /**
         * @param cniConfigurationDirectory The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
         * 
         * @return builder
         * 
         */
        public Builder cniConfigurationDirectory(@Nullable Output<String> cniConfigurationDirectory) {
            $.cniConfigurationDirectory = cniConfigurationDirectory;
            return this;
        }

        /**
         * @param cniConfigurationDirectory The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
         * 
         * @return builder
         * 
         */
        public Builder cniConfigurationDirectory(String cniConfigurationDirectory) {
            return cniConfigurationDirectory(Output.of(cniConfigurationDirectory));
        }

        /**
         * @param cniInstallDirectory The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
         * 
         * @return builder
         * 
         */
        public Builder cniInstallDirectory(@Nullable Output<String> cniInstallDirectory) {
            $.cniInstallDirectory = cniInstallDirectory;
            return this;
        }

        /**
         * @param cniInstallDirectory The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
         * 
         * @return builder
         * 
         */
        public Builder cniInstallDirectory(String cniInstallDirectory) {
            return cniInstallDirectory(Output.of(cniInstallDirectory));
        }

        /**
         * @param cniVersion The CNI version to use.
         * 
         * @return builder
         * 
         */
        public Builder cniVersion(@Nullable Output<String> cniVersion) {
            $.cniVersion = cniVersion;
            return this;
        }

        /**
         * @param cniVersion The CNI version to use.
         * 
         * @return builder
         * 
         */
        public Builder cniVersion(String cniVersion) {
            return cniVersion(Output.of(cniVersion));
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(Output<ConnectionArgs> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(ConnectionArgs connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param containerdConfigurationDirectory The directory to store containerd configuration files. Defaults to /etc/containerd.
         * 
         * @return builder
         * 
         */
        public Builder containerdConfigurationDirectory(@Nullable Output<String> containerdConfigurationDirectory) {
            $.containerdConfigurationDirectory = containerdConfigurationDirectory;
            return this;
        }

        /**
         * @param containerdConfigurationDirectory The directory to store containerd configuration files. Defaults to /etc/containerd.
         * 
         * @return builder
         * 
         */
        public Builder containerdConfigurationDirectory(String containerdConfigurationDirectory) {
            return containerdConfigurationDirectory(Output.of(containerdConfigurationDirectory));
        }

        /**
         * @param containerdInstallDirectory The directory to store the containerd binary. Defaults to /bin.
         * 
         * @return builder
         * 
         */
        public Builder containerdInstallDirectory(@Nullable Output<String> containerdInstallDirectory) {
            $.containerdInstallDirectory = containerdInstallDirectory;
            return this;
        }

        /**
         * @param containerdInstallDirectory The directory to store the containerd binary. Defaults to /bin.
         * 
         * @return builder
         * 
         */
        public Builder containerdInstallDirectory(String containerdInstallDirectory) {
            return containerdInstallDirectory(Output.of(containerdInstallDirectory));
        }

        /**
         * @param containerdVersion The containerd version to use.
         * 
         * @return builder
         * 
         */
        public Builder containerdVersion(@Nullable Output<String> containerdVersion) {
            $.containerdVersion = containerdVersion;
            return this;
        }

        /**
         * @param containerdVersion The containerd version to use.
         * 
         * @return builder
         * 
         */
        public Builder containerdVersion(String containerdVersion) {
            return containerdVersion(Output.of(containerdVersion));
        }

        /**
         * @param crictlInstallDirectory The directory to store the crictl binary. Defaults to /usr/local/bin.
         * 
         * @return builder
         * 
         */
        public Builder crictlInstallDirectory(@Nullable Output<String> crictlInstallDirectory) {
            $.crictlInstallDirectory = crictlInstallDirectory;
            return this;
        }

        /**
         * @param crictlInstallDirectory The directory to store the crictl binary. Defaults to /usr/local/bin.
         * 
         * @return builder
         * 
         */
        public Builder crictlInstallDirectory(String crictlInstallDirectory) {
            return crictlInstallDirectory(Output.of(crictlInstallDirectory));
        }

        /**
         * @param kubeProxyConfigurationDirectory The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
         * 
         * @return builder
         * 
         */
        public Builder kubeProxyConfigurationDirectory(@Nullable Output<String> kubeProxyConfigurationDirectory) {
            $.kubeProxyConfigurationDirectory = kubeProxyConfigurationDirectory;
            return this;
        }

        /**
         * @param kubeProxyConfigurationDirectory The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
         * 
         * @return builder
         * 
         */
        public Builder kubeProxyConfigurationDirectory(String kubeProxyConfigurationDirectory) {
            return kubeProxyConfigurationDirectory(Output.of(kubeProxyConfigurationDirectory));
        }

        /**
         * @param kubeProxyInstallDirectory The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
         * 
         * @return builder
         * 
         */
        public Builder kubeProxyInstallDirectory(@Nullable Output<String> kubeProxyInstallDirectory) {
            $.kubeProxyInstallDirectory = kubeProxyInstallDirectory;
            return this;
        }

        /**
         * @param kubeProxyInstallDirectory The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
         * 
         * @return builder
         * 
         */
        public Builder kubeProxyInstallDirectory(String kubeProxyInstallDirectory) {
            return kubeProxyInstallDirectory(Output.of(kubeProxyInstallDirectory));
        }

        /**
         * @param kubeProxyKubeconfigPath The path to the kube-proxy&#39;s kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder kubeProxyKubeconfigPath(@Nullable Output<String> kubeProxyKubeconfigPath) {
            $.kubeProxyKubeconfigPath = kubeProxyKubeconfigPath;
            return this;
        }

        /**
         * @param kubeProxyKubeconfigPath The path to the kube-proxy&#39;s kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder kubeProxyKubeconfigPath(String kubeProxyKubeconfigPath) {
            return kubeProxyKubeconfigPath(Output.of(kubeProxyKubeconfigPath));
        }

        /**
         * @param kubectlInstallDirectory The directory to store the kubectl binary. Defaults to /usr/local/bin.
         * 
         * @return builder
         * 
         */
        public Builder kubectlInstallDirectory(@Nullable Output<String> kubectlInstallDirectory) {
            $.kubectlInstallDirectory = kubectlInstallDirectory;
            return this;
        }

        /**
         * @param kubectlInstallDirectory The directory to store the kubectl binary. Defaults to /usr/local/bin.
         * 
         * @return builder
         * 
         */
        public Builder kubectlInstallDirectory(String kubectlInstallDirectory) {
            return kubectlInstallDirectory(Output.of(kubectlInstallDirectory));
        }

        /**
         * @param kubeletCertificatePath The path to the kubelet certificate.
         * 
         * @return builder
         * 
         */
        public Builder kubeletCertificatePath(Output<String> kubeletCertificatePath) {
            $.kubeletCertificatePath = kubeletCertificatePath;
            return this;
        }

        /**
         * @param kubeletCertificatePath The path to the kubelet certificate.
         * 
         * @return builder
         * 
         */
        public Builder kubeletCertificatePath(String kubeletCertificatePath) {
            return kubeletCertificatePath(Output.of(kubeletCertificatePath));
        }

        /**
         * @param kubeletConfigurationDirectory The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfigurationDirectory(@Nullable Output<String> kubeletConfigurationDirectory) {
            $.kubeletConfigurationDirectory = kubeletConfigurationDirectory;
            return this;
        }

        /**
         * @param kubeletConfigurationDirectory The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfigurationDirectory(String kubeletConfigurationDirectory) {
            return kubeletConfigurationDirectory(Output.of(kubeletConfigurationDirectory));
        }

        /**
         * @param kubeletInstallDirectory The directory to store the kubelet binary. Defaults to /usr/local/bin.
         * 
         * @return builder
         * 
         */
        public Builder kubeletInstallDirectory(@Nullable Output<String> kubeletInstallDirectory) {
            $.kubeletInstallDirectory = kubeletInstallDirectory;
            return this;
        }

        /**
         * @param kubeletInstallDirectory The directory to store the kubelet binary. Defaults to /usr/local/bin.
         * 
         * @return builder
         * 
         */
        public Builder kubeletInstallDirectory(String kubeletInstallDirectory) {
            return kubeletInstallDirectory(Output.of(kubeletInstallDirectory));
        }

        /**
         * @param kubeletKubeconfigPath The path to the kubelet&#39;s kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder kubeletKubeconfigPath(@Nullable Output<String> kubeletKubeconfigPath) {
            $.kubeletKubeconfigPath = kubeletKubeconfigPath;
            return this;
        }

        /**
         * @param kubeletKubeconfigPath The path to the kubelet&#39;s kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder kubeletKubeconfigPath(String kubeletKubeconfigPath) {
            return kubeletKubeconfigPath(Output.of(kubeletKubeconfigPath));
        }

        /**
         * @param kubeletPrivateKeyPath The path to the kubelet private key file.
         * 
         * @return builder
         * 
         */
        public Builder kubeletPrivateKeyPath(Output<String> kubeletPrivateKeyPath) {
            $.kubeletPrivateKeyPath = kubeletPrivateKeyPath;
            return this;
        }

        /**
         * @param kubeletPrivateKeyPath The path to the kubelet private key file.
         * 
         * @return builder
         * 
         */
        public Builder kubeletPrivateKeyPath(String kubeletPrivateKeyPath) {
            return kubeletPrivateKeyPath(Output.of(kubeletPrivateKeyPath));
        }

        /**
         * @param kubernetesVersion The kubernetes version to use.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(@Nullable Output<String> kubernetesVersion) {
            $.kubernetesVersion = kubernetesVersion;
            return this;
        }

        /**
         * @param kubernetesVersion The kubernetes version to use.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(String kubernetesVersion) {
            return kubernetesVersion(Output.of(kubernetesVersion));
        }

        /**
         * @param subnet The subnet for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder subnet(Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet The subnet for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        public WorkerNodeArgs build() {
            if ($.architecture == null) {
                throw new MissingRequiredPropertyException("WorkerNodeArgs", "architecture");
            }
            if ($.caPath == null) {
                throw new MissingRequiredPropertyException("WorkerNodeArgs", "caPath");
            }
            if ($.connection == null) {
                throw new MissingRequiredPropertyException("WorkerNodeArgs", "connection");
            }
            if ($.kubeletCertificatePath == null) {
                throw new MissingRequiredPropertyException("WorkerNodeArgs", "kubeletCertificatePath");
            }
            if ($.kubeletPrivateKeyPath == null) {
                throw new MissingRequiredPropertyException("WorkerNodeArgs", "kubeletPrivateKeyPath");
            }
            if ($.subnet == null) {
                throw new MissingRequiredPropertyException("WorkerNodeArgs", "subnet");
            }
            return $;
        }
    }

}
