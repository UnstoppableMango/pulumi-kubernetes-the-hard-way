// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.command.remote.inputs.ConnectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubeApiServerConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubeApiServerConfigurationArgs Empty = new KubeApiServerConfigurationArgs();

    /**
     * The PEM encoded certificate authority key.
     * 
     */
    @Import(name="caKey", required=true)
    private Output<String> caKey;

    /**
     * @return The PEM encoded certificate authority key.
     * 
     */
    public Output<String> caKey() {
        return this.caKey;
    }

    /**
     * The PEM encoded certificate authority data.
     * 
     */
    @Import(name="caPem", required=true)
    private Output<String> caPem;

    /**
     * @return The PEM encoded certificate authority data.
     * 
     */
    public Output<String> caPem() {
        return this.caPem;
    }

    /**
     * The PEM encoded Kube API Server certificate data.
     * 
     */
    @Import(name="certPem", required=true)
    private Output<String> certPem;

    /**
     * @return The PEM encoded Kube API Server certificate data.
     * 
     */
    public Output<String> certPem() {
        return this.certPem;
    }

    /**
     * The directory to store Kubernetes Control Plane configuration.
     * 
     */
    @Import(name="configurationDirectory")
    private @Nullable Output<String> configurationDirectory;

    /**
     * @return The directory to store Kubernetes Control Plane configuration.
     * 
     */
    public Optional<Output<String>> configurationDirectory() {
        return Optional.ofNullable(this.configurationDirectory);
    }

    /**
     * The parameters with which to connect to the remote host.
     * 
     */
    @Import(name="connection", required=true)
    private Output<ConnectionArgs> connection;

    /**
     * @return The parameters with which to connect to the remote host.
     * 
     */
    public Output<ConnectionArgs> connection() {
        return this.connection;
    }

    /**
     * The YAML encryption configuration manifest.
     * 
     */
    @Import(name="encryptionConfig", required=true)
    private Output<String> encryptionConfig;

    /**
     * @return The YAML encryption configuration manifest.
     * 
     */
    public Output<String> encryptionConfig() {
        return this.encryptionConfig;
    }

    /**
     * The PEM encoded Kube API Server certificate key.
     * 
     */
    @Import(name="keyPem", required=true)
    private Output<String> keyPem;

    /**
     * @return The PEM encoded Kube API Server certificate key.
     * 
     */
    public Output<String> keyPem() {
        return this.keyPem;
    }

    /**
     * The path to the &#39;kubectl&#39; binary.
     * 
     */
    @Import(name="kubectlPath")
    private @Nullable Output<String> kubectlPath;

    /**
     * @return The path to the &#39;kubectl&#39; binary.
     * 
     */
    public Optional<Output<String>> kubectlPath() {
        return Optional.ofNullable(this.kubectlPath);
    }

    /**
     * The path to the &#39;kube-apiserver&#39; binary.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path to the &#39;kube-apiserver&#39; binary.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The PEM encoded Service Accounts certificate key.
     * 
     */
    @Import(name="serviceAccountsKey", required=true)
    private Output<String> serviceAccountsKey;

    /**
     * @return The PEM encoded Service Accounts certificate key.
     * 
     */
    public Output<String> serviceAccountsKey() {
        return this.serviceAccountsKey;
    }

    /**
     * The PEM encoded Service Accounts certificate data.
     * 
     */
    @Import(name="serviceAccountsPem", required=true)
    private Output<String> serviceAccountsPem;

    /**
     * @return The PEM encoded Service Accounts certificate data.
     * 
     */
    public Output<String> serviceAccountsPem() {
        return this.serviceAccountsPem;
    }

    private KubeApiServerConfigurationArgs() {}

    private KubeApiServerConfigurationArgs(KubeApiServerConfigurationArgs $) {
        this.caKey = $.caKey;
        this.caPem = $.caPem;
        this.certPem = $.certPem;
        this.configurationDirectory = $.configurationDirectory;
        this.connection = $.connection;
        this.encryptionConfig = $.encryptionConfig;
        this.keyPem = $.keyPem;
        this.kubectlPath = $.kubectlPath;
        this.path = $.path;
        this.serviceAccountsKey = $.serviceAccountsKey;
        this.serviceAccountsPem = $.serviceAccountsPem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubeApiServerConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubeApiServerConfigurationArgs $;

        public Builder() {
            $ = new KubeApiServerConfigurationArgs();
        }

        public Builder(KubeApiServerConfigurationArgs defaults) {
            $ = new KubeApiServerConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caKey The PEM encoded certificate authority key.
         * 
         * @return builder
         * 
         */
        public Builder caKey(Output<String> caKey) {
            $.caKey = caKey;
            return this;
        }

        /**
         * @param caKey The PEM encoded certificate authority key.
         * 
         * @return builder
         * 
         */
        public Builder caKey(String caKey) {
            return caKey(Output.of(caKey));
        }

        /**
         * @param caPem The PEM encoded certificate authority data.
         * 
         * @return builder
         * 
         */
        public Builder caPem(Output<String> caPem) {
            $.caPem = caPem;
            return this;
        }

        /**
         * @param caPem The PEM encoded certificate authority data.
         * 
         * @return builder
         * 
         */
        public Builder caPem(String caPem) {
            return caPem(Output.of(caPem));
        }

        /**
         * @param certPem The PEM encoded Kube API Server certificate data.
         * 
         * @return builder
         * 
         */
        public Builder certPem(Output<String> certPem) {
            $.certPem = certPem;
            return this;
        }

        /**
         * @param certPem The PEM encoded Kube API Server certificate data.
         * 
         * @return builder
         * 
         */
        public Builder certPem(String certPem) {
            return certPem(Output.of(certPem));
        }

        /**
         * @param configurationDirectory The directory to store Kubernetes Control Plane configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationDirectory(@Nullable Output<String> configurationDirectory) {
            $.configurationDirectory = configurationDirectory;
            return this;
        }

        /**
         * @param configurationDirectory The directory to store Kubernetes Control Plane configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationDirectory(String configurationDirectory) {
            return configurationDirectory(Output.of(configurationDirectory));
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(Output<ConnectionArgs> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(ConnectionArgs connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param encryptionConfig The YAML encryption configuration manifest.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfig(Output<String> encryptionConfig) {
            $.encryptionConfig = encryptionConfig;
            return this;
        }

        /**
         * @param encryptionConfig The YAML encryption configuration manifest.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfig(String encryptionConfig) {
            return encryptionConfig(Output.of(encryptionConfig));
        }

        /**
         * @param keyPem The PEM encoded Kube API Server certificate key.
         * 
         * @return builder
         * 
         */
        public Builder keyPem(Output<String> keyPem) {
            $.keyPem = keyPem;
            return this;
        }

        /**
         * @param keyPem The PEM encoded Kube API Server certificate key.
         * 
         * @return builder
         * 
         */
        public Builder keyPem(String keyPem) {
            return keyPem(Output.of(keyPem));
        }

        /**
         * @param kubectlPath The path to the &#39;kubectl&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder kubectlPath(@Nullable Output<String> kubectlPath) {
            $.kubectlPath = kubectlPath;
            return this;
        }

        /**
         * @param kubectlPath The path to the &#39;kubectl&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder kubectlPath(String kubectlPath) {
            return kubectlPath(Output.of(kubectlPath));
        }

        /**
         * @param path The path to the &#39;kube-apiserver&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the &#39;kube-apiserver&#39; binary.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param serviceAccountsKey The PEM encoded Service Accounts certificate key.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsKey(Output<String> serviceAccountsKey) {
            $.serviceAccountsKey = serviceAccountsKey;
            return this;
        }

        /**
         * @param serviceAccountsKey The PEM encoded Service Accounts certificate key.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsKey(String serviceAccountsKey) {
            return serviceAccountsKey(Output.of(serviceAccountsKey));
        }

        /**
         * @param serviceAccountsPem The PEM encoded Service Accounts certificate data.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsPem(Output<String> serviceAccountsPem) {
            $.serviceAccountsPem = serviceAccountsPem;
            return this;
        }

        /**
         * @param serviceAccountsPem The PEM encoded Service Accounts certificate data.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsPem(String serviceAccountsPem) {
            return serviceAccountsPem(Output.of(serviceAccountsPem));
        }

        public KubeApiServerConfigurationArgs build() {
            if ($.caKey == null) {
                throw new MissingRequiredPropertyException("KubeApiServerConfigurationArgs", "caKey");
            }
            if ($.caPem == null) {
                throw new MissingRequiredPropertyException("KubeApiServerConfigurationArgs", "caPem");
            }
            if ($.certPem == null) {
                throw new MissingRequiredPropertyException("KubeApiServerConfigurationArgs", "certPem");
            }
            $.configurationDirectory = Codegen.stringProp("configurationDirectory").output().arg($.configurationDirectory).def("/etc/kubernetes/config").getNullable();
            if ($.connection == null) {
                throw new MissingRequiredPropertyException("KubeApiServerConfigurationArgs", "connection");
            }
            if ($.encryptionConfig == null) {
                throw new MissingRequiredPropertyException("KubeApiServerConfigurationArgs", "encryptionConfig");
            }
            if ($.keyPem == null) {
                throw new MissingRequiredPropertyException("KubeApiServerConfigurationArgs", "keyPem");
            }
            if ($.serviceAccountsKey == null) {
                throw new MissingRequiredPropertyException("KubeApiServerConfigurationArgs", "serviceAccountsKey");
            }
            if ($.serviceAccountsPem == null) {
                throw new MissingRequiredPropertyException("KubeApiServerConfigurationArgs", "serviceAccountsPem");
            }
            return $;
        }
    }

}
