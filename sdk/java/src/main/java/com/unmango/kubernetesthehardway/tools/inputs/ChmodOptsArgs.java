// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Abstraction over the `chmod` utility on a remote system.
 * 
 */
public final class ChmodOptsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChmodOptsArgs Empty = new ChmodOptsArgs();

    /**
     * Like verbose but report only when a change is made.
     * 
     */
    @Import(name="changes")
    private @Nullable Output<Boolean> changes;

    /**
     * @return Like verbose but report only when a change is made.
     * 
     */
    public Optional<Output<Boolean>> changes() {
        return Optional.ofNullable(this.changes);
    }

    /**
     * Corresponds to the [FILE] argument.
     * 
     */
    @Import(name="files", required=true)
    private Output<List<String>> files;

    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    public Output<List<String>> files() {
        return this.files;
    }

    /**
     * Display help and exit.
     * 
     */
    @Import(name="help")
    private @Nullable Output<Boolean> help;

    /**
     * @return Display help and exit.
     * 
     */
    public Optional<Output<Boolean>> help() {
        return Optional.ofNullable(this.help);
    }

    /**
     * Modes may be absolute or symbolic. An absolute mode is an octal number...
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return Modes may be absolute or symbolic. An absolute mode is an octal number...
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Do not treat &#39;/&#39; specially (the default).
     * 
     */
    @Import(name="noPreserveRoot")
    private @Nullable Output<Boolean> noPreserveRoot;

    /**
     * @return Do not treat &#39;/&#39; specially (the default).
     * 
     */
    public Optional<Output<Boolean>> noPreserveRoot() {
        return Optional.ofNullable(this.noPreserveRoot);
    }

    /**
     * Fail to operate recursively on &#39;/&#39;.
     * 
     */
    @Import(name="preserveRoot")
    private @Nullable Output<Boolean> preserveRoot;

    /**
     * @return Fail to operate recursively on &#39;/&#39;.
     * 
     */
    public Optional<Output<Boolean>> preserveRoot() {
        return Optional.ofNullable(this.preserveRoot);
    }

    /**
     * Suppress most error messages. Same as `silent`.
     * 
     */
    @Import(name="quiet")
    private @Nullable Output<Boolean> quiet;

    /**
     * @return Suppress most error messages. Same as `silent`.
     * 
     */
    public Optional<Output<Boolean>> quiet() {
        return Optional.ofNullable(this.quiet);
    }

    /**
     * Change files and directories recursively.
     * 
     */
    @Import(name="recursive")
    private @Nullable Output<Boolean> recursive;

    /**
     * @return Change files and directories recursively.
     * 
     */
    public Optional<Output<Boolean>> recursive() {
        return Optional.ofNullable(this.recursive);
    }

    /**
     * Use RFILE&#39;s mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
     * 
     */
    @Import(name="reference")
    private @Nullable Output<String> reference;

    /**
     * @return Use RFILE&#39;s mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
     * 
     */
    public Optional<Output<String>> reference() {
        return Optional.ofNullable(this.reference);
    }

    /**
     * Suppress most error messages. Same as `quiet`.
     * 
     */
    @Import(name="silent")
    private @Nullable Output<Boolean> silent;

    /**
     * @return Suppress most error messages. Same as `quiet`.
     * 
     */
    public Optional<Output<Boolean>> silent() {
        return Optional.ofNullable(this.silent);
    }

    /**
     * Output version information and exit.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Boolean> version;

    /**
     * @return Output version information and exit.
     * 
     */
    public Optional<Output<Boolean>> version() {
        return Optional.ofNullable(this.version);
    }

    private ChmodOptsArgs() {}

    private ChmodOptsArgs(ChmodOptsArgs $) {
        this.changes = $.changes;
        this.files = $.files;
        this.help = $.help;
        this.mode = $.mode;
        this.noPreserveRoot = $.noPreserveRoot;
        this.preserveRoot = $.preserveRoot;
        this.quiet = $.quiet;
        this.recursive = $.recursive;
        this.reference = $.reference;
        this.silent = $.silent;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChmodOptsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChmodOptsArgs $;

        public Builder() {
            $ = new ChmodOptsArgs();
        }

        public Builder(ChmodOptsArgs defaults) {
            $ = new ChmodOptsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param changes Like verbose but report only when a change is made.
         * 
         * @return builder
         * 
         */
        public Builder changes(@Nullable Output<Boolean> changes) {
            $.changes = changes;
            return this;
        }

        /**
         * @param changes Like verbose but report only when a change is made.
         * 
         * @return builder
         * 
         */
        public Builder changes(Boolean changes) {
            return changes(Output.of(changes));
        }

        /**
         * @param files Corresponds to the [FILE] argument.
         * 
         * @return builder
         * 
         */
        public Builder files(Output<List<String>> files) {
            $.files = files;
            return this;
        }

        /**
         * @param files Corresponds to the [FILE] argument.
         * 
         * @return builder
         * 
         */
        public Builder files(List<String> files) {
            return files(Output.of(files));
        }

        /**
         * @param files Corresponds to the [FILE] argument.
         * 
         * @return builder
         * 
         */
        public Builder files(String... files) {
            return files(List.of(files));
        }

        /**
         * @param help Display help and exit.
         * 
         * @return builder
         * 
         */
        public Builder help(@Nullable Output<Boolean> help) {
            $.help = help;
            return this;
        }

        /**
         * @param help Display help and exit.
         * 
         * @return builder
         * 
         */
        public Builder help(Boolean help) {
            return help(Output.of(help));
        }

        /**
         * @param mode Modes may be absolute or symbolic. An absolute mode is an octal number...
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Modes may be absolute or symbolic. An absolute mode is an octal number...
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param noPreserveRoot Do not treat &#39;/&#39; specially (the default).
         * 
         * @return builder
         * 
         */
        public Builder noPreserveRoot(@Nullable Output<Boolean> noPreserveRoot) {
            $.noPreserveRoot = noPreserveRoot;
            return this;
        }

        /**
         * @param noPreserveRoot Do not treat &#39;/&#39; specially (the default).
         * 
         * @return builder
         * 
         */
        public Builder noPreserveRoot(Boolean noPreserveRoot) {
            return noPreserveRoot(Output.of(noPreserveRoot));
        }

        /**
         * @param preserveRoot Fail to operate recursively on &#39;/&#39;.
         * 
         * @return builder
         * 
         */
        public Builder preserveRoot(@Nullable Output<Boolean> preserveRoot) {
            $.preserveRoot = preserveRoot;
            return this;
        }

        /**
         * @param preserveRoot Fail to operate recursively on &#39;/&#39;.
         * 
         * @return builder
         * 
         */
        public Builder preserveRoot(Boolean preserveRoot) {
            return preserveRoot(Output.of(preserveRoot));
        }

        /**
         * @param quiet Suppress most error messages. Same as `silent`.
         * 
         * @return builder
         * 
         */
        public Builder quiet(@Nullable Output<Boolean> quiet) {
            $.quiet = quiet;
            return this;
        }

        /**
         * @param quiet Suppress most error messages. Same as `silent`.
         * 
         * @return builder
         * 
         */
        public Builder quiet(Boolean quiet) {
            return quiet(Output.of(quiet));
        }

        /**
         * @param recursive Change files and directories recursively.
         * 
         * @return builder
         * 
         */
        public Builder recursive(@Nullable Output<Boolean> recursive) {
            $.recursive = recursive;
            return this;
        }

        /**
         * @param recursive Change files and directories recursively.
         * 
         * @return builder
         * 
         */
        public Builder recursive(Boolean recursive) {
            return recursive(Output.of(recursive));
        }

        /**
         * @param reference Use RFILE&#39;s mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
         * 
         * @return builder
         * 
         */
        public Builder reference(@Nullable Output<String> reference) {
            $.reference = reference;
            return this;
        }

        /**
         * @param reference Use RFILE&#39;s mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
         * 
         * @return builder
         * 
         */
        public Builder reference(String reference) {
            return reference(Output.of(reference));
        }

        /**
         * @param silent Suppress most error messages. Same as `quiet`.
         * 
         * @return builder
         * 
         */
        public Builder silent(@Nullable Output<Boolean> silent) {
            $.silent = silent;
            return this;
        }

        /**
         * @param silent Suppress most error messages. Same as `quiet`.
         * 
         * @return builder
         * 
         */
        public Builder silent(Boolean silent) {
            return silent(Output.of(silent));
        }

        /**
         * @param version Output version information and exit.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Boolean> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Output version information and exit.
         * 
         * @return builder
         * 
         */
        public Builder version(Boolean version) {
            return version(Output.of(version));
        }

        public ChmodOptsArgs build() {
            if ($.files == null) {
                throw new MissingRequiredPropertyException("ChmodOptsArgs", "files");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("ChmodOptsArgs", "mode");
            }
            return $;
        }
    }

}
