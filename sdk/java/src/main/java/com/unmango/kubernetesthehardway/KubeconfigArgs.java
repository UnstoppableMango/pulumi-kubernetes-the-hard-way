// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.config.inputs.KubeconfigAdminOptionsArgs;
import com.unmango.kubernetesthehardway.config.inputs.KubeconfigKubeControllerManagerOptionsArgs;
import com.unmango.kubernetesthehardway.config.inputs.KubeconfigKubeProxyOptionsArgs;
import com.unmango.kubernetesthehardway.config.inputs.KubeconfigKubeSchedulerOptionsArgs;
import com.unmango.kubernetesthehardway.config.inputs.KubeconfigWorkerOptionsArgs;
import com.unmango.kubernetesthehardway.tls.ClusterPki;
import java.lang.Object;
import java.util.Objects;


public final class KubeconfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubeconfigArgs Empty = new KubeconfigArgs();

    @Import(name="options", required=true)
    private Object options;

    public Object options() {
        return this.options;
    }

    /**
     * The PKI containing certificate data.
     * 
     */
    @Import(name="pki", required=true)
    private ClusterPki pki;

    /**
     * @return The PKI containing certificate data.
     * 
     */
    public ClusterPki pki() {
        return this.pki;
    }

    private KubeconfigArgs() {}

    private KubeconfigArgs(KubeconfigArgs $) {
        this.options = $.options;
        this.pki = $.pki;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubeconfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubeconfigArgs $;

        public Builder() {
            $ = new KubeconfigArgs();
        }

        public Builder(KubeconfigArgs defaults) {
            $ = new KubeconfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder options(Object options) {
            $.options = options;
            return this;
        }

        /**
         * @param pki The PKI containing certificate data.
         * 
         * @return builder
         * 
         */
        public Builder pki(ClusterPki pki) {
            $.pki = pki;
            return this;
        }

        public KubeconfigArgs build() {
            if ($.options == null) {
                throw new MissingRequiredPropertyException("KubeconfigArgs", "options");
            }
            if ($.pki == null) {
                throw new MissingRequiredPropertyException("KubeconfigArgs", "pki");
            }
            return $;
        }
    }

}
