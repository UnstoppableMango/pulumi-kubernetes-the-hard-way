// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Props for resources that consume kubelet configuration.
 * 
 */
public final class KubeletConfigurationPropsArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubeletConfigurationPropsArgs Empty = new KubeletConfigurationPropsArgs();

    /**
     * Path to the kubelet configuration.
     * 
     */
    @Import(name="configurationFilePath", required=true)
    private Output<String> configurationFilePath;

    /**
     * @return Path to the kubelet configuration.
     * 
     */
    public Output<String> configurationFilePath() {
        return this.configurationFilePath;
    }

    /**
     * Path to the kubeconfig the kubelet will use
     * 
     */
    @Import(name="kubeconfigPath", required=true)
    private Output<String> kubeconfigPath;

    /**
     * @return Path to the kubeconfig the kubelet will use
     * 
     */
    public Output<String> kubeconfigPath() {
        return this.kubeconfigPath;
    }

    /**
     * Path to the kubelet binary.
     * 
     */
    @Import(name="kubeletPath", required=true)
    private Output<String> kubeletPath;

    /**
     * @return Path to the kubelet binary.
     * 
     */
    public Output<String> kubeletPath() {
        return this.kubeletPath;
    }

    /**
     * Whether to register the node. Defaults to `true`.
     * 
     */
    @Import(name="registerNode", required=true)
    private Output<Boolean> registerNode;

    /**
     * @return Whether to register the node. Defaults to `true`.
     * 
     */
    public Output<Boolean> registerNode() {
        return this.registerNode;
    }

    /**
     * Verbosity. Defaults to `2`.
     * 
     */
    @Import(name="v", required=true)
    private Output<Integer> v;

    /**
     * @return Verbosity. Defaults to `2`.
     * 
     */
    public Output<Integer> v() {
        return this.v;
    }

    private KubeletConfigurationPropsArgs() {}

    private KubeletConfigurationPropsArgs(KubeletConfigurationPropsArgs $) {
        this.configurationFilePath = $.configurationFilePath;
        this.kubeconfigPath = $.kubeconfigPath;
        this.kubeletPath = $.kubeletPath;
        this.registerNode = $.registerNode;
        this.v = $.v;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubeletConfigurationPropsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubeletConfigurationPropsArgs $;

        public Builder() {
            $ = new KubeletConfigurationPropsArgs();
        }

        public Builder(KubeletConfigurationPropsArgs defaults) {
            $ = new KubeletConfigurationPropsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationFilePath Path to the kubelet configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationFilePath(Output<String> configurationFilePath) {
            $.configurationFilePath = configurationFilePath;
            return this;
        }

        /**
         * @param configurationFilePath Path to the kubelet configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationFilePath(String configurationFilePath) {
            return configurationFilePath(Output.of(configurationFilePath));
        }

        /**
         * @param kubeconfigPath Path to the kubeconfig the kubelet will use
         * 
         * @return builder
         * 
         */
        public Builder kubeconfigPath(Output<String> kubeconfigPath) {
            $.kubeconfigPath = kubeconfigPath;
            return this;
        }

        /**
         * @param kubeconfigPath Path to the kubeconfig the kubelet will use
         * 
         * @return builder
         * 
         */
        public Builder kubeconfigPath(String kubeconfigPath) {
            return kubeconfigPath(Output.of(kubeconfigPath));
        }

        /**
         * @param kubeletPath Path to the kubelet binary.
         * 
         * @return builder
         * 
         */
        public Builder kubeletPath(Output<String> kubeletPath) {
            $.kubeletPath = kubeletPath;
            return this;
        }

        /**
         * @param kubeletPath Path to the kubelet binary.
         * 
         * @return builder
         * 
         */
        public Builder kubeletPath(String kubeletPath) {
            return kubeletPath(Output.of(kubeletPath));
        }

        /**
         * @param registerNode Whether to register the node. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder registerNode(Output<Boolean> registerNode) {
            $.registerNode = registerNode;
            return this;
        }

        /**
         * @param registerNode Whether to register the node. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder registerNode(Boolean registerNode) {
            return registerNode(Output.of(registerNode));
        }

        /**
         * @param v Verbosity. Defaults to `2`.
         * 
         * @return builder
         * 
         */
        public Builder v(Output<Integer> v) {
            $.v = v;
            return this;
        }

        /**
         * @param v Verbosity. Defaults to `2`.
         * 
         * @return builder
         * 
         */
        public Builder v(Integer v) {
            return v(Output.of(v));
        }

        public KubeletConfigurationPropsArgs build() {
            if ($.configurationFilePath == null) {
                throw new MissingRequiredPropertyException("KubeletConfigurationPropsArgs", "configurationFilePath");
            }
            if ($.kubeconfigPath == null) {
                throw new MissingRequiredPropertyException("KubeletConfigurationPropsArgs", "kubeconfigPath");
            }
            if ($.kubeletPath == null) {
                throw new MissingRequiredPropertyException("KubeletConfigurationPropsArgs", "kubeletPath");
            }
            if ($.registerNode == null) {
                throw new MissingRequiredPropertyException("KubeletConfigurationPropsArgs", "registerNode");
            }
            if ($.v == null) {
                throw new MissingRequiredPropertyException("KubeletConfigurationPropsArgs", "v");
            }
            return $;
        }
    }

}
