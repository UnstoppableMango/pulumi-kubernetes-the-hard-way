// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.command.remote.inputs.ConnectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.remote.inputs.CniBridgeIpamArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CniBridgePluginConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CniBridgePluginConfigurationArgs Empty = new CniBridgePluginConfigurationArgs();

    /**
     * Bridge name.
     * 
     */
    @Import(name="bridge")
    private @Nullable Output<String> bridge;

    /**
     * @return Bridge name.
     * 
     */
    public Optional<Output<String>> bridge() {
        return Optional.ofNullable(this.bridge);
    }

    /**
     * CNI version.
     * 
     */
    @Import(name="cniVersion")
    private @Nullable Output<String> cniVersion;

    /**
     * @return CNI version.
     * 
     */
    public Optional<Output<String>> cniVersion() {
        return Optional.ofNullable(this.cniVersion);
    }

    /**
     * The parameters with which to connect to the remote host.
     * 
     */
    @Import(name="connection", required=true)
    private Output<ConnectionArgs> connection;

    /**
     * @return The parameters with which to connect to the remote host.
     * 
     */
    public Output<ConnectionArgs> connection() {
        return this.connection;
    }

    /**
     * IP masq.
     * 
     */
    @Import(name="ipMasq")
    private @Nullable Output<Boolean> ipMasq;

    /**
     * @return IP masq.
     * 
     */
    public Optional<Output<Boolean>> ipMasq() {
        return Optional.ofNullable(this.ipMasq);
    }

    /**
     * IPAM
     * 
     */
    @Import(name="ipam")
    private @Nullable Output<CniBridgeIpamArgs> ipam;

    /**
     * @return IPAM
     * 
     */
    public Optional<Output<CniBridgeIpamArgs>> ipam() {
        return Optional.ofNullable(this.ipam);
    }

    /**
     * Is gateway.
     * 
     */
    @Import(name="isGateway")
    private @Nullable Output<Boolean> isGateway;

    /**
     * @return Is gateway.
     * 
     */
    public Optional<Output<Boolean>> isGateway() {
        return Optional.ofNullable(this.isGateway);
    }

    /**
     * CNI plugin name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return CNI plugin name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * CNI plugin type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return CNI plugin type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private CniBridgePluginConfigurationArgs() {}

    private CniBridgePluginConfigurationArgs(CniBridgePluginConfigurationArgs $) {
        this.bridge = $.bridge;
        this.cniVersion = $.cniVersion;
        this.connection = $.connection;
        this.ipMasq = $.ipMasq;
        this.ipam = $.ipam;
        this.isGateway = $.isGateway;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CniBridgePluginConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CniBridgePluginConfigurationArgs $;

        public Builder() {
            $ = new CniBridgePluginConfigurationArgs();
        }

        public Builder(CniBridgePluginConfigurationArgs defaults) {
            $ = new CniBridgePluginConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bridge Bridge name.
         * 
         * @return builder
         * 
         */
        public Builder bridge(@Nullable Output<String> bridge) {
            $.bridge = bridge;
            return this;
        }

        /**
         * @param bridge Bridge name.
         * 
         * @return builder
         * 
         */
        public Builder bridge(String bridge) {
            return bridge(Output.of(bridge));
        }

        /**
         * @param cniVersion CNI version.
         * 
         * @return builder
         * 
         */
        public Builder cniVersion(@Nullable Output<String> cniVersion) {
            $.cniVersion = cniVersion;
            return this;
        }

        /**
         * @param cniVersion CNI version.
         * 
         * @return builder
         * 
         */
        public Builder cniVersion(String cniVersion) {
            return cniVersion(Output.of(cniVersion));
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(Output<ConnectionArgs> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(ConnectionArgs connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param ipMasq IP masq.
         * 
         * @return builder
         * 
         */
        public Builder ipMasq(@Nullable Output<Boolean> ipMasq) {
            $.ipMasq = ipMasq;
            return this;
        }

        /**
         * @param ipMasq IP masq.
         * 
         * @return builder
         * 
         */
        public Builder ipMasq(Boolean ipMasq) {
            return ipMasq(Output.of(ipMasq));
        }

        /**
         * @param ipam IPAM
         * 
         * @return builder
         * 
         */
        public Builder ipam(@Nullable Output<CniBridgeIpamArgs> ipam) {
            $.ipam = ipam;
            return this;
        }

        /**
         * @param ipam IPAM
         * 
         * @return builder
         * 
         */
        public Builder ipam(CniBridgeIpamArgs ipam) {
            return ipam(Output.of(ipam));
        }

        /**
         * @param isGateway Is gateway.
         * 
         * @return builder
         * 
         */
        public Builder isGateway(@Nullable Output<Boolean> isGateway) {
            $.isGateway = isGateway;
            return this;
        }

        /**
         * @param isGateway Is gateway.
         * 
         * @return builder
         * 
         */
        public Builder isGateway(Boolean isGateway) {
            return isGateway(Output.of(isGateway));
        }

        /**
         * @param name CNI plugin name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name CNI plugin name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type CNI plugin type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type CNI plugin type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public CniBridgePluginConfigurationArgs build() {
            if ($.connection == null) {
                throw new MissingRequiredPropertyException("CniBridgePluginConfigurationArgs", "connection");
            }
            return $;
        }
    }

}
