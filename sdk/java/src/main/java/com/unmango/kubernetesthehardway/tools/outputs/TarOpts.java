// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TarOpts {
    /**
     * @return Corresponds to the [ARCHIVE] argument.
     * 
     */
    private String archive;
    /**
     * @return Corresponds to the `--directory` option.
     * 
     */
    private @Nullable String directory;
    /**
     * @return Corresponds to the `--extract` option.
     * 
     */
    private @Nullable Boolean extract;
    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    private @Nullable List<String> files;
    /**
     * @return Corresponds to the `--gzip` option.
     * 
     */
    private @Nullable Boolean gzip;
    /**
     * @return Whether rm should be run when the resource is created or deleted.
     * 
     */
    private @Nullable Boolean onDelete;
    /**
     * @return Corresponds to the `--recursive` option.
     * 
     */
    private @Nullable Boolean recursive;
    /**
     * @return Corresponds to the `--strip-components` option.
     * 
     */
    private @Nullable Integer stripComponents;

    private TarOpts() {}
    /**
     * @return Corresponds to the [ARCHIVE] argument.
     * 
     */
    public String archive() {
        return this.archive;
    }
    /**
     * @return Corresponds to the `--directory` option.
     * 
     */
    public Optional<String> directory() {
        return Optional.ofNullable(this.directory);
    }
    /**
     * @return Corresponds to the `--extract` option.
     * 
     */
    public Optional<Boolean> extract() {
        return Optional.ofNullable(this.extract);
    }
    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    public List<String> files() {
        return this.files == null ? List.of() : this.files;
    }
    /**
     * @return Corresponds to the `--gzip` option.
     * 
     */
    public Optional<Boolean> gzip() {
        return Optional.ofNullable(this.gzip);
    }
    /**
     * @return Whether rm should be run when the resource is created or deleted.
     * 
     */
    public Optional<Boolean> onDelete() {
        return Optional.ofNullable(this.onDelete);
    }
    /**
     * @return Corresponds to the `--recursive` option.
     * 
     */
    public Optional<Boolean> recursive() {
        return Optional.ofNullable(this.recursive);
    }
    /**
     * @return Corresponds to the `--strip-components` option.
     * 
     */
    public Optional<Integer> stripComponents() {
        return Optional.ofNullable(this.stripComponents);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TarOpts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String archive;
        private @Nullable String directory;
        private @Nullable Boolean extract;
        private @Nullable List<String> files;
        private @Nullable Boolean gzip;
        private @Nullable Boolean onDelete;
        private @Nullable Boolean recursive;
        private @Nullable Integer stripComponents;
        public Builder() {}
        public Builder(TarOpts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archive = defaults.archive;
    	      this.directory = defaults.directory;
    	      this.extract = defaults.extract;
    	      this.files = defaults.files;
    	      this.gzip = defaults.gzip;
    	      this.onDelete = defaults.onDelete;
    	      this.recursive = defaults.recursive;
    	      this.stripComponents = defaults.stripComponents;
        }

        @CustomType.Setter
        public Builder archive(String archive) {
            if (archive == null) {
              throw new MissingRequiredPropertyException("TarOpts", "archive");
            }
            this.archive = archive;
            return this;
        }
        @CustomType.Setter
        public Builder directory(@Nullable String directory) {

            this.directory = directory;
            return this;
        }
        @CustomType.Setter
        public Builder extract(@Nullable Boolean extract) {

            this.extract = extract;
            return this;
        }
        @CustomType.Setter
        public Builder files(@Nullable List<String> files) {

            this.files = files;
            return this;
        }
        public Builder files(String... files) {
            return files(List.of(files));
        }
        @CustomType.Setter
        public Builder gzip(@Nullable Boolean gzip) {

            this.gzip = gzip;
            return this;
        }
        @CustomType.Setter
        public Builder onDelete(@Nullable Boolean onDelete) {

            this.onDelete = onDelete;
            return this;
        }
        @CustomType.Setter
        public Builder recursive(@Nullable Boolean recursive) {

            this.recursive = recursive;
            return this;
        }
        @CustomType.Setter
        public Builder stripComponents(@Nullable Integer stripComponents) {

            this.stripComponents = stripComponents;
            return this;
        }
        public TarOpts build() {
            final var _resultValue = new TarOpts();
            _resultValue.archive = archive;
            _resultValue.directory = directory;
            _resultValue.extract = extract;
            _resultValue.files = files;
            _resultValue.gzip = gzip;
            _resultValue.onDelete = onDelete;
            _resultValue.recursive = recursive;
            _resultValue.stripComponents = stripComponents;
            return _resultValue;
        }
    }
}
