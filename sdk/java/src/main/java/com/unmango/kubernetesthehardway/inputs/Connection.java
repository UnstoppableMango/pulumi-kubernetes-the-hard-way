// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Instructions for how to connect to a remote endpoint. Polyfill for `command.ConnectionArgs`.
 * 
 */
public final class Connection extends com.pulumi.resources.InvokeArgs {

    public static final Connection Empty = new Connection();

    /**
     * SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
     * 
     */
    @Import(name="agentSocketPath")
    private @Nullable String agentSocketPath;

    /**
     * @return SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
     * 
     */
    public Optional<String> agentSocketPath() {
        return Optional.ofNullable(this.agentSocketPath);
    }

    /**
     * Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
     * 
     */
    @Import(name="dialErrorLimit")
    private @Nullable Integer dialErrorLimit;

    /**
     * @return Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
     * 
     */
    public Optional<Integer> dialErrorLimit() {
        return Optional.ofNullable(this.dialErrorLimit);
    }

    /**
     * The address of the resource to connect to.
     * 
     */
    @Import(name="host", required=true)
    private String host;

    /**
     * @return The address of the resource to connect to.
     * 
     */
    public String host() {
        return this.host;
    }

    /**
     * The password we should use for the connection.
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    /**
     * @return The password we should use for the connection.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
     * 
     */
    @Import(name="perDialTimeout")
    private @Nullable Integer perDialTimeout;

    /**
     * @return Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
     * 
     */
    public Optional<Integer> perDialTimeout() {
        return Optional.ofNullable(this.perDialTimeout);
    }

    /**
     * The port to connect to.
     * 
     */
    @Import(name="port")
    private @Nullable Integer port;

    /**
     * @return The port to connect to.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    @Import(name="privateKey")
    private @Nullable String privateKey;

    /**
     * @return The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The password to use in case the private key is encrypted.
     * 
     */
    @Import(name="privateKeyPassword")
    private @Nullable String privateKeyPassword;

    /**
     * @return The password to use in case the private key is encrypted.
     * 
     */
    public Optional<String> privateKeyPassword() {
        return Optional.ofNullable(this.privateKeyPassword);
    }

    /**
     * The user that we should use for the connection.
     * 
     */
    @Import(name="user")
    private @Nullable String user;

    /**
     * @return The user that we should use for the connection.
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    private Connection() {}

    private Connection(Connection $) {
        this.agentSocketPath = $.agentSocketPath;
        this.dialErrorLimit = $.dialErrorLimit;
        this.host = $.host;
        this.password = $.password;
        this.perDialTimeout = $.perDialTimeout;
        this.port = $.port;
        this.privateKey = $.privateKey;
        this.privateKeyPassword = $.privateKeyPassword;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Connection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Connection $;

        public Builder() {
            $ = new Connection();
        }

        public Builder(Connection defaults) {
            $ = new Connection(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentSocketPath SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
         * 
         * @return builder
         * 
         */
        public Builder agentSocketPath(@Nullable String agentSocketPath) {
            $.agentSocketPath = agentSocketPath;
            return this;
        }

        /**
         * @param dialErrorLimit Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
         * 
         * @return builder
         * 
         */
        public Builder dialErrorLimit(@Nullable Integer dialErrorLimit) {
            $.dialErrorLimit = dialErrorLimit;
            return this;
        }

        /**
         * @param host The address of the resource to connect to.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            $.host = host;
            return this;
        }

        /**
         * @param password The password we should use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        /**
         * @param perDialTimeout Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
         * 
         * @return builder
         * 
         */
        public Builder perDialTimeout(@Nullable Integer perDialTimeout) {
            $.perDialTimeout = perDialTimeout;
            return this;
        }

        /**
         * @param port The port to connect to.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param privateKey The contents of an SSH key to use for the connection. This takes preference over the password if provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable String privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKeyPassword The password to use in case the private key is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassword(@Nullable String privateKeyPassword) {
            $.privateKeyPassword = privateKeyPassword;
            return this;
        }

        /**
         * @param user The user that we should use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable String user) {
            $.user = user;
            return this;
        }

        public Connection build() {
            $.dialErrorLimit = Codegen.integerProp("dialErrorLimit").arg($.dialErrorLimit).def(10).getNullable();
            if ($.host == null) {
                throw new MissingRequiredPropertyException("Connection", "host");
            }
            $.perDialTimeout = Codegen.integerProp("perDialTimeout").arg($.perDialTimeout).def(15).getNullable();
            $.port = Codegen.integerProp("port").arg($.port).def(22).getNullable();
            $.user = Codegen.stringProp("user").arg($.user).def("root").getNullable();
            return $;
        }
    }

}
