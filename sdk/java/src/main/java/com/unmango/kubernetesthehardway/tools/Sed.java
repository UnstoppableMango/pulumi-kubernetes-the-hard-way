// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools;

import com.pulumi.command.remote.Command;
import com.pulumi.command.remote.outputs.Connection;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.tools.SedArgs;
import com.unmango.kubernetesthehardway.tools.enums.CommandLifecycle;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Abstraction over the `sed` utility on a remote system.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:tools:Sed")
public class Sed extends com.pulumi.resources.ComponentResource {
    /**
     * Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    @Export(name="binaryPath", refs={String.class}, tree="[0]")
    private Output<String> binaryPath;

    /**
     * @return Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    public Output<String> binaryPath() {
        return this.binaryPath;
    }
    /**
     * The underlying command
     * 
     */
    @Export(name="command", refs={Command.class}, tree="[0]")
    private Output<Command> command;

    /**
     * @return The underlying command
     * 
     */
    public Output<Command> command() {
        return this.command;
    }
    /**
     * Connection details for the remote system
     * 
     */
    @Export(name="connection", refs={Connection.class}, tree="[0]")
    private Output<Connection> connection;

    /**
     * @return Connection details for the remote system
     * 
     */
    public Output<Connection> connection() {
        return this.connection;
    }
    /**
     * annotate program execution.
     * 
     */
    @Export(name="debug", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> debug;

    /**
     * @return annotate program execution.
     * 
     */
    public Output<Boolean> debug() {
        return this.debug;
    }
    /**
     * Environment variables
     * 
     */
    @Export(name="environment", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> environment;

    /**
     * @return Environment variables
     * 
     */
    public Output<Map<String,String>> environment() {
        return this.environment;
    }
    /**
     * add the script to the commands to be executed.
     * 
     */
    @Export(name="expressions", refs={Either.class,String.class,List.class}, tree="[0,1,[2,1]]")
    private Output<Either<String,List<String>>> expressions;

    /**
     * @return add the script to the commands to be executed.
     * 
     */
    public Output<Either<String,List<String>>> expressions() {
        return this.expressions;
    }
    /**
     * add the contents of script-file to the commands to be executed.
     * 
     */
    @Export(name="files", refs={Either.class,String.class,List.class}, tree="[0,1,[2,1]]")
    private Output<Either<String,List<String>>> files;

    /**
     * @return add the contents of script-file to the commands to be executed.
     * 
     */
    public Output<Either<String,List<String>>> files() {
        return this.files;
    }
    /**
     * follow symlinks when processing in place
     * 
     */
    @Export(name="followSymlinks", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> followSymlinks;

    /**
     * @return follow symlinks when processing in place
     * 
     */
    public Output<Boolean> followSymlinks() {
        return this.followSymlinks;
    }
    /**
     * display this help and exit.
     * 
     */
    @Export(name="help", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> help;

    /**
     * @return display this help and exit.
     * 
     */
    public Output<Boolean> help() {
        return this.help;
    }
    /**
     * edit files in place (makes backup if SUFFIX supplied)
     * 
     */
    @Export(name="inPlace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> inPlace;

    /**
     * @return edit files in place (makes backup if SUFFIX supplied)
     * 
     */
    public Output<Optional<String>> inPlace() {
        return Codegen.optional(this.inPlace);
    }
    /**
     * corresponds to the [input-file]... argument(s).
     * 
     */
    @Export(name="inputFiles", refs={Either.class,String.class,List.class}, tree="[0,1,[2,1]]")
    private Output<Either<String,List<String>>> inputFiles;

    /**
     * @return corresponds to the [input-file]... argument(s).
     * 
     */
    public Output<Either<String,List<String>>> inputFiles() {
        return this.inputFiles;
    }
    /**
     * At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    @Export(name="lifecycle", refs={CommandLifecycle.class}, tree="[0]")
    private Output</* @Nullable */ CommandLifecycle> lifecycle;

    /**
     * @return At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    public Output<Optional<CommandLifecycle>> lifecycle() {
        return Codegen.optional(this.lifecycle);
    }
    /**
     * specify the desired line-wrap length for the `l&#39; command
     * 
     */
    @Export(name="lineLength", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> lineLength;

    /**
     * @return specify the desired line-wrap length for the `l&#39; command
     * 
     */
    public Output<Optional<Integer>> lineLength() {
        return Codegen.optional(this.lineLength);
    }
    /**
     * separate lines by NUL characters
     * 
     */
    @Export(name="nullData", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> nullData;

    /**
     * @return separate lines by NUL characters
     * 
     */
    public Output<Boolean> nullData() {
        return this.nullData;
    }
    /**
     * disable all GNU extensions.
     * 
     */
    @Export(name="posix", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> posix;

    /**
     * @return disable all GNU extensions.
     * 
     */
    public Output<Boolean> posix() {
        return this.posix;
    }
    /**
     * suppress automatic printing of pattern space. Same as `silent`.
     * 
     */
    @Export(name="quiet", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> quiet;

    /**
     * @return suppress automatic printing of pattern space. Same as `silent`.
     * 
     */
    public Output<Boolean> quiet() {
        return this.quiet;
    }
    /**
     * use extended regular expressions in the script (for portability use POSIX -E).
     * 
     */
    @Export(name="regexpExtended", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> regexpExtended;

    /**
     * @return use extended regular expressions in the script (for portability use POSIX -E).
     * 
     */
    public Output<Boolean> regexpExtended() {
        return this.regexpExtended;
    }
    /**
     * operate in sandbox mode (disable e/r/w commands).
     * 
     */
    @Export(name="sandbox", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> sandbox;

    /**
     * @return operate in sandbox mode (disable e/r/w commands).
     * 
     */
    public Output<Boolean> sandbox() {
        return this.sandbox;
    }
    /**
     * script only if no other script.
     * 
     */
    @Export(name="script", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> script;

    /**
     * @return script only if no other script.
     * 
     */
    public Output<Optional<String>> script() {
        return Codegen.optional(this.script);
    }
    /**
     * consider files as separate rather than as a single, continuous long stream.
     * 
     */
    @Export(name="separate", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> separate;

    /**
     * @return consider files as separate rather than as a single, continuous long stream.
     * 
     */
    public Output<Boolean> separate() {
        return this.separate;
    }
    /**
     * suppress automatic printing of pattern space. Same as `quiet`.
     * 
     */
    @Export(name="silent", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> silent;

    /**
     * @return suppress automatic printing of pattern space. Same as `quiet`.
     * 
     */
    public Output<Boolean> silent() {
        return this.silent;
    }
    /**
     * TODO
     * 
     */
    @Export(name="stderr", refs={String.class}, tree="[0]")
    private Output<String> stderr;

    /**
     * @return TODO
     * 
     */
    public Output<String> stderr() {
        return this.stderr;
    }
    /**
     * TODO
     * 
     */
    @Export(name="stdin", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> stdin;

    /**
     * @return TODO
     * 
     */
    public Output<Optional<String>> stdin() {
        return Codegen.optional(this.stdin);
    }
    /**
     * TODO
     * 
     */
    @Export(name="stdout", refs={String.class}, tree="[0]")
    private Output<String> stdout;

    /**
     * @return TODO
     * 
     */
    public Output<String> stdout() {
        return this.stdout;
    }
    /**
     * TODO
     * 
     */
    @Export(name="triggers", refs={List.class,Object.class}, tree="[0,1]")
    private Output<List<Object>> triggers;

    /**
     * @return TODO
     * 
     */
    public Output<List<Object>> triggers() {
        return this.triggers;
    }
    /**
     * load minimal amounts of data from the input files and flush the output buffers more often.
     * 
     */
    @Export(name="unbuffered", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> unbuffered;

    /**
     * @return load minimal amounts of data from the input files and flush the output buffers more often.
     * 
     */
    public Output<Boolean> unbuffered() {
        return this.unbuffered;
    }
    /**
     * output version information and exit.
     * 
     */
    @Export(name="version", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> version;

    /**
     * @return output version information and exit.
     * 
     */
    public Output<Boolean> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Sed(String name) {
        this(name, SedArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Sed(String name, SedArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Sed(String name, SedArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes-the-hard-way:tools:Sed", name, args == null ? SedArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
