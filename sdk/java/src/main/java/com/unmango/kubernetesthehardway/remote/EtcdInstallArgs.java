// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.command.remote.inputs.ConnectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.remote.enums.Architecture;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EtcdInstallArgs extends com.pulumi.resources.ResourceArgs {

    public static final EtcdInstallArgs Empty = new EtcdInstallArgs();

    /**
     * The etcd CPU architecture.
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<Architecture> architecture;

    /**
     * @return The etcd CPU architecture.
     * 
     */
    public Optional<Output<Architecture>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * The PEM encoded CA data.
     * 
     */
    @Import(name="caPem", required=true)
    private Output<String> caPem;

    /**
     * @return The PEM encoded CA data.
     * 
     */
    public Output<String> caPem() {
        return this.caPem;
    }

    /**
     * The PEM encoded certificate data.
     * 
     */
    @Import(name="certPem", required=true)
    private Output<String> certPem;

    /**
     * @return The PEM encoded certificate data.
     * 
     */
    public Output<String> certPem() {
        return this.certPem;
    }

    /**
     * The directory to store etcd configuration.
     * 
     */
    @Import(name="configurationDirectory")
    private @Nullable Output<String> configurationDirectory;

    /**
     * @return The directory to store etcd configuration.
     * 
     */
    public Optional<Output<String>> configurationDirectory() {
        return Optional.ofNullable(this.configurationDirectory);
    }

    /**
     * The connection details.
     * 
     */
    @Import(name="connection", required=true)
    private Output<ConnectionArgs> connection;

    /**
     * @return The connection details.
     * 
     */
    public Output<ConnectionArgs> connection() {
        return this.connection;
    }

    /**
     * The directory etcd will use.
     * 
     */
    @Import(name="dataDirectory")
    private @Nullable Output<String> dataDirectory;

    /**
     * @return The directory etcd will use.
     * 
     */
    public Optional<Output<String>> dataDirectory() {
        return Optional.ofNullable(this.dataDirectory);
    }

    /**
     * Temporary directory to download files to. Defaults to `/tmp/&lt;random string&gt;`.
     * 
     */
    @Import(name="downloadDirectory")
    private @Nullable Output<String> downloadDirectory;

    /**
     * @return Temporary directory to download files to. Defaults to `/tmp/&lt;random string&gt;`.
     * 
     */
    public Optional<Output<String>> downloadDirectory() {
        return Optional.ofNullable(this.downloadDirectory);
    }

    /**
     * Directory to install the `etcd` and `etcdctl` binaries.
     * 
     */
    @Import(name="installDirectory")
    private @Nullable Output<String> installDirectory;

    /**
     * @return Directory to install the `etcd` and `etcdctl` binaries.
     * 
     */
    public Optional<Output<String>> installDirectory() {
        return Optional.ofNullable(this.installDirectory);
    }

    /**
     * IP used to serve client requests and communicate with etcd peers.
     * 
     */
    @Import(name="internalIp", required=true)
    private Output<String> internalIp;

    /**
     * @return IP used to serve client requests and communicate with etcd peers.
     * 
     */
    public Output<String> internalIp() {
        return this.internalIp;
    }

    /**
     * The PEM encoded key data.
     * 
     */
    @Import(name="keyPem", required=true)
    private Output<String> keyPem;

    /**
     * @return The PEM encoded key data.
     * 
     */
    public Output<String> keyPem() {
        return this.keyPem;
    }

    /**
     * The version of etcd to install.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of etcd to install.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private EtcdInstallArgs() {}

    private EtcdInstallArgs(EtcdInstallArgs $) {
        this.architecture = $.architecture;
        this.caPem = $.caPem;
        this.certPem = $.certPem;
        this.configurationDirectory = $.configurationDirectory;
        this.connection = $.connection;
        this.dataDirectory = $.dataDirectory;
        this.downloadDirectory = $.downloadDirectory;
        this.installDirectory = $.installDirectory;
        this.internalIp = $.internalIp;
        this.keyPem = $.keyPem;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EtcdInstallArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EtcdInstallArgs $;

        public Builder() {
            $ = new EtcdInstallArgs();
        }

        public Builder(EtcdInstallArgs defaults) {
            $ = new EtcdInstallArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture The etcd CPU architecture.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<Architecture> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The etcd CPU architecture.
         * 
         * @return builder
         * 
         */
        public Builder architecture(Architecture architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param caPem The PEM encoded CA data.
         * 
         * @return builder
         * 
         */
        public Builder caPem(Output<String> caPem) {
            $.caPem = caPem;
            return this;
        }

        /**
         * @param caPem The PEM encoded CA data.
         * 
         * @return builder
         * 
         */
        public Builder caPem(String caPem) {
            return caPem(Output.of(caPem));
        }

        /**
         * @param certPem The PEM encoded certificate data.
         * 
         * @return builder
         * 
         */
        public Builder certPem(Output<String> certPem) {
            $.certPem = certPem;
            return this;
        }

        /**
         * @param certPem The PEM encoded certificate data.
         * 
         * @return builder
         * 
         */
        public Builder certPem(String certPem) {
            return certPem(Output.of(certPem));
        }

        /**
         * @param configurationDirectory The directory to store etcd configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationDirectory(@Nullable Output<String> configurationDirectory) {
            $.configurationDirectory = configurationDirectory;
            return this;
        }

        /**
         * @param configurationDirectory The directory to store etcd configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationDirectory(String configurationDirectory) {
            return configurationDirectory(Output.of(configurationDirectory));
        }

        /**
         * @param connection The connection details.
         * 
         * @return builder
         * 
         */
        public Builder connection(Output<ConnectionArgs> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection The connection details.
         * 
         * @return builder
         * 
         */
        public Builder connection(ConnectionArgs connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param dataDirectory The directory etcd will use.
         * 
         * @return builder
         * 
         */
        public Builder dataDirectory(@Nullable Output<String> dataDirectory) {
            $.dataDirectory = dataDirectory;
            return this;
        }

        /**
         * @param dataDirectory The directory etcd will use.
         * 
         * @return builder
         * 
         */
        public Builder dataDirectory(String dataDirectory) {
            return dataDirectory(Output.of(dataDirectory));
        }

        /**
         * @param downloadDirectory Temporary directory to download files to. Defaults to `/tmp/&lt;random string&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder downloadDirectory(@Nullable Output<String> downloadDirectory) {
            $.downloadDirectory = downloadDirectory;
            return this;
        }

        /**
         * @param downloadDirectory Temporary directory to download files to. Defaults to `/tmp/&lt;random string&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder downloadDirectory(String downloadDirectory) {
            return downloadDirectory(Output.of(downloadDirectory));
        }

        /**
         * @param installDirectory Directory to install the `etcd` and `etcdctl` binaries.
         * 
         * @return builder
         * 
         */
        public Builder installDirectory(@Nullable Output<String> installDirectory) {
            $.installDirectory = installDirectory;
            return this;
        }

        /**
         * @param installDirectory Directory to install the `etcd` and `etcdctl` binaries.
         * 
         * @return builder
         * 
         */
        public Builder installDirectory(String installDirectory) {
            return installDirectory(Output.of(installDirectory));
        }

        /**
         * @param internalIp IP used to serve client requests and communicate with etcd peers.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(Output<String> internalIp) {
            $.internalIp = internalIp;
            return this;
        }

        /**
         * @param internalIp IP used to serve client requests and communicate with etcd peers.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(String internalIp) {
            return internalIp(Output.of(internalIp));
        }

        /**
         * @param keyPem The PEM encoded key data.
         * 
         * @return builder
         * 
         */
        public Builder keyPem(Output<String> keyPem) {
            $.keyPem = keyPem;
            return this;
        }

        /**
         * @param keyPem The PEM encoded key data.
         * 
         * @return builder
         * 
         */
        public Builder keyPem(String keyPem) {
            return keyPem(Output.of(keyPem));
        }

        /**
         * @param version The version of etcd to install.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of etcd to install.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public EtcdInstallArgs build() {
            if ($.caPem == null) {
                throw new MissingRequiredPropertyException("EtcdInstallArgs", "caPem");
            }
            if ($.certPem == null) {
                throw new MissingRequiredPropertyException("EtcdInstallArgs", "certPem");
            }
            $.configurationDirectory = Codegen.stringProp("configurationDirectory").output().arg($.configurationDirectory).def("/etc/etcd").getNullable();
            if ($.connection == null) {
                throw new MissingRequiredPropertyException("EtcdInstallArgs", "connection");
            }
            $.dataDirectory = Codegen.stringProp("dataDirectory").output().arg($.dataDirectory).def("/var/lib/etcd").getNullable();
            $.installDirectory = Codegen.stringProp("installDirectory").output().arg($.installDirectory).def("/usr/local/bin").getNullable();
            if ($.internalIp == null) {
                throw new MissingRequiredPropertyException("EtcdInstallArgs", "internalIp");
            }
            if ($.keyPem == null) {
                throw new MissingRequiredPropertyException("EtcdInstallArgs", "keyPem");
            }
            return $;
        }
    }

}
