// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.config.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.config.outputs.KubeletConfigurationAuthentication;
import com.unmango.kubernetesthehardway.config.outputs.KubeletConfigurationAuthorization;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class KubeletConfiguration {
    private String apiVersion;
    private KubeletConfigurationAuthentication authentication;
    private KubeletConfigurationAuthorization authorization;
    /**
     * @return TODO
     * 
     */
    private String cgroupDriver;
    /**
     * @return TODO
     * 
     */
    private List<String> clusterDNS;
    /**
     * @return TODO
     * 
     */
    private String clusterDomain;
    /**
     * @return TODO
     * 
     */
    private String containerRuntimeEndpoint;
    private String kind;
    /**
     * @return TODO
     * 
     */
    private String podCIDR;
    /**
     * @return TODO
     * 
     */
    private String resolvConf;
    /**
     * @return TODO
     * 
     */
    private String runtimeRequestTimeout;
    /**
     * @return TODO
     * 
     */
    private String tlsCertFile;
    /**
     * @return TODO
     * 
     */
    private String tlsPrivateKeyFile;

    private KubeletConfiguration() {}
    public String apiVersion() {
        return this.apiVersion;
    }
    public KubeletConfigurationAuthentication authentication() {
        return this.authentication;
    }
    public KubeletConfigurationAuthorization authorization() {
        return this.authorization;
    }
    /**
     * @return TODO
     * 
     */
    public String cgroupDriver() {
        return this.cgroupDriver;
    }
    /**
     * @return TODO
     * 
     */
    public List<String> clusterDNS() {
        return this.clusterDNS;
    }
    /**
     * @return TODO
     * 
     */
    public String clusterDomain() {
        return this.clusterDomain;
    }
    /**
     * @return TODO
     * 
     */
    public String containerRuntimeEndpoint() {
        return this.containerRuntimeEndpoint;
    }
    public String kind() {
        return this.kind;
    }
    /**
     * @return TODO
     * 
     */
    public String podCIDR() {
        return this.podCIDR;
    }
    /**
     * @return TODO
     * 
     */
    public String resolvConf() {
        return this.resolvConf;
    }
    /**
     * @return TODO
     * 
     */
    public String runtimeRequestTimeout() {
        return this.runtimeRequestTimeout;
    }
    /**
     * @return TODO
     * 
     */
    public String tlsCertFile() {
        return this.tlsCertFile;
    }
    /**
     * @return TODO
     * 
     */
    public String tlsPrivateKeyFile() {
        return this.tlsPrivateKeyFile;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KubeletConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiVersion;
        private KubeletConfigurationAuthentication authentication;
        private KubeletConfigurationAuthorization authorization;
        private String cgroupDriver;
        private List<String> clusterDNS;
        private String clusterDomain;
        private String containerRuntimeEndpoint;
        private String kind;
        private String podCIDR;
        private String resolvConf;
        private String runtimeRequestTimeout;
        private String tlsCertFile;
        private String tlsPrivateKeyFile;
        public Builder() {}
        public Builder(KubeletConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiVersion = defaults.apiVersion;
    	      this.authentication = defaults.authentication;
    	      this.authorization = defaults.authorization;
    	      this.cgroupDriver = defaults.cgroupDriver;
    	      this.clusterDNS = defaults.clusterDNS;
    	      this.clusterDomain = defaults.clusterDomain;
    	      this.containerRuntimeEndpoint = defaults.containerRuntimeEndpoint;
    	      this.kind = defaults.kind;
    	      this.podCIDR = defaults.podCIDR;
    	      this.resolvConf = defaults.resolvConf;
    	      this.runtimeRequestTimeout = defaults.runtimeRequestTimeout;
    	      this.tlsCertFile = defaults.tlsCertFile;
    	      this.tlsPrivateKeyFile = defaults.tlsPrivateKeyFile;
        }

        @CustomType.Setter
        public Builder apiVersion(String apiVersion) {
            if (apiVersion == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "apiVersion");
            }
            this.apiVersion = apiVersion;
            return this;
        }
        @CustomType.Setter
        public Builder authentication(KubeletConfigurationAuthentication authentication) {
            if (authentication == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "authentication");
            }
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(KubeletConfigurationAuthorization authorization) {
            if (authorization == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "authorization");
            }
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder cgroupDriver(String cgroupDriver) {
            if (cgroupDriver == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "cgroupDriver");
            }
            this.cgroupDriver = cgroupDriver;
            return this;
        }
        @CustomType.Setter
        public Builder clusterDNS(List<String> clusterDNS) {
            if (clusterDNS == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "clusterDNS");
            }
            this.clusterDNS = clusterDNS;
            return this;
        }
        public Builder clusterDNS(String... clusterDNS) {
            return clusterDNS(List.of(clusterDNS));
        }
        @CustomType.Setter
        public Builder clusterDomain(String clusterDomain) {
            if (clusterDomain == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "clusterDomain");
            }
            this.clusterDomain = clusterDomain;
            return this;
        }
        @CustomType.Setter
        public Builder containerRuntimeEndpoint(String containerRuntimeEndpoint) {
            if (containerRuntimeEndpoint == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "containerRuntimeEndpoint");
            }
            this.containerRuntimeEndpoint = containerRuntimeEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder podCIDR(String podCIDR) {
            if (podCIDR == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "podCIDR");
            }
            this.podCIDR = podCIDR;
            return this;
        }
        @CustomType.Setter
        public Builder resolvConf(String resolvConf) {
            if (resolvConf == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "resolvConf");
            }
            this.resolvConf = resolvConf;
            return this;
        }
        @CustomType.Setter
        public Builder runtimeRequestTimeout(String runtimeRequestTimeout) {
            if (runtimeRequestTimeout == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "runtimeRequestTimeout");
            }
            this.runtimeRequestTimeout = runtimeRequestTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder tlsCertFile(String tlsCertFile) {
            if (tlsCertFile == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "tlsCertFile");
            }
            this.tlsCertFile = tlsCertFile;
            return this;
        }
        @CustomType.Setter
        public Builder tlsPrivateKeyFile(String tlsPrivateKeyFile) {
            if (tlsPrivateKeyFile == null) {
              throw new MissingRequiredPropertyException("KubeletConfiguration", "tlsPrivateKeyFile");
            }
            this.tlsPrivateKeyFile = tlsPrivateKeyFile;
            return this;
        }
        public KubeletConfiguration build() {
            final var _resultValue = new KubeletConfiguration();
            _resultValue.apiVersion = apiVersion;
            _resultValue.authentication = authentication;
            _resultValue.authorization = authorization;
            _resultValue.cgroupDriver = cgroupDriver;
            _resultValue.clusterDNS = clusterDNS;
            _resultValue.clusterDomain = clusterDomain;
            _resultValue.containerRuntimeEndpoint = containerRuntimeEndpoint;
            _resultValue.kind = kind;
            _resultValue.podCIDR = podCIDR;
            _resultValue.resolvConf = resolvConf;
            _resultValue.runtimeRequestTimeout = runtimeRequestTimeout;
            _resultValue.tlsCertFile = tlsCertFile;
            _resultValue.tlsPrivateKeyFile = tlsPrivateKeyFile;
            return _resultValue;
        }
    }
}
