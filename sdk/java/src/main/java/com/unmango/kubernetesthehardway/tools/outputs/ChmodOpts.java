// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ChmodOpts {
    /**
     * @return Like verbose but report only when a change is made.
     * 
     */
    private @Nullable Boolean changes;
    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    private List<String> files;
    /**
     * @return Display help and exit.
     * 
     */
    private @Nullable Boolean help;
    /**
     * @return Modes may be absolute or symbolic. An absolute mode is an octal number...
     * 
     */
    private String mode;
    /**
     * @return Do not treat &#39;/&#39; specially (the default).
     * 
     */
    private @Nullable Boolean noPreserveRoot;
    /**
     * @return Fail to operate recursively on &#39;/&#39;.
     * 
     */
    private @Nullable Boolean preserveRoot;
    /**
     * @return Suppress most error messages. Same as `silent`.
     * 
     */
    private @Nullable Boolean quiet;
    /**
     * @return Change files and directories recursively.
     * 
     */
    private @Nullable Boolean recursive;
    /**
     * @return Use RFILE&#39;s mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
     * 
     */
    private @Nullable String reference;
    /**
     * @return Suppress most error messages. Same as `quiet`.
     * 
     */
    private @Nullable Boolean silent;
    /**
     * @return Output version information and exit.
     * 
     */
    private @Nullable Boolean version;

    private ChmodOpts() {}
    /**
     * @return Like verbose but report only when a change is made.
     * 
     */
    public Optional<Boolean> changes() {
        return Optional.ofNullable(this.changes);
    }
    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    public List<String> files() {
        return this.files;
    }
    /**
     * @return Display help and exit.
     * 
     */
    public Optional<Boolean> help() {
        return Optional.ofNullable(this.help);
    }
    /**
     * @return Modes may be absolute or symbolic. An absolute mode is an octal number...
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return Do not treat &#39;/&#39; specially (the default).
     * 
     */
    public Optional<Boolean> noPreserveRoot() {
        return Optional.ofNullable(this.noPreserveRoot);
    }
    /**
     * @return Fail to operate recursively on &#39;/&#39;.
     * 
     */
    public Optional<Boolean> preserveRoot() {
        return Optional.ofNullable(this.preserveRoot);
    }
    /**
     * @return Suppress most error messages. Same as `silent`.
     * 
     */
    public Optional<Boolean> quiet() {
        return Optional.ofNullable(this.quiet);
    }
    /**
     * @return Change files and directories recursively.
     * 
     */
    public Optional<Boolean> recursive() {
        return Optional.ofNullable(this.recursive);
    }
    /**
     * @return Use RFILE&#39;s mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
     * 
     */
    public Optional<String> reference() {
        return Optional.ofNullable(this.reference);
    }
    /**
     * @return Suppress most error messages. Same as `quiet`.
     * 
     */
    public Optional<Boolean> silent() {
        return Optional.ofNullable(this.silent);
    }
    /**
     * @return Output version information and exit.
     * 
     */
    public Optional<Boolean> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChmodOpts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean changes;
        private List<String> files;
        private @Nullable Boolean help;
        private String mode;
        private @Nullable Boolean noPreserveRoot;
        private @Nullable Boolean preserveRoot;
        private @Nullable Boolean quiet;
        private @Nullable Boolean recursive;
        private @Nullable String reference;
        private @Nullable Boolean silent;
        private @Nullable Boolean version;
        public Builder() {}
        public Builder(ChmodOpts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.changes = defaults.changes;
    	      this.files = defaults.files;
    	      this.help = defaults.help;
    	      this.mode = defaults.mode;
    	      this.noPreserveRoot = defaults.noPreserveRoot;
    	      this.preserveRoot = defaults.preserveRoot;
    	      this.quiet = defaults.quiet;
    	      this.recursive = defaults.recursive;
    	      this.reference = defaults.reference;
    	      this.silent = defaults.silent;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder changes(@Nullable Boolean changes) {

            this.changes = changes;
            return this;
        }
        @CustomType.Setter
        public Builder files(List<String> files) {
            if (files == null) {
              throw new MissingRequiredPropertyException("ChmodOpts", "files");
            }
            this.files = files;
            return this;
        }
        public Builder files(String... files) {
            return files(List.of(files));
        }
        @CustomType.Setter
        public Builder help(@Nullable Boolean help) {

            this.help = help;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("ChmodOpts", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder noPreserveRoot(@Nullable Boolean noPreserveRoot) {

            this.noPreserveRoot = noPreserveRoot;
            return this;
        }
        @CustomType.Setter
        public Builder preserveRoot(@Nullable Boolean preserveRoot) {

            this.preserveRoot = preserveRoot;
            return this;
        }
        @CustomType.Setter
        public Builder quiet(@Nullable Boolean quiet) {

            this.quiet = quiet;
            return this;
        }
        @CustomType.Setter
        public Builder recursive(@Nullable Boolean recursive) {

            this.recursive = recursive;
            return this;
        }
        @CustomType.Setter
        public Builder reference(@Nullable String reference) {

            this.reference = reference;
            return this;
        }
        @CustomType.Setter
        public Builder silent(@Nullable Boolean silent) {

            this.silent = silent;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Boolean version) {

            this.version = version;
            return this;
        }
        public ChmodOpts build() {
            final var _resultValue = new ChmodOpts();
            _resultValue.changes = changes;
            _resultValue.files = files;
            _resultValue.help = help;
            _resultValue.mode = mode;
            _resultValue.noPreserveRoot = noPreserveRoot;
            _resultValue.preserveRoot = preserveRoot;
            _resultValue.quiet = quiet;
            _resultValue.recursive = recursive;
            _resultValue.reference = reference;
            _resultValue.silent = silent;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
