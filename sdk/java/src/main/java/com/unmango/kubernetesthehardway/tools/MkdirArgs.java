// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools;

import com.pulumi.command.remote.inputs.ConnectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.tools.enums.CommandLifecycle;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MkdirArgs extends com.pulumi.resources.ResourceArgs {

    public static final MkdirArgs Empty = new MkdirArgs();

    /**
     * The connection details for the remote system.
     * 
     */
    @Import(name="connection", required=true)
    private Output<ConnectionArgs> connection;

    /**
     * @return The connection details for the remote system.
     * 
     */
    public Output<ConnectionArgs> connection() {
        return this.connection;
    }

    /**
     * The fully qualified path of the directory on the remote system.
     * 
     */
    @Import(name="directory", required=true)
    private Output<String> directory;

    /**
     * @return The fully qualified path of the directory on the remote system.
     * 
     */
    public Output<String> directory() {
        return this.directory;
    }

    @Import(name="environment")
    private @Nullable Output<Map<String,String>> environment;

    public Optional<Output<Map<String,String>>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * At what stage(s) in the resource lifecycle should the command be run.
     * 
     */
    @Import(name="lifecycle")
    private @Nullable CommandLifecycle lifecycle;

    /**
     * @return At what stage(s) in the resource lifecycle should the command be run.
     * 
     */
    public Optional<CommandLifecycle> lifecycle() {
        return Optional.ofNullable(this.lifecycle);
    }

    /**
     * Corresponds to the `--parents` option.
     * 
     */
    @Import(name="parents")
    private @Nullable Output<Boolean> parents;

    /**
     * @return Corresponds to the `--parents` option.
     * 
     */
    public Optional<Output<Boolean>> parents() {
        return Optional.ofNullable(this.parents);
    }

    /**
     * Remove the created directory when the `Mkdir` resource is deleted or updated.
     * 
     */
    @Import(name="removeOnDelete")
    private @Nullable Output<Boolean> removeOnDelete;

    /**
     * @return Remove the created directory when the `Mkdir` resource is deleted or updated.
     * 
     */
    public Optional<Output<Boolean>> removeOnDelete() {
        return Optional.ofNullable(this.removeOnDelete);
    }

    private MkdirArgs() {}

    private MkdirArgs(MkdirArgs $) {
        this.connection = $.connection;
        this.directory = $.directory;
        this.environment = $.environment;
        this.lifecycle = $.lifecycle;
        this.parents = $.parents;
        this.removeOnDelete = $.removeOnDelete;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MkdirArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MkdirArgs $;

        public Builder() {
            $ = new MkdirArgs();
        }

        public Builder(MkdirArgs defaults) {
            $ = new MkdirArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connection The connection details for the remote system.
         * 
         * @return builder
         * 
         */
        public Builder connection(Output<ConnectionArgs> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection The connection details for the remote system.
         * 
         * @return builder
         * 
         */
        public Builder connection(ConnectionArgs connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param directory The fully qualified path of the directory on the remote system.
         * 
         * @return builder
         * 
         */
        public Builder directory(Output<String> directory) {
            $.directory = directory;
            return this;
        }

        /**
         * @param directory The fully qualified path of the directory on the remote system.
         * 
         * @return builder
         * 
         */
        public Builder directory(String directory) {
            return directory(Output.of(directory));
        }

        public Builder environment(@Nullable Output<Map<String,String>> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(Map<String,String> environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param lifecycle At what stage(s) in the resource lifecycle should the command be run.
         * 
         * @return builder
         * 
         */
        public Builder lifecycle(@Nullable CommandLifecycle lifecycle) {
            $.lifecycle = lifecycle;
            return this;
        }

        /**
         * @param parents Corresponds to the `--parents` option.
         * 
         * @return builder
         * 
         */
        public Builder parents(@Nullable Output<Boolean> parents) {
            $.parents = parents;
            return this;
        }

        /**
         * @param parents Corresponds to the `--parents` option.
         * 
         * @return builder
         * 
         */
        public Builder parents(Boolean parents) {
            return parents(Output.of(parents));
        }

        /**
         * @param removeOnDelete Remove the created directory when the `Mkdir` resource is deleted or updated.
         * 
         * @return builder
         * 
         */
        public Builder removeOnDelete(@Nullable Output<Boolean> removeOnDelete) {
            $.removeOnDelete = removeOnDelete;
            return this;
        }

        /**
         * @param removeOnDelete Remove the created directory when the `Mkdir` resource is deleted or updated.
         * 
         * @return builder
         * 
         */
        public Builder removeOnDelete(Boolean removeOnDelete) {
            return removeOnDelete(Output.of(removeOnDelete));
        }

        public MkdirArgs build() {
            if ($.connection == null) {
                throw new MissingRequiredPropertyException("MkdirArgs", "connection");
            }
            if ($.directory == null) {
                throw new MissingRequiredPropertyException("MkdirArgs", "directory");
            }
            return $;
        }
    }

}
