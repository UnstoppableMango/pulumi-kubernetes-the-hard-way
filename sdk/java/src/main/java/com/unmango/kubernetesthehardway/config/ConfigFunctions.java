// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.config;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.config.inputs.GetCniBridgePluginConfigurationArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetCniBridgePluginConfigurationPlainArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetCniLoopbackPluginConfigurationArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetCniLoopbackPluginConfigurationPlainArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetKubeProxyConfigurationArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetKubeProxyConfigurationPlainArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetKubeVipManifestArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetKubeVipManifestPlainArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetKubeconfigArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetKubeconfigPlainArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetKubeletConfigurationArgs;
import com.unmango.kubernetesthehardway.config.inputs.GetKubeletConfigurationPlainArgs;
import com.unmango.kubernetesthehardway.config.outputs.GetCniBridgePluginConfigurationResult;
import com.unmango.kubernetesthehardway.config.outputs.GetCniLoopbackPluginConfigurationResult;
import com.unmango.kubernetesthehardway.config.outputs.GetKubeProxyConfigurationResult;
import com.unmango.kubernetesthehardway.config.outputs.GetKubeVipManifestResult;
import com.unmango.kubernetesthehardway.config.outputs.GetKubeconfigResult;
import com.unmango.kubernetesthehardway.config.outputs.GetKubeletConfigurationResult;
import java.util.concurrent.CompletableFuture;

public final class ConfigFunctions {
    /**
     * Get the `bridge` configuration.
     * 
     */
    public static Output<GetCniBridgePluginConfigurationResult> getCniBridgePluginConfiguration(GetCniBridgePluginConfigurationArgs args) {
        return getCniBridgePluginConfiguration(args, InvokeOptions.Empty);
    }
    /**
     * Get the `bridge` configuration.
     * 
     */
    public static CompletableFuture<GetCniBridgePluginConfigurationResult> getCniBridgePluginConfigurationPlain(GetCniBridgePluginConfigurationPlainArgs args) {
        return getCniBridgePluginConfigurationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get the `bridge` configuration.
     * 
     */
    public static Output<GetCniBridgePluginConfigurationResult> getCniBridgePluginConfiguration(GetCniBridgePluginConfigurationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("kubernetes-the-hard-way:config:getCniBridgePluginConfiguration", TypeShape.of(GetCniBridgePluginConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the `bridge` configuration.
     * 
     */
    public static CompletableFuture<GetCniBridgePluginConfigurationResult> getCniBridgePluginConfigurationPlain(GetCniBridgePluginConfigurationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("kubernetes-the-hard-way:config:getCniBridgePluginConfiguration", TypeShape.of(GetCniBridgePluginConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the `loopback` configuration.
     * 
     */
    public static Output<GetCniLoopbackPluginConfigurationResult> getCniLoopbackPluginConfiguration() {
        return getCniLoopbackPluginConfiguration(GetCniLoopbackPluginConfigurationArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get the `loopback` configuration.
     * 
     */
    public static CompletableFuture<GetCniLoopbackPluginConfigurationResult> getCniLoopbackPluginConfigurationPlain() {
        return getCniLoopbackPluginConfigurationPlain(GetCniLoopbackPluginConfigurationPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get the `loopback` configuration.
     * 
     */
    public static Output<GetCniLoopbackPluginConfigurationResult> getCniLoopbackPluginConfiguration(GetCniLoopbackPluginConfigurationArgs args) {
        return getCniLoopbackPluginConfiguration(args, InvokeOptions.Empty);
    }
    /**
     * Get the `loopback` configuration.
     * 
     */
    public static CompletableFuture<GetCniLoopbackPluginConfigurationResult> getCniLoopbackPluginConfigurationPlain(GetCniLoopbackPluginConfigurationPlainArgs args) {
        return getCniLoopbackPluginConfigurationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get the `loopback` configuration.
     * 
     */
    public static Output<GetCniLoopbackPluginConfigurationResult> getCniLoopbackPluginConfiguration(GetCniLoopbackPluginConfigurationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("kubernetes-the-hard-way:config:getCniLoopbackPluginConfiguration", TypeShape.of(GetCniLoopbackPluginConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the `loopback` configuration.
     * 
     */
    public static CompletableFuture<GetCniLoopbackPluginConfigurationResult> getCniLoopbackPluginConfigurationPlain(GetCniLoopbackPluginConfigurationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("kubernetes-the-hard-way:config:getCniLoopbackPluginConfiguration", TypeShape.of(GetCniLoopbackPluginConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * kube-proxy configuration.
     * 
     */
    public static Output<GetKubeProxyConfigurationResult> getKubeProxyConfiguration(GetKubeProxyConfigurationArgs args) {
        return getKubeProxyConfiguration(args, InvokeOptions.Empty);
    }
    /**
     * kube-proxy configuration.
     * 
     */
    public static CompletableFuture<GetKubeProxyConfigurationResult> getKubeProxyConfigurationPlain(GetKubeProxyConfigurationPlainArgs args) {
        return getKubeProxyConfigurationPlain(args, InvokeOptions.Empty);
    }
    /**
     * kube-proxy configuration.
     * 
     */
    public static Output<GetKubeProxyConfigurationResult> getKubeProxyConfiguration(GetKubeProxyConfigurationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("kubernetes-the-hard-way:config:getKubeProxyConfiguration", TypeShape.of(GetKubeProxyConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * kube-proxy configuration.
     * 
     */
    public static CompletableFuture<GetKubeProxyConfigurationResult> getKubeProxyConfigurationPlain(GetKubeProxyConfigurationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("kubernetes-the-hard-way:config:getKubeProxyConfiguration", TypeShape.of(GetKubeProxyConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets the static pod manifests for KubeVip.
     * 
     */
    public static Output<GetKubeVipManifestResult> getKubeVipManifest(GetKubeVipManifestArgs args) {
        return getKubeVipManifest(args, InvokeOptions.Empty);
    }
    /**
     * Gets the static pod manifests for KubeVip.
     * 
     */
    public static CompletableFuture<GetKubeVipManifestResult> getKubeVipManifestPlain(GetKubeVipManifestPlainArgs args) {
        return getKubeVipManifestPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets the static pod manifests for KubeVip.
     * 
     */
    public static Output<GetKubeVipManifestResult> getKubeVipManifest(GetKubeVipManifestArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("kubernetes-the-hard-way:config:getKubeVipManifest", TypeShape.of(GetKubeVipManifestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets the static pod manifests for KubeVip.
     * 
     */
    public static CompletableFuture<GetKubeVipManifestResult> getKubeVipManifestPlain(GetKubeVipManifestPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("kubernetes-the-hard-way:config:getKubeVipManifest", TypeShape.of(GetKubeVipManifestResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetKubeconfigResult> getKubeconfig(GetKubeconfigArgs args) {
        return getKubeconfig(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetKubeconfigResult> getKubeconfigPlain(GetKubeconfigPlainArgs args) {
        return getKubeconfigPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetKubeconfigResult> getKubeconfig(GetKubeconfigArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("kubernetes-the-hard-way:config:getKubeconfig", TypeShape.of(GetKubeconfigResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetKubeconfigResult> getKubeconfigPlain(GetKubeconfigPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("kubernetes-the-hard-way:config:getKubeconfig", TypeShape.of(GetKubeconfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the kubelet configuration.
     * 
     */
    public static Output<GetKubeletConfigurationResult> getKubeletConfiguration(GetKubeletConfigurationArgs args) {
        return getKubeletConfiguration(args, InvokeOptions.Empty);
    }
    /**
     * Get the kubelet configuration.
     * 
     */
    public static CompletableFuture<GetKubeletConfigurationResult> getKubeletConfigurationPlain(GetKubeletConfigurationPlainArgs args) {
        return getKubeletConfigurationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get the kubelet configuration.
     * 
     */
    public static Output<GetKubeletConfigurationResult> getKubeletConfiguration(GetKubeletConfigurationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("kubernetes-the-hard-way:config:getKubeletConfiguration", TypeShape.of(GetKubeletConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get the kubelet configuration.
     * 
     */
    public static CompletableFuture<GetKubeletConfigurationResult> getKubeletConfigurationPlain(GetKubeletConfigurationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("kubernetes-the-hard-way:config:getKubeletConfiguration", TypeShape.of(GetKubeletConfigurationResult.class), args, Utilities.withVersion(options));
    }
}
