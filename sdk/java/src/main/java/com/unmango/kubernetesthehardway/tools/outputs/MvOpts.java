// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MvOpts {
    /**
     * @return Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
     * 
     */
    private @Nullable Boolean backup;
    /**
     * @return Corresponds to the `--context` option.
     * 
     */
    private @Nullable Boolean context;
    /**
     * @return Corresponds to the [CONTROL] argument for the `--backup` option.
     * 
     */
    private @Nullable Boolean control;
    /**
     * @return Corresponds to the [DEST] argument.
     * 
     */
    private @Nullable String dest;
    /**
     * @return Corresponds to the [DIRECTORY] argument.
     * 
     */
    private @Nullable String directory;
    /**
     * @return Corresponds to the `--force` option.
     * 
     */
    private @Nullable Boolean force;
    /**
     * @return Corresponds to the `--no-clobber` option.
     * 
     */
    private @Nullable Boolean noClobber;
    /**
     * @return Corresponds to the `--no-target-directory` option.
     * 
     */
    private @Nullable Boolean noTargetDirectory;
    /**
     * @return Corresponds to the [SOURCE] argument.
     * 
     */
    private List<String> source;
    /**
     * @return Corresponds to the `--strip-trailing-slashes` option.
     * 
     */
    private @Nullable Boolean stripTrailingSlashes;
    /**
     * @return Corresponds to the `--suffix` option.
     * 
     */
    private @Nullable String suffix;
    /**
     * @return Corresponds to the `--target-directory` option.
     * 
     */
    private @Nullable Boolean targetDirectory;
    /**
     * @return Corresponds to the `--update` option.
     * 
     */
    private @Nullable Boolean update;
    /**
     * @return Corresponds to the `--verbose` option.
     * 
     */
    private @Nullable Boolean verbose;

    private MvOpts() {}
    /**
     * @return Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
     * 
     */
    public Optional<Boolean> backup() {
        return Optional.ofNullable(this.backup);
    }
    /**
     * @return Corresponds to the `--context` option.
     * 
     */
    public Optional<Boolean> context() {
        return Optional.ofNullable(this.context);
    }
    /**
     * @return Corresponds to the [CONTROL] argument for the `--backup` option.
     * 
     */
    public Optional<Boolean> control() {
        return Optional.ofNullable(this.control);
    }
    /**
     * @return Corresponds to the [DEST] argument.
     * 
     */
    public Optional<String> dest() {
        return Optional.ofNullable(this.dest);
    }
    /**
     * @return Corresponds to the [DIRECTORY] argument.
     * 
     */
    public Optional<String> directory() {
        return Optional.ofNullable(this.directory);
    }
    /**
     * @return Corresponds to the `--force` option.
     * 
     */
    public Optional<Boolean> force() {
        return Optional.ofNullable(this.force);
    }
    /**
     * @return Corresponds to the `--no-clobber` option.
     * 
     */
    public Optional<Boolean> noClobber() {
        return Optional.ofNullable(this.noClobber);
    }
    /**
     * @return Corresponds to the `--no-target-directory` option.
     * 
     */
    public Optional<Boolean> noTargetDirectory() {
        return Optional.ofNullable(this.noTargetDirectory);
    }
    /**
     * @return Corresponds to the [SOURCE] argument.
     * 
     */
    public List<String> source() {
        return this.source;
    }
    /**
     * @return Corresponds to the `--strip-trailing-slashes` option.
     * 
     */
    public Optional<Boolean> stripTrailingSlashes() {
        return Optional.ofNullable(this.stripTrailingSlashes);
    }
    /**
     * @return Corresponds to the `--suffix` option.
     * 
     */
    public Optional<String> suffix() {
        return Optional.ofNullable(this.suffix);
    }
    /**
     * @return Corresponds to the `--target-directory` option.
     * 
     */
    public Optional<Boolean> targetDirectory() {
        return Optional.ofNullable(this.targetDirectory);
    }
    /**
     * @return Corresponds to the `--update` option.
     * 
     */
    public Optional<Boolean> update() {
        return Optional.ofNullable(this.update);
    }
    /**
     * @return Corresponds to the `--verbose` option.
     * 
     */
    public Optional<Boolean> verbose() {
        return Optional.ofNullable(this.verbose);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MvOpts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean backup;
        private @Nullable Boolean context;
        private @Nullable Boolean control;
        private @Nullable String dest;
        private @Nullable String directory;
        private @Nullable Boolean force;
        private @Nullable Boolean noClobber;
        private @Nullable Boolean noTargetDirectory;
        private List<String> source;
        private @Nullable Boolean stripTrailingSlashes;
        private @Nullable String suffix;
        private @Nullable Boolean targetDirectory;
        private @Nullable Boolean update;
        private @Nullable Boolean verbose;
        public Builder() {}
        public Builder(MvOpts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backup = defaults.backup;
    	      this.context = defaults.context;
    	      this.control = defaults.control;
    	      this.dest = defaults.dest;
    	      this.directory = defaults.directory;
    	      this.force = defaults.force;
    	      this.noClobber = defaults.noClobber;
    	      this.noTargetDirectory = defaults.noTargetDirectory;
    	      this.source = defaults.source;
    	      this.stripTrailingSlashes = defaults.stripTrailingSlashes;
    	      this.suffix = defaults.suffix;
    	      this.targetDirectory = defaults.targetDirectory;
    	      this.update = defaults.update;
    	      this.verbose = defaults.verbose;
        }

        @CustomType.Setter
        public Builder backup(@Nullable Boolean backup) {

            this.backup = backup;
            return this;
        }
        @CustomType.Setter
        public Builder context(@Nullable Boolean context) {

            this.context = context;
            return this;
        }
        @CustomType.Setter
        public Builder control(@Nullable Boolean control) {

            this.control = control;
            return this;
        }
        @CustomType.Setter
        public Builder dest(@Nullable String dest) {

            this.dest = dest;
            return this;
        }
        @CustomType.Setter
        public Builder directory(@Nullable String directory) {

            this.directory = directory;
            return this;
        }
        @CustomType.Setter
        public Builder force(@Nullable Boolean force) {

            this.force = force;
            return this;
        }
        @CustomType.Setter
        public Builder noClobber(@Nullable Boolean noClobber) {

            this.noClobber = noClobber;
            return this;
        }
        @CustomType.Setter
        public Builder noTargetDirectory(@Nullable Boolean noTargetDirectory) {

            this.noTargetDirectory = noTargetDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder source(List<String> source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("MvOpts", "source");
            }
            this.source = source;
            return this;
        }
        public Builder source(String... source) {
            return source(List.of(source));
        }
        @CustomType.Setter
        public Builder stripTrailingSlashes(@Nullable Boolean stripTrailingSlashes) {

            this.stripTrailingSlashes = stripTrailingSlashes;
            return this;
        }
        @CustomType.Setter
        public Builder suffix(@Nullable String suffix) {

            this.suffix = suffix;
            return this;
        }
        @CustomType.Setter
        public Builder targetDirectory(@Nullable Boolean targetDirectory) {

            this.targetDirectory = targetDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder update(@Nullable Boolean update) {

            this.update = update;
            return this;
        }
        @CustomType.Setter
        public Builder verbose(@Nullable Boolean verbose) {

            this.verbose = verbose;
            return this;
        }
        public MvOpts build() {
            final var _resultValue = new MvOpts();
            _resultValue.backup = backup;
            _resultValue.context = context;
            _resultValue.control = control;
            _resultValue.dest = dest;
            _resultValue.directory = directory;
            _resultValue.force = force;
            _resultValue.noClobber = noClobber;
            _resultValue.noTargetDirectory = noTargetDirectory;
            _resultValue.source = source;
            _resultValue.stripTrailingSlashes = stripTrailingSlashes;
            _resultValue.suffix = suffix;
            _resultValue.targetDirectory = targetDirectory;
            _resultValue.update = update;
            _resultValue.verbose = verbose;
            return _resultValue;
        }
    }
}
