// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.unmango.kubernetesthehardway.remote.enums.SystemdServiceExitType;
import com.unmango.kubernetesthehardway.remote.enums.SystemdServiceRestart;
import com.unmango.kubernetesthehardway.remote.enums.SystemdServiceType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#
 * 
 */
public final class SystemdServiceSectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SystemdServiceSectionArgs Empty = new SystemdServiceSectionArgs();

    /**
     * Commands that are executed when this service is started.
     * 
     */
    @Import(name="execStart")
    private @Nullable Output<String> execStart;

    /**
     * @return Commands that are executed when this service is started.
     * 
     */
    public Optional<Output<String>> execStart() {
        return Optional.ofNullable(this.execStart);
    }

    /**
     * Specifies when the manager should consider the service to be finished.
     * 
     */
    @Import(name="exitType")
    private @Nullable Output<SystemdServiceExitType> exitType;

    /**
     * @return Specifies when the manager should consider the service to be finished.
     * 
     */
    public Optional<Output<SystemdServiceExitType>> exitType() {
        return Optional.ofNullable(this.exitType);
    }

    /**
     * Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
     * 
     */
    @Import(name="restart")
    private @Nullable Output<SystemdServiceRestart> restart;

    /**
     * @return Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
     * 
     */
    public Optional<Output<SystemdServiceRestart>> restart() {
        return Optional.ofNullable(this.restart);
    }

    /**
     * Configures the time to sleep before restarting a service (as configured with Restart=).
     * 
     */
    @Import(name="restartSec")
    private @Nullable Output<String> restartSec;

    /**
     * @return Configures the time to sleep before restarting a service (as configured with Restart=).
     * 
     */
    public Optional<Output<String>> restartSec() {
        return Optional.ofNullable(this.restartSec);
    }

    /**
     * Configures the mechanism via which the service notifies the manager that the service start-up has finished.
     * 
     */
    @Import(name="type")
    private @Nullable Output<SystemdServiceType> type;

    /**
     * @return Configures the mechanism via which the service notifies the manager that the service start-up has finished.
     * 
     */
    public Optional<Output<SystemdServiceType>> type() {
        return Optional.ofNullable(this.type);
    }

    private SystemdServiceSectionArgs() {}

    private SystemdServiceSectionArgs(SystemdServiceSectionArgs $) {
        this.execStart = $.execStart;
        this.exitType = $.exitType;
        this.restart = $.restart;
        this.restartSec = $.restartSec;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SystemdServiceSectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SystemdServiceSectionArgs $;

        public Builder() {
            $ = new SystemdServiceSectionArgs();
        }

        public Builder(SystemdServiceSectionArgs defaults) {
            $ = new SystemdServiceSectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param execStart Commands that are executed when this service is started.
         * 
         * @return builder
         * 
         */
        public Builder execStart(@Nullable Output<String> execStart) {
            $.execStart = execStart;
            return this;
        }

        /**
         * @param execStart Commands that are executed when this service is started.
         * 
         * @return builder
         * 
         */
        public Builder execStart(String execStart) {
            return execStart(Output.of(execStart));
        }

        /**
         * @param exitType Specifies when the manager should consider the service to be finished.
         * 
         * @return builder
         * 
         */
        public Builder exitType(@Nullable Output<SystemdServiceExitType> exitType) {
            $.exitType = exitType;
            return this;
        }

        /**
         * @param exitType Specifies when the manager should consider the service to be finished.
         * 
         * @return builder
         * 
         */
        public Builder exitType(SystemdServiceExitType exitType) {
            return exitType(Output.of(exitType));
        }

        /**
         * @param restart Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
         * 
         * @return builder
         * 
         */
        public Builder restart(@Nullable Output<SystemdServiceRestart> restart) {
            $.restart = restart;
            return this;
        }

        /**
         * @param restart Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
         * 
         * @return builder
         * 
         */
        public Builder restart(SystemdServiceRestart restart) {
            return restart(Output.of(restart));
        }

        /**
         * @param restartSec Configures the time to sleep before restarting a service (as configured with Restart=).
         * 
         * @return builder
         * 
         */
        public Builder restartSec(@Nullable Output<String> restartSec) {
            $.restartSec = restartSec;
            return this;
        }

        /**
         * @param restartSec Configures the time to sleep before restarting a service (as configured with Restart=).
         * 
         * @return builder
         * 
         */
        public Builder restartSec(String restartSec) {
            return restartSec(Output.of(restartSec));
        }

        /**
         * @param type Configures the mechanism via which the service notifies the manager that the service start-up has finished.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<SystemdServiceType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Configures the mechanism via which the service notifies the manager that the service start-up has finished.
         * 
         * @return builder
         * 
         */
        public Builder type(SystemdServiceType type) {
            return type(Output.of(type));
        }

        public SystemdServiceSectionArgs build() {
            return $;
        }
    }

}
