// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.remote.Download;
import com.unmango.kubernetesthehardway.remote.EtcdInstallArgs;
import com.unmango.kubernetesthehardway.remote.File;
import com.unmango.kubernetesthehardway.remote.enums.Architecture;
import com.unmango.kubernetesthehardway.tools.Mkdir;
import com.unmango.kubernetesthehardway.tools.Mv;
import com.unmango.kubernetesthehardway.tools.Tar;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Represents an etcd binary on a remote system.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:remote:EtcdInstall")
public class EtcdInstall extends com.pulumi.resources.ComponentResource {
    /**
     * The etcd CPU architecture.
     * 
     */
    @Export(name="architecture", refs={Architecture.class}, tree="[0]")
    private Output<Architecture> architecture;

    /**
     * @return The etcd CPU architecture.
     * 
     */
    public Output<Architecture> architecture() {
        return this.architecture;
    }
    /**
     * The name of the etcd release archive.
     * 
     */
    @Export(name="archiveName", refs={String.class}, tree="[0]")
    private Output<String> archiveName;

    /**
     * @return The name of the etcd release archive.
     * 
     */
    public Output<String> archiveName() {
        return this.archiveName;
    }
    /**
     * The remote certificate authority file.
     * 
     */
    @Export(name="caFile", refs={File.class}, tree="[0]")
    private Output</* @Nullable */ File> caFile;

    /**
     * @return The remote certificate authority file.
     * 
     */
    public Output<Optional<File>> caFile() {
        return Codegen.optional(this.caFile);
    }
    /**
     * The remote certificate file.
     * 
     */
    @Export(name="certFile", refs={File.class}, tree="[0]")
    private Output</* @Nullable */ File> certFile;

    /**
     * @return The remote certificate file.
     * 
     */
    public Output<Optional<File>> certFile() {
        return Codegen.optional(this.certFile);
    }
    /**
     * The etcd download operation.
     * 
     */
    @Export(name="download", refs={Download.class}, tree="[0]")
    private Output<Download> download;

    /**
     * @return The etcd download operation.
     * 
     */
    public Output<Download> download() {
        return this.download;
    }
    /**
     * The directory where the etcd binary was downloaded to.
     * 
     */
    @Export(name="downloadDirectory", refs={String.class}, tree="[0]")
    private Output<String> downloadDirectory;

    /**
     * @return The directory where the etcd binary was downloaded to.
     * 
     */
    public Output<String> downloadDirectory() {
        return this.downloadDirectory;
    }
    /**
     * The operation to create the download directory.
     * 
     */
    @Export(name="downloadMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> downloadMkdir;

    /**
     * @return The operation to create the download directory.
     * 
     */
    public Output<Mkdir> downloadMkdir() {
        return this.downloadMkdir;
    }
    /**
     * The path to the etcd binary on the remote system.
     * 
     */
    @Export(name="etcdPath", refs={String.class}, tree="[0]")
    private Output<String> etcdPath;

    /**
     * @return The path to the etcd binary on the remote system.
     * 
     */
    public Output<String> etcdPath() {
        return this.etcdPath;
    }
    /**
     * The path to the etcdctl binary on the remote system.
     * 
     */
    @Export(name="etcdctlPath", refs={String.class}, tree="[0]")
    private Output<String> etcdctlPath;

    /**
     * @return The path to the etcdctl binary on the remote system.
     * 
     */
    public Output<String> etcdctlPath() {
        return this.etcdctlPath;
    }
    /**
     * Directory to install the `etcd` and `etcdctl` binaries.
     * 
     */
    @Export(name="installDirectory", refs={String.class}, tree="[0]")
    private Output<String> installDirectory;

    /**
     * @return Directory to install the `etcd` and `etcdctl` binaries.
     * 
     */
    public Output<String> installDirectory() {
        return this.installDirectory;
    }
    /**
     * The operation to create the install directory.
     * 
     */
    @Export(name="installMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> installMkdir;

    /**
     * @return The operation to create the install directory.
     * 
     */
    public Output<Mkdir> installMkdir() {
        return this.installMkdir;
    }
    /**
     * IP used to serve client requests and communicate with etcd peers.
     * 
     */
    @Export(name="internalIp", refs={String.class}, tree="[0]")
    private Output<String> internalIp;

    /**
     * @return IP used to serve client requests and communicate with etcd peers.
     * 
     */
    public Output<String> internalIp() {
        return this.internalIp;
    }
    /**
     * The remote key file.
     * 
     */
    @Export(name="keyFile", refs={File.class}, tree="[0]")
    private Output</* @Nullable */ File> keyFile;

    /**
     * @return The remote key file.
     * 
     */
    public Output<Optional<File>> keyFile() {
        return Codegen.optional(this.keyFile);
    }
    /**
     * The operation to move the etcd binary to the install directory.
     * 
     */
    @Export(name="mvEtcd", refs={Mv.class}, tree="[0]")
    private Output<Mv> mvEtcd;

    /**
     * @return The operation to move the etcd binary to the install directory.
     * 
     */
    public Output<Mv> mvEtcd() {
        return this.mvEtcd;
    }
    /**
     * The operation to move the etcdctl binary to the install directory.
     * 
     */
    @Export(name="mvEtcdctl", refs={Mv.class}, tree="[0]")
    private Output<Mv> mvEtcdctl;

    /**
     * @return The operation to move the etcdctl binary to the install directory.
     * 
     */
    public Output<Mv> mvEtcdctl() {
        return this.mvEtcdctl;
    }
    /**
     * The name of the resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The remote systemd service file.
     * 
     */
    @Export(name="systemdServiceFile", refs={File.class}, tree="[0]")
    private Output<File> systemdServiceFile;

    /**
     * @return The remote systemd service file.
     * 
     */
    public Output<File> systemdServiceFile() {
        return this.systemdServiceFile;
    }
    /**
     * The tar operation.
     * 
     */
    @Export(name="tar", refs={Tar.class}, tree="[0]")
    private Output<Tar> tar;

    /**
     * @return The tar operation.
     * 
     */
    public Output<Tar> tar() {
        return this.tar;
    }
    /**
     * The url used to download etcd.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The url used to download etcd.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * The version of etcd downloaded.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return The version of etcd downloaded.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EtcdInstall(String name) {
        this(name, EtcdInstallArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EtcdInstall(String name, EtcdInstallArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EtcdInstall(String name, EtcdInstallArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes-the-hard-way:remote:EtcdInstall", name, args == null ? EtcdInstallArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
