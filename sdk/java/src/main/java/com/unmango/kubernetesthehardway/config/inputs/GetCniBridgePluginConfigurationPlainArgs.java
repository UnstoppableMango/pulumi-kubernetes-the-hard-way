// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.config.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.remote.inputs.CniBridgeIpam;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCniBridgePluginConfigurationPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCniBridgePluginConfigurationPlainArgs Empty = new GetCniBridgePluginConfigurationPlainArgs();

    /**
     * Bridge name.
     * 
     */
    @Import(name="bridge")
    private @Nullable String bridge;

    /**
     * @return Bridge name.
     * 
     */
    public Optional<String> bridge() {
        return Optional.ofNullable(this.bridge);
    }

    /**
     * CNI version.
     * 
     */
    @Import(name="cniVersion")
    private @Nullable String cniVersion;

    /**
     * @return CNI version.
     * 
     */
    public Optional<String> cniVersion() {
        return Optional.ofNullable(this.cniVersion);
    }

    /**
     * IP masq.
     * 
     */
    @Import(name="ipMasq")
    private @Nullable Boolean ipMasq;

    /**
     * @return IP masq.
     * 
     */
    public Optional<Boolean> ipMasq() {
        return Optional.ofNullable(this.ipMasq);
    }

    /**
     * IPAM
     * 
     */
    @Import(name="ipam")
    private @Nullable CniBridgeIpam ipam;

    /**
     * @return IPAM
     * 
     */
    public Optional<CniBridgeIpam> ipam() {
        return Optional.ofNullable(this.ipam);
    }

    /**
     * Is gateway.
     * 
     */
    @Import(name="isGateway")
    private @Nullable Boolean isGateway;

    /**
     * @return Is gateway.
     * 
     */
    public Optional<Boolean> isGateway() {
        return Optional.ofNullable(this.isGateway);
    }

    /**
     * CNI plugin name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return CNI plugin name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Path to put the configuration file on the remote system
     * 
     */
    @Import(name="path")
    private @Nullable String path;

    /**
     * @return Path to put the configuration file on the remote system
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The subnet to use.
     * 
     */
    @Import(name="subnet", required=true)
    private String subnet;

    /**
     * @return The subnet to use.
     * 
     */
    public String subnet() {
        return this.subnet;
    }

    /**
     * CNI plugin type.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return CNI plugin type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetCniBridgePluginConfigurationPlainArgs() {}

    private GetCniBridgePluginConfigurationPlainArgs(GetCniBridgePluginConfigurationPlainArgs $) {
        this.bridge = $.bridge;
        this.cniVersion = $.cniVersion;
        this.ipMasq = $.ipMasq;
        this.ipam = $.ipam;
        this.isGateway = $.isGateway;
        this.name = $.name;
        this.path = $.path;
        this.subnet = $.subnet;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCniBridgePluginConfigurationPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCniBridgePluginConfigurationPlainArgs $;

        public Builder() {
            $ = new GetCniBridgePluginConfigurationPlainArgs();
        }

        public Builder(GetCniBridgePluginConfigurationPlainArgs defaults) {
            $ = new GetCniBridgePluginConfigurationPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bridge Bridge name.
         * 
         * @return builder
         * 
         */
        public Builder bridge(@Nullable String bridge) {
            $.bridge = bridge;
            return this;
        }

        /**
         * @param cniVersion CNI version.
         * 
         * @return builder
         * 
         */
        public Builder cniVersion(@Nullable String cniVersion) {
            $.cniVersion = cniVersion;
            return this;
        }

        /**
         * @param ipMasq IP masq.
         * 
         * @return builder
         * 
         */
        public Builder ipMasq(@Nullable Boolean ipMasq) {
            $.ipMasq = ipMasq;
            return this;
        }

        /**
         * @param ipam IPAM
         * 
         * @return builder
         * 
         */
        public Builder ipam(@Nullable CniBridgeIpam ipam) {
            $.ipam = ipam;
            return this;
        }

        /**
         * @param isGateway Is gateway.
         * 
         * @return builder
         * 
         */
        public Builder isGateway(@Nullable Boolean isGateway) {
            $.isGateway = isGateway;
            return this;
        }

        /**
         * @param name CNI plugin name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param path Path to put the configuration file on the remote system
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable String path) {
            $.path = path;
            return this;
        }

        /**
         * @param subnet The subnet to use.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param type CNI plugin type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetCniBridgePluginConfigurationPlainArgs build() {
            if ($.subnet == null) {
                throw new MissingRequiredPropertyException("GetCniBridgePluginConfigurationPlainArgs", "subnet");
            }
            return $;
        }
    }

}
