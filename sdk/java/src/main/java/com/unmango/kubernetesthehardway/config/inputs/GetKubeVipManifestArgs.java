// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.config.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetKubeVipManifestArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetKubeVipManifestArgs Empty = new GetKubeVipManifestArgs();

    /**
     * TODO
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return TODO
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * TODO
     * 
     */
    @Import(name="cpEnable")
    private @Nullable Output<Boolean> cpEnable;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Boolean>> cpEnable() {
        return Optional.ofNullable(this.cpEnable);
    }

    /**
     * TODO
     * 
     */
    @Import(name="cpNamespace")
    private @Nullable Output<String> cpNamespace;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<String>> cpNamespace() {
        return Optional.ofNullable(this.cpNamespace);
    }

    /**
     * Override the kube-vip image.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return Override the kube-vip image.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Path to the kubeconfig on the remote host.
     * 
     */
    @Import(name="kubeconfigPath", required=true)
    private Output<String> kubeconfigPath;

    /**
     * @return Path to the kubeconfig on the remote host.
     * 
     */
    public Output<String> kubeconfigPath() {
        return this.kubeconfigPath;
    }

    /**
     * TODO
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * TODO
     * 
     */
    @Import(name="svcEnable")
    private @Nullable Output<Boolean> svcEnable;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Boolean>> svcEnable() {
        return Optional.ofNullable(this.svcEnable);
    }

    /**
     * Version of kube-vip to use.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version of kube-vip to use.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipArp")
    private @Nullable Output<Boolean> vipArp;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Boolean>> vipArp() {
        return Optional.ofNullable(this.vipArp);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipCidr", required=true)
    private Output<String> vipCidr;

    /**
     * @return TODO
     * 
     */
    public Output<String> vipCidr() {
        return this.vipCidr;
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipDdns")
    private @Nullable Output<Boolean> vipDdns;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Boolean>> vipDdns() {
        return Optional.ofNullable(this.vipDdns);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipInterface")
    private @Nullable Output<String> vipInterface;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<String>> vipInterface() {
        return Optional.ofNullable(this.vipInterface);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipLeaderElection")
    private @Nullable Output<Boolean> vipLeaderElection;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Boolean>> vipLeaderElection() {
        return Optional.ofNullable(this.vipLeaderElection);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipLeaseDuration")
    private @Nullable Output<Integer> vipLeaseDuration;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Integer>> vipLeaseDuration() {
        return Optional.ofNullable(this.vipLeaseDuration);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipRenewDeadline")
    private @Nullable Output<Integer> vipRenewDeadline;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Integer>> vipRenewDeadline() {
        return Optional.ofNullable(this.vipRenewDeadline);
    }

    /**
     * TODO
     * 
     */
    @Import(name="vipRetryPeriod")
    private @Nullable Output<Integer> vipRetryPeriod;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<Integer>> vipRetryPeriod() {
        return Optional.ofNullable(this.vipRetryPeriod);
    }

    private GetKubeVipManifestArgs() {}

    private GetKubeVipManifestArgs(GetKubeVipManifestArgs $) {
        this.address = $.address;
        this.cpEnable = $.cpEnable;
        this.cpNamespace = $.cpNamespace;
        this.image = $.image;
        this.kubeconfigPath = $.kubeconfigPath;
        this.port = $.port;
        this.svcEnable = $.svcEnable;
        this.version = $.version;
        this.vipArp = $.vipArp;
        this.vipCidr = $.vipCidr;
        this.vipDdns = $.vipDdns;
        this.vipInterface = $.vipInterface;
        this.vipLeaderElection = $.vipLeaderElection;
        this.vipLeaseDuration = $.vipLeaseDuration;
        this.vipRenewDeadline = $.vipRenewDeadline;
        this.vipRetryPeriod = $.vipRetryPeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetKubeVipManifestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetKubeVipManifestArgs $;

        public Builder() {
            $ = new GetKubeVipManifestArgs();
        }

        public Builder(GetKubeVipManifestArgs defaults) {
            $ = new GetKubeVipManifestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address TODO
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address TODO
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param cpEnable TODO
         * 
         * @return builder
         * 
         */
        public Builder cpEnable(@Nullable Output<Boolean> cpEnable) {
            $.cpEnable = cpEnable;
            return this;
        }

        /**
         * @param cpEnable TODO
         * 
         * @return builder
         * 
         */
        public Builder cpEnable(Boolean cpEnable) {
            return cpEnable(Output.of(cpEnable));
        }

        /**
         * @param cpNamespace TODO
         * 
         * @return builder
         * 
         */
        public Builder cpNamespace(@Nullable Output<String> cpNamespace) {
            $.cpNamespace = cpNamespace;
            return this;
        }

        /**
         * @param cpNamespace TODO
         * 
         * @return builder
         * 
         */
        public Builder cpNamespace(String cpNamespace) {
            return cpNamespace(Output.of(cpNamespace));
        }

        /**
         * @param image Override the kube-vip image.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Override the kube-vip image.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param kubeconfigPath Path to the kubeconfig on the remote host.
         * 
         * @return builder
         * 
         */
        public Builder kubeconfigPath(Output<String> kubeconfigPath) {
            $.kubeconfigPath = kubeconfigPath;
            return this;
        }

        /**
         * @param kubeconfigPath Path to the kubeconfig on the remote host.
         * 
         * @return builder
         * 
         */
        public Builder kubeconfigPath(String kubeconfigPath) {
            return kubeconfigPath(Output.of(kubeconfigPath));
        }

        /**
         * @param port TODO
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port TODO
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param svcEnable TODO
         * 
         * @return builder
         * 
         */
        public Builder svcEnable(@Nullable Output<Boolean> svcEnable) {
            $.svcEnable = svcEnable;
            return this;
        }

        /**
         * @param svcEnable TODO
         * 
         * @return builder
         * 
         */
        public Builder svcEnable(Boolean svcEnable) {
            return svcEnable(Output.of(svcEnable));
        }

        /**
         * @param version Version of kube-vip to use.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of kube-vip to use.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param vipArp TODO
         * 
         * @return builder
         * 
         */
        public Builder vipArp(@Nullable Output<Boolean> vipArp) {
            $.vipArp = vipArp;
            return this;
        }

        /**
         * @param vipArp TODO
         * 
         * @return builder
         * 
         */
        public Builder vipArp(Boolean vipArp) {
            return vipArp(Output.of(vipArp));
        }

        /**
         * @param vipCidr TODO
         * 
         * @return builder
         * 
         */
        public Builder vipCidr(Output<String> vipCidr) {
            $.vipCidr = vipCidr;
            return this;
        }

        /**
         * @param vipCidr TODO
         * 
         * @return builder
         * 
         */
        public Builder vipCidr(String vipCidr) {
            return vipCidr(Output.of(vipCidr));
        }

        /**
         * @param vipDdns TODO
         * 
         * @return builder
         * 
         */
        public Builder vipDdns(@Nullable Output<Boolean> vipDdns) {
            $.vipDdns = vipDdns;
            return this;
        }

        /**
         * @param vipDdns TODO
         * 
         * @return builder
         * 
         */
        public Builder vipDdns(Boolean vipDdns) {
            return vipDdns(Output.of(vipDdns));
        }

        /**
         * @param vipInterface TODO
         * 
         * @return builder
         * 
         */
        public Builder vipInterface(@Nullable Output<String> vipInterface) {
            $.vipInterface = vipInterface;
            return this;
        }

        /**
         * @param vipInterface TODO
         * 
         * @return builder
         * 
         */
        public Builder vipInterface(String vipInterface) {
            return vipInterface(Output.of(vipInterface));
        }

        /**
         * @param vipLeaderElection TODO
         * 
         * @return builder
         * 
         */
        public Builder vipLeaderElection(@Nullable Output<Boolean> vipLeaderElection) {
            $.vipLeaderElection = vipLeaderElection;
            return this;
        }

        /**
         * @param vipLeaderElection TODO
         * 
         * @return builder
         * 
         */
        public Builder vipLeaderElection(Boolean vipLeaderElection) {
            return vipLeaderElection(Output.of(vipLeaderElection));
        }

        /**
         * @param vipLeaseDuration TODO
         * 
         * @return builder
         * 
         */
        public Builder vipLeaseDuration(@Nullable Output<Integer> vipLeaseDuration) {
            $.vipLeaseDuration = vipLeaseDuration;
            return this;
        }

        /**
         * @param vipLeaseDuration TODO
         * 
         * @return builder
         * 
         */
        public Builder vipLeaseDuration(Integer vipLeaseDuration) {
            return vipLeaseDuration(Output.of(vipLeaseDuration));
        }

        /**
         * @param vipRenewDeadline TODO
         * 
         * @return builder
         * 
         */
        public Builder vipRenewDeadline(@Nullable Output<Integer> vipRenewDeadline) {
            $.vipRenewDeadline = vipRenewDeadline;
            return this;
        }

        /**
         * @param vipRenewDeadline TODO
         * 
         * @return builder
         * 
         */
        public Builder vipRenewDeadline(Integer vipRenewDeadline) {
            return vipRenewDeadline(Output.of(vipRenewDeadline));
        }

        /**
         * @param vipRetryPeriod TODO
         * 
         * @return builder
         * 
         */
        public Builder vipRetryPeriod(@Nullable Output<Integer> vipRetryPeriod) {
            $.vipRetryPeriod = vipRetryPeriod;
            return this;
        }

        /**
         * @param vipRetryPeriod TODO
         * 
         * @return builder
         * 
         */
        public Builder vipRetryPeriod(Integer vipRetryPeriod) {
            return vipRetryPeriod(Output.of(vipRetryPeriod));
        }

        public GetKubeVipManifestArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("GetKubeVipManifestArgs", "address");
            }
            if ($.kubeconfigPath == null) {
                throw new MissingRequiredPropertyException("GetKubeVipManifestArgs", "kubeconfigPath");
            }
            $.port = Codegen.integerProp("port").output().arg($.port).def(6443).getNullable();
            if ($.vipCidr == null) {
                throw new MissingRequiredPropertyException("GetKubeVipManifestArgs", "vipCidr");
            }
            return $;
        }
    }

}
