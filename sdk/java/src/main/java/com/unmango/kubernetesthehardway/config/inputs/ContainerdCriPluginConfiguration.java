// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.config.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.config.inputs.ContainerdCriPluginConfigurationCni;
import com.unmango.kubernetesthehardway.config.inputs.ContainerdCriPluginConfigurationContainerd;
import java.util.Objects;


/**
 * containerd cri plugin configuration.
 * 
 */
public final class ContainerdCriPluginConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final ContainerdCriPluginConfiguration Empty = new ContainerdCriPluginConfiguration();

    /**
     * cni configuration.
     * 
     */
    @Import(name="cni", required=true)
    private ContainerdCriPluginConfigurationCni cni;

    /**
     * @return cni configuration.
     * 
     */
    public ContainerdCriPluginConfigurationCni cni() {
        return this.cni;
    }

    /**
     * containerd configuration.
     * 
     */
    @Import(name="containerd", required=true)
    private ContainerdCriPluginConfigurationContainerd containerd;

    /**
     * @return containerd configuration.
     * 
     */
    public ContainerdCriPluginConfigurationContainerd containerd() {
        return this.containerd;
    }

    private ContainerdCriPluginConfiguration() {}

    private ContainerdCriPluginConfiguration(ContainerdCriPluginConfiguration $) {
        this.cni = $.cni;
        this.containerd = $.containerd;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerdCriPluginConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerdCriPluginConfiguration $;

        public Builder() {
            $ = new ContainerdCriPluginConfiguration();
        }

        public Builder(ContainerdCriPluginConfiguration defaults) {
            $ = new ContainerdCriPluginConfiguration(Objects.requireNonNull(defaults));
        }

        /**
         * @param cni cni configuration.
         * 
         * @return builder
         * 
         */
        public Builder cni(ContainerdCriPluginConfigurationCni cni) {
            $.cni = cni;
            return this;
        }

        /**
         * @param containerd containerd configuration.
         * 
         * @return builder
         * 
         */
        public Builder containerd(ContainerdCriPluginConfigurationContainerd containerd) {
            $.containerd = containerd;
            return this;
        }

        public ContainerdCriPluginConfiguration build() {
            if ($.cni == null) {
                throw new MissingRequiredPropertyException("ContainerdCriPluginConfiguration", "cni");
            }
            if ($.containerd == null) {
                throw new MissingRequiredPropertyException("ContainerdCriPluginConfiguration", "containerd");
            }
            return $;
        }
    }

}
