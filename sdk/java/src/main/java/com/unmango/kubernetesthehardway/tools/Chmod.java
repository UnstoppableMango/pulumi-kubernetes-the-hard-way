// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools;

import com.pulumi.command.remote.Command;
import com.pulumi.command.remote.outputs.Connection;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.tools.ChmodArgs;
import com.unmango.kubernetesthehardway.tools.enums.CommandLifecycle;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Abstraction over the `chmod` utility on a remote system.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:tools:Chmod")
public class Chmod extends com.pulumi.resources.ComponentResource {
    /**
     * Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    @Export(name="binaryPath", refs={String.class}, tree="[0]")
    private Output<String> binaryPath;

    /**
     * @return Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    public Output<String> binaryPath() {
        return this.binaryPath;
    }
    /**
     * Like verbose but report only when a change is made.
     * 
     */
    @Export(name="changes", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> changes;

    /**
     * @return Like verbose but report only when a change is made.
     * 
     */
    public Output<Boolean> changes() {
        return this.changes;
    }
    /**
     * The underlying command
     * 
     */
    @Export(name="command", refs={Command.class}, tree="[0]")
    private Output<Command> command;

    /**
     * @return The underlying command
     * 
     */
    public Output<Command> command() {
        return this.command;
    }
    /**
     * Connection details for the remote system
     * 
     */
    @Export(name="connection", refs={Connection.class}, tree="[0]")
    private Output<Connection> connection;

    /**
     * @return Connection details for the remote system
     * 
     */
    public Output<Connection> connection() {
        return this.connection;
    }
    /**
     * Environment variables
     * 
     */
    @Export(name="environment", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> environment;

    /**
     * @return Environment variables
     * 
     */
    public Output<Map<String,String>> environment() {
        return this.environment;
    }
    /**
     * Corresponds to the [FILE] argument.
     * 
     */
    @Export(name="files", refs={Either.class,String.class,List.class}, tree="[0,1,[2,1]]")
    private Output<Either<String,List<String>>> files;

    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    public Output<Either<String,List<String>>> files() {
        return this.files;
    }
    /**
     * Display help and exit.
     * 
     */
    @Export(name="help", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> help;

    /**
     * @return Display help and exit.
     * 
     */
    public Output<Boolean> help() {
        return this.help;
    }
    /**
     * At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    @Export(name="lifecycle", refs={CommandLifecycle.class}, tree="[0]")
    private Output</* @Nullable */ CommandLifecycle> lifecycle;

    /**
     * @return At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    public Output<Optional<CommandLifecycle>> lifecycle() {
        return Codegen.optional(this.lifecycle);
    }
    /**
     * Modes may be absolute or symbolic. An absolute mode is an octal number...
     * 
     */
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output<String> mode;

    /**
     * @return Modes may be absolute or symbolic. An absolute mode is an octal number...
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }
    /**
     * Do not trea &#39;/&#39; spcially (the default).
     * 
     */
    @Export(name="noPreserveRoot", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> noPreserveRoot;

    /**
     * @return Do not trea &#39;/&#39; spcially (the default).
     * 
     */
    public Output<Boolean> noPreserveRoot() {
        return this.noPreserveRoot;
    }
    /**
     * Fail to operate recursively on &#39;/&#39;.
     * 
     */
    @Export(name="preserveRoot", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> preserveRoot;

    /**
     * @return Fail to operate recursively on &#39;/&#39;.
     * 
     */
    public Output<Boolean> preserveRoot() {
        return this.preserveRoot;
    }
    /**
     * Suppress most error messages. Same as `silent`.
     * 
     */
    @Export(name="quiet", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> quiet;

    /**
     * @return Suppress most error messages. Same as `silent`.
     * 
     */
    public Output<Boolean> quiet() {
        return this.quiet;
    }
    /**
     * Change files and directories recursively.
     * 
     */
    @Export(name="recursive", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> recursive;

    /**
     * @return Change files and directories recursively.
     * 
     */
    public Output<Boolean> recursive() {
        return this.recursive;
    }
    /**
     * Use RFILE&#39;s mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
     * 
     */
    @Export(name="reference", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> reference;

    /**
     * @return Use RFILE&#39;s mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
     * 
     */
    public Output<Optional<String>> reference() {
        return Codegen.optional(this.reference);
    }
    /**
     * Suppress most error messages. Same as `quiet`.
     * 
     */
    @Export(name="silent", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> silent;

    /**
     * @return Suppress most error messages. Same as `quiet`.
     * 
     */
    public Output<Boolean> silent() {
        return this.silent;
    }
    /**
     * TODO
     * 
     */
    @Export(name="stderr", refs={String.class}, tree="[0]")
    private Output<String> stderr;

    /**
     * @return TODO
     * 
     */
    public Output<String> stderr() {
        return this.stderr;
    }
    /**
     * TODO
     * 
     */
    @Export(name="stdin", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> stdin;

    /**
     * @return TODO
     * 
     */
    public Output<Optional<String>> stdin() {
        return Codegen.optional(this.stdin);
    }
    /**
     * TODO
     * 
     */
    @Export(name="stdout", refs={String.class}, tree="[0]")
    private Output<String> stdout;

    /**
     * @return TODO
     * 
     */
    public Output<String> stdout() {
        return this.stdout;
    }
    /**
     * TODO
     * 
     */
    @Export(name="triggers", refs={List.class,Object.class}, tree="[0,1]")
    private Output<List<Object>> triggers;

    /**
     * @return TODO
     * 
     */
    public Output<List<Object>> triggers() {
        return this.triggers;
    }
    /**
     * Output version information and exit.
     * 
     */
    @Export(name="version", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> version;

    /**
     * @return Output version information and exit.
     * 
     */
    public Output<Boolean> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Chmod(String name) {
        this(name, ChmodArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Chmod(String name, ChmodArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Chmod(String name, ChmodArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes-the-hard-way:tools:Chmod", name, args == null ? ChmodArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
