// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.command.remote.outputs.Connection;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.config.CniBridgePluginConfiguration;
import com.unmango.kubernetesthehardway.config.CniLoopbackPluginConfiguration;
import com.unmango.kubernetesthehardway.config.ContainerdConfiguration;
import com.unmango.kubernetesthehardway.config.KubeProxyConfiguration;
import com.unmango.kubernetesthehardway.config.KubeletConfiguration;
import com.unmango.kubernetesthehardway.remote.CniPluginsInstall;
import com.unmango.kubernetesthehardway.remote.ContainerdInstall;
import com.unmango.kubernetesthehardway.remote.ContainerdService;
import com.unmango.kubernetesthehardway.remote.CrictlInstall;
import com.unmango.kubernetesthehardway.remote.File;
import com.unmango.kubernetesthehardway.remote.KubeProxyInstall;
import com.unmango.kubernetesthehardway.remote.KubeProxyService;
import com.unmango.kubernetesthehardway.remote.KubectlInstall;
import com.unmango.kubernetesthehardway.remote.KubeletInstall;
import com.unmango.kubernetesthehardway.remote.KubeletService;
import com.unmango.kubernetesthehardway.remote.RuncInstall;
import com.unmango.kubernetesthehardway.remote.WorkerNodeArgs;
import com.unmango.kubernetesthehardway.remote.enums.Architecture;
import com.unmango.kubernetesthehardway.tools.Mkdir;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Kubernetes worker node.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:remote:WorkerNode")
public class WorkerNode extends com.pulumi.resources.CustomResource {
    /**
     * The CPU architecture of the node.
     * 
     */
    @Export(name="architecture", refs={Architecture.class}, tree="[0]")
    private Output<Architecture> architecture;

    /**
     * @return The CPU architecture of the node.
     * 
     */
    public Output<Architecture> architecture() {
        return this.architecture;
    }
    /**
     * The path to the cluster certificate authority file.
     * 
     */
    @Export(name="caPath", refs={String.class}, tree="[0]")
    private Output<String> caPath;

    /**
     * @return The path to the cluster certificate authority file.
     * 
     */
    public Output<String> caPath() {
        return this.caPath;
    }
    /**
     * The CIDR to use for the cluster.
     * 
     */
    @Export(name="clusterCIDR", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clusterCIDR;

    /**
     * @return The CIDR to use for the cluster.
     * 
     */
    public Output<Optional<String>> clusterCIDR() {
        return Codegen.optional(this.clusterCIDR);
    }
    /**
     * The domain for the cluster to use. Defaults to cluster.local.
     * 
     */
    @Export(name="clusterDomain", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clusterDomain;

    /**
     * @return The domain for the cluster to use. Defaults to cluster.local.
     * 
     */
    public Output<Optional<String>> clusterDomain() {
        return Codegen.optional(this.clusterDomain);
    }
    /**
     * The CNI bridge plugin configuration.
     * 
     */
    @Export(name="cniBridgeConfiguration", refs={CniBridgePluginConfiguration.class}, tree="[0]")
    private Output<CniBridgePluginConfiguration> cniBridgeConfiguration;

    /**
     * @return The CNI bridge plugin configuration.
     * 
     */
    public Output<CniBridgePluginConfiguration> cniBridgeConfiguration() {
        return this.cniBridgeConfiguration;
    }
    /**
     * The CNI bridge plugin configuration file.
     * 
     */
    @Export(name="cniBridgeConfigurationFile", refs={File.class}, tree="[0]")
    private Output<File> cniBridgeConfigurationFile;

    /**
     * @return The CNI bridge plugin configuration file.
     * 
     */
    public Output<File> cniBridgeConfigurationFile() {
        return this.cniBridgeConfigurationFile;
    }
    /**
     * The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
     * 
     */
    @Export(name="cniConfigurationDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cniConfigurationDirectory;

    /**
     * @return The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
     * 
     */
    public Output<Optional<String>> cniConfigurationDirectory() {
        return Codegen.optional(this.cniConfigurationDirectory);
    }
    /**
     * The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
     * 
     */
    @Export(name="cniInstallDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cniInstallDirectory;

    /**
     * @return The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
     * 
     */
    public Output<Optional<String>> cniInstallDirectory() {
        return Codegen.optional(this.cniInstallDirectory);
    }
    /**
     * The CNI loopback plugin configuration.
     * 
     */
    @Export(name="cniLoopbackConfiguration", refs={CniLoopbackPluginConfiguration.class}, tree="[0]")
    private Output<CniLoopbackPluginConfiguration> cniLoopbackConfiguration;

    /**
     * @return The CNI loopback plugin configuration.
     * 
     */
    public Output<CniLoopbackPluginConfiguration> cniLoopbackConfiguration() {
        return this.cniLoopbackConfiguration;
    }
    /**
     * The CNI loopback plugin configuration file.
     * 
     */
    @Export(name="cniLoopbackConfigurationFile", refs={File.class}, tree="[0]")
    private Output<File> cniLoopbackConfigurationFile;

    /**
     * @return The CNI loopback plugin configuration file.
     * 
     */
    public Output<File> cniLoopbackConfigurationFile() {
        return this.cniLoopbackConfigurationFile;
    }
    /**
     * The CNI configuration mkdir operation.
     * 
     */
    @Export(name="cniMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> cniMkdir;

    /**
     * @return The CNI configuration mkdir operation.
     * 
     */
    public Output<Mkdir> cniMkdir() {
        return this.cniMkdir;
    }
    /**
     * The CNI plugin install.
     * 
     */
    @Export(name="cniPluginsInstall", refs={CniPluginsInstall.class}, tree="[0]")
    private Output</* @Nullable */ CniPluginsInstall> cniPluginsInstall;

    /**
     * @return The CNI plugin install.
     * 
     */
    public Output<Optional<CniPluginsInstall>> cniPluginsInstall() {
        return Codegen.optional(this.cniPluginsInstall);
    }
    /**
     * The CNI version to use.
     * 
     */
    @Export(name="cniVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cniVersion;

    /**
     * @return The CNI version to use.
     * 
     */
    public Output<Optional<String>> cniVersion() {
        return Codegen.optional(this.cniVersion);
    }
    /**
     * The parameters with which to connect to the remote host.
     * 
     */
    @Export(name="connection", refs={Connection.class}, tree="[0]")
    private Output<Connection> connection;

    /**
     * @return The parameters with which to connect to the remote host.
     * 
     */
    public Output<Connection> connection() {
        return this.connection;
    }
    /**
     * The containerd configuration.
     * 
     */
    @Export(name="containerdConfiguration", refs={ContainerdConfiguration.class}, tree="[0]")
    private Output<ContainerdConfiguration> containerdConfiguration;

    /**
     * @return The containerd configuration.
     * 
     */
    public Output<ContainerdConfiguration> containerdConfiguration() {
        return this.containerdConfiguration;
    }
    /**
     * The directory to store containerd configuration files. Defaults to /etc/containerd.
     * 
     */
    @Export(name="containerdConfigurationDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> containerdConfigurationDirectory;

    /**
     * @return The directory to store containerd configuration files. Defaults to /etc/containerd.
     * 
     */
    public Output<Optional<String>> containerdConfigurationDirectory() {
        return Codegen.optional(this.containerdConfigurationDirectory);
    }
    /**
     * The containerd configuration file.
     * 
     */
    @Export(name="containerdConfigurationFile", refs={File.class}, tree="[0]")
    private Output<File> containerdConfigurationFile;

    /**
     * @return The containerd configuration file.
     * 
     */
    public Output<File> containerdConfigurationFile() {
        return this.containerdConfigurationFile;
    }
    /**
     * The containerd install.
     * 
     */
    @Export(name="containerdInstall", refs={ContainerdInstall.class}, tree="[0]")
    private Output<ContainerdInstall> containerdInstall;

    /**
     * @return The containerd install.
     * 
     */
    public Output<ContainerdInstall> containerdInstall() {
        return this.containerdInstall;
    }
    /**
     * The directory to store the containerd binary. Defaults to /bin.
     * 
     */
    @Export(name="containerdInstallDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> containerdInstallDirectory;

    /**
     * @return The directory to store the containerd binary. Defaults to /bin.
     * 
     */
    public Output<Optional<String>> containerdInstallDirectory() {
        return Codegen.optional(this.containerdInstallDirectory);
    }
    /**
     * The containerd configuration mkdir operation.
     * 
     */
    @Export(name="containerdMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> containerdMkdir;

    /**
     * @return The containerd configuration mkdir operation.
     * 
     */
    public Output<Mkdir> containerdMkdir() {
        return this.containerdMkdir;
    }
    /**
     * The containerd systemd service.
     * 
     */
    @Export(name="containerdService", refs={ContainerdService.class}, tree="[0]")
    private Output<ContainerdService> containerdService;

    /**
     * @return The containerd systemd service.
     * 
     */
    public Output<ContainerdService> containerdService() {
        return this.containerdService;
    }
    /**
     * The containerd version to use.
     * 
     */
    @Export(name="containerdVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> containerdVersion;

    /**
     * @return The containerd version to use.
     * 
     */
    public Output<Optional<String>> containerdVersion() {
        return Codegen.optional(this.containerdVersion);
    }
    /**
     * The crictl install.
     * 
     */
    @Export(name="crictlInstall", refs={CrictlInstall.class}, tree="[0]")
    private Output<CrictlInstall> crictlInstall;

    /**
     * @return The crictl install.
     * 
     */
    public Output<CrictlInstall> crictlInstall() {
        return this.crictlInstall;
    }
    /**
     * The directory to store the crictl binary. Defaults to /usr/local/bin.
     * 
     */
    @Export(name="crictlInstallDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> crictlInstallDirectory;

    /**
     * @return The directory to store the crictl binary. Defaults to /usr/local/bin.
     * 
     */
    public Output<Optional<String>> crictlInstallDirectory() {
        return Codegen.optional(this.crictlInstallDirectory);
    }
    /**
     * The kube-proxy configuration
     * 
     */
    @Export(name="kubeProxyConfiguration", refs={KubeProxyConfiguration.class}, tree="[0]")
    private Output<KubeProxyConfiguration> kubeProxyConfiguration;

    /**
     * @return The kube-proxy configuration
     * 
     */
    public Output<KubeProxyConfiguration> kubeProxyConfiguration() {
        return this.kubeProxyConfiguration;
    }
    /**
     * The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
     * 
     */
    @Export(name="kubeProxyConfigurationDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeProxyConfigurationDirectory;

    /**
     * @return The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
     * 
     */
    public Output<Optional<String>> kubeProxyConfigurationDirectory() {
        return Codegen.optional(this.kubeProxyConfigurationDirectory);
    }
    /**
     * The kube-proxy configuration file.
     * 
     */
    @Export(name="kubeProxyConfigurationFile", refs={File.class}, tree="[0]")
    private Output<File> kubeProxyConfigurationFile;

    /**
     * @return The kube-proxy configuration file.
     * 
     */
    public Output<File> kubeProxyConfigurationFile() {
        return this.kubeProxyConfigurationFile;
    }
    /**
     * The kube-proxy install.
     * 
     */
    @Export(name="kubeProxyInstall", refs={KubeProxyInstall.class}, tree="[0]")
    private Output</* @Nullable */ KubeProxyInstall> kubeProxyInstall;

    /**
     * @return The kube-proxy install.
     * 
     */
    public Output<Optional<KubeProxyInstall>> kubeProxyInstall() {
        return Codegen.optional(this.kubeProxyInstall);
    }
    /**
     * The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
     * 
     */
    @Export(name="kubeProxyInstallDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeProxyInstallDirectory;

    /**
     * @return The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
     * 
     */
    public Output<Optional<String>> kubeProxyInstallDirectory() {
        return Codegen.optional(this.kubeProxyInstallDirectory);
    }
    /**
     * The path to the kube-proxy&#39;s kubeconfig file.
     * 
     */
    @Export(name="kubeProxyKubeconfigPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeProxyKubeconfigPath;

    /**
     * @return The path to the kube-proxy&#39;s kubeconfig file.
     * 
     */
    public Output<Optional<String>> kubeProxyKubeconfigPath() {
        return Codegen.optional(this.kubeProxyKubeconfigPath);
    }
    /**
     * The kube-proxy configuration mkdir operation.
     * 
     */
    @Export(name="kubeProxyMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> kubeProxyMkdir;

    /**
     * @return The kube-proxy configuration mkdir operation.
     * 
     */
    public Output<Mkdir> kubeProxyMkdir() {
        return this.kubeProxyMkdir;
    }
    /**
     * The kubelet systemd service.
     * 
     */
    @Export(name="kubeProxyService", refs={KubeProxyService.class}, tree="[0]")
    private Output<KubeProxyService> kubeProxyService;

    /**
     * @return The kubelet systemd service.
     * 
     */
    public Output<KubeProxyService> kubeProxyService() {
        return this.kubeProxyService;
    }
    /**
     * The kubectl install.
     * 
     */
    @Export(name="kubectlInstall", refs={KubectlInstall.class}, tree="[0]")
    private Output<KubectlInstall> kubectlInstall;

    /**
     * @return The kubectl install.
     * 
     */
    public Output<KubectlInstall> kubectlInstall() {
        return this.kubectlInstall;
    }
    /**
     * The directory to store the kubectl binary. Defaults to /usr/local/bin.
     * 
     */
    @Export(name="kubectlInstallDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubectlInstallDirectory;

    /**
     * @return The directory to store the kubectl binary. Defaults to /usr/local/bin.
     * 
     */
    public Output<Optional<String>> kubectlInstallDirectory() {
        return Codegen.optional(this.kubectlInstallDirectory);
    }
    /**
     * The path to the kubelet certificate.
     * 
     */
    @Export(name="kubeletCertificatePath", refs={String.class}, tree="[0]")
    private Output<String> kubeletCertificatePath;

    /**
     * @return The path to the kubelet certificate.
     * 
     */
    public Output<String> kubeletCertificatePath() {
        return this.kubeletCertificatePath;
    }
    /**
     * The kubelet configuration
     * 
     */
    @Export(name="kubeletConfiguration", refs={KubeletConfiguration.class}, tree="[0]")
    private Output<KubeletConfiguration> kubeletConfiguration;

    /**
     * @return The kubelet configuration
     * 
     */
    public Output<KubeletConfiguration> kubeletConfiguration() {
        return this.kubeletConfiguration;
    }
    /**
     * The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
     * 
     */
    @Export(name="kubeletConfigurationDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeletConfigurationDirectory;

    /**
     * @return The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
     * 
     */
    public Output<Optional<String>> kubeletConfigurationDirectory() {
        return Codegen.optional(this.kubeletConfigurationDirectory);
    }
    /**
     * The kubelet configuration file.
     * 
     */
    @Export(name="kubeletConfigurationFile", refs={File.class}, tree="[0]")
    private Output<File> kubeletConfigurationFile;

    /**
     * @return The kubelet configuration file.
     * 
     */
    public Output<File> kubeletConfigurationFile() {
        return this.kubeletConfigurationFile;
    }
    /**
     * The kubelet install.
     * 
     */
    @Export(name="kubeletInstall", refs={KubeletInstall.class}, tree="[0]")
    private Output<KubeletInstall> kubeletInstall;

    /**
     * @return The kubelet install.
     * 
     */
    public Output<KubeletInstall> kubeletInstall() {
        return this.kubeletInstall;
    }
    /**
     * The directory to store the kubelet binary. Defaults to /usr/local/bin.
     * 
     */
    @Export(name="kubeletInstallDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeletInstallDirectory;

    /**
     * @return The directory to store the kubelet binary. Defaults to /usr/local/bin.
     * 
     */
    public Output<Optional<String>> kubeletInstallDirectory() {
        return Codegen.optional(this.kubeletInstallDirectory);
    }
    /**
     * The path to the kubelet&#39;s kubeconfig file.
     * 
     */
    @Export(name="kubeletKubeconfigPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeletKubeconfigPath;

    /**
     * @return The path to the kubelet&#39;s kubeconfig file.
     * 
     */
    public Output<Optional<String>> kubeletKubeconfigPath() {
        return Codegen.optional(this.kubeletKubeconfigPath);
    }
    /**
     * The kubelet configuration mkdir operation.
     * 
     */
    @Export(name="kubeletMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> kubeletMkdir;

    /**
     * @return The kubelet configuration mkdir operation.
     * 
     */
    public Output<Mkdir> kubeletMkdir() {
        return this.kubeletMkdir;
    }
    /**
     * The path to the kubelet private key file.
     * 
     */
    @Export(name="kubeletPrivateKeyPath", refs={String.class}, tree="[0]")
    private Output<String> kubeletPrivateKeyPath;

    /**
     * @return The path to the kubelet private key file.
     * 
     */
    public Output<String> kubeletPrivateKeyPath() {
        return this.kubeletPrivateKeyPath;
    }
    /**
     * The kubelet systemd service.
     * 
     */
    @Export(name="kubeletService", refs={KubeletService.class}, tree="[0]")
    private Output<KubeletService> kubeletService;

    /**
     * @return The kubelet systemd service.
     * 
     */
    public Output<KubeletService> kubeletService() {
        return this.kubeletService;
    }
    /**
     * The kubernetes version to use.
     * 
     */
    @Export(name="kubernetesVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubernetesVersion;

    /**
     * @return The kubernetes version to use.
     * 
     */
    public Output<Optional<String>> kubernetesVersion() {
        return Codegen.optional(this.kubernetesVersion);
    }
    /**
     * The runc install.
     * 
     */
    @Export(name="runcInstall", refs={RuncInstall.class}, tree="[0]")
    private Output</* @Nullable */ RuncInstall> runcInstall;

    /**
     * @return The runc install.
     * 
     */
    public Output<Optional<RuncInstall>> runcInstall() {
        return Codegen.optional(this.runcInstall);
    }
    /**
     * The subnet for the cluster.
     * 
     */
    @Export(name="subnet", refs={String.class}, tree="[0]")
    private Output<String> subnet;

    /**
     * @return The subnet for the cluster.
     * 
     */
    public Output<String> subnet() {
        return this.subnet;
    }
    /**
     * The /var/lib/kubernetes mkdir operation.
     * 
     */
    @Export(name="varLibKubernetesMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> varLibKubernetesMkdir;

    /**
     * @return The /var/lib/kubernetes mkdir operation.
     * 
     */
    public Output<Mkdir> varLibKubernetesMkdir() {
        return this.varLibKubernetesMkdir;
    }
    /**
     * The /var/run/kubernetes mkdir operation.
     * 
     */
    @Export(name="varRunKubernetesMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> varRunKubernetesMkdir;

    /**
     * @return The /var/run/kubernetes mkdir operation.
     * 
     */
    public Output<Mkdir> varRunKubernetesMkdir() {
        return this.varRunKubernetesMkdir;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WorkerNode(String name) {
        this(name, WorkerNodeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WorkerNode(String name, WorkerNodeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WorkerNode(String name, WorkerNodeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kubernetes-the-hard-way:remote:WorkerNode", name, args == null ? WorkerNodeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private WorkerNode(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kubernetes-the-hard-way:remote:WorkerNode", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WorkerNode get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WorkerNode(name, id, options);
    }
}
