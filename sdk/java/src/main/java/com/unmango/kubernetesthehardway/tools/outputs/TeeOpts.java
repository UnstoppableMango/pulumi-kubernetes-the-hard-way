// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.tools.enums.TeeMode;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TeeOpts {
    /**
     * @return Append to the given FILEs, do not overwrite
     * 
     */
    private @Nullable Boolean append;
    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    private List<String> files;
    /**
     * @return Ignore interrupt signals.
     * 
     */
    private @Nullable Boolean ignoreInterrupts;
    /**
     * @return Set behavior on write error.
     * 
     */
    private @Nullable TeeMode outputError;
    /**
     * @return Operate in a more appropriate MODE with pipes.
     * 
     */
    private @Nullable Boolean pipe;
    /**
     * @return Output version information and exit.
     * 
     */
    private @Nullable Boolean version;

    private TeeOpts() {}
    /**
     * @return Append to the given FILEs, do not overwrite
     * 
     */
    public Optional<Boolean> append() {
        return Optional.ofNullable(this.append);
    }
    /**
     * @return Corresponds to the [FILE] argument.
     * 
     */
    public List<String> files() {
        return this.files;
    }
    /**
     * @return Ignore interrupt signals.
     * 
     */
    public Optional<Boolean> ignoreInterrupts() {
        return Optional.ofNullable(this.ignoreInterrupts);
    }
    /**
     * @return Set behavior on write error.
     * 
     */
    public Optional<TeeMode> outputError() {
        return Optional.ofNullable(this.outputError);
    }
    /**
     * @return Operate in a more appropriate MODE with pipes.
     * 
     */
    public Optional<Boolean> pipe() {
        return Optional.ofNullable(this.pipe);
    }
    /**
     * @return Output version information and exit.
     * 
     */
    public Optional<Boolean> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TeeOpts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean append;
        private List<String> files;
        private @Nullable Boolean ignoreInterrupts;
        private @Nullable TeeMode outputError;
        private @Nullable Boolean pipe;
        private @Nullable Boolean version;
        public Builder() {}
        public Builder(TeeOpts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.append = defaults.append;
    	      this.files = defaults.files;
    	      this.ignoreInterrupts = defaults.ignoreInterrupts;
    	      this.outputError = defaults.outputError;
    	      this.pipe = defaults.pipe;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder append(@Nullable Boolean append) {

            this.append = append;
            return this;
        }
        @CustomType.Setter
        public Builder files(List<String> files) {
            if (files == null) {
              throw new MissingRequiredPropertyException("TeeOpts", "files");
            }
            this.files = files;
            return this;
        }
        public Builder files(String... files) {
            return files(List.of(files));
        }
        @CustomType.Setter
        public Builder ignoreInterrupts(@Nullable Boolean ignoreInterrupts) {

            this.ignoreInterrupts = ignoreInterrupts;
            return this;
        }
        @CustomType.Setter
        public Builder outputError(@Nullable TeeMode outputError) {

            this.outputError = outputError;
            return this;
        }
        @CustomType.Setter
        public Builder pipe(@Nullable Boolean pipe) {

            this.pipe = pipe;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Boolean version) {

            this.version = version;
            return this;
        }
        public TeeOpts build() {
            final var _resultValue = new TeeOpts();
            _resultValue.append = append;
            _resultValue.files = files;
            _resultValue.ignoreInterrupts = ignoreInterrupts;
            _resultValue.outputError = outputError;
            _resultValue.pipe = pipe;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
