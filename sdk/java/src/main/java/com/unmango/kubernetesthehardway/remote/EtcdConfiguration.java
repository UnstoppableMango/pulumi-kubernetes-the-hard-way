// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.command.remote.outputs.Connection;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.remote.EtcdConfigurationArgs;
import com.unmango.kubernetesthehardway.remote.File;
import com.unmango.kubernetesthehardway.remote.outputs.EtcdConfigurationProps;
import com.unmango.kubernetesthehardway.tools.Chmod;
import com.unmango.kubernetesthehardway.tools.Mkdir;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Configures etcd on a remote system.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:remote:EtcdConfiguration")
public class EtcdConfiguration extends com.pulumi.resources.ComponentResource {
    /**
     * The remote certificate authority file.
     * 
     */
    @Export(name="caFile", refs={File.class}, tree="[0]")
    private Output<File> caFile;

    /**
     * @return The remote certificate authority file.
     * 
     */
    public Output<File> caFile() {
        return this.caFile;
    }
    /**
     * The PEM encoded certificate authority data.
     * 
     */
    @Export(name="caPem", refs={String.class}, tree="[0]")
    private Output<String> caPem;

    /**
     * @return The PEM encoded certificate authority data.
     * 
     */
    public Output<String> caPem() {
        return this.caPem;
    }
    /**
     * The remote certificate file.
     * 
     */
    @Export(name="certFile", refs={File.class}, tree="[0]")
    private Output<File> certFile;

    /**
     * @return The remote certificate file.
     * 
     */
    public Output<File> certFile() {
        return this.certFile;
    }
    /**
     * The PEM encoded certificate data.
     * 
     */
    @Export(name="certPem", refs={String.class}, tree="[0]")
    private Output<String> certPem;

    /**
     * @return The PEM encoded certificate data.
     * 
     */
    public Output<String> certPem() {
        return this.certPem;
    }
    /**
     * The configuration chmod operation.
     * 
     */
    @Export(name="configurationChmod", refs={Chmod.class}, tree="[0]")
    private Output</* @Nullable */ Chmod> configurationChmod;

    /**
     * @return The configuration chmod operation.
     * 
     */
    public Output<Optional<Chmod>> configurationChmod() {
        return Codegen.optional(this.configurationChmod);
    }
    /**
     * The directory to store etcd configuration.
     * 
     */
    @Export(name="configurationDirectory", refs={String.class}, tree="[0]")
    private Output<String> configurationDirectory;

    /**
     * @return The directory to store etcd configuration.
     * 
     */
    public Output<String> configurationDirectory() {
        return this.configurationDirectory;
    }
    /**
     * The configuration mkdir operation.
     * 
     */
    @Export(name="configurationMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> configurationMkdir;

    /**
     * @return The configuration mkdir operation.
     * 
     */
    public Output<Mkdir> configurationMkdir() {
        return this.configurationMkdir;
    }
    /**
     * The parameters with which to connect to the remote host.
     * 
     */
    @Export(name="connection", refs={Connection.class}, tree="[0]")
    private Output<Connection> connection;

    /**
     * @return The parameters with which to connect to the remote host.
     * 
     */
    public Output<Connection> connection() {
        return this.connection;
    }
    /**
     * The directory etcd will store its data.
     * 
     */
    @Export(name="dataDirectory", refs={String.class}, tree="[0]")
    private Output<String> dataDirectory;

    /**
     * @return The directory etcd will store its data.
     * 
     */
    public Output<String> dataDirectory() {
        return this.dataDirectory;
    }
    /**
     * The data mkdir operation.
     * 
     */
    @Export(name="dataMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> dataMkdir;

    /**
     * @return The data mkdir operation.
     * 
     */
    public Output<Mkdir> dataMkdir() {
        return this.dataMkdir;
    }
    /**
     * The path to the `etcd` binary.
     * 
     */
    @Export(name="etcdPath", refs={String.class}, tree="[0]")
    private Output<String> etcdPath;

    /**
     * @return The path to the `etcd` binary.
     * 
     */
    public Output<String> etcdPath() {
        return this.etcdPath;
    }
    /**
     * The IP used to serve client requests and communicate with etcd peers.
     * 
     */
    @Export(name="internalIp", refs={String.class}, tree="[0]")
    private Output<String> internalIp;

    /**
     * @return The IP used to serve client requests and communicate with etcd peers.
     * 
     */
    public Output<String> internalIp() {
        return this.internalIp;
    }
    /**
     * The remote key file.
     * 
     */
    @Export(name="keyFile", refs={File.class}, tree="[0]")
    private Output<File> keyFile;

    /**
     * @return The remote key file.
     * 
     */
    public Output<File> keyFile() {
        return this.keyFile;
    }
    /**
     * The PEM encoded key data.
     * 
     */
    @Export(name="keyPem", refs={String.class}, tree="[0]")
    private Output<String> keyPem;

    /**
     * @return The PEM encoded key data.
     * 
     */
    public Output<String> keyPem() {
        return this.keyPem;
    }
    /**
     * A bag of properties to be consumed by other resources.
     * 
     */
    @Export(name="value", refs={EtcdConfigurationProps.class}, tree="[0]")
    private Output<EtcdConfigurationProps> value;

    /**
     * @return A bag of properties to be consumed by other resources.
     * 
     */
    public Output<EtcdConfigurationProps> value() {
        return this.value;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EtcdConfiguration(String name) {
        this(name, EtcdConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EtcdConfiguration(String name, EtcdConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EtcdConfiguration(String name, EtcdConfigurationArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes-the-hard-way:remote:EtcdConfiguration", name, args == null ? EtcdConfigurationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
