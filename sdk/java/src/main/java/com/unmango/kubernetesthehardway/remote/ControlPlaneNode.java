// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.command.remote.outputs.Connection;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.remote.ControlPlaneNodeArgs;
import com.unmango.kubernetesthehardway.remote.KubeApiServerInstall;
import com.unmango.kubernetesthehardway.remote.KubeControllerManagerInstall;
import com.unmango.kubernetesthehardway.remote.KubeSchedulerInstall;
import com.unmango.kubernetesthehardway.remote.KubectlInstall;
import com.unmango.kubernetesthehardway.remote.SystemdService;
import com.unmango.kubernetesthehardway.tools.Mkdir;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A kubernetes control plane node.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:remote:ControlPlaneNode")
public class ControlPlaneNode extends com.pulumi.resources.ComponentResource {
    /**
     * The path to the root certificate authority certificate.
     * 
     */
    @Export(name="caCertificatePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> caCertificatePath;

    /**
     * @return The path to the root certificate authority certificate.
     * 
     */
    public Output<Optional<String>> caCertificatePath() {
        return Codegen.optional(this.caCertificatePath);
    }
    /**
     * The path to the root certificate authority private key.
     * 
     */
    @Export(name="caPrivateKeyPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> caPrivateKeyPath;

    /**
     * @return The path to the root certificate authority private key.
     * 
     */
    public Output<Optional<String>> caPrivateKeyPath() {
        return Codegen.optional(this.caPrivateKeyPath);
    }
    /**
     * The parameters with which to connect to the remote host.
     * 
     */
    @Export(name="connection", refs={Connection.class}, tree="[0]")
    private Output<Connection> connection;

    /**
     * @return The parameters with which to connect to the remote host.
     * 
     */
    public Output<Connection> connection() {
        return this.connection;
    }
    /**
     * The v1/EncryptionConfig yaml.
     * 
     */
    @Export(name="encryptionConfigYaml", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> encryptionConfigYaml;

    /**
     * @return The v1/EncryptionConfig yaml.
     * 
     */
    public Output<Optional<String>> encryptionConfigYaml() {
        return Codegen.optional(this.encryptionConfigYaml);
    }
    /**
     * The path to the kube-apiserver certificate.
     * 
     */
    @Export(name="kubeApiServerCertificatePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeApiServerCertificatePath;

    /**
     * @return The path to the kube-apiserver certificate.
     * 
     */
    public Output<Optional<String>> kubeApiServerCertificatePath() {
        return Codegen.optional(this.kubeApiServerCertificatePath);
    }
    /**
     * The kube-apiserver install.
     * 
     */
    @Export(name="kubeApiServerInstall", refs={KubeApiServerInstall.class}, tree="[0]")
    private Output<KubeApiServerInstall> kubeApiServerInstall;

    /**
     * @return The kube-apiserver install.
     * 
     */
    public Output<KubeApiServerInstall> kubeApiServerInstall() {
        return this.kubeApiServerInstall;
    }
    /**
     * The path to the kube-apiserver private key.
     * 
     */
    @Export(name="kubeApiServerPrivateKeyPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeApiServerPrivateKeyPath;

    /**
     * @return The path to the kube-apiserver private key.
     * 
     */
    public Output<Optional<String>> kubeApiServerPrivateKeyPath() {
        return Codegen.optional(this.kubeApiServerPrivateKeyPath);
    }
    /**
     * The kube-apiserver systemd service.
     * 
     */
    @Export(name="kubeApiServerService", refs={SystemdService.class}, tree="[0]")
    private Output</* @Nullable */ SystemdService> kubeApiServerService;

    /**
     * @return The kube-apiserver systemd service.
     * 
     */
    public Output<Optional<SystemdService>> kubeApiServerService() {
        return Codegen.optional(this.kubeApiServerService);
    }
    /**
     * The kube-controller-manager install.
     * 
     */
    @Export(name="kubeControllerManagerInstall", refs={KubeControllerManagerInstall.class}, tree="[0]")
    private Output<KubeControllerManagerInstall> kubeControllerManagerInstall;

    /**
     * @return The kube-controller-manager install.
     * 
     */
    public Output<KubeControllerManagerInstall> kubeControllerManagerInstall() {
        return this.kubeControllerManagerInstall;
    }
    /**
     * The path to the kube-controller-manager kubeconfig file.
     * 
     */
    @Export(name="kubeControllerManagerKubeconfigPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeControllerManagerKubeconfigPath;

    /**
     * @return The path to the kube-controller-manager kubeconfig file.
     * 
     */
    public Output<Optional<String>> kubeControllerManagerKubeconfigPath() {
        return Codegen.optional(this.kubeControllerManagerKubeconfigPath);
    }
    /**
     * The kube-controller-manager systemd service.
     * 
     */
    @Export(name="kubeControllerManagerService", refs={SystemdService.class}, tree="[0]")
    private Output</* @Nullable */ SystemdService> kubeControllerManagerService;

    /**
     * @return The kube-controller-manager systemd service.
     * 
     */
    public Output<Optional<SystemdService>> kubeControllerManagerService() {
        return Codegen.optional(this.kubeControllerManagerService);
    }
    /**
     * The kube-scheduler config yaml.
     * 
     */
    @Export(name="kubeSchedulerConfigYaml", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeSchedulerConfigYaml;

    /**
     * @return The kube-scheduler config yaml.
     * 
     */
    public Output<Optional<String>> kubeSchedulerConfigYaml() {
        return Codegen.optional(this.kubeSchedulerConfigYaml);
    }
    /**
     * The kube-scheduler isntall.
     * 
     */
    @Export(name="kubeSchedulerInstall", refs={KubeSchedulerInstall.class}, tree="[0]")
    private Output<KubeSchedulerInstall> kubeSchedulerInstall;

    /**
     * @return The kube-scheduler isntall.
     * 
     */
    public Output<KubeSchedulerInstall> kubeSchedulerInstall() {
        return this.kubeSchedulerInstall;
    }
    /**
     * The path to the kube-scheduler kubeconfig file.
     * 
     */
    @Export(name="kubeSchedulerKubeconfigPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubeSchedulerKubeconfigPath;

    /**
     * @return The path to the kube-scheduler kubeconfig file.
     * 
     */
    public Output<Optional<String>> kubeSchedulerKubeconfigPath() {
        return Codegen.optional(this.kubeSchedulerKubeconfigPath);
    }
    /**
     * The kube-scheduler systemd service.
     * 
     */
    @Export(name="kubeSchedulerService", refs={SystemdService.class}, tree="[0]")
    private Output</* @Nullable */ SystemdService> kubeSchedulerService;

    /**
     * @return The kube-scheduler systemd service.
     * 
     */
    public Output<Optional<SystemdService>> kubeSchedulerService() {
        return Codegen.optional(this.kubeSchedulerService);
    }
    /**
     * The kubectl install.
     * 
     */
    @Export(name="kubectlInstall", refs={KubectlInstall.class}, tree="[0]")
    private Output<KubectlInstall> kubectlInstall;

    /**
     * @return The kubectl install.
     * 
     */
    public Output<KubectlInstall> kubectlInstall() {
        return this.kubectlInstall;
    }
    /**
     * The kubernetes configuration mkdir operation.
     * 
     */
    @Export(name="kubernetesConfigurationMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> kubernetesConfigurationMkdir;

    /**
     * @return The kubernetes configuration mkdir operation.
     * 
     */
    public Output<Mkdir> kubernetesConfigurationMkdir() {
        return this.kubernetesConfigurationMkdir;
    }
    /**
     * The path to the service accounts certificate.
     * 
     */
    @Export(name="serviceAccountsCertificatePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceAccountsCertificatePath;

    /**
     * @return The path to the service accounts certificate.
     * 
     */
    public Output<Optional<String>> serviceAccountsCertificatePath() {
        return Codegen.optional(this.serviceAccountsCertificatePath);
    }
    /**
     * The path to the service accounts private key.
     * 
     */
    @Export(name="serviceAccountsPrivateKeyPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceAccountsPrivateKeyPath;

    /**
     * @return The path to the service accounts private key.
     * 
     */
    public Output<Optional<String>> serviceAccountsPrivateKeyPath() {
        return Codegen.optional(this.serviceAccountsPrivateKeyPath);
    }
    /**
     * The /var/lib/kubernetes mkdir operation.
     * 
     */
    @Export(name="varLibKubernetesMkdir", refs={Mkdir.class}, tree="[0]")
    private Output<Mkdir> varLibKubernetesMkdir;

    /**
     * @return The /var/lib/kubernetes mkdir operation.
     * 
     */
    public Output<Mkdir> varLibKubernetesMkdir() {
        return this.varLibKubernetesMkdir;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ControlPlaneNode(String name) {
        this(name, ControlPlaneNodeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ControlPlaneNode(String name, ControlPlaneNodeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ControlPlaneNode(String name, ControlPlaneNodeArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes-the-hard-way:remote:ControlPlaneNode", name, args == null ? ControlPlaneNodeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
