// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


/**
 * A CA + Cert + Key bundle
 * 
 */
public final class BundleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BundleArgs Empty = new BundleArgs();

    /**
     * The PEM encoded certificate authority data.
     * 
     */
    @Import(name="caPem", required=true)
    private Output<String> caPem;

    /**
     * @return The PEM encoded certificate authority data.
     * 
     */
    public Output<String> caPem() {
        return this.caPem;
    }

    /**
     * The PEM encoded certificate data.
     * 
     */
    @Import(name="certPem", required=true)
    private Output<String> certPem;

    /**
     * @return The PEM encoded certificate data.
     * 
     */
    public Output<String> certPem() {
        return this.certPem;
    }

    /**
     * The PEM encoded private key data
     * 
     */
    @Import(name="keyPem", required=true)
    private Output<String> keyPem;

    /**
     * @return The PEM encoded private key data
     * 
     */
    public Output<String> keyPem() {
        return this.keyPem;
    }

    private BundleArgs() {}

    private BundleArgs(BundleArgs $) {
        this.caPem = $.caPem;
        this.certPem = $.certPem;
        this.keyPem = $.keyPem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BundleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BundleArgs $;

        public Builder() {
            $ = new BundleArgs();
        }

        public Builder(BundleArgs defaults) {
            $ = new BundleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caPem The PEM encoded certificate authority data.
         * 
         * @return builder
         * 
         */
        public Builder caPem(Output<String> caPem) {
            $.caPem = caPem;
            return this;
        }

        /**
         * @param caPem The PEM encoded certificate authority data.
         * 
         * @return builder
         * 
         */
        public Builder caPem(String caPem) {
            return caPem(Output.of(caPem));
        }

        /**
         * @param certPem The PEM encoded certificate data.
         * 
         * @return builder
         * 
         */
        public Builder certPem(Output<String> certPem) {
            $.certPem = certPem;
            return this;
        }

        /**
         * @param certPem The PEM encoded certificate data.
         * 
         * @return builder
         * 
         */
        public Builder certPem(String certPem) {
            return certPem(Output.of(certPem));
        }

        /**
         * @param keyPem The PEM encoded private key data
         * 
         * @return builder
         * 
         */
        public Builder keyPem(Output<String> keyPem) {
            $.keyPem = keyPem;
            return this;
        }

        /**
         * @param keyPem The PEM encoded private key data
         * 
         * @return builder
         * 
         */
        public Builder keyPem(String keyPem) {
            return keyPem(Output.of(keyPem));
        }

        public BundleArgs build() {
            if ($.caPem == null) {
                throw new MissingRequiredPropertyException("BundleArgs", "caPem");
            }
            if ($.certPem == null) {
                throw new MissingRequiredPropertyException("BundleArgs", "certPem");
            }
            if ($.keyPem == null) {
                throw new MissingRequiredPropertyException("BundleArgs", "keyPem");
            }
            return $;
        }
    }

}
