// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote;

import com.pulumi.command.remote.inputs.ConnectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControlPlaneNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControlPlaneNodeArgs Empty = new ControlPlaneNodeArgs();

    /**
     * The path to the root certificate authority certificate.
     * 
     */
    @Import(name="caCertificatePath")
    private @Nullable Output<String> caCertificatePath;

    /**
     * @return The path to the root certificate authority certificate.
     * 
     */
    public Optional<Output<String>> caCertificatePath() {
        return Optional.ofNullable(this.caCertificatePath);
    }

    /**
     * The path to the root certificate authority private key.
     * 
     */
    @Import(name="caPrivateKeyPath")
    private @Nullable Output<String> caPrivateKeyPath;

    /**
     * @return The path to the root certificate authority private key.
     * 
     */
    public Optional<Output<String>> caPrivateKeyPath() {
        return Optional.ofNullable(this.caPrivateKeyPath);
    }

    /**
     * The parameters with which to connect to the remote host.
     * 
     */
    @Import(name="connection", required=true)
    private Output<ConnectionArgs> connection;

    /**
     * @return The parameters with which to connect to the remote host.
     * 
     */
    public Output<ConnectionArgs> connection() {
        return this.connection;
    }

    /**
     * The v1/EncryptionConfig yaml.
     * 
     */
    @Import(name="encryptionConfigYaml")
    private @Nullable Output<String> encryptionConfigYaml;

    /**
     * @return The v1/EncryptionConfig yaml.
     * 
     */
    public Optional<Output<String>> encryptionConfigYaml() {
        return Optional.ofNullable(this.encryptionConfigYaml);
    }

    /**
     * The path to the kube-apiserver certificate.
     * 
     */
    @Import(name="kubeApiServerCertificatePath")
    private @Nullable Output<String> kubeApiServerCertificatePath;

    /**
     * @return The path to the kube-apiserver certificate.
     * 
     */
    public Optional<Output<String>> kubeApiServerCertificatePath() {
        return Optional.ofNullable(this.kubeApiServerCertificatePath);
    }

    /**
     * The path to the kube-apiserver private key.
     * 
     */
    @Import(name="kubeApiServerPrivateKeyPath")
    private @Nullable Output<String> kubeApiServerPrivateKeyPath;

    /**
     * @return The path to the kube-apiserver private key.
     * 
     */
    public Optional<Output<String>> kubeApiServerPrivateKeyPath() {
        return Optional.ofNullable(this.kubeApiServerPrivateKeyPath);
    }

    /**
     * The path to the kube-controller-manager kubeconfig file.
     * 
     */
    @Import(name="kubeControllerManagerKubeconfigPath")
    private @Nullable Output<String> kubeControllerManagerKubeconfigPath;

    /**
     * @return The path to the kube-controller-manager kubeconfig file.
     * 
     */
    public Optional<Output<String>> kubeControllerManagerKubeconfigPath() {
        return Optional.ofNullable(this.kubeControllerManagerKubeconfigPath);
    }

    /**
     * The kube-scheduler config yaml.
     * 
     */
    @Import(name="kubeSchedulerConfigYaml")
    private @Nullable Output<String> kubeSchedulerConfigYaml;

    /**
     * @return The kube-scheduler config yaml.
     * 
     */
    public Optional<Output<String>> kubeSchedulerConfigYaml() {
        return Optional.ofNullable(this.kubeSchedulerConfigYaml);
    }

    /**
     * The path to the kube-scheduler kubeconfig file.
     * 
     */
    @Import(name="kubeSchedulerKubeconfigPath")
    private @Nullable Output<String> kubeSchedulerKubeconfigPath;

    /**
     * @return The path to the kube-scheduler kubeconfig file.
     * 
     */
    public Optional<Output<String>> kubeSchedulerKubeconfigPath() {
        return Optional.ofNullable(this.kubeSchedulerKubeconfigPath);
    }

    /**
     * The path to the service accounts certificate.
     * 
     */
    @Import(name="serviceAccountsCertificatePath")
    private @Nullable Output<String> serviceAccountsCertificatePath;

    /**
     * @return The path to the service accounts certificate.
     * 
     */
    public Optional<Output<String>> serviceAccountsCertificatePath() {
        return Optional.ofNullable(this.serviceAccountsCertificatePath);
    }

    /**
     * The path to the service accounts private key.
     * 
     */
    @Import(name="serviceAccountsPrivateKeyPath")
    private @Nullable Output<String> serviceAccountsPrivateKeyPath;

    /**
     * @return The path to the service accounts private key.
     * 
     */
    public Optional<Output<String>> serviceAccountsPrivateKeyPath() {
        return Optional.ofNullable(this.serviceAccountsPrivateKeyPath);
    }

    private ControlPlaneNodeArgs() {}

    private ControlPlaneNodeArgs(ControlPlaneNodeArgs $) {
        this.caCertificatePath = $.caCertificatePath;
        this.caPrivateKeyPath = $.caPrivateKeyPath;
        this.connection = $.connection;
        this.encryptionConfigYaml = $.encryptionConfigYaml;
        this.kubeApiServerCertificatePath = $.kubeApiServerCertificatePath;
        this.kubeApiServerPrivateKeyPath = $.kubeApiServerPrivateKeyPath;
        this.kubeControllerManagerKubeconfigPath = $.kubeControllerManagerKubeconfigPath;
        this.kubeSchedulerConfigYaml = $.kubeSchedulerConfigYaml;
        this.kubeSchedulerKubeconfigPath = $.kubeSchedulerKubeconfigPath;
        this.serviceAccountsCertificatePath = $.serviceAccountsCertificatePath;
        this.serviceAccountsPrivateKeyPath = $.serviceAccountsPrivateKeyPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlPlaneNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlPlaneNodeArgs $;

        public Builder() {
            $ = new ControlPlaneNodeArgs();
        }

        public Builder(ControlPlaneNodeArgs defaults) {
            $ = new ControlPlaneNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertificatePath The path to the root certificate authority certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatePath(@Nullable Output<String> caCertificatePath) {
            $.caCertificatePath = caCertificatePath;
            return this;
        }

        /**
         * @param caCertificatePath The path to the root certificate authority certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCertificatePath(String caCertificatePath) {
            return caCertificatePath(Output.of(caCertificatePath));
        }

        /**
         * @param caPrivateKeyPath The path to the root certificate authority private key.
         * 
         * @return builder
         * 
         */
        public Builder caPrivateKeyPath(@Nullable Output<String> caPrivateKeyPath) {
            $.caPrivateKeyPath = caPrivateKeyPath;
            return this;
        }

        /**
         * @param caPrivateKeyPath The path to the root certificate authority private key.
         * 
         * @return builder
         * 
         */
        public Builder caPrivateKeyPath(String caPrivateKeyPath) {
            return caPrivateKeyPath(Output.of(caPrivateKeyPath));
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(Output<ConnectionArgs> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection The parameters with which to connect to the remote host.
         * 
         * @return builder
         * 
         */
        public Builder connection(ConnectionArgs connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param encryptionConfigYaml The v1/EncryptionConfig yaml.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfigYaml(@Nullable Output<String> encryptionConfigYaml) {
            $.encryptionConfigYaml = encryptionConfigYaml;
            return this;
        }

        /**
         * @param encryptionConfigYaml The v1/EncryptionConfig yaml.
         * 
         * @return builder
         * 
         */
        public Builder encryptionConfigYaml(String encryptionConfigYaml) {
            return encryptionConfigYaml(Output.of(encryptionConfigYaml));
        }

        /**
         * @param kubeApiServerCertificatePath The path to the kube-apiserver certificate.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerCertificatePath(@Nullable Output<String> kubeApiServerCertificatePath) {
            $.kubeApiServerCertificatePath = kubeApiServerCertificatePath;
            return this;
        }

        /**
         * @param kubeApiServerCertificatePath The path to the kube-apiserver certificate.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerCertificatePath(String kubeApiServerCertificatePath) {
            return kubeApiServerCertificatePath(Output.of(kubeApiServerCertificatePath));
        }

        /**
         * @param kubeApiServerPrivateKeyPath The path to the kube-apiserver private key.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerPrivateKeyPath(@Nullable Output<String> kubeApiServerPrivateKeyPath) {
            $.kubeApiServerPrivateKeyPath = kubeApiServerPrivateKeyPath;
            return this;
        }

        /**
         * @param kubeApiServerPrivateKeyPath The path to the kube-apiserver private key.
         * 
         * @return builder
         * 
         */
        public Builder kubeApiServerPrivateKeyPath(String kubeApiServerPrivateKeyPath) {
            return kubeApiServerPrivateKeyPath(Output.of(kubeApiServerPrivateKeyPath));
        }

        /**
         * @param kubeControllerManagerKubeconfigPath The path to the kube-controller-manager kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder kubeControllerManagerKubeconfigPath(@Nullable Output<String> kubeControllerManagerKubeconfigPath) {
            $.kubeControllerManagerKubeconfigPath = kubeControllerManagerKubeconfigPath;
            return this;
        }

        /**
         * @param kubeControllerManagerKubeconfigPath The path to the kube-controller-manager kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder kubeControllerManagerKubeconfigPath(String kubeControllerManagerKubeconfigPath) {
            return kubeControllerManagerKubeconfigPath(Output.of(kubeControllerManagerKubeconfigPath));
        }

        /**
         * @param kubeSchedulerConfigYaml The kube-scheduler config yaml.
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerConfigYaml(@Nullable Output<String> kubeSchedulerConfigYaml) {
            $.kubeSchedulerConfigYaml = kubeSchedulerConfigYaml;
            return this;
        }

        /**
         * @param kubeSchedulerConfigYaml The kube-scheduler config yaml.
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerConfigYaml(String kubeSchedulerConfigYaml) {
            return kubeSchedulerConfigYaml(Output.of(kubeSchedulerConfigYaml));
        }

        /**
         * @param kubeSchedulerKubeconfigPath The path to the kube-scheduler kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerKubeconfigPath(@Nullable Output<String> kubeSchedulerKubeconfigPath) {
            $.kubeSchedulerKubeconfigPath = kubeSchedulerKubeconfigPath;
            return this;
        }

        /**
         * @param kubeSchedulerKubeconfigPath The path to the kube-scheduler kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder kubeSchedulerKubeconfigPath(String kubeSchedulerKubeconfigPath) {
            return kubeSchedulerKubeconfigPath(Output.of(kubeSchedulerKubeconfigPath));
        }

        /**
         * @param serviceAccountsCertificatePath The path to the service accounts certificate.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsCertificatePath(@Nullable Output<String> serviceAccountsCertificatePath) {
            $.serviceAccountsCertificatePath = serviceAccountsCertificatePath;
            return this;
        }

        /**
         * @param serviceAccountsCertificatePath The path to the service accounts certificate.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsCertificatePath(String serviceAccountsCertificatePath) {
            return serviceAccountsCertificatePath(Output.of(serviceAccountsCertificatePath));
        }

        /**
         * @param serviceAccountsPrivateKeyPath The path to the service accounts private key.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsPrivateKeyPath(@Nullable Output<String> serviceAccountsPrivateKeyPath) {
            $.serviceAccountsPrivateKeyPath = serviceAccountsPrivateKeyPath;
            return this;
        }

        /**
         * @param serviceAccountsPrivateKeyPath The path to the service accounts private key.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountsPrivateKeyPath(String serviceAccountsPrivateKeyPath) {
            return serviceAccountsPrivateKeyPath(Output.of(serviceAccountsPrivateKeyPath));
        }

        public ControlPlaneNodeArgs build() {
            if ($.connection == null) {
                throw new MissingRequiredPropertyException("ControlPlaneNodeArgs", "connection");
            }
            return $;
        }
    }

}
