// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools;

import com.pulumi.command.remote.Command;
import com.pulumi.command.remote.outputs.Connection;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.tools.CurlArgs;
import com.unmango.kubernetesthehardway.tools.enums.CommandLifecycle;
import com.unmango.kubernetesthehardway.tools.enums.CurlCertType;
import com.unmango.kubernetesthehardway.tools.enums.CurlDelegationLevel;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Abstraction over the `curl` utility on a remote system. Transfer a URL.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:tools:Curl")
public class Curl extends com.pulumi.resources.ComponentResource {
    /**
     * (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
     * 
     */
    @Export(name="abstractUnixSocket", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> abstractUnixSocket;

    /**
     * @return (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
     * 
     */
    public Output<Optional<String>> abstractUnixSocket() {
        return Codegen.optional(this.abstractUnixSocket);
    }
    /**
     * (HTTPS)  This  option enables the alt-svc parser in curl.
     * 
     */
    @Export(name="altSvc", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> altSvc;

    /**
     * @return (HTTPS)  This  option enables the alt-svc parser in curl.
     * 
     */
    public Output<Optional<String>> altSvc() {
        return Codegen.optional(this.altSvc);
    }
    /**
     * (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
     * 
     */
    @Export(name="anyAuth", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> anyAuth;

    /**
     * @return (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
     * 
     */
    public Output<Optional<Boolean>> anyAuth() {
        return Codegen.optional(this.anyAuth);
    }
    /**
     * (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
     * 
     */
    @Export(name="append", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> append;

    /**
     * @return (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
     * 
     */
    public Output<Optional<Boolean>> append() {
        return Codegen.optional(this.append);
    }
    /**
     * Use AWS V4 signature authentication in the transfer.
     * 
     */
    @Export(name="awsSigv4", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> awsSigv4;

    /**
     * @return Use AWS V4 signature authentication in the transfer.
     * 
     */
    public Output<Optional<String>> awsSigv4() {
        return Codegen.optional(this.awsSigv4);
    }
    /**
     * (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
     * 
     */
    @Export(name="basic", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> basic;

    /**
     * @return (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
     * 
     */
    public Output<Optional<Boolean>> basic() {
        return Codegen.optional(this.basic);
    }
    /**
     * Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    @Export(name="binaryPath", refs={String.class}, tree="[0]")
    private Output<String> binaryPath;

    /**
     * @return Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    public Output<String> binaryPath() {
        return this.binaryPath;
    }
    /**
     * (TLS)  Tells curl to use the specified certificate file to verify the peer.
     * 
     */
    @Export(name="cacert", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cacert;

    /**
     * @return (TLS)  Tells curl to use the specified certificate file to verify the peer.
     * 
     */
    public Output<Optional<String>> cacert() {
        return Codegen.optional(this.cacert);
    }
    /**
     * (TLS) Tells curl to use the specified certificate directory to verify the peer.
     * 
     */
    @Export(name="capath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> capath;

    /**
     * @return (TLS) Tells curl to use the specified certificate directory to verify the peer.
     * 
     */
    public Output<Optional<String>> capath() {
        return Codegen.optional(this.capath);
    }
    /**
     * (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
     * 
     */
    @Export(name="cert", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cert;

    /**
     * @return (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
     * 
     */
    public Output<Optional<String>> cert() {
        return Codegen.optional(this.cert);
    }
    /**
     * (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
     * 
     */
    @Export(name="certStatus", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> certStatus;

    /**
     * @return (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
     * 
     */
    public Output<Optional<Boolean>> certStatus() {
        return Codegen.optional(this.certStatus);
    }
    /**
     * (TLS) Tells curl what type the provided client certificate is using.
     * 
     */
    @Export(name="certType", refs={CurlCertType.class}, tree="[0]")
    private Output</* @Nullable */ CurlCertType> certType;

    /**
     * @return (TLS) Tells curl what type the provided client certificate is using.
     * 
     */
    public Output<Optional<CurlCertType>> certType() {
        return Codegen.optional(this.certType);
    }
    /**
     * (TLS) Specifies which ciphers to use in the connection.
     * 
     */
    @Export(name="ciphers", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ciphers;

    /**
     * @return (TLS) Specifies which ciphers to use in the connection.
     * 
     */
    public Output<Optional<String>> ciphers() {
        return Codegen.optional(this.ciphers);
    }
    /**
     * The underlying command
     * 
     */
    @Export(name="command", refs={Command.class}, tree="[0]")
    private Output<Command> command;

    /**
     * @return The underlying command
     * 
     */
    public Output<Command> command() {
        return this.command;
    }
    /**
     * (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
     * 
     */
    @Export(name="compressed", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> compressed;

    /**
     * @return (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
     * 
     */
    public Output<Optional<Boolean>> compressed() {
        return Codegen.optional(this.compressed);
    }
    /**
     * (SCP SFTP) Enables built-in SSH compression.
     * 
     */
    @Export(name="compressedSsh", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> compressedSsh;

    /**
     * @return (SCP SFTP) Enables built-in SSH compression.
     * 
     */
    public Output<Optional<Boolean>> compressedSsh() {
        return Codegen.optional(this.compressedSsh);
    }
    /**
     * Specify a text file to read curl arguments from.
     * 
     */
    @Export(name="config", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> config;

    /**
     * @return Specify a text file to read curl arguments from.
     * 
     */
    public Output<Optional<String>> config() {
        return Codegen.optional(this.config);
    }
    /**
     * Maximum  time  in seconds that you allow curl&#39;s connection to take.
     * 
     */
    @Export(name="connectTimeout", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> connectTimeout;

    /**
     * @return Maximum  time  in seconds that you allow curl&#39;s connection to take.
     * 
     */
    public Output<Optional<Boolean>> connectTimeout() {
        return Codegen.optional(this.connectTimeout);
    }
    /**
     * For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
     * 
     */
    @Export(name="connectTo", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> connectTo;

    /**
     * @return For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
     * 
     */
    public Output<Optional<String>> connectTo() {
        return Codegen.optional(this.connectTo);
    }
    /**
     * Connection details for the remote system
     * 
     */
    @Export(name="connection", refs={Connection.class}, tree="[0]")
    private Output<Connection> connection;

    /**
     * @return Connection details for the remote system
     * 
     */
    public Output<Connection> connection() {
        return this.connection;
    }
    /**
     * Continue/Resume a previous file transfer at the given offset.
     * 
     */
    @Export(name="continueAt", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> continueAt;

    /**
     * @return Continue/Resume a previous file transfer at the given offset.
     * 
     */
    public Output<Optional<String>> continueAt() {
        return Codegen.optional(this.continueAt);
    }
    /**
     * (HTTP) Pass the data to the HTTP server in the Cookie header.
     * 
     */
    @Export(name="cookie", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cookie;

    /**
     * @return (HTTP) Pass the data to the HTTP server in the Cookie header.
     * 
     */
    public Output<Optional<String>> cookie() {
        return Codegen.optional(this.cookie);
    }
    /**
     * (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
     * 
     */
    @Export(name="cookieJar", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cookieJar;

    /**
     * @return (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
     * 
     */
    public Output<Optional<String>> cookieJar() {
        return Codegen.optional(this.cookieJar);
    }
    /**
     * When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
     * 
     */
    @Export(name="createDirs", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> createDirs;

    /**
     * @return When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
     * 
     */
    public Output<Optional<Boolean>> createDirs() {
        return Codegen.optional(this.createDirs);
    }
    /**
     * (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which &#39;mode&#39; to set on the file at creation time, instead of the default 0644.
     * 
     */
    @Export(name="createFileMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> createFileMode;

    /**
     * @return (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which &#39;mode&#39; to set on the file at creation time, instead of the default 0644.
     * 
     */
    public Output<Optional<String>> createFileMode() {
        return Codegen.optional(this.createFileMode);
    }
    /**
     * (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
     * 
     */
    @Export(name="crlf", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> crlf;

    /**
     * @return (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
     * 
     */
    public Output<Optional<Boolean>> crlf() {
        return Codegen.optional(this.crlf);
    }
    /**
     * (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
     * 
     */
    @Export(name="crlfFile", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> crlfFile;

    /**
     * @return (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
     * 
     */
    public Output<Optional<String>> crlfFile() {
        return Codegen.optional(this.crlfFile);
    }
    /**
     * (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
     * 
     */
    @Export(name="curves", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> curves;

    /**
     * @return (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
     * 
     */
    public Output<Optional<String>> curves() {
        return Codegen.optional(this.curves);
    }
    /**
     * (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
     * 
     */
    @Export(name="data", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> data;

    /**
     * @return (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
     * 
     */
    public Output<Optional<String>> data() {
        return Codegen.optional(this.data);
    }
    /**
     * (HTTP) This is just an alias for -d, --data.
     * 
     */
    @Export(name="dataAscii", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dataAscii;

    /**
     * @return (HTTP) This is just an alias for -d, --data.
     * 
     */
    public Output<Optional<String>> dataAscii() {
        return Codegen.optional(this.dataAscii);
    }
    /**
     * (HTTP) This posts data exactly as specified with no extra processing whatsoever.
     * 
     */
    @Export(name="dataBinary", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dataBinary;

    /**
     * @return (HTTP) This posts data exactly as specified with no extra processing whatsoever.
     * 
     */
    public Output<Optional<String>> dataBinary() {
        return Codegen.optional(this.dataBinary);
    }
    /**
     * (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
     * 
     */
    @Export(name="dataRaw", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dataRaw;

    /**
     * @return (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
     * 
     */
    public Output<Optional<String>> dataRaw() {
        return Codegen.optional(this.dataRaw);
    }
    /**
     * (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
     * 
     */
    @Export(name="dataUrlEncode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dataUrlEncode;

    /**
     * @return (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
     * 
     */
    public Output<Optional<String>> dataUrlEncode() {
        return Codegen.optional(this.dataUrlEncode);
    }
    /**
     * (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
     * 
     */
    @Export(name="delegation", refs={CurlDelegationLevel.class}, tree="[0]")
    private Output</* @Nullable */ CurlDelegationLevel> delegation;

    /**
     * @return (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
     * 
     */
    public Output<Optional<CurlDelegationLevel>> delegation() {
        return Codegen.optional(this.delegation);
    }
    /**
     * (HTTP) Enables HTTP Digest authentication.
     * 
     */
    @Export(name="digest", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> digest;

    /**
     * @return (HTTP) Enables HTTP Digest authentication.
     * 
     */
    public Output<Optional<Boolean>> digest() {
        return Codegen.optional(this.digest);
    }
    /**
     * If used as the first parameter on the command line, the curlrc config file will not be read and used.
     * 
     */
    @Export(name="disable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disable;

    /**
     * @return If used as the first parameter on the command line, the curlrc config file will not be read and used.
     * 
     */
    public Output<Optional<Boolean>> disable() {
        return Codegen.optional(this.disable);
    }
    /**
     * (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
     * 
     */
    @Export(name="disableEprt", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disableEprt;

    /**
     * @return (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
     * 
     */
    public Output<Optional<Boolean>> disableEprt() {
        return Codegen.optional(this.disableEprt);
    }
    /**
     * (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
     * 
     */
    @Export(name="disableEpsv", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disableEpsv;

    /**
     * @return (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
     * 
     */
    public Output<Optional<Boolean>> disableEpsv() {
        return Codegen.optional(this.disableEpsv);
    }
    /**
     * (HTTP) This tells curl to exit if passed a url containing a username.
     * 
     */
    @Export(name="disallowUsernameInUrl", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disallowUsernameInUrl;

    /**
     * @return (HTTP) This tells curl to exit if passed a url containing a username.
     * 
     */
    public Output<Optional<Boolean>> disallowUsernameInUrl() {
        return Codegen.optional(this.disallowUsernameInUrl);
    }
    /**
     * (DNS)  Tell  curl  to send outgoing DNS requests through &lt;interface&gt;.
     * 
     */
    @Export(name="dnsInterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dnsInterface;

    /**
     * @return (DNS)  Tell  curl  to send outgoing DNS requests through &lt;interface&gt;.
     * 
     */
    public Output<Optional<String>> dnsInterface() {
        return Codegen.optional(this.dnsInterface);
    }
    /**
     * (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    @Export(name="dnsIpv4Addr", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dnsIpv4Addr;

    /**
     * @return (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    public Output<Optional<String>> dnsIpv4Addr() {
        return Codegen.optional(this.dnsIpv4Addr);
    }
    /**
     * (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    @Export(name="dnsIpv6Addr", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dnsIpv6Addr;

    /**
     * @return (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    public Output<Optional<String>> dnsIpv6Addr() {
        return Codegen.optional(this.dnsIpv6Addr);
    }
    /**
     * Set the list of DNS servers to be used instead of the system default.
     * 
     */
    @Export(name="dnsServers", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dnsServers;

    /**
     * @return Set the list of DNS servers to be used instead of the system default.
     * 
     */
    public Output<Optional<String>> dnsServers() {
        return Codegen.optional(this.dnsServers);
    }
    /**
     * Same as --cert-status but used for DoH (DNS-over-HTTPS).
     * 
     */
    @Export(name="dohCertStatus", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dohCertStatus;

    /**
     * @return Same as --cert-status but used for DoH (DNS-over-HTTPS).
     * 
     */
    public Output<Optional<Boolean>> dohCertStatus() {
        return Codegen.optional(this.dohCertStatus);
    }
    /**
     * Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
     * 
     */
    @Export(name="dohInsecure", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dohInsecure;

    /**
     * @return Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
     * 
     */
    public Output<Optional<Boolean>> dohInsecure() {
        return Codegen.optional(this.dohInsecure);
    }
    /**
     * Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
     * 
     */
    @Export(name="dohUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dohUrl;

    /**
     * @return Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
     * 
     */
    public Output<Optional<String>> dohUrl() {
        return Codegen.optional(this.dohUrl);
    }
    /**
     * (HTTP FTP) Write the received protocol headers to the specified file.
     * 
     */
    @Export(name="dumpHeader", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dumpHeader;

    /**
     * @return (HTTP FTP) Write the received protocol headers to the specified file.
     * 
     */
    public Output<Optional<String>> dumpHeader() {
        return Codegen.optional(this.dumpHeader);
    }
    /**
     * (TLS) Specify the path name to the Entropy Gathering Daemon socket.
     * 
     */
    @Export(name="egdFile", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> egdFile;

    /**
     * @return (TLS) Specify the path name to the Entropy Gathering Daemon socket.
     * 
     */
    public Output<Optional<String>> egdFile() {
        return Codegen.optional(this.egdFile);
    }
    /**
     * (TLS) Select the OpenSSL crypto engine to use for cipher operations.
     * 
     */
    @Export(name="engine", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> engine;

    /**
     * @return (TLS) Select the OpenSSL crypto engine to use for cipher operations.
     * 
     */
    public Output<Optional<String>> engine() {
        return Codegen.optional(this.engine);
    }
    /**
     * Environment variables
     * 
     */
    @Export(name="environment", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> environment;

    /**
     * @return Environment variables
     * 
     */
    public Output<Map<String,String>> environment() {
        return this.environment;
    }
    /**
     * (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
     * 
     */
    @Export(name="etagCompare", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> etagCompare;

    /**
     * @return (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
     * 
     */
    public Output<Optional<String>> etagCompare() {
        return Codegen.optional(this.etagCompare);
    }
    /**
     * (HTTP) This option saves an HTTP ETag to the specified file.
     * 
     */
    @Export(name="etagSave", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> etagSave;

    /**
     * @return (HTTP) This option saves an HTTP ETag to the specified file.
     * 
     */
    public Output<Optional<String>> etagSave() {
        return Codegen.optional(this.etagSave);
    }
    /**
     * (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
     * 
     */
    @Export(name="expect100Timeout", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> expect100Timeout;

    /**
     * @return (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
     * 
     */
    public Output<Optional<Boolean>> expect100Timeout() {
        return Codegen.optional(this.expect100Timeout);
    }
    /**
     * (HTTP) Fail silently (no output at all) on server errors.
     * 
     */
    @Export(name="fail", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> fail;

    /**
     * @return (HTTP) Fail silently (no output at all) on server errors.
     * 
     */
    public Output<Optional<Boolean>> fail() {
        return Codegen.optional(this.fail);
    }
    /**
     * Fail and exit on the first detected transfer error.
     * 
     */
    @Export(name="failEarly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> failEarly;

    /**
     * @return Fail and exit on the first detected transfer error.
     * 
     */
    public Output<Optional<Boolean>> failEarly() {
        return Codegen.optional(this.failEarly);
    }
    /**
     * (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
     * 
     */
    @Export(name="failWithBody", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> failWithBody;

    /**
     * @return (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
     * 
     */
    public Output<Optional<Boolean>> failWithBody() {
        return Codegen.optional(this.failWithBody);
    }
    /**
     * (TLS) Tells curl to use false start during the TLS handshake.
     * 
     */
    @Export(name="falseStart", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> falseStart;

    /**
     * @return (TLS) Tells curl to use false start during the TLS handshake.
     * 
     */
    public Output<Optional<Boolean>> falseStart() {
        return Codegen.optional(this.falseStart);
    }
    /**
     * (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
     * 
     */
    @Export(name="form", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> form;

    /**
     * @return (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
     * 
     */
    public Output<Optional<String>> form() {
        return Codegen.optional(this.form);
    }
    /**
     * (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
     * 
     */
    @Export(name="formEscape", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> formEscape;

    /**
     * @return (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
     * 
     */
    public Output<Optional<Boolean>> formEscape() {
        return Codegen.optional(this.formEscape);
    }
    /**
     * (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
     * 
     */
    @Export(name="formName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> formName;

    /**
     * @return (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
     * 
     */
    public Output<Optional<String>> formName() {
        return Codegen.optional(this.formName);
    }
    /**
     * (FTP) When an FTP server asks for &#39;account data&#39; after user name and password has been provided, this data is sent off using the ACCT command.
     * 
     */
    @Export(name="ftpAccount", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ftpAccount;

    /**
     * @return (FTP) When an FTP server asks for &#39;account data&#39; after user name and password has been provided, this data is sent off using the ACCT command.
     * 
     */
    public Output<Optional<String>> ftpAccount() {
        return Codegen.optional(this.ftpAccount);
    }
    /**
     * (FTP) If authenticating with the USER and PASS commands fails, send this command.
     * 
     */
    @Export(name="ftpAlternativeUser", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ftpAlternativeUser;

    /**
     * @return (FTP) If authenticating with the USER and PASS commands fails, send this command.
     * 
     */
    public Output<Optional<String>> ftpAlternativeUser() {
        return Codegen.optional(this.ftpAlternativeUser);
    }
    /**
     * (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
     * 
     */
    @Export(name="ftpCreateDirs", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ftpCreateDirs;

    /**
     * @return (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
     * 
     */
    public Output<Optional<Boolean>> ftpCreateDirs() {
        return Codegen.optional(this.ftpCreateDirs);
    }
    /**
     * (FTP) Control what method curl should use to reach a file on an FTP(S) server.
     * 
     */
    @Export(name="ftpMethod", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ftpMethod;

    /**
     * @return (FTP) Control what method curl should use to reach a file on an FTP(S) server.
     * 
     */
    public Output<Optional<String>> ftpMethod() {
        return Codegen.optional(this.ftpMethod);
    }
    /**
     * (FTP) Use passive mode for the data connection.
     * 
     */
    @Export(name="ftpPasv", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ftpPasv;

    /**
     * @return (FTP) Use passive mode for the data connection.
     * 
     */
    public Output<Optional<Boolean>> ftpPasv() {
        return Codegen.optional(this.ftpPasv);
    }
    /**
     * (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
     * 
     */
    @Export(name="ftpPort", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ftpPort;

    /**
     * @return (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
     * 
     */
    public Output<Optional<String>> ftpPort() {
        return Codegen.optional(this.ftpPort);
    }
    /**
     * (FTP) Tell curl to send a PRET command before PASV (and EPSV).
     * 
     */
    @Export(name="ftpPret", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ftpPret;

    /**
     * @return (FTP) Tell curl to send a PRET command before PASV (and EPSV).
     * 
     */
    public Output<Optional<Boolean>> ftpPret() {
        return Codegen.optional(this.ftpPret);
    }
    /**
     * (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl&#39;s PASV command when curl connects the data connection.
     * 
     */
    @Export(name="ftpSkipPasvIp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ftpSkipPasvIp;

    /**
     * @return (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl&#39;s PASV command when curl connects the data connection.
     * 
     */
    public Output<Optional<Boolean>> ftpSkipPasvIp() {
        return Codegen.optional(this.ftpSkipPasvIp);
    }
    /**
     * (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
     * 
     */
    @Export(name="ftpSslCccMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ftpSslCccMode;

    /**
     * @return (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
     * 
     */
    public Output<Optional<String>> ftpSslCccMode() {
        return Codegen.optional(this.ftpSslCccMode);
    }
    /**
     * At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    @Export(name="lifecycle", refs={CommandLifecycle.class}, tree="[0]")
    private Output</* @Nullable */ CommandLifecycle> lifecycle;

    /**
     * @return At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    public Output<Optional<CommandLifecycle>> lifecycle() {
        return Codegen.optional(this.lifecycle);
    }
    /**
     * TODO
     * 
     */
    @Export(name="stderr", refs={String.class}, tree="[0]")
    private Output<String> stderr;

    /**
     * @return TODO
     * 
     */
    public Output<String> stderr() {
        return this.stderr;
    }
    /**
     * TODO
     * 
     */
    @Export(name="stdin", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> stdin;

    /**
     * @return TODO
     * 
     */
    public Output<Optional<String>> stdin() {
        return Codegen.optional(this.stdin);
    }
    /**
     * TODO
     * 
     */
    @Export(name="stdout", refs={String.class}, tree="[0]")
    private Output<String> stdout;

    /**
     * @return TODO
     * 
     */
    public Output<String> stdout() {
        return this.stdout;
    }
    /**
     * TODO
     * 
     */
    @Export(name="triggers", refs={List.class,Object.class}, tree="[0,1]")
    private Output<List<Object>> triggers;

    /**
     * @return TODO
     * 
     */
    public Output<List<Object>> triggers() {
        return this.triggers;
    }
    /**
     * Corresponds to the URLs argument.
     * 
     */
    @Export(name="urls", refs={Either.class,String.class,List.class}, tree="[0,1,[2,1]]")
    private Output<Either<String,List<String>>> urls;

    /**
     * @return Corresponds to the URLs argument.
     * 
     */
    public Output<Either<String,List<String>>> urls() {
        return this.urls;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Curl(String name) {
        this(name, CurlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Curl(String name, CurlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Curl(String name, CurlArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes-the-hard-way:tools:Curl", name, args == null ? CurlArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
