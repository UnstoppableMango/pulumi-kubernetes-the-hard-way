// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.remote.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


/**
 * Props for resources that consume etcd configuration.
 * 
 */
public final class EtcdConfigurationPropsArgs extends com.pulumi.resources.ResourceArgs {

    public static final EtcdConfigurationPropsArgs Empty = new EtcdConfigurationPropsArgs();

    /**
     * Path to the certificate authority file on the remote system.
     * 
     */
    @Import(name="caFilePath", required=true)
    private Output<String> caFilePath;

    /**
     * @return Path to the certificate authority file on the remote system.
     * 
     */
    public Output<String> caFilePath() {
        return this.caFilePath;
    }

    /**
     * Path to the certificate file on the remote system.
     * 
     */
    @Import(name="certFilePath", required=true)
    private Output<String> certFilePath;

    /**
     * @return Path to the certificate file on the remote system.
     * 
     */
    public Output<String> certFilePath() {
        return this.certFilePath;
    }

    /**
     * Etcd&#39;s data directory.
     * 
     */
    @Import(name="dataDirectory", required=true)
    private Output<String> dataDirectory;

    /**
     * @return Etcd&#39;s data directory.
     * 
     */
    public Output<String> dataDirectory() {
        return this.dataDirectory;
    }

    /**
     * Path to the etcd binary.
     * 
     */
    @Import(name="etcdPath", required=true)
    private Output<String> etcdPath;

    /**
     * @return Path to the etcd binary.
     * 
     */
    public Output<String> etcdPath() {
        return this.etcdPath;
    }

    /**
     * Internal IP of the etcd node.
     * 
     */
    @Import(name="internalIp", required=true)
    private Output<String> internalIp;

    /**
     * @return Internal IP of the etcd node.
     * 
     */
    public Output<String> internalIp() {
        return this.internalIp;
    }

    /**
     * Path to the private key file on the remote system.
     * 
     */
    @Import(name="keyFilePath", required=true)
    private Output<String> keyFilePath;

    /**
     * @return Path to the private key file on the remote system.
     * 
     */
    public Output<String> keyFilePath() {
        return this.keyFilePath;
    }

    /**
     * Name of the etcd node.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the etcd node.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private EtcdConfigurationPropsArgs() {}

    private EtcdConfigurationPropsArgs(EtcdConfigurationPropsArgs $) {
        this.caFilePath = $.caFilePath;
        this.certFilePath = $.certFilePath;
        this.dataDirectory = $.dataDirectory;
        this.etcdPath = $.etcdPath;
        this.internalIp = $.internalIp;
        this.keyFilePath = $.keyFilePath;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EtcdConfigurationPropsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EtcdConfigurationPropsArgs $;

        public Builder() {
            $ = new EtcdConfigurationPropsArgs();
        }

        public Builder(EtcdConfigurationPropsArgs defaults) {
            $ = new EtcdConfigurationPropsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caFilePath Path to the certificate authority file on the remote system.
         * 
         * @return builder
         * 
         */
        public Builder caFilePath(Output<String> caFilePath) {
            $.caFilePath = caFilePath;
            return this;
        }

        /**
         * @param caFilePath Path to the certificate authority file on the remote system.
         * 
         * @return builder
         * 
         */
        public Builder caFilePath(String caFilePath) {
            return caFilePath(Output.of(caFilePath));
        }

        /**
         * @param certFilePath Path to the certificate file on the remote system.
         * 
         * @return builder
         * 
         */
        public Builder certFilePath(Output<String> certFilePath) {
            $.certFilePath = certFilePath;
            return this;
        }

        /**
         * @param certFilePath Path to the certificate file on the remote system.
         * 
         * @return builder
         * 
         */
        public Builder certFilePath(String certFilePath) {
            return certFilePath(Output.of(certFilePath));
        }

        /**
         * @param dataDirectory Etcd&#39;s data directory.
         * 
         * @return builder
         * 
         */
        public Builder dataDirectory(Output<String> dataDirectory) {
            $.dataDirectory = dataDirectory;
            return this;
        }

        /**
         * @param dataDirectory Etcd&#39;s data directory.
         * 
         * @return builder
         * 
         */
        public Builder dataDirectory(String dataDirectory) {
            return dataDirectory(Output.of(dataDirectory));
        }

        /**
         * @param etcdPath Path to the etcd binary.
         * 
         * @return builder
         * 
         */
        public Builder etcdPath(Output<String> etcdPath) {
            $.etcdPath = etcdPath;
            return this;
        }

        /**
         * @param etcdPath Path to the etcd binary.
         * 
         * @return builder
         * 
         */
        public Builder etcdPath(String etcdPath) {
            return etcdPath(Output.of(etcdPath));
        }

        /**
         * @param internalIp Internal IP of the etcd node.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(Output<String> internalIp) {
            $.internalIp = internalIp;
            return this;
        }

        /**
         * @param internalIp Internal IP of the etcd node.
         * 
         * @return builder
         * 
         */
        public Builder internalIp(String internalIp) {
            return internalIp(Output.of(internalIp));
        }

        /**
         * @param keyFilePath Path to the private key file on the remote system.
         * 
         * @return builder
         * 
         */
        public Builder keyFilePath(Output<String> keyFilePath) {
            $.keyFilePath = keyFilePath;
            return this;
        }

        /**
         * @param keyFilePath Path to the private key file on the remote system.
         * 
         * @return builder
         * 
         */
        public Builder keyFilePath(String keyFilePath) {
            return keyFilePath(Output.of(keyFilePath));
        }

        /**
         * @param name Name of the etcd node.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the etcd node.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public EtcdConfigurationPropsArgs build() {
            if ($.caFilePath == null) {
                throw new MissingRequiredPropertyException("EtcdConfigurationPropsArgs", "caFilePath");
            }
            if ($.certFilePath == null) {
                throw new MissingRequiredPropertyException("EtcdConfigurationPropsArgs", "certFilePath");
            }
            if ($.dataDirectory == null) {
                throw new MissingRequiredPropertyException("EtcdConfigurationPropsArgs", "dataDirectory");
            }
            if ($.etcdPath == null) {
                throw new MissingRequiredPropertyException("EtcdConfigurationPropsArgs", "etcdPath");
            }
            if ($.internalIp == null) {
                throw new MissingRequiredPropertyException("EtcdConfigurationPropsArgs", "internalIp");
            }
            if ($.keyFilePath == null) {
                throw new MissingRequiredPropertyException("EtcdConfigurationPropsArgs", "keyFilePath");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("EtcdConfigurationPropsArgs", "name");
            }
            return $;
        }
    }

}
