// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools;

import com.pulumi.command.remote.inputs.ConnectionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.tools.enums.CommandLifecycle;
import com.unmango.kubernetesthehardway.tools.enums.CurlCertType;
import com.unmango.kubernetesthehardway.tools.enums.CurlDelegationLevel;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CurlArgs extends com.pulumi.resources.ResourceArgs {

    public static final CurlArgs Empty = new CurlArgs();

    /**
     * (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
     * 
     */
    @Import(name="abstractUnixSocket")
    private @Nullable Output<String> abstractUnixSocket;

    /**
     * @return (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
     * 
     */
    public Optional<Output<String>> abstractUnixSocket() {
        return Optional.ofNullable(this.abstractUnixSocket);
    }

    /**
     * (HTTPS)  This  option enables the alt-svc parser in curl.
     * 
     */
    @Import(name="altSvc")
    private @Nullable Output<String> altSvc;

    /**
     * @return (HTTPS)  This  option enables the alt-svc parser in curl.
     * 
     */
    public Optional<Output<String>> altSvc() {
        return Optional.ofNullable(this.altSvc);
    }

    /**
     * (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
     * 
     */
    @Import(name="anyAuth")
    private @Nullable Output<Boolean> anyAuth;

    /**
     * @return (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
     * 
     */
    public Optional<Output<Boolean>> anyAuth() {
        return Optional.ofNullable(this.anyAuth);
    }

    /**
     * (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
     * 
     */
    @Import(name="append")
    private @Nullable Output<Boolean> append;

    /**
     * @return (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
     * 
     */
    public Optional<Output<Boolean>> append() {
        return Optional.ofNullable(this.append);
    }

    /**
     * Use AWS V4 signature authentication in the transfer.
     * 
     */
    @Import(name="awsSigv4")
    private @Nullable Output<String> awsSigv4;

    /**
     * @return Use AWS V4 signature authentication in the transfer.
     * 
     */
    public Optional<Output<String>> awsSigv4() {
        return Optional.ofNullable(this.awsSigv4);
    }

    /**
     * (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
     * 
     */
    @Import(name="basic")
    private @Nullable Output<Boolean> basic;

    /**
     * @return (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
     * 
     */
    public Optional<Output<Boolean>> basic() {
        return Optional.ofNullable(this.basic);
    }

    /**
     * Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    @Import(name="binaryPath")
    private @Nullable Output<String> binaryPath;

    /**
     * @return Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    public Optional<Output<String>> binaryPath() {
        return Optional.ofNullable(this.binaryPath);
    }

    /**
     * (TLS)  Tells curl to use the specified certificate file to verify the peer.
     * 
     */
    @Import(name="cacert")
    private @Nullable Output<String> cacert;

    /**
     * @return (TLS)  Tells curl to use the specified certificate file to verify the peer.
     * 
     */
    public Optional<Output<String>> cacert() {
        return Optional.ofNullable(this.cacert);
    }

    /**
     * (TLS) Tells curl to use the specified certificate directory to verify the peer.
     * 
     */
    @Import(name="capath")
    private @Nullable Output<String> capath;

    /**
     * @return (TLS) Tells curl to use the specified certificate directory to verify the peer.
     * 
     */
    public Optional<Output<String>> capath() {
        return Optional.ofNullable(this.capath);
    }

    /**
     * (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    /**
     * @return (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
     * 
     */
    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
     * 
     */
    @Import(name="certStatus")
    private @Nullable Output<Boolean> certStatus;

    /**
     * @return (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
     * 
     */
    public Optional<Output<Boolean>> certStatus() {
        return Optional.ofNullable(this.certStatus);
    }

    /**
     * (TLS) Tells curl what type the provided client certificate is using.
     * 
     */
    @Import(name="certType")
    private @Nullable Output<CurlCertType> certType;

    /**
     * @return (TLS) Tells curl what type the provided client certificate is using.
     * 
     */
    public Optional<Output<CurlCertType>> certType() {
        return Optional.ofNullable(this.certType);
    }

    /**
     * (TLS) Specifies which ciphers to use in the connection.
     * 
     */
    @Import(name="ciphers")
    private @Nullable Output<String> ciphers;

    /**
     * @return (TLS) Specifies which ciphers to use in the connection.
     * 
     */
    public Optional<Output<String>> ciphers() {
        return Optional.ofNullable(this.ciphers);
    }

    /**
     * (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
     * 
     */
    @Import(name="compressed")
    private @Nullable Output<Boolean> compressed;

    /**
     * @return (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
     * 
     */
    public Optional<Output<Boolean>> compressed() {
        return Optional.ofNullable(this.compressed);
    }

    /**
     * (SCP SFTP) Enables built-in SSH compression.
     * 
     */
    @Import(name="compressedSsh")
    private @Nullable Output<Boolean> compressedSsh;

    /**
     * @return (SCP SFTP) Enables built-in SSH compression.
     * 
     */
    public Optional<Output<Boolean>> compressedSsh() {
        return Optional.ofNullable(this.compressedSsh);
    }

    /**
     * Specify a text file to read curl arguments from.
     * 
     */
    @Import(name="config")
    private @Nullable Output<String> config;

    /**
     * @return Specify a text file to read curl arguments from.
     * 
     */
    public Optional<Output<String>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * Maximum  time  in seconds that you allow curl&#39;s connection to take.
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<Integer> connectTimeout;

    /**
     * @return Maximum  time  in seconds that you allow curl&#39;s connection to take.
     * 
     */
    public Optional<Output<Integer>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
     * 
     */
    @Import(name="connectTo")
    private @Nullable Output<String> connectTo;

    /**
     * @return For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
     * 
     */
    public Optional<Output<String>> connectTo() {
        return Optional.ofNullable(this.connectTo);
    }

    /**
     * Connection details for the remote system
     * 
     */
    @Import(name="connection", required=true)
    private Output<ConnectionArgs> connection;

    /**
     * @return Connection details for the remote system
     * 
     */
    public Output<ConnectionArgs> connection() {
        return this.connection;
    }

    /**
     * Continue/Resume a previous file transfer at the given offset.
     * 
     */
    @Import(name="continueAt")
    private @Nullable Output<String> continueAt;

    /**
     * @return Continue/Resume a previous file transfer at the given offset.
     * 
     */
    public Optional<Output<String>> continueAt() {
        return Optional.ofNullable(this.continueAt);
    }

    /**
     * (HTTP) Pass the data to the HTTP server in the Cookie header.
     * 
     */
    @Import(name="cookie")
    private @Nullable Output<String> cookie;

    /**
     * @return (HTTP) Pass the data to the HTTP server in the Cookie header.
     * 
     */
    public Optional<Output<String>> cookie() {
        return Optional.ofNullable(this.cookie);
    }

    /**
     * (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
     * 
     */
    @Import(name="cookieJar")
    private @Nullable Output<String> cookieJar;

    /**
     * @return (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
     * 
     */
    public Optional<Output<String>> cookieJar() {
        return Optional.ofNullable(this.cookieJar);
    }

    /**
     * When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
     * 
     */
    @Import(name="createDirs")
    private @Nullable Output<Boolean> createDirs;

    /**
     * @return When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
     * 
     */
    public Optional<Output<Boolean>> createDirs() {
        return Optional.ofNullable(this.createDirs);
    }

    /**
     * (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which &#39;mode&#39; to set on the file at creation time, instead of the default 0644.
     * 
     */
    @Import(name="createFileMode")
    private @Nullable Output<String> createFileMode;

    /**
     * @return (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which &#39;mode&#39; to set on the file at creation time, instead of the default 0644.
     * 
     */
    public Optional<Output<String>> createFileMode() {
        return Optional.ofNullable(this.createFileMode);
    }

    /**
     * (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
     * 
     */
    @Import(name="crlf")
    private @Nullable Output<Boolean> crlf;

    /**
     * @return (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
     * 
     */
    public Optional<Output<Boolean>> crlf() {
        return Optional.ofNullable(this.crlf);
    }

    /**
     * (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
     * 
     */
    @Import(name="crlfFile")
    private @Nullable Output<String> crlfFile;

    /**
     * @return (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
     * 
     */
    public Optional<Output<String>> crlfFile() {
        return Optional.ofNullable(this.crlfFile);
    }

    /**
     * (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
     * 
     */
    @Import(name="curves")
    private @Nullable Output<String> curves;

    /**
     * @return (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
     * 
     */
    public Optional<Output<String>> curves() {
        return Optional.ofNullable(this.curves);
    }

    /**
     * (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
     * 
     */
    @Import(name="data")
    private @Nullable Output<String> data;

    /**
     * @return (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
     * 
     */
    public Optional<Output<String>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * (HTTP) This is just an alias for -d, --data.
     * 
     */
    @Import(name="dataAscii")
    private @Nullable Output<String> dataAscii;

    /**
     * @return (HTTP) This is just an alias for -d, --data.
     * 
     */
    public Optional<Output<String>> dataAscii() {
        return Optional.ofNullable(this.dataAscii);
    }

    /**
     * (HTTP) This posts data exactly as specified with no extra processing whatsoever.
     * 
     */
    @Import(name="dataBinary")
    private @Nullable Output<String> dataBinary;

    /**
     * @return (HTTP) This posts data exactly as specified with no extra processing whatsoever.
     * 
     */
    public Optional<Output<String>> dataBinary() {
        return Optional.ofNullable(this.dataBinary);
    }

    /**
     * (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
     * 
     */
    @Import(name="dataRaw")
    private @Nullable Output<String> dataRaw;

    /**
     * @return (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
     * 
     */
    public Optional<Output<String>> dataRaw() {
        return Optional.ofNullable(this.dataRaw);
    }

    /**
     * (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
     * 
     */
    @Import(name="dataUrlEncode")
    private @Nullable Output<String> dataUrlEncode;

    /**
     * @return (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
     * 
     */
    public Optional<Output<String>> dataUrlEncode() {
        return Optional.ofNullable(this.dataUrlEncode);
    }

    /**
     * (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
     * 
     */
    @Import(name="delegation")
    private @Nullable Output<CurlDelegationLevel> delegation;

    /**
     * @return (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
     * 
     */
    public Optional<Output<CurlDelegationLevel>> delegation() {
        return Optional.ofNullable(this.delegation);
    }

    /**
     * (HTTP) Enables HTTP Digest authentication.
     * 
     */
    @Import(name="digest")
    private @Nullable Output<Boolean> digest;

    /**
     * @return (HTTP) Enables HTTP Digest authentication.
     * 
     */
    public Optional<Output<Boolean>> digest() {
        return Optional.ofNullable(this.digest);
    }

    /**
     * If used as the first parameter on the command line, the curlrc config file will not be read and used.
     * 
     */
    @Import(name="disable")
    private @Nullable Output<Boolean> disable;

    /**
     * @return If used as the first parameter on the command line, the curlrc config file will not be read and used.
     * 
     */
    public Optional<Output<Boolean>> disable() {
        return Optional.ofNullable(this.disable);
    }

    /**
     * (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
     * 
     */
    @Import(name="disableEprt")
    private @Nullable Output<Boolean> disableEprt;

    /**
     * @return (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
     * 
     */
    public Optional<Output<Boolean>> disableEprt() {
        return Optional.ofNullable(this.disableEprt);
    }

    /**
     * (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
     * 
     */
    @Import(name="disableEpsv")
    private @Nullable Output<Boolean> disableEpsv;

    /**
     * @return (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
     * 
     */
    public Optional<Output<Boolean>> disableEpsv() {
        return Optional.ofNullable(this.disableEpsv);
    }

    /**
     * (HTTP) This tells curl to exit if passed a url containing a username.
     * 
     */
    @Import(name="disallowUsernameInUrl")
    private @Nullable Output<Boolean> disallowUsernameInUrl;

    /**
     * @return (HTTP) This tells curl to exit if passed a url containing a username.
     * 
     */
    public Optional<Output<Boolean>> disallowUsernameInUrl() {
        return Optional.ofNullable(this.disallowUsernameInUrl);
    }

    /**
     * (DNS)  Tell  curl  to send outgoing DNS requests through &lt;interface&gt;.
     * 
     */
    @Import(name="dnsInterface")
    private @Nullable Output<String> dnsInterface;

    /**
     * @return (DNS)  Tell  curl  to send outgoing DNS requests through &lt;interface&gt;.
     * 
     */
    public Optional<Output<String>> dnsInterface() {
        return Optional.ofNullable(this.dnsInterface);
    }

    /**
     * (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    @Import(name="dnsIpv4Addr")
    private @Nullable Output<String> dnsIpv4Addr;

    /**
     * @return (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    public Optional<Output<String>> dnsIpv4Addr() {
        return Optional.ofNullable(this.dnsIpv4Addr);
    }

    /**
     * (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    @Import(name="dnsIpv6Addr")
    private @Nullable Output<String> dnsIpv6Addr;

    /**
     * @return (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address.
     * 
     */
    public Optional<Output<String>> dnsIpv6Addr() {
        return Optional.ofNullable(this.dnsIpv6Addr);
    }

    /**
     * Set the list of DNS servers to be used instead of the system default.
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<String> dnsServers;

    /**
     * @return Set the list of DNS servers to be used instead of the system default.
     * 
     */
    public Optional<Output<String>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Same as --cert-status but used for DoH (DNS-over-HTTPS).
     * 
     */
    @Import(name="dohCertStatus")
    private @Nullable Output<Boolean> dohCertStatus;

    /**
     * @return Same as --cert-status but used for DoH (DNS-over-HTTPS).
     * 
     */
    public Optional<Output<Boolean>> dohCertStatus() {
        return Optional.ofNullable(this.dohCertStatus);
    }

    /**
     * Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
     * 
     */
    @Import(name="dohInsecure")
    private @Nullable Output<Boolean> dohInsecure;

    /**
     * @return Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
     * 
     */
    public Optional<Output<Boolean>> dohInsecure() {
        return Optional.ofNullable(this.dohInsecure);
    }

    /**
     * Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
     * 
     */
    @Import(name="dohUrl")
    private @Nullable Output<String> dohUrl;

    /**
     * @return Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
     * 
     */
    public Optional<Output<String>> dohUrl() {
        return Optional.ofNullable(this.dohUrl);
    }

    /**
     * (HTTP FTP) Write the received protocol headers to the specified file.
     * 
     */
    @Import(name="dumpHeader")
    private @Nullable Output<String> dumpHeader;

    /**
     * @return (HTTP FTP) Write the received protocol headers to the specified file.
     * 
     */
    public Optional<Output<String>> dumpHeader() {
        return Optional.ofNullable(this.dumpHeader);
    }

    /**
     * (TLS) Specify the path name to the Entropy Gathering Daemon socket.
     * 
     */
    @Import(name="egdFile")
    private @Nullable Output<String> egdFile;

    /**
     * @return (TLS) Specify the path name to the Entropy Gathering Daemon socket.
     * 
     */
    public Optional<Output<String>> egdFile() {
        return Optional.ofNullable(this.egdFile);
    }

    /**
     * (TLS) Select the OpenSSL crypto engine to use for cipher operations.
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return (TLS) Select the OpenSSL crypto engine to use for cipher operations.
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * Environment variables
     * 
     */
    @Import(name="environment")
    private @Nullable Output<Map<String,String>> environment;

    /**
     * @return Environment variables
     * 
     */
    public Optional<Output<Map<String,String>>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
     * 
     */
    @Import(name="etagCompare")
    private @Nullable Output<String> etagCompare;

    /**
     * @return (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
     * 
     */
    public Optional<Output<String>> etagCompare() {
        return Optional.ofNullable(this.etagCompare);
    }

    /**
     * (HTTP) This option saves an HTTP ETag to the specified file.
     * 
     */
    @Import(name="etagSave")
    private @Nullable Output<String> etagSave;

    /**
     * @return (HTTP) This option saves an HTTP ETag to the specified file.
     * 
     */
    public Optional<Output<String>> etagSave() {
        return Optional.ofNullable(this.etagSave);
    }

    /**
     * (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
     * 
     */
    @Import(name="expect100Timeout")
    private @Nullable Output<Integer> expect100Timeout;

    /**
     * @return (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
     * 
     */
    public Optional<Output<Integer>> expect100Timeout() {
        return Optional.ofNullable(this.expect100Timeout);
    }

    /**
     * (HTTP) Fail silently (no output at all) on server errors.
     * 
     */
    @Import(name="fail")
    private @Nullable Output<Boolean> fail;

    /**
     * @return (HTTP) Fail silently (no output at all) on server errors.
     * 
     */
    public Optional<Output<Boolean>> fail() {
        return Optional.ofNullable(this.fail);
    }

    /**
     * Fail and exit on the first detected transfer error.
     * 
     */
    @Import(name="failEarly")
    private @Nullable Output<Boolean> failEarly;

    /**
     * @return Fail and exit on the first detected transfer error.
     * 
     */
    public Optional<Output<Boolean>> failEarly() {
        return Optional.ofNullable(this.failEarly);
    }

    /**
     * (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
     * 
     */
    @Import(name="failWithBody")
    private @Nullable Output<Boolean> failWithBody;

    /**
     * @return (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
     * 
     */
    public Optional<Output<Boolean>> failWithBody() {
        return Optional.ofNullable(this.failWithBody);
    }

    /**
     * (TLS) Tells curl to use false start during the TLS handshake.
     * 
     */
    @Import(name="falseStart")
    private @Nullable Output<Boolean> falseStart;

    /**
     * @return (TLS) Tells curl to use false start during the TLS handshake.
     * 
     */
    public Optional<Output<Boolean>> falseStart() {
        return Optional.ofNullable(this.falseStart);
    }

    /**
     * (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
     * 
     */
    @Import(name="form")
    private @Nullable Output<String> form;

    /**
     * @return (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
     * 
     */
    public Optional<Output<String>> form() {
        return Optional.ofNullable(this.form);
    }

    /**
     * (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
     * 
     */
    @Import(name="formEscape")
    private @Nullable Output<Boolean> formEscape;

    /**
     * @return (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
     * 
     */
    public Optional<Output<Boolean>> formEscape() {
        return Optional.ofNullable(this.formEscape);
    }

    /**
     * (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
     * 
     */
    @Import(name="formName")
    private @Nullable Output<String> formName;

    /**
     * @return (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
     * 
     */
    public Optional<Output<String>> formName() {
        return Optional.ofNullable(this.formName);
    }

    /**
     * (FTP) When an FTP server asks for &#39;account data&#39; after user name and password has been provided, this data is sent off using the ACCT command.
     * 
     */
    @Import(name="ftpAccount")
    private @Nullable Output<String> ftpAccount;

    /**
     * @return (FTP) When an FTP server asks for &#39;account data&#39; after user name and password has been provided, this data is sent off using the ACCT command.
     * 
     */
    public Optional<Output<String>> ftpAccount() {
        return Optional.ofNullable(this.ftpAccount);
    }

    /**
     * (FTP) If authenticating with the USER and PASS commands fails, send this command.
     * 
     */
    @Import(name="ftpAlternativeUser")
    private @Nullable Output<String> ftpAlternativeUser;

    /**
     * @return (FTP) If authenticating with the USER and PASS commands fails, send this command.
     * 
     */
    public Optional<Output<String>> ftpAlternativeUser() {
        return Optional.ofNullable(this.ftpAlternativeUser);
    }

    /**
     * (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
     * 
     */
    @Import(name="ftpCreateDirs")
    private @Nullable Output<Boolean> ftpCreateDirs;

    /**
     * @return (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
     * 
     */
    public Optional<Output<Boolean>> ftpCreateDirs() {
        return Optional.ofNullable(this.ftpCreateDirs);
    }

    /**
     * (FTP) Control what method curl should use to reach a file on an FTP(S) server.
     * 
     */
    @Import(name="ftpMethod")
    private @Nullable Output<String> ftpMethod;

    /**
     * @return (FTP) Control what method curl should use to reach a file on an FTP(S) server.
     * 
     */
    public Optional<Output<String>> ftpMethod() {
        return Optional.ofNullable(this.ftpMethod);
    }

    /**
     * (FTP) Use passive mode for the data connection.
     * 
     */
    @Import(name="ftpPasv")
    private @Nullable Output<Boolean> ftpPasv;

    /**
     * @return (FTP) Use passive mode for the data connection.
     * 
     */
    public Optional<Output<Boolean>> ftpPasv() {
        return Optional.ofNullable(this.ftpPasv);
    }

    /**
     * (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
     * 
     */
    @Import(name="ftpPort")
    private @Nullable Output<String> ftpPort;

    /**
     * @return (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
     * 
     */
    public Optional<Output<String>> ftpPort() {
        return Optional.ofNullable(this.ftpPort);
    }

    /**
     * (FTP) Tell curl to send a PRET command before PASV (and EPSV).
     * 
     */
    @Import(name="ftpPret")
    private @Nullable Output<Boolean> ftpPret;

    /**
     * @return (FTP) Tell curl to send a PRET command before PASV (and EPSV).
     * 
     */
    public Optional<Output<Boolean>> ftpPret() {
        return Optional.ofNullable(this.ftpPret);
    }

    /**
     * (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl&#39;s PASV command when curl connects the data connection.
     * 
     */
    @Import(name="ftpSkipPasvIp")
    private @Nullable Output<Boolean> ftpSkipPasvIp;

    /**
     * @return (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl&#39;s PASV command when curl connects the data connection.
     * 
     */
    public Optional<Output<Boolean>> ftpSkipPasvIp() {
        return Optional.ofNullable(this.ftpSkipPasvIp);
    }

    /**
     * (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
     * 
     */
    @Import(name="ftpSslCccMode")
    private @Nullable Output<String> ftpSslCccMode;

    /**
     * @return (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
     * 
     */
    public Optional<Output<String>> ftpSslCccMode() {
        return Optional.ofNullable(this.ftpSslCccMode);
    }

    /**
     * At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    @Import(name="lifecycle")
    private @Nullable CommandLifecycle lifecycle;

    /**
     * @return At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    public Optional<CommandLifecycle> lifecycle() {
        return Optional.ofNullable(this.lifecycle);
    }

    /**
     * TODO
     * 
     */
    @Import(name="stdin")
    private @Nullable Output<String> stdin;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<String>> stdin() {
        return Optional.ofNullable(this.stdin);
    }

    /**
     * TODO
     * 
     */
    @Import(name="triggers")
    private @Nullable Output<List<Object>> triggers;

    /**
     * @return TODO
     * 
     */
    public Optional<Output<List<Object>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    /**
     * Corresponds to the URLs argument.
     * 
     */
    @Import(name="urls", required=true)
    private Output<Either<String,List<String>>> urls;

    /**
     * @return Corresponds to the URLs argument.
     * 
     */
    public Output<Either<String,List<String>>> urls() {
        return this.urls;
    }

    private CurlArgs() {}

    private CurlArgs(CurlArgs $) {
        this.abstractUnixSocket = $.abstractUnixSocket;
        this.altSvc = $.altSvc;
        this.anyAuth = $.anyAuth;
        this.append = $.append;
        this.awsSigv4 = $.awsSigv4;
        this.basic = $.basic;
        this.binaryPath = $.binaryPath;
        this.cacert = $.cacert;
        this.capath = $.capath;
        this.cert = $.cert;
        this.certStatus = $.certStatus;
        this.certType = $.certType;
        this.ciphers = $.ciphers;
        this.compressed = $.compressed;
        this.compressedSsh = $.compressedSsh;
        this.config = $.config;
        this.connectTimeout = $.connectTimeout;
        this.connectTo = $.connectTo;
        this.connection = $.connection;
        this.continueAt = $.continueAt;
        this.cookie = $.cookie;
        this.cookieJar = $.cookieJar;
        this.createDirs = $.createDirs;
        this.createFileMode = $.createFileMode;
        this.crlf = $.crlf;
        this.crlfFile = $.crlfFile;
        this.curves = $.curves;
        this.data = $.data;
        this.dataAscii = $.dataAscii;
        this.dataBinary = $.dataBinary;
        this.dataRaw = $.dataRaw;
        this.dataUrlEncode = $.dataUrlEncode;
        this.delegation = $.delegation;
        this.digest = $.digest;
        this.disable = $.disable;
        this.disableEprt = $.disableEprt;
        this.disableEpsv = $.disableEpsv;
        this.disallowUsernameInUrl = $.disallowUsernameInUrl;
        this.dnsInterface = $.dnsInterface;
        this.dnsIpv4Addr = $.dnsIpv4Addr;
        this.dnsIpv6Addr = $.dnsIpv6Addr;
        this.dnsServers = $.dnsServers;
        this.dohCertStatus = $.dohCertStatus;
        this.dohInsecure = $.dohInsecure;
        this.dohUrl = $.dohUrl;
        this.dumpHeader = $.dumpHeader;
        this.egdFile = $.egdFile;
        this.engine = $.engine;
        this.environment = $.environment;
        this.etagCompare = $.etagCompare;
        this.etagSave = $.etagSave;
        this.expect100Timeout = $.expect100Timeout;
        this.fail = $.fail;
        this.failEarly = $.failEarly;
        this.failWithBody = $.failWithBody;
        this.falseStart = $.falseStart;
        this.form = $.form;
        this.formEscape = $.formEscape;
        this.formName = $.formName;
        this.ftpAccount = $.ftpAccount;
        this.ftpAlternativeUser = $.ftpAlternativeUser;
        this.ftpCreateDirs = $.ftpCreateDirs;
        this.ftpMethod = $.ftpMethod;
        this.ftpPasv = $.ftpPasv;
        this.ftpPort = $.ftpPort;
        this.ftpPret = $.ftpPret;
        this.ftpSkipPasvIp = $.ftpSkipPasvIp;
        this.ftpSslCccMode = $.ftpSslCccMode;
        this.lifecycle = $.lifecycle;
        this.stdin = $.stdin;
        this.triggers = $.triggers;
        this.urls = $.urls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CurlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CurlArgs $;

        public Builder() {
            $ = new CurlArgs();
        }

        public Builder(CurlArgs defaults) {
            $ = new CurlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param abstractUnixSocket (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
         * 
         * @return builder
         * 
         */
        public Builder abstractUnixSocket(@Nullable Output<String> abstractUnixSocket) {
            $.abstractUnixSocket = abstractUnixSocket;
            return this;
        }

        /**
         * @param abstractUnixSocket (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
         * 
         * @return builder
         * 
         */
        public Builder abstractUnixSocket(String abstractUnixSocket) {
            return abstractUnixSocket(Output.of(abstractUnixSocket));
        }

        /**
         * @param altSvc (HTTPS)  This  option enables the alt-svc parser in curl.
         * 
         * @return builder
         * 
         */
        public Builder altSvc(@Nullable Output<String> altSvc) {
            $.altSvc = altSvc;
            return this;
        }

        /**
         * @param altSvc (HTTPS)  This  option enables the alt-svc parser in curl.
         * 
         * @return builder
         * 
         */
        public Builder altSvc(String altSvc) {
            return altSvc(Output.of(altSvc));
        }

        /**
         * @param anyAuth (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
         * 
         * @return builder
         * 
         */
        public Builder anyAuth(@Nullable Output<Boolean> anyAuth) {
            $.anyAuth = anyAuth;
            return this;
        }

        /**
         * @param anyAuth (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
         * 
         * @return builder
         * 
         */
        public Builder anyAuth(Boolean anyAuth) {
            return anyAuth(Output.of(anyAuth));
        }

        /**
         * @param append (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
         * 
         * @return builder
         * 
         */
        public Builder append(@Nullable Output<Boolean> append) {
            $.append = append;
            return this;
        }

        /**
         * @param append (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
         * 
         * @return builder
         * 
         */
        public Builder append(Boolean append) {
            return append(Output.of(append));
        }

        /**
         * @param awsSigv4 Use AWS V4 signature authentication in the transfer.
         * 
         * @return builder
         * 
         */
        public Builder awsSigv4(@Nullable Output<String> awsSigv4) {
            $.awsSigv4 = awsSigv4;
            return this;
        }

        /**
         * @param awsSigv4 Use AWS V4 signature authentication in the transfer.
         * 
         * @return builder
         * 
         */
        public Builder awsSigv4(String awsSigv4) {
            return awsSigv4(Output.of(awsSigv4));
        }

        /**
         * @param basic (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
         * 
         * @return builder
         * 
         */
        public Builder basic(@Nullable Output<Boolean> basic) {
            $.basic = basic;
            return this;
        }

        /**
         * @param basic (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
         * 
         * @return builder
         * 
         */
        public Builder basic(Boolean basic) {
            return basic(Output.of(basic));
        }

        /**
         * @param binaryPath Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
         * 
         * @return builder
         * 
         */
        public Builder binaryPath(@Nullable Output<String> binaryPath) {
            $.binaryPath = binaryPath;
            return this;
        }

        /**
         * @param binaryPath Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
         * 
         * @return builder
         * 
         */
        public Builder binaryPath(String binaryPath) {
            return binaryPath(Output.of(binaryPath));
        }

        /**
         * @param cacert (TLS)  Tells curl to use the specified certificate file to verify the peer.
         * 
         * @return builder
         * 
         */
        public Builder cacert(@Nullable Output<String> cacert) {
            $.cacert = cacert;
            return this;
        }

        /**
         * @param cacert (TLS)  Tells curl to use the specified certificate file to verify the peer.
         * 
         * @return builder
         * 
         */
        public Builder cacert(String cacert) {
            return cacert(Output.of(cacert));
        }

        /**
         * @param capath (TLS) Tells curl to use the specified certificate directory to verify the peer.
         * 
         * @return builder
         * 
         */
        public Builder capath(@Nullable Output<String> capath) {
            $.capath = capath;
            return this;
        }

        /**
         * @param capath (TLS) Tells curl to use the specified certificate directory to verify the peer.
         * 
         * @return builder
         * 
         */
        public Builder capath(String capath) {
            return capath(Output.of(capath));
        }

        /**
         * @param cert (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        /**
         * @param certStatus (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
         * 
         * @return builder
         * 
         */
        public Builder certStatus(@Nullable Output<Boolean> certStatus) {
            $.certStatus = certStatus;
            return this;
        }

        /**
         * @param certStatus (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
         * 
         * @return builder
         * 
         */
        public Builder certStatus(Boolean certStatus) {
            return certStatus(Output.of(certStatus));
        }

        /**
         * @param certType (TLS) Tells curl what type the provided client certificate is using.
         * 
         * @return builder
         * 
         */
        public Builder certType(@Nullable Output<CurlCertType> certType) {
            $.certType = certType;
            return this;
        }

        /**
         * @param certType (TLS) Tells curl what type the provided client certificate is using.
         * 
         * @return builder
         * 
         */
        public Builder certType(CurlCertType certType) {
            return certType(Output.of(certType));
        }

        /**
         * @param ciphers (TLS) Specifies which ciphers to use in the connection.
         * 
         * @return builder
         * 
         */
        public Builder ciphers(@Nullable Output<String> ciphers) {
            $.ciphers = ciphers;
            return this;
        }

        /**
         * @param ciphers (TLS) Specifies which ciphers to use in the connection.
         * 
         * @return builder
         * 
         */
        public Builder ciphers(String ciphers) {
            return ciphers(Output.of(ciphers));
        }

        /**
         * @param compressed (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
         * 
         * @return builder
         * 
         */
        public Builder compressed(@Nullable Output<Boolean> compressed) {
            $.compressed = compressed;
            return this;
        }

        /**
         * @param compressed (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
         * 
         * @return builder
         * 
         */
        public Builder compressed(Boolean compressed) {
            return compressed(Output.of(compressed));
        }

        /**
         * @param compressedSsh (SCP SFTP) Enables built-in SSH compression.
         * 
         * @return builder
         * 
         */
        public Builder compressedSsh(@Nullable Output<Boolean> compressedSsh) {
            $.compressedSsh = compressedSsh;
            return this;
        }

        /**
         * @param compressedSsh (SCP SFTP) Enables built-in SSH compression.
         * 
         * @return builder
         * 
         */
        public Builder compressedSsh(Boolean compressedSsh) {
            return compressedSsh(Output.of(compressedSsh));
        }

        /**
         * @param config Specify a text file to read curl arguments from.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<String> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config Specify a text file to read curl arguments from.
         * 
         * @return builder
         * 
         */
        public Builder config(String config) {
            return config(Output.of(config));
        }

        /**
         * @param connectTimeout Maximum  time  in seconds that you allow curl&#39;s connection to take.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<Integer> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout Maximum  time  in seconds that you allow curl&#39;s connection to take.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(Integer connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param connectTo For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
         * 
         * @return builder
         * 
         */
        public Builder connectTo(@Nullable Output<String> connectTo) {
            $.connectTo = connectTo;
            return this;
        }

        /**
         * @param connectTo For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
         * 
         * @return builder
         * 
         */
        public Builder connectTo(String connectTo) {
            return connectTo(Output.of(connectTo));
        }

        /**
         * @param connection Connection details for the remote system
         * 
         * @return builder
         * 
         */
        public Builder connection(Output<ConnectionArgs> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection Connection details for the remote system
         * 
         * @return builder
         * 
         */
        public Builder connection(ConnectionArgs connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param continueAt Continue/Resume a previous file transfer at the given offset.
         * 
         * @return builder
         * 
         */
        public Builder continueAt(@Nullable Output<String> continueAt) {
            $.continueAt = continueAt;
            return this;
        }

        /**
         * @param continueAt Continue/Resume a previous file transfer at the given offset.
         * 
         * @return builder
         * 
         */
        public Builder continueAt(String continueAt) {
            return continueAt(Output.of(continueAt));
        }

        /**
         * @param cookie (HTTP) Pass the data to the HTTP server in the Cookie header.
         * 
         * @return builder
         * 
         */
        public Builder cookie(@Nullable Output<String> cookie) {
            $.cookie = cookie;
            return this;
        }

        /**
         * @param cookie (HTTP) Pass the data to the HTTP server in the Cookie header.
         * 
         * @return builder
         * 
         */
        public Builder cookie(String cookie) {
            return cookie(Output.of(cookie));
        }

        /**
         * @param cookieJar (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
         * 
         * @return builder
         * 
         */
        public Builder cookieJar(@Nullable Output<String> cookieJar) {
            $.cookieJar = cookieJar;
            return this;
        }

        /**
         * @param cookieJar (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
         * 
         * @return builder
         * 
         */
        public Builder cookieJar(String cookieJar) {
            return cookieJar(Output.of(cookieJar));
        }

        /**
         * @param createDirs When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
         * 
         * @return builder
         * 
         */
        public Builder createDirs(@Nullable Output<Boolean> createDirs) {
            $.createDirs = createDirs;
            return this;
        }

        /**
         * @param createDirs When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
         * 
         * @return builder
         * 
         */
        public Builder createDirs(Boolean createDirs) {
            return createDirs(Output.of(createDirs));
        }

        /**
         * @param createFileMode (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which &#39;mode&#39; to set on the file at creation time, instead of the default 0644.
         * 
         * @return builder
         * 
         */
        public Builder createFileMode(@Nullable Output<String> createFileMode) {
            $.createFileMode = createFileMode;
            return this;
        }

        /**
         * @param createFileMode (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which &#39;mode&#39; to set on the file at creation time, instead of the default 0644.
         * 
         * @return builder
         * 
         */
        public Builder createFileMode(String createFileMode) {
            return createFileMode(Output.of(createFileMode));
        }

        /**
         * @param crlf (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
         * 
         * @return builder
         * 
         */
        public Builder crlf(@Nullable Output<Boolean> crlf) {
            $.crlf = crlf;
            return this;
        }

        /**
         * @param crlf (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
         * 
         * @return builder
         * 
         */
        public Builder crlf(Boolean crlf) {
            return crlf(Output.of(crlf));
        }

        /**
         * @param crlfFile (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
         * 
         * @return builder
         * 
         */
        public Builder crlfFile(@Nullable Output<String> crlfFile) {
            $.crlfFile = crlfFile;
            return this;
        }

        /**
         * @param crlfFile (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
         * 
         * @return builder
         * 
         */
        public Builder crlfFile(String crlfFile) {
            return crlfFile(Output.of(crlfFile));
        }

        /**
         * @param curves (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
         * 
         * @return builder
         * 
         */
        public Builder curves(@Nullable Output<String> curves) {
            $.curves = curves;
            return this;
        }

        /**
         * @param curves (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
         * 
         * @return builder
         * 
         */
        public Builder curves(String curves) {
            return curves(Output.of(curves));
        }

        /**
         * @param data (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param dataAscii (HTTP) This is just an alias for -d, --data.
         * 
         * @return builder
         * 
         */
        public Builder dataAscii(@Nullable Output<String> dataAscii) {
            $.dataAscii = dataAscii;
            return this;
        }

        /**
         * @param dataAscii (HTTP) This is just an alias for -d, --data.
         * 
         * @return builder
         * 
         */
        public Builder dataAscii(String dataAscii) {
            return dataAscii(Output.of(dataAscii));
        }

        /**
         * @param dataBinary (HTTP) This posts data exactly as specified with no extra processing whatsoever.
         * 
         * @return builder
         * 
         */
        public Builder dataBinary(@Nullable Output<String> dataBinary) {
            $.dataBinary = dataBinary;
            return this;
        }

        /**
         * @param dataBinary (HTTP) This posts data exactly as specified with no extra processing whatsoever.
         * 
         * @return builder
         * 
         */
        public Builder dataBinary(String dataBinary) {
            return dataBinary(Output.of(dataBinary));
        }

        /**
         * @param dataRaw (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
         * 
         * @return builder
         * 
         */
        public Builder dataRaw(@Nullable Output<String> dataRaw) {
            $.dataRaw = dataRaw;
            return this;
        }

        /**
         * @param dataRaw (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
         * 
         * @return builder
         * 
         */
        public Builder dataRaw(String dataRaw) {
            return dataRaw(Output.of(dataRaw));
        }

        /**
         * @param dataUrlEncode (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
         * 
         * @return builder
         * 
         */
        public Builder dataUrlEncode(@Nullable Output<String> dataUrlEncode) {
            $.dataUrlEncode = dataUrlEncode;
            return this;
        }

        /**
         * @param dataUrlEncode (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
         * 
         * @return builder
         * 
         */
        public Builder dataUrlEncode(String dataUrlEncode) {
            return dataUrlEncode(Output.of(dataUrlEncode));
        }

        /**
         * @param delegation (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
         * 
         * @return builder
         * 
         */
        public Builder delegation(@Nullable Output<CurlDelegationLevel> delegation) {
            $.delegation = delegation;
            return this;
        }

        /**
         * @param delegation (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
         * 
         * @return builder
         * 
         */
        public Builder delegation(CurlDelegationLevel delegation) {
            return delegation(Output.of(delegation));
        }

        /**
         * @param digest (HTTP) Enables HTTP Digest authentication.
         * 
         * @return builder
         * 
         */
        public Builder digest(@Nullable Output<Boolean> digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param digest (HTTP) Enables HTTP Digest authentication.
         * 
         * @return builder
         * 
         */
        public Builder digest(Boolean digest) {
            return digest(Output.of(digest));
        }

        /**
         * @param disable If used as the first parameter on the command line, the curlrc config file will not be read and used.
         * 
         * @return builder
         * 
         */
        public Builder disable(@Nullable Output<Boolean> disable) {
            $.disable = disable;
            return this;
        }

        /**
         * @param disable If used as the first parameter on the command line, the curlrc config file will not be read and used.
         * 
         * @return builder
         * 
         */
        public Builder disable(Boolean disable) {
            return disable(Output.of(disable));
        }

        /**
         * @param disableEprt (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
         * 
         * @return builder
         * 
         */
        public Builder disableEprt(@Nullable Output<Boolean> disableEprt) {
            $.disableEprt = disableEprt;
            return this;
        }

        /**
         * @param disableEprt (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
         * 
         * @return builder
         * 
         */
        public Builder disableEprt(Boolean disableEprt) {
            return disableEprt(Output.of(disableEprt));
        }

        /**
         * @param disableEpsv (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
         * 
         * @return builder
         * 
         */
        public Builder disableEpsv(@Nullable Output<Boolean> disableEpsv) {
            $.disableEpsv = disableEpsv;
            return this;
        }

        /**
         * @param disableEpsv (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
         * 
         * @return builder
         * 
         */
        public Builder disableEpsv(Boolean disableEpsv) {
            return disableEpsv(Output.of(disableEpsv));
        }

        /**
         * @param disallowUsernameInUrl (HTTP) This tells curl to exit if passed a url containing a username.
         * 
         * @return builder
         * 
         */
        public Builder disallowUsernameInUrl(@Nullable Output<Boolean> disallowUsernameInUrl) {
            $.disallowUsernameInUrl = disallowUsernameInUrl;
            return this;
        }

        /**
         * @param disallowUsernameInUrl (HTTP) This tells curl to exit if passed a url containing a username.
         * 
         * @return builder
         * 
         */
        public Builder disallowUsernameInUrl(Boolean disallowUsernameInUrl) {
            return disallowUsernameInUrl(Output.of(disallowUsernameInUrl));
        }

        /**
         * @param dnsInterface (DNS)  Tell  curl  to send outgoing DNS requests through &lt;interface&gt;.
         * 
         * @return builder
         * 
         */
        public Builder dnsInterface(@Nullable Output<String> dnsInterface) {
            $.dnsInterface = dnsInterface;
            return this;
        }

        /**
         * @param dnsInterface (DNS)  Tell  curl  to send outgoing DNS requests through &lt;interface&gt;.
         * 
         * @return builder
         * 
         */
        public Builder dnsInterface(String dnsInterface) {
            return dnsInterface(Output.of(dnsInterface));
        }

        /**
         * @param dnsIpv4Addr (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address.
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv4Addr(@Nullable Output<String> dnsIpv4Addr) {
            $.dnsIpv4Addr = dnsIpv4Addr;
            return this;
        }

        /**
         * @param dnsIpv4Addr (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address.
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv4Addr(String dnsIpv4Addr) {
            return dnsIpv4Addr(Output.of(dnsIpv4Addr));
        }

        /**
         * @param dnsIpv6Addr (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address.
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv6Addr(@Nullable Output<String> dnsIpv6Addr) {
            $.dnsIpv6Addr = dnsIpv6Addr;
            return this;
        }

        /**
         * @param dnsIpv6Addr (DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address.
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv6Addr(String dnsIpv6Addr) {
            return dnsIpv6Addr(Output.of(dnsIpv6Addr));
        }

        /**
         * @param dnsServers Set the list of DNS servers to be used instead of the system default.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable Output<String> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers Set the list of DNS servers to be used instead of the system default.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dohCertStatus Same as --cert-status but used for DoH (DNS-over-HTTPS).
         * 
         * @return builder
         * 
         */
        public Builder dohCertStatus(@Nullable Output<Boolean> dohCertStatus) {
            $.dohCertStatus = dohCertStatus;
            return this;
        }

        /**
         * @param dohCertStatus Same as --cert-status but used for DoH (DNS-over-HTTPS).
         * 
         * @return builder
         * 
         */
        public Builder dohCertStatus(Boolean dohCertStatus) {
            return dohCertStatus(Output.of(dohCertStatus));
        }

        /**
         * @param dohInsecure Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
         * 
         * @return builder
         * 
         */
        public Builder dohInsecure(@Nullable Output<Boolean> dohInsecure) {
            $.dohInsecure = dohInsecure;
            return this;
        }

        /**
         * @param dohInsecure Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
         * 
         * @return builder
         * 
         */
        public Builder dohInsecure(Boolean dohInsecure) {
            return dohInsecure(Output.of(dohInsecure));
        }

        /**
         * @param dohUrl Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
         * 
         * @return builder
         * 
         */
        public Builder dohUrl(@Nullable Output<String> dohUrl) {
            $.dohUrl = dohUrl;
            return this;
        }

        /**
         * @param dohUrl Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
         * 
         * @return builder
         * 
         */
        public Builder dohUrl(String dohUrl) {
            return dohUrl(Output.of(dohUrl));
        }

        /**
         * @param dumpHeader (HTTP FTP) Write the received protocol headers to the specified file.
         * 
         * @return builder
         * 
         */
        public Builder dumpHeader(@Nullable Output<String> dumpHeader) {
            $.dumpHeader = dumpHeader;
            return this;
        }

        /**
         * @param dumpHeader (HTTP FTP) Write the received protocol headers to the specified file.
         * 
         * @return builder
         * 
         */
        public Builder dumpHeader(String dumpHeader) {
            return dumpHeader(Output.of(dumpHeader));
        }

        /**
         * @param egdFile (TLS) Specify the path name to the Entropy Gathering Daemon socket.
         * 
         * @return builder
         * 
         */
        public Builder egdFile(@Nullable Output<String> egdFile) {
            $.egdFile = egdFile;
            return this;
        }

        /**
         * @param egdFile (TLS) Specify the path name to the Entropy Gathering Daemon socket.
         * 
         * @return builder
         * 
         */
        public Builder egdFile(String egdFile) {
            return egdFile(Output.of(egdFile));
        }

        /**
         * @param engine (TLS) Select the OpenSSL crypto engine to use for cipher operations.
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine (TLS) Select the OpenSSL crypto engine to use for cipher operations.
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param environment Environment variables
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<Map<String,String>> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment variables
         * 
         * @return builder
         * 
         */
        public Builder environment(Map<String,String> environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param etagCompare (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
         * 
         * @return builder
         * 
         */
        public Builder etagCompare(@Nullable Output<String> etagCompare) {
            $.etagCompare = etagCompare;
            return this;
        }

        /**
         * @param etagCompare (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
         * 
         * @return builder
         * 
         */
        public Builder etagCompare(String etagCompare) {
            return etagCompare(Output.of(etagCompare));
        }

        /**
         * @param etagSave (HTTP) This option saves an HTTP ETag to the specified file.
         * 
         * @return builder
         * 
         */
        public Builder etagSave(@Nullable Output<String> etagSave) {
            $.etagSave = etagSave;
            return this;
        }

        /**
         * @param etagSave (HTTP) This option saves an HTTP ETag to the specified file.
         * 
         * @return builder
         * 
         */
        public Builder etagSave(String etagSave) {
            return etagSave(Output.of(etagSave));
        }

        /**
         * @param expect100Timeout (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
         * 
         * @return builder
         * 
         */
        public Builder expect100Timeout(@Nullable Output<Integer> expect100Timeout) {
            $.expect100Timeout = expect100Timeout;
            return this;
        }

        /**
         * @param expect100Timeout (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
         * 
         * @return builder
         * 
         */
        public Builder expect100Timeout(Integer expect100Timeout) {
            return expect100Timeout(Output.of(expect100Timeout));
        }

        /**
         * @param fail (HTTP) Fail silently (no output at all) on server errors.
         * 
         * @return builder
         * 
         */
        public Builder fail(@Nullable Output<Boolean> fail) {
            $.fail = fail;
            return this;
        }

        /**
         * @param fail (HTTP) Fail silently (no output at all) on server errors.
         * 
         * @return builder
         * 
         */
        public Builder fail(Boolean fail) {
            return fail(Output.of(fail));
        }

        /**
         * @param failEarly Fail and exit on the first detected transfer error.
         * 
         * @return builder
         * 
         */
        public Builder failEarly(@Nullable Output<Boolean> failEarly) {
            $.failEarly = failEarly;
            return this;
        }

        /**
         * @param failEarly Fail and exit on the first detected transfer error.
         * 
         * @return builder
         * 
         */
        public Builder failEarly(Boolean failEarly) {
            return failEarly(Output.of(failEarly));
        }

        /**
         * @param failWithBody (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
         * 
         * @return builder
         * 
         */
        public Builder failWithBody(@Nullable Output<Boolean> failWithBody) {
            $.failWithBody = failWithBody;
            return this;
        }

        /**
         * @param failWithBody (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
         * 
         * @return builder
         * 
         */
        public Builder failWithBody(Boolean failWithBody) {
            return failWithBody(Output.of(failWithBody));
        }

        /**
         * @param falseStart (TLS) Tells curl to use false start during the TLS handshake.
         * 
         * @return builder
         * 
         */
        public Builder falseStart(@Nullable Output<Boolean> falseStart) {
            $.falseStart = falseStart;
            return this;
        }

        /**
         * @param falseStart (TLS) Tells curl to use false start during the TLS handshake.
         * 
         * @return builder
         * 
         */
        public Builder falseStart(Boolean falseStart) {
            return falseStart(Output.of(falseStart));
        }

        /**
         * @param form (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
         * 
         * @return builder
         * 
         */
        public Builder form(@Nullable Output<String> form) {
            $.form = form;
            return this;
        }

        /**
         * @param form (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
         * 
         * @return builder
         * 
         */
        public Builder form(String form) {
            return form(Output.of(form));
        }

        /**
         * @param formEscape (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
         * 
         * @return builder
         * 
         */
        public Builder formEscape(@Nullable Output<Boolean> formEscape) {
            $.formEscape = formEscape;
            return this;
        }

        /**
         * @param formEscape (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
         * 
         * @return builder
         * 
         */
        public Builder formEscape(Boolean formEscape) {
            return formEscape(Output.of(formEscape));
        }

        /**
         * @param formName (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
         * 
         * @return builder
         * 
         */
        public Builder formName(@Nullable Output<String> formName) {
            $.formName = formName;
            return this;
        }

        /**
         * @param formName (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
         * 
         * @return builder
         * 
         */
        public Builder formName(String formName) {
            return formName(Output.of(formName));
        }

        /**
         * @param ftpAccount (FTP) When an FTP server asks for &#39;account data&#39; after user name and password has been provided, this data is sent off using the ACCT command.
         * 
         * @return builder
         * 
         */
        public Builder ftpAccount(@Nullable Output<String> ftpAccount) {
            $.ftpAccount = ftpAccount;
            return this;
        }

        /**
         * @param ftpAccount (FTP) When an FTP server asks for &#39;account data&#39; after user name and password has been provided, this data is sent off using the ACCT command.
         * 
         * @return builder
         * 
         */
        public Builder ftpAccount(String ftpAccount) {
            return ftpAccount(Output.of(ftpAccount));
        }

        /**
         * @param ftpAlternativeUser (FTP) If authenticating with the USER and PASS commands fails, send this command.
         * 
         * @return builder
         * 
         */
        public Builder ftpAlternativeUser(@Nullable Output<String> ftpAlternativeUser) {
            $.ftpAlternativeUser = ftpAlternativeUser;
            return this;
        }

        /**
         * @param ftpAlternativeUser (FTP) If authenticating with the USER and PASS commands fails, send this command.
         * 
         * @return builder
         * 
         */
        public Builder ftpAlternativeUser(String ftpAlternativeUser) {
            return ftpAlternativeUser(Output.of(ftpAlternativeUser));
        }

        /**
         * @param ftpCreateDirs (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
         * 
         * @return builder
         * 
         */
        public Builder ftpCreateDirs(@Nullable Output<Boolean> ftpCreateDirs) {
            $.ftpCreateDirs = ftpCreateDirs;
            return this;
        }

        /**
         * @param ftpCreateDirs (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
         * 
         * @return builder
         * 
         */
        public Builder ftpCreateDirs(Boolean ftpCreateDirs) {
            return ftpCreateDirs(Output.of(ftpCreateDirs));
        }

        /**
         * @param ftpMethod (FTP) Control what method curl should use to reach a file on an FTP(S) server.
         * 
         * @return builder
         * 
         */
        public Builder ftpMethod(@Nullable Output<String> ftpMethod) {
            $.ftpMethod = ftpMethod;
            return this;
        }

        /**
         * @param ftpMethod (FTP) Control what method curl should use to reach a file on an FTP(S) server.
         * 
         * @return builder
         * 
         */
        public Builder ftpMethod(String ftpMethod) {
            return ftpMethod(Output.of(ftpMethod));
        }

        /**
         * @param ftpPasv (FTP) Use passive mode for the data connection.
         * 
         * @return builder
         * 
         */
        public Builder ftpPasv(@Nullable Output<Boolean> ftpPasv) {
            $.ftpPasv = ftpPasv;
            return this;
        }

        /**
         * @param ftpPasv (FTP) Use passive mode for the data connection.
         * 
         * @return builder
         * 
         */
        public Builder ftpPasv(Boolean ftpPasv) {
            return ftpPasv(Output.of(ftpPasv));
        }

        /**
         * @param ftpPort (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
         * 
         * @return builder
         * 
         */
        public Builder ftpPort(@Nullable Output<String> ftpPort) {
            $.ftpPort = ftpPort;
            return this;
        }

        /**
         * @param ftpPort (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
         * 
         * @return builder
         * 
         */
        public Builder ftpPort(String ftpPort) {
            return ftpPort(Output.of(ftpPort));
        }

        /**
         * @param ftpPret (FTP) Tell curl to send a PRET command before PASV (and EPSV).
         * 
         * @return builder
         * 
         */
        public Builder ftpPret(@Nullable Output<Boolean> ftpPret) {
            $.ftpPret = ftpPret;
            return this;
        }

        /**
         * @param ftpPret (FTP) Tell curl to send a PRET command before PASV (and EPSV).
         * 
         * @return builder
         * 
         */
        public Builder ftpPret(Boolean ftpPret) {
            return ftpPret(Output.of(ftpPret));
        }

        /**
         * @param ftpSkipPasvIp (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl&#39;s PASV command when curl connects the data connection.
         * 
         * @return builder
         * 
         */
        public Builder ftpSkipPasvIp(@Nullable Output<Boolean> ftpSkipPasvIp) {
            $.ftpSkipPasvIp = ftpSkipPasvIp;
            return this;
        }

        /**
         * @param ftpSkipPasvIp (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl&#39;s PASV command when curl connects the data connection.
         * 
         * @return builder
         * 
         */
        public Builder ftpSkipPasvIp(Boolean ftpSkipPasvIp) {
            return ftpSkipPasvIp(Output.of(ftpSkipPasvIp));
        }

        /**
         * @param ftpSslCccMode (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
         * 
         * @return builder
         * 
         */
        public Builder ftpSslCccMode(@Nullable Output<String> ftpSslCccMode) {
            $.ftpSslCccMode = ftpSslCccMode;
            return this;
        }

        /**
         * @param ftpSslCccMode (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
         * 
         * @return builder
         * 
         */
        public Builder ftpSslCccMode(String ftpSslCccMode) {
            return ftpSslCccMode(Output.of(ftpSslCccMode));
        }

        /**
         * @param lifecycle At what stage(s) in the resource lifecycle should the command be run
         * 
         * @return builder
         * 
         */
        public Builder lifecycle(@Nullable CommandLifecycle lifecycle) {
            $.lifecycle = lifecycle;
            return this;
        }

        /**
         * @param stdin TODO
         * 
         * @return builder
         * 
         */
        public Builder stdin(@Nullable Output<String> stdin) {
            $.stdin = stdin;
            return this;
        }

        /**
         * @param stdin TODO
         * 
         * @return builder
         * 
         */
        public Builder stdin(String stdin) {
            return stdin(Output.of(stdin));
        }

        /**
         * @param triggers TODO
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable Output<List<Object>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers TODO
         * 
         * @return builder
         * 
         */
        public Builder triggers(List<Object> triggers) {
            return triggers(Output.of(triggers));
        }

        /**
         * @param triggers TODO
         * 
         * @return builder
         * 
         */
        public Builder triggers(Object... triggers) {
            return triggers(List.of(triggers));
        }

        /**
         * @param urls Corresponds to the URLs argument.
         * 
         * @return builder
         * 
         */
        public Builder urls(Output<Either<String,List<String>>> urls) {
            $.urls = urls;
            return this;
        }

        /**
         * @param urls Corresponds to the URLs argument.
         * 
         * @return builder
         * 
         */
        public Builder urls(Either<String,List<String>> urls) {
            return urls(Output.of(urls));
        }

        /**
         * @param urls Corresponds to the URLs argument.
         * 
         * @return builder
         * 
         */
        public Builder urls(String urls) {
            return urls(Either.ofLeft(urls));
        }

        /**
         * @param urls Corresponds to the URLs argument.
         * 
         * @return builder
         * 
         */
        public Builder urls(List<String> urls) {
            return urls(Either.ofRight(urls));
        }

        public CurlArgs build() {
            if ($.connection == null) {
                throw new MissingRequiredPropertyException("CurlArgs", "connection");
            }
            if ($.urls == null) {
                throw new MissingRequiredPropertyException("CurlArgs", "urls");
            }
            return $;
        }
    }

}
