// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.config.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.kubernetesthehardway.config.outputs.CniBridgeIpam;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CniBridgePluginConfiguration {
    /**
     * @return Bridge name.
     * 
     */
    private String bridge;
    /**
     * @return The version of the bridge plugin.
     * 
     */
    private @Nullable String cniVersion;
    /**
     * @return IP masq.
     * 
     */
    private Boolean ipMasq;
    /**
     * @return IPAM.
     * 
     */
    private CniBridgeIpam ipam;
    /**
     * @return Is gateway.
     * 
     */
    private Boolean isGateway;
    /**
     * @return Plugin name.
     * 
     */
    private String name;
    /**
     * @return The subnet to use.
     * 
     */
    private String subnet;
    /**
     * @return Plugin type.
     * 
     */
    private String type;

    private CniBridgePluginConfiguration() {}
    /**
     * @return Bridge name.
     * 
     */
    public String bridge() {
        return this.bridge;
    }
    /**
     * @return The version of the bridge plugin.
     * 
     */
    public Optional<String> cniVersion() {
        return Optional.ofNullable(this.cniVersion);
    }
    /**
     * @return IP masq.
     * 
     */
    public Boolean ipMasq() {
        return this.ipMasq;
    }
    /**
     * @return IPAM.
     * 
     */
    public CniBridgeIpam ipam() {
        return this.ipam;
    }
    /**
     * @return Is gateway.
     * 
     */
    public Boolean isGateway() {
        return this.isGateway;
    }
    /**
     * @return Plugin name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The subnet to use.
     * 
     */
    public String subnet() {
        return this.subnet;
    }
    /**
     * @return Plugin type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CniBridgePluginConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bridge;
        private @Nullable String cniVersion;
        private Boolean ipMasq;
        private CniBridgeIpam ipam;
        private Boolean isGateway;
        private String name;
        private String subnet;
        private String type;
        public Builder() {}
        public Builder(CniBridgePluginConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bridge = defaults.bridge;
    	      this.cniVersion = defaults.cniVersion;
    	      this.ipMasq = defaults.ipMasq;
    	      this.ipam = defaults.ipam;
    	      this.isGateway = defaults.isGateway;
    	      this.name = defaults.name;
    	      this.subnet = defaults.subnet;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder bridge(String bridge) {
            if (bridge == null) {
              throw new MissingRequiredPropertyException("CniBridgePluginConfiguration", "bridge");
            }
            this.bridge = bridge;
            return this;
        }
        @CustomType.Setter
        public Builder cniVersion(@Nullable String cniVersion) {

            this.cniVersion = cniVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ipMasq(Boolean ipMasq) {
            if (ipMasq == null) {
              throw new MissingRequiredPropertyException("CniBridgePluginConfiguration", "ipMasq");
            }
            this.ipMasq = ipMasq;
            return this;
        }
        @CustomType.Setter
        public Builder ipam(CniBridgeIpam ipam) {
            if (ipam == null) {
              throw new MissingRequiredPropertyException("CniBridgePluginConfiguration", "ipam");
            }
            this.ipam = ipam;
            return this;
        }
        @CustomType.Setter
        public Builder isGateway(Boolean isGateway) {
            if (isGateway == null) {
              throw new MissingRequiredPropertyException("CniBridgePluginConfiguration", "isGateway");
            }
            this.isGateway = isGateway;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("CniBridgePluginConfiguration", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            if (subnet == null) {
              throw new MissingRequiredPropertyException("CniBridgePluginConfiguration", "subnet");
            }
            this.subnet = subnet;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("CniBridgePluginConfiguration", "type");
            }
            this.type = type;
            return this;
        }
        public CniBridgePluginConfiguration build() {
            final var _resultValue = new CniBridgePluginConfiguration();
            _resultValue.bridge = bridge;
            _resultValue.cniVersion = cniVersion;
            _resultValue.ipMasq = ipMasq;
            _resultValue.ipam = ipam;
            _resultValue.isGateway = isGateway;
            _resultValue.name = name;
            _resultValue.subnet = subnet;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
