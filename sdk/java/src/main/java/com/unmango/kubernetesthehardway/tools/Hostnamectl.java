// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.kubernetesthehardway.tools;

import com.pulumi.command.remote.Command;
import com.pulumi.command.remote.outputs.Connection;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.unmango.kubernetesthehardway.Utilities;
import com.unmango.kubernetesthehardway.tools.HostnamectlArgs;
import com.unmango.kubernetesthehardway.tools.enums.CommandLifecycle;
import com.unmango.kubernetesthehardway.tools.enums.HostnamectlJsonMode;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Abstraction over the `hostnamectl` utility on a remote system.
 * 
 */
@ResourceType(type="kubernetes-the-hard-way:tools:Hostnamectl")
public class Hostnamectl extends com.pulumi.resources.ComponentResource {
    /**
     * The argument for the specified `command`.
     * 
     */
    @Export(name="arg", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> arg;

    /**
     * @return The argument for the specified `command`.
     * 
     */
    public Output<Optional<String>> arg() {
        return Codegen.optional(this.arg);
    }
    /**
     * Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    @Export(name="binaryPath", refs={String.class}, tree="[0]")
    private Output<String> binaryPath;

    /**
     * @return Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
     * 
     */
    public Output<String> binaryPath() {
        return this.binaryPath;
    }
    /**
     * The underlying command
     * 
     */
    @Export(name="command", refs={Command.class}, tree="[0]")
    private Output<Command> command;

    /**
     * @return The underlying command
     * 
     */
    public Output<Command> command() {
        return this.command;
    }
    /**
     * Connection details for the remote system
     * 
     */
    @Export(name="connection", refs={Connection.class}, tree="[0]")
    private Output<Connection> connection;

    /**
     * @return Connection details for the remote system
     * 
     */
    public Output<Connection> connection() {
        return this.connection;
    }
    /**
     * Environment variables
     * 
     */
    @Export(name="environment", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> environment;

    /**
     * @return Environment variables
     * 
     */
    public Output<Map<String,String>> environment() {
        return this.environment;
    }
    /**
     * Print a short help text and exit.
     * 
     */
    @Export(name="help", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> help;

    /**
     * @return Print a short help text and exit.
     * 
     */
    public Output<Boolean> help() {
        return this.help;
    }
    /**
     * Execute the operation remotely. Specify a hostname, or a username and hostname separated by &#39;@&#39;, to connect to.
     * 
     */
    @Export(name="host", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> host;

    /**
     * @return Execute the operation remotely. Specify a hostname, or a username and hostname separated by &#39;@&#39;, to connect to.
     * 
     */
    public Output<Optional<String>> host() {
        return Codegen.optional(this.host);
    }
    /**
     * Shows output formatted as JSON.
     * 
     */
    @Export(name="json", refs={HostnamectlJsonMode.class}, tree="[0]")
    private Output<HostnamectlJsonMode> json;

    /**
     * @return Shows output formatted as JSON.
     * 
     */
    public Output<HostnamectlJsonMode> json() {
        return this.json;
    }
    /**
     * At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    @Export(name="lifecycle", refs={CommandLifecycle.class}, tree="[0]")
    private Output</* @Nullable */ CommandLifecycle> lifecycle;

    /**
     * @return At what stage(s) in the resource lifecycle should the command be run
     * 
     */
    public Output<Optional<CommandLifecycle>> lifecycle() {
        return Codegen.optional(this.lifecycle);
    }
    /**
     * Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating &#39;@&#39; character.
     * 
     */
    @Export(name="machine", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> machine;

    /**
     * @return Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating &#39;@&#39; character.
     * 
     */
    public Output<Optional<String>> machine() {
        return Codegen.optional(this.machine);
    }
    /**
     * Do not query the user for authentication for privileged operations.
     * 
     */
    @Export(name="noAskPassword", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> noAskPassword;

    /**
     * @return Do not query the user for authentication for privileged operations.
     * 
     */
    public Output<Boolean> noAskPassword() {
        return this.noAskPassword;
    }
    /**
     * If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
     * 
     */
    @Export(name="pretty", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> pretty;

    /**
     * @return If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
     * 
     */
    public Output<Boolean> pretty() {
        return this.pretty;
    }
    /**
     * If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
     * 
     */
    @Export(name="static", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> static_;

    /**
     * @return If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
     * 
     */
    public Output<Boolean> static_() {
        return this.static_;
    }
    /**
     * TODO
     * 
     */
    @Export(name="stderr", refs={String.class}, tree="[0]")
    private Output<String> stderr;

    /**
     * @return TODO
     * 
     */
    public Output<String> stderr() {
        return this.stderr;
    }
    /**
     * TODO
     * 
     */
    @Export(name="stdin", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> stdin;

    /**
     * @return TODO
     * 
     */
    public Output<Optional<String>> stdin() {
        return Codegen.optional(this.stdin);
    }
    /**
     * TODO
     * 
     */
    @Export(name="stdout", refs={String.class}, tree="[0]")
    private Output<String> stdout;

    /**
     * @return TODO
     * 
     */
    public Output<String> stdout() {
        return this.stdout;
    }
    /**
     * If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
     * 
     */
    @Export(name="transient", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> transient_;

    /**
     * @return If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
     * 
     */
    public Output<Boolean> transient_() {
        return this.transient_;
    }
    /**
     * TODO
     * 
     */
    @Export(name="triggers", refs={List.class,Object.class}, tree="[0,1]")
    private Output<List<Object>> triggers;

    /**
     * @return TODO
     * 
     */
    public Output<List<Object>> triggers() {
        return this.triggers;
    }
    /**
     * Print a short version string and exit.
     * 
     */
    @Export(name="version", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> version;

    /**
     * @return Print a short version string and exit.
     * 
     */
    public Output<Boolean> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Hostnamectl(String name) {
        this(name, HostnamectlArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Hostnamectl(String name, HostnamectlArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Hostnamectl(String name, HostnamectlArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("kubernetes-the-hard-way:tools:Hostnamectl", name, args == null ? HostnamectlArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
