{
    "name": "kubernetes-the-hard-way",
    "description": "A Pulumi implementation of Kelsey Hightower's Kubernetes the Hard Way",
    "keywords": [
        "pulumi",
        "command",
        "tls",
        "kubernetes",
        "category/utility",
        "kind/component"
    ],
    "license": "Apache-2.0",
    "attribution": "https://github.com/kelseyhightower/kubernetes-the-hard-way",
    "repository": "https://github.com/UnstoppableMango/pulumi-kubernetes-the-hard-way",
    "pluginDownloadURL": "github://api.github.com/UnstoppableMango",
    "publisher": "UnstoppableMango",
    "language": {
        "csharp": {
            "dictionaryConstructors": true,
            "liftSingleValueMethodReturns": true,
            "packageReferences": {
                "Pulumi": "3.*",
                "Pulumi.Command": "0.9.*",
                "Pulumi.Kubernetes": "4.*",
                "Pulumi.Random": "4.*",
                "Pulumi.Tls": "5.*"
            },
            "rootNamespace": "UnMango"
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way",
            "liftSingleValueMethodReturns": true,
            "packageImportAliases": {
                "github.com/pulumi/pulumi-command/sdk/go/command/remote": "pulumiCommand",
                "github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way": "kthw"
            }
        },
        "java": {
            "basePackage": "com.unmango",
            "buildFiles": "gradle",
            "dependencies": {
                "com.google.code.findbugs:jsr305": "3.0.2",
                "com.google.code.gson:gson": "2.8.9",
                "com.pulumi:command": "0.10.0",
                "com.pulumi:kubernetes": "4.11.0",
                "com.pulumi:pulumi": "0.9.9",
                "com.pulumi:random": "4.16.1",
                "com.pulumi:tls": "5.0.2"
            },
            "gradleNexusPublishPluginVersion": "1.1.0",
            "liftSingleValueMethodReturns": true
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/command": "^0.10.0",
                "@pulumi/kubernetes": "^4.11.0",
                "@pulumi/pulumi": "^3.0.0",
                "@pulumi/random": "^4.16.1",
                "@pulumi/tls": "^5.0.2"
            },
            "devDependencies": {
                "@types/node": "^18",
                "typescript": "^4.6.2"
            },
            "liftSingleValueMethodReturns": true,
            "packageName": "@unmango/pulumi-kubernetes-the-hard-way"
        },
        "python": {
            "liftSingleValueMethodReturns": true,
            "pyproject": {
                "enabled": true
            },
            "requires": {
                "pulumi": "\u003e=3.91.1,\u003c4.0.0",
                "pulumi-command": "\u003e=0.10.0,\u003c1.0.0",
                "pulumi-kubernetes": "\u003e=4.11.0,\u003c5.0.0",
                "pulumi-random": "\u003e=4.16.1,\u003c5.0.0",
                "pulumi-tls": "\u003e=5.0.2,\u003c6.0.0"
            }
        }
    },
    "config": {},
    "types": {
        "kubernetes-the-hard-way:config:Cluster": {
            "properties": {
                "certificateAuthorityData": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "certificateAuthorityData",
                "server"
            ]
        },
        "kubernetes-the-hard-way:config:Context": {
            "properties": {
                "cluster": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cluster",
                "user"
            ]
        },
        "kubernetes-the-hard-way:config:Kubeconfig": {
            "properties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:Cluster"
                    }
                },
                "contexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:Context"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:User"
                    }
                }
            },
            "type": "object",
            "required": [
                "clusters",
                "contexts",
                "users"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigAdminOptions": {
            "properties": {
                "publicIp": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "admin"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigCluster": {
            "properties": {
                "cluster": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:Cluster"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cluster",
                "name"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigContext": {
            "properties": {
                "context": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:Context"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "name"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions": {
            "properties": {
                "publicIp": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "kube-controller-manager"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions": {
            "properties": {
                "publicIp": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "kube-proxy"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions": {
            "properties": {
                "publicIp": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "kube-scheduler"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigType": {
            "type": "string",
            "enum": [
                {
                    "value": "worker"
                },
                {
                    "value": "kube-proxy"
                },
                {
                    "value": "kube-controller-manager"
                },
                {
                    "value": "kube-scheduler"
                },
                {
                    "value": "admin"
                }
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigUser": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:User"
                }
            },
            "type": "object",
            "required": [
                "name",
                "user"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigWorkerOptions": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "publicIp": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "worker"
                }
            },
            "type": "object",
            "required": [
                "name",
                "publicIp"
            ]
        },
        "kubernetes-the-hard-way:config:PodManifest": {
            "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.\n\nThis resource waits until its status is ready before registering success\nfor create/update, and populating output properties from the current state of the resource.\nThe following conditions are used to determine whether the resource creation has\nsucceeded or failed:\n\n1. The Pod is scheduled (\"PodScheduled\"\" '.status.condition' is true).\n2. The Pod is initialized (\"Initialized\" '.status.condition' is true).\n3. The Pod is ready (\"Ready\" '.status.condition' is true) and the '.status.phase' is\n   set to \"Running\".\nOr (for Jobs): The Pod succeeded ('.status.phase' set to \"Succeeded\").\n\nIf the Pod has not reached a Ready state after 10 minutes, it will\ntime out and mark the resource update as Failed. You can override the default timeout value\nby setting the 'customTimeouts' option on the resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create a Pod with auto-naming\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kubernetes from \"@pulumi/kubernetes\";\n\nconst pod = new kubernetes.core.v1.Pod(\"pod\", {spec: {\n    containers: [{\n        image: \"nginx:1.14.2\",\n        name: \"nginx\",\n        ports: [{\n            containerPort: 80,\n        }],\n    }],\n}});\n```\n```python\nimport pulumi\nimport pulumi_kubernetes as kubernetes\n\npod = kubernetes.core.v1.Pod(\"pod\", spec=kubernetes.core.v1.PodSpecArgs(\n    containers=[kubernetes.core.v1.ContainerArgs(\n        image=\"nginx:1.14.2\",\n        name=\"nginx\",\n        ports=[kubernetes.core.v1.ContainerPortArgs(\n            container_port=80,\n        )],\n    )],\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Kubernetes = Pulumi.Kubernetes;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pod = new Kubernetes.Core.V1.Pod(\"pod\", new()\n    {\n        Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs\n        {\n            Containers = new[]\n            {\n                new Kubernetes.Types.Inputs.Core.V1.ContainerArgs\n                {\n                    Image = \"nginx:1.14.2\",\n                    Name = \"nginx\",\n                    Ports = new[]\n                    {\n                        new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs\n                        {\n                            ContainerPortValue = 80,\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n\n```\n```go\npackage main\n\nimport (\n\tcorev1 \"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := corev1.NewPod(ctx, \"pod\", \u0026corev1.PodArgs{\n\t\t\tSpec: \u0026corev1.PodSpecArgs{\n\t\t\t\tContainers: corev1.ContainerArray{\n\t\t\t\t\t\u0026corev1.ContainerArgs{\n\t\t\t\t\t\tImage: pulumi.String(\"nginx:1.14.2\"),\n\t\t\t\t\t\tName:  pulumi.String(\"nginx\"),\n\t\t\t\t\t\tPorts: corev1.ContainerPortArray{\n\t\t\t\t\t\t\t\u0026corev1.ContainerPortArgs{\n\t\t\t\t\t\t\t\tContainerPort: pulumi.Int(80),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.kubernetes.core_v1.Pod;\nimport com.pulumi.kubernetes.core_v1.PodArgs;\nimport com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pod = new Pod(\"pod\", PodArgs.builder()        \n            .spec(PodSpecArgs.builder()\n                .containers(ContainerArgs.builder()\n                    .image(\"nginx:1.14.2\")\n                    .name(\"nginx\")\n                    .ports(ContainerPortArgs.builder()\n                        .containerPort(80)\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\ndescription: Create a Pod with auto-naming\nname: yaml-example\nresources:\n    pod:\n        properties:\n            spec:\n                containers:\n                    - image: nginx:1.14.2\n                      name: nginx\n                      ports:\n                        - containerPort: 80\n        type: kubernetes:core/v1:Pod\nruntime: yaml\n```\n{{% /example %}}\n{{% example %}}\n### Create a Pod with a user-specified name\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kubernetes from \"@pulumi/kubernetes\";\n\nconst pod = new kubernetes.core.v1.Pod(\"pod\", {\n    metadata: {\n        name: \"nginx\",\n    },\n    spec: {\n        containers: [{\n            image: \"nginx:1.14.2\",\n            name: \"nginx\",\n            ports: [{\n                containerPort: 80,\n            }],\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_kubernetes as kubernetes\n\npod = kubernetes.core.v1.Pod(\"pod\",\n    metadata=kubernetes.meta.v1.ObjectMetaArgs(\n        name=\"nginx\",\n    ),\n    spec=kubernetes.core.v1.PodSpecArgs(\n        containers=[kubernetes.core.v1.ContainerArgs(\n            image=\"nginx:1.14.2\",\n            name=\"nginx\",\n            ports=[kubernetes.core.v1.ContainerPortArgs(\n                container_port=80,\n            )],\n        )],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Kubernetes = Pulumi.Kubernetes;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pod = new Kubernetes.Core.V1.Pod(\"pod\", new()\n    {\n        Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs\n        {\n            Name = \"nginx\",\n        },\n        Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs\n        {\n            Containers = new[]\n            {\n                new Kubernetes.Types.Inputs.Core.V1.ContainerArgs\n                {\n                    Image = \"nginx:1.14.2\",\n                    Name = \"nginx\",\n                    Ports = new[]\n                    {\n                        new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs\n                        {\n                            ContainerPortValue = 80,\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n\n```\n```go\npackage main\n\nimport (\n\tcorev1 \"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1\"\n\tmetav1 \"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := corev1.NewPod(ctx, \"pod\", \u0026corev1.PodArgs{\n\t\t\tMetadata: \u0026metav1.ObjectMetaArgs{\n\t\t\t\tName: pulumi.String(\"nginx\"),\n\t\t\t},\n\t\t\tSpec: \u0026corev1.PodSpecArgs{\n\t\t\t\tContainers: corev1.ContainerArray{\n\t\t\t\t\t\u0026corev1.ContainerArgs{\n\t\t\t\t\t\tImage: pulumi.String(\"nginx:1.14.2\"),\n\t\t\t\t\t\tName:  pulumi.String(\"nginx\"),\n\t\t\t\t\t\tPorts: corev1.ContainerPortArray{\n\t\t\t\t\t\t\t\u0026corev1.ContainerPortArgs{\n\t\t\t\t\t\t\t\tContainerPort: pulumi.Int(80),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.kubernetes.core_v1.Pod;\nimport com.pulumi.kubernetes.core_v1.PodArgs;\nimport com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;\nimport com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pod = new Pod(\"pod\", PodArgs.builder()        \n            .metadata(ObjectMetaArgs.builder()\n                .name(\"nginx\")\n                .build())\n            .spec(PodSpecArgs.builder()\n                .containers(ContainerArgs.builder()\n                    .image(\"nginx:1.14.2\")\n                    .name(\"nginx\")\n                    .ports(ContainerPortArgs.builder()\n                        .containerPort(80)\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\ndescription: Create a Pod with a user-specified name\nname: yaml-example\nresources:\n    pod:\n        properties:\n            metadata:\n                name: nginx\n            spec:\n                containers:\n                    - image: nginx:1.14.2\n                      name: nginx\n                      ports:\n                        - containerPort: 80\n        type: kubernetes:core/v1:Pod\nruntime: yaml\n```\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "const": "v1"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "const": "Pod"
                },
                "metadata": {
                    "$ref": "/kubernetes/v4.11.0/schema.json#/types/kubernetes:meta/v1:ObjectMeta",
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "spec": {
                    "$ref": "/kubernetes/v4.11.0/schema.json#/types/kubernetes:core/v1:PodSpec",
                    "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                },
                "status": {
                    "$ref": "/kubernetes/v4.11.0/schema.json#/types/kubernetes:core/v1:PodStatus",
                    "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:config:User": {
            "properties": {
                "clientCertificateData": {
                    "type": "string"
                },
                "clientKeyData": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientCertificateData",
                "clientKeyData"
            ]
        },
        "kubernetes-the-hard-way:remote:Architecture": {
            "description": "CPU architecture",
            "type": "string",
            "enum": [
                {
                    "value": "amd64"
                },
                {
                    "value": "arm64"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:CniBridgeIpam": {
            "description": "The CNI plugins IPAM",
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "IPAM ranges."
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "IPAM routes."
                },
                "type": {
                    "type": "string",
                    "description": "CNI bridge IPAM type"
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:remote:EtcdConfigurationProps": {
            "description": "Props for resources that consume etcd configuration.",
            "properties": {
                "caFilePath": {
                    "type": "string",
                    "description": "Path to the certificate authority file on the remote system."
                },
                "certFilePath": {
                    "type": "string",
                    "description": "Path to the certificate file on the remote system."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "Etcd's data directory."
                },
                "etcdPath": {
                    "type": "string",
                    "description": "Path to the etcd binary."
                },
                "internalIp": {
                    "type": "string",
                    "description": "Internal IP of the etcd node."
                },
                "keyFilePath": {
                    "type": "string",
                    "description": "Path to the private key file on the remote system."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the etcd node."
                }
            },
            "type": "object",
            "required": [
                "caFilePath",
                "certFilePath",
                "dataDirectory",
                "etcdPath",
                "internalIp",
                "keyFilePath",
                "name"
            ]
        },
        "kubernetes-the-hard-way:remote:EtcdNode": {
            "description": "Etcd node description.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture of the node."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The internal IP of the node."
                }
            },
            "type": "object",
            "required": [
                "connection",
                "internalIp"
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdInstallSection": {
            "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BInstall%5D%20Section%20Options",
            "properties": {
                "wantedBy": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable."
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:remote:SystemdServiceExitType": {
            "description": "Systemd service exit type.",
            "type": "string",
            "enum": [
                {
                    "value": "main"
                },
                {
                    "value": "cgroup"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdServiceRestart": {
            "description": "Systemd service restart behavior.",
            "type": "string",
            "enum": [
                {
                    "value": "no"
                },
                {
                    "value": "on-success"
                },
                {
                    "value": "on-failure"
                },
                {
                    "value": "on-abnormal"
                },
                {
                    "value": "on-watchdog"
                },
                {
                    "value": "on-abort"
                },
                {
                    "value": "always"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdServiceSection": {
            "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#",
            "properties": {
                "execStart": {
                    "type": "string",
                    "description": "Commands that are executed when this service is started."
                },
                "exitType": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceExitType",
                    "description": "Specifies when the manager should consider the service to be finished."
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Configures the time to sleep before restarting a service (as configured with Restart=)."
                },
                "type": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceType",
                    "description": "Configures the mechanism via which the service notifies the manager that the service start-up has finished."
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:remote:SystemdServiceType": {
            "description": "Systemd service type.",
            "type": "string",
            "enum": [
                {
                    "value": "simple"
                },
                {
                    "value": "exec"
                },
                {
                    "value": "forking"
                },
                {
                    "value": "oneshot"
                },
                {
                    "value": "dbus"
                },
                {
                    "value": "notify"
                },
                {
                    "value": "notify-reload"
                },
                {
                    "value": "idle"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdUnitSection": {
            "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#",
            "properties": {
                "bindsTo": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configures requirement dependencies, very similar in style to Requires=."
                },
                "description": {
                    "type": "string",
                    "description": "A short human readable title of the unit."
                },
                "documentation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A space-separated list of URIs referencing documentation for this unit or its configuration."
                },
                "requires": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Similar to Wants=, but declares a stronger requirement dependency."
                },
                "requisite": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately."
                },
                "wants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configures (weak) requirement dependencies on other units."
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:tls:Algorithm": {
            "description": "Private key algorithm.",
            "type": "string",
            "enum": [
                {
                    "value": "RSA"
                },
                {
                    "value": "ECDSA"
                },
                {
                    "value": "ED25519"
                }
            ]
        },
        "kubernetes-the-hard-way:tls:AllowedUsage": {
            "description": "Certificate allowed usage",
            "type": "string",
            "enum": [
                {
                    "name": "certSigning",
                    "value": "cert_signing"
                },
                {
                    "name": "clientAuth",
                    "value": "client_auth"
                },
                {
                    "name": "crlSigning",
                    "value": "crl_signing"
                },
                {
                    "name": "digitalSignature",
                    "value": "digital_signature"
                },
                {
                    "name": "keyEncipherment",
                    "value": "key_encipherment"
                },
                {
                    "name": "serverAuth",
                    "value": "server_auth"
                }
            ]
        },
        "kubernetes-the-hard-way:tls:Bundle": {
            "description": "A CA + Cert + Key bundle",
            "properties": {
                "caPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate authority data."
                },
                "certPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate data."
                },
                "keyPem": {
                    "type": "string",
                    "description": "The PEM encoded private key data"
                }
            },
            "type": "object",
            "required": [
                "caPem",
                "certPem",
                "keyPem"
            ]
        },
        "kubernetes-the-hard-way:tls:ClusterPkiNode": {
            "description": "TODO",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The IP address of the node"
                },
                "role": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:NodeRole",
                    "description": "The role a node should be configured for"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "role"
            ]
        },
        "kubernetes-the-hard-way:tls:EcdsaCurve": {
            "description": "ECDSA algorithm curve",
            "type": "string",
            "enum": [
                {
                    "value": "P224"
                },
                {
                    "value": "P256"
                },
                {
                    "value": "P384"
                },
                {
                    "value": "P521"
                }
            ]
        },
        "kubernetes-the-hard-way:tls:KeyPair": {
            "description": "A certificate and key pair",
            "properties": {
                "cert": {
                    "oneOf": [
                        {
                            "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/locallySignedCert:LocallySignedCert"
                        },
                        {
                            "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/selfSignedCert:SelfSignedCert"
                        }
                    ],
                    "description": "The certificate resource."
                },
                "certPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate data."
                },
                "key": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/privateKey:PrivateKey",
                    "description": "The private key resource."
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "The PEM encoded private key data."
                },
                "publicKeyPem": {
                    "type": "string",
                    "description": "The PEM encoded public key data."
                }
            },
            "type": "object",
            "required": [
                "cert",
                "certPem",
                "key",
                "privateKeyPem",
                "publicKeyPem"
            ]
        },
        "kubernetes-the-hard-way:tls:NodeRole": {
            "description": "The role a node will play in the final cluster",
            "type": "string",
            "enum": [
                {
                    "value": "controlplane"
                },
                {
                    "value": "worker"
                }
            ]
        },
        "kubernetes-the-hard-way:tools:ChmodOpts": {
            "description": "Abstraction over the `chmod` utility on a remote system.",
            "properties": {
                "changes": {
                    "type": "boolean",
                    "description": "Like verbose but report only when a change is made."
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Corresponds to the [FILE] argument."
                },
                "help": {
                    "type": "boolean",
                    "description": "Display help and exit."
                },
                "mode": {
                    "type": "string",
                    "description": "Modes may be absolute or symbolic. An absolute mode is an octal number..."
                },
                "noPreserveRoot": {
                    "type": "boolean",
                    "description": "Do not treat '/' specially (the default)."
                },
                "preserveRoot": {
                    "type": "boolean",
                    "description": "Fail to operate recursively on '/'."
                },
                "quiet": {
                    "type": "boolean",
                    "description": "Suppress most error messages. Same as `silent`."
                },
                "recursive": {
                    "type": "boolean",
                    "description": "Change files and directories recursively."
                },
                "reference": {
                    "type": "string",
                    "description": "Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link."
                },
                "silent": {
                    "type": "boolean",
                    "description": "Suppress most error messages. Same as `quiet`."
                },
                "version": {
                    "type": "boolean",
                    "description": "Output version information and exit."
                }
            },
            "type": "object",
            "required": [
                "files",
                "mode"
            ]
        },
        "kubernetes-the-hard-way:tools:CommandLifecycle": {
            "type": "string",
            "enum": [
                {
                    "value": "create"
                },
                {
                    "value": "update"
                },
                {
                    "value": "delete"
                }
            ]
        },
        "kubernetes-the-hard-way:tools:CurlCertType": {
            "type": "string",
            "enum": [
                {
                    "value": "PEM"
                },
                {
                    "value": "DER"
                },
                {
                    "value": "ENG"
                },
                {
                    "value": "P12"
                }
            ]
        },
        "kubernetes-the-hard-way:tools:CurlDelegationLevel": {
            "type": "string",
            "enum": [
                {
                    "value": "none"
                },
                {
                    "value": "policy"
                },
                {
                    "value": "always"
                }
            ]
        },
        "kubernetes-the-hard-way:tools:CurlOpts": {
            "description": "Abstraction over the `curl` utility on a remote system. Transfer a URL.",
            "properties": {
                "abstractUnixSocket": {
                    "type": "string",
                    "description": "(HTTP) Connect through an abstract Unix domain socket, instead of using the network."
                },
                "altSvc": {
                    "type": "string",
                    "description": "(HTTPS)  This  option enables the alt-svc parser in curl."
                },
                "anyAuth": {
                    "type": "boolean",
                    "description": "(HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support."
                },
                "append": {
                    "type": "boolean",
                    "description": "(FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it."
                },
                "awsSigv4": {
                    "type": "string",
                    "description": "Use AWS V4 signature authentication in the transfer."
                },
                "basic": {
                    "type": "boolean",
                    "description": "(HTTP) Tells curl to use HTTP Basic authentication with the remote host."
                },
                "cacert": {
                    "type": "string",
                    "description": "(TLS)  Tells curl to use the specified certificate file to verify the peer."
                },
                "capath": {
                    "type": "string",
                    "description": "(TLS) Tells curl to use the specified certificate directory to verify the peer."
                },
                "cert": {
                    "type": "string",
                    "description": "(TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol."
                },
                "certStatus": {
                    "type": "boolean",
                    "description": "(TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension."
                },
                "certType": {
                    "$ref": "#/types/kubernetes-the-hard-way:tools:CurlCertType",
                    "description": "(TLS) Tells curl what type the provided client certificate is using."
                },
                "ciphers": {
                    "type": "string",
                    "description": "(TLS) Specifies which ciphers to use in the connection."
                },
                "compressed": {
                    "type": "boolean",
                    "description": "(HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content."
                },
                "compressedSsh": {
                    "type": "boolean",
                    "description": "(SCP SFTP) Enables built-in SSH compression."
                },
                "config": {
                    "type": "string",
                    "description": "Specify a text file to read curl arguments from."
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "Maximum  time  in seconds that you allow curl's connection to take."
                },
                "connectTo": {
                    "type": "string",
                    "description": "For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead."
                },
                "continueAt": {
                    "type": "string",
                    "description": "Continue/Resume a previous file transfer at the given offset."
                },
                "cookie": {
                    "type": "string",
                    "description": "(HTTP) Pass the data to the HTTP server in the Cookie header."
                },
                "cookieJar": {
                    "type": "string",
                    "description": "(HTTP)  Specify  to which file you want curl to write all cookies after a completed operation."
                },
                "createDirs": {
                    "type": "boolean",
                    "description": "When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed."
                },
                "createFileMode": {
                    "type": "string",
                    "description": "(SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644."
                },
                "crlf": {
                    "type": "boolean",
                    "description": "(FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390)."
                },
                "crlfFile": {
                    "type": "string",
                    "description": "(TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked."
                },
                "curves": {
                    "type": "string",
                    "description": "(TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1."
                },
                "data": {
                    "type": "string",
                    "description": "(HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button."
                },
                "dataAscii": {
                    "type": "string",
                    "description": "(HTTP) This is just an alias for -d, --data."
                },
                "dataBinary": {
                    "type": "string",
                    "description": "(HTTP) This posts data exactly as specified with no extra processing whatsoever."
                },
                "dataRaw": {
                    "type": "string",
                    "description": "(HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character."
                },
                "dataUrlEncode": {
                    "type": "string",
                    "description": "(HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding."
                },
                "delegation": {
                    "$ref": "#/types/kubernetes-the-hard-way:tools:CurlDelegationLevel",
                    "description": "(GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials."
                },
                "digest": {
                    "type": "boolean",
                    "description": "(HTTP) Enables HTTP Digest authentication."
                },
                "disable": {
                    "type": "boolean",
                    "description": "If used as the first parameter on the command line, the curlrc config file will not be read and used."
                },
                "disableEprt": {
                    "type": "boolean",
                    "description": "(FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers"
                },
                "disableEpsv": {
                    "type": "boolean",
                    "description": "(FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers"
                },
                "disallowUsernameInUrl": {
                    "type": "boolean",
                    "description": "(HTTP) This tells curl to exit if passed a url containing a username."
                },
                "dnsInterface": {
                    "type": "string",
                    "description": "(DNS)  Tell  curl  to send outgoing DNS requests through \u003cinterface\u003e."
                },
                "dnsIpv4Addr": {
                    "type": "string",
                    "description": "(DNS) Tell curl to bind to \u003cip-address\u003e when making IPv4 DNS requests, so that the DNS requests originate from this address."
                },
                "dnsIpv6Addr": {
                    "type": "string",
                    "description": "(DNS) Tell curl to bind to \u003cip-address\u003e when making IPv6 DNS requests, so that the DNS requests originate from this address."
                },
                "dnsServers": {
                    "type": "string",
                    "description": "Set the list of DNS servers to be used instead of the system default."
                },
                "dohCertStatus": {
                    "type": "boolean",
                    "description": "Same as --cert-status but used for DoH (DNS-over-HTTPS)."
                },
                "dohInsecure": {
                    "type": "boolean",
                    "description": "Same as -k, --insecure but used for DoH (DNS-over-HTTPS)."
                },
                "dohUrl": {
                    "type": "string",
                    "description": "Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism."
                },
                "dumpHeader": {
                    "type": "string",
                    "description": "(HTTP FTP) Write the received protocol headers to the specified file."
                },
                "egdFile": {
                    "type": "string",
                    "description": "(TLS) Specify the path name to the Entropy Gathering Daemon socket."
                },
                "engine": {
                    "type": "string",
                    "description": "(TLS) Select the OpenSSL crypto engine to use for cipher operations."
                },
                "etagCompare": {
                    "type": "string",
                    "description": "(HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag."
                },
                "etagSave": {
                    "type": "string",
                    "description": "(HTTP) This option saves an HTTP ETag to the specified file."
                },
                "expect100Timeout": {
                    "type": "integer",
                    "description": "(HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request."
                },
                "fail": {
                    "type": "boolean",
                    "description": "(HTTP) Fail silently (no output at all) on server errors."
                },
                "failEarly": {
                    "type": "boolean",
                    "description": "Fail and exit on the first detected transfer error."
                },
                "failWithBody": {
                    "type": "boolean",
                    "description": "(HTTP)  Return an error on server errors where the HTTP response code is 400 or greater)."
                },
                "falseStart": {
                    "type": "boolean",
                    "description": "(TLS) Tells curl to use false start during the TLS handshake."
                },
                "form": {
                    "type": "string",
                    "description": "(HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button."
                },
                "formEscape": {
                    "type": "boolean",
                    "description": "(HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding."
                },
                "formName": {
                    "type": "string",
                    "description": "(HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally."
                },
                "ftpAccount": {
                    "type": "string",
                    "description": "(FTP) When an FTP server asks for 'account data' after user name and password has been provided, this data is sent off using the ACCT command."
                },
                "ftpAlternativeUser": {
                    "type": "string",
                    "description": "(FTP) If authenticating with the USER and PASS commands fails, send this command."
                },
                "ftpCreateDirs": {
                    "type": "boolean",
                    "description": "(FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail."
                },
                "ftpMethod": {
                    "type": "string",
                    "description": "(FTP) Control what method curl should use to reach a file on an FTP(S) server."
                },
                "ftpPasv": {
                    "type": "boolean",
                    "description": "(FTP) Use passive mode for the data connection."
                },
                "ftpPort": {
                    "type": "string",
                    "description": "(FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP."
                },
                "ftpPret": {
                    "type": "boolean",
                    "description": "(FTP) Tell curl to send a PRET command before PASV (and EPSV)."
                },
                "ftpSkipPasvIp": {
                    "type": "boolean",
                    "description": "(FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection."
                },
                "ftpSslCccMode": {
                    "type": "string",
                    "description": "(FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server."
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Corresponds to the URLs argument."
                }
            },
            "type": "object",
            "required": [
                "urls"
            ]
        },
        "kubernetes-the-hard-way:tools:EtcdctlCommand": {
            "type": "string",
            "enum": [
                {
                    "value": "member"
                },
                {
                    "value": "list"
                },
                {
                    "value": "version"
                }
            ]
        },
        "kubernetes-the-hard-way:tools:EtcdctlOpts": {
            "description": "Abstraction over the `etcdctl` utility on a remote system.",
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "TODO"
                },
                "cert": {
                    "type": "string",
                    "description": "TODO"
                },
                "commands": {
                    "$ref": "#/types/kubernetes-the-hard-way:tools:EtcdctlCommand",
                    "description": "TODO"
                },
                "endpoints": {
                    "type": "string",
                    "description": "TODO"
                },
                "key": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "kubernetes-the-hard-way:tools:HostnamectlCommand": {
            "type": "string",
            "enum": [
                {
                    "description": "Show system hostname and related information. If no command is specified, this is the implied default.",
                    "value": "status"
                },
                {
                    "description": "If no argument is given, print the system hostname. If an optional argument NAME is provided then the command changes the system hostname to NAME.",
                    "value": "hostname"
                },
                {
                    "description": "If no argument is given, print the icon name of the system. If an optional argument NAME is provided then the command changes the icon name to NAME.",
                    "value": "icon-name"
                },
                {
                    "description": "If no argument is given, print the chassis type. If an optional argument TYPE is provided then the command changes the chassis type to TYPE.",
                    "value": "chassis"
                },
                {
                    "description": "If no argument is given, print the deployment environment. If an optional argument ENVIRONMENT is provided then the command changes the deployment environment to ENVIRONMENT.",
                    "value": "deployment"
                },
                {
                    "description": "If no argument is given, print the location string for the system. If an optional argument LOCATION is provided then the command changes the location string for the system to LOCATION.",
                    "value": "location"
                }
            ]
        },
        "kubernetes-the-hard-way:tools:HostnamectlJsonMode": {
            "type": "string",
            "enum": [
                {
                    "value": "short"
                },
                {
                    "value": "pretty"
                },
                {
                    "value": "off"
                }
            ]
        },
        "kubernetes-the-hard-way:tools:HostnamectlOpts": {
            "description": "Abstraction over the `hostnamectl` utility on a remote system.",
            "properties": {
                "arg": {
                    "type": "string",
                    "description": "The argument for the specified `command`."
                },
                "command": {
                    "$ref": "#/types/kubernetes-the-hard-way:tools:HostnamectlCommand",
                    "description": "Corresponds to the {COMMAND} argument."
                },
                "help": {
                    "type": "boolean",
                    "description": "Print a short help text and exit."
                },
                "host": {
                    "type": "string",
                    "description": "Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to."
                },
                "json": {
                    "$ref": "#/types/kubernetes-the-hard-way:tools:HostnamectlJsonMode",
                    "description": "Shows output formatted as JSON."
                },
                "machine": {
                    "type": "string",
                    "description": "Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character."
                },
                "noAskPassword": {
                    "type": "boolean",
                    "description": "Do not query the user for authentication for privileged operations."
                },
                "pretty": {
                    "type": "boolean",
                    "description": "If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`."
                },
                "static": {
                    "type": "boolean",
                    "description": "If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`."
                },
                "transient": {
                    "type": "boolean",
                    "description": "If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`."
                },
                "version": {
                    "type": "boolean",
                    "description": "Print a short version string and exit."
                }
            },
            "type": "object",
            "required": [
                "command"
            ]
        },
        "kubernetes-the-hard-way:tools:MkdirOpts": {
            "description": "Abstraction over the `mkdir` utility on a remote system.",
            "properties": {
                "directory": {
                    "type": "string",
                    "description": "The fully qualified path of the directory on the remote system."
                },
                "parents": {
                    "type": "boolean",
                    "description": "Corresponds to the `--parents` option."
                },
                "removeOnDelete": {
                    "type": "boolean",
                    "description": "Remove the created directory when the `Mkdir` resource is deleted or updated."
                }
            },
            "type": "object",
            "required": [
                "directory"
            ]
        },
        "kubernetes-the-hard-way:tools:MktempOpts": {
            "description": "Abstraction over the `mktemp` utility on a remote system.",
            "properties": {
                "directory": {
                    "type": "boolean",
                    "description": "Corresponds to the `--directory` option."
                },
                "dryRun": {
                    "type": "boolean",
                    "description": "Corresponds to the `--dry-run` option."
                },
                "quiet": {
                    "type": "boolean",
                    "description": "Corresponds to the `--quiet` option."
                },
                "suffix": {
                    "type": "string",
                    "description": "Corresponds to the `--suffix` option."
                },
                "template": {
                    "type": "string",
                    "description": "Corresponds to the [TEMPLATE] argument."
                },
                "tmpdir": {
                    "type": "string",
                    "description": "Corresponds to the `--tmpdir` option."
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:tools:MvOpts": {
            "description": "Abstraction over the `mv` utility on a remote system.",
            "properties": {
                "backup": {
                    "type": "boolean",
                    "plain": true,
                    "description": "Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied."
                },
                "context": {
                    "type": "boolean",
                    "description": "Corresponds to the `--context` option."
                },
                "control": {
                    "type": "boolean",
                    "description": "Corresponds to the [CONTROL] argument for the `--backup` option."
                },
                "dest": {
                    "type": "string",
                    "description": "Corresponds to the [DEST] argument."
                },
                "directory": {
                    "type": "string",
                    "description": "Corresponds to the [DIRECTORY] argument."
                },
                "force": {
                    "type": "boolean",
                    "description": "Corresponds to the `--force` option."
                },
                "noClobber": {
                    "type": "boolean",
                    "description": "Corresponds to the `--no-clobber` option."
                },
                "noTargetDirectory": {
                    "type": "boolean",
                    "description": "Corresponds to the `--no-target-directory` option."
                },
                "source": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Corresponds to the [SOURCE] argument."
                },
                "stripTrailingSlashes": {
                    "type": "boolean",
                    "description": "Corresponds to the `--strip-trailing-slashes` option."
                },
                "suffix": {
                    "type": "string",
                    "description": "Corresponds to the `--suffix` option."
                },
                "targetDirectory": {
                    "type": "boolean",
                    "description": "Corresponds to the `--target-directory` option."
                },
                "update": {
                    "type": "boolean",
                    "description": "Corresponds to the `--update` option."
                },
                "verbose": {
                    "type": "boolean",
                    "description": "Corresponds to the `--verbose` option."
                }
            },
            "type": "object",
            "required": [
                "source"
            ]
        },
        "kubernetes-the-hard-way:tools:RmOpts": {
            "description": "Abstraction over the `rm` utility on a remote system.",
            "properties": {
                "dir": {
                    "type": "boolean",
                    "description": "Corresponds to the `--dir` option."
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Corresponds to the [FILE] argument."
                },
                "force": {
                    "type": "boolean",
                    "description": "Corresponds to the `--force` option."
                },
                "onDelete": {
                    "type": "boolean",
                    "description": "Whether rm should be run when the resource is created or deleted."
                },
                "recursive": {
                    "type": "boolean",
                    "description": "Corresponds to the `--recursive` option."
                },
                "verbose": {
                    "type": "boolean",
                    "description": "Corresponds to the `--verbose` option."
                }
            },
            "type": "object",
            "required": [
                "files"
            ]
        },
        "kubernetes-the-hard-way:tools:SedOpts": {
            "description": "Abstraction over the `sed` utility on a remote system.",
            "properties": {
                "debug": {
                    "type": "boolean",
                    "description": "annotate program execution."
                },
                "expressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "add the script to the commands to be executed."
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "add the contents of script-file to the commands to be executed."
                },
                "followSymlinks": {
                    "type": "boolean",
                    "description": "follow symlinks when processing in place"
                },
                "help": {
                    "type": "boolean",
                    "description": "display this help and exit."
                },
                "inPlace": {
                    "type": "string",
                    "description": "edit files in place (makes backup if SUFFIX supplied)"
                },
                "inputFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "corresponds to the [input-file]... argument(s)."
                },
                "lineLength": {
                    "type": "integer",
                    "description": "specify the desired line-wrap length for the `l' command"
                },
                "nullData": {
                    "type": "boolean",
                    "description": "separate lines by NUL characters"
                },
                "posix": {
                    "type": "boolean",
                    "description": "disable all GNU extensions."
                },
                "quiet": {
                    "type": "boolean",
                    "description": "suppress automatic printing of pattern space. Same as `silent`."
                },
                "regexpExtended": {
                    "type": "boolean",
                    "description": "use extended regular expressions in the script (for portability use POSIX -E)."
                },
                "sandbox": {
                    "type": "boolean",
                    "description": "operate in sandbox mode (disable e/r/w commands)."
                },
                "script": {
                    "type": "string",
                    "description": "script only if no other script."
                },
                "separate": {
                    "type": "boolean",
                    "description": "consider files as separate rather than as a single, continuous long stream."
                },
                "silent": {
                    "type": "boolean",
                    "description": "suppress automatic printing of pattern space. Same as `quiet`."
                },
                "unbuffered": {
                    "type": "boolean",
                    "description": "load minimal amounts of data from the input files and flush the output buffers more often."
                },
                "version": {
                    "type": "boolean",
                    "description": "output version information and exit."
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:tools:SystemctlCommand": {
            "type": "string",
            "enum": [
                {
                    "value": "bind"
                },
                {
                    "value": "cat"
                },
                {
                    "value": "clean"
                },
                {
                    "value": "daemon-reload"
                },
                {
                    "value": "disable"
                },
                {
                    "value": "enable"
                },
                {
                    "value": "freeze"
                },
                {
                    "value": "is-active"
                },
                {
                    "value": "is-enabled"
                },
                {
                    "value": "is-failed"
                },
                {
                    "value": "isolate"
                },
                {
                    "value": "kill"
                },
                {
                    "value": "list-automounts"
                },
                {
                    "value": "list-dependencies"
                },
                {
                    "value": "list-paths"
                },
                {
                    "value": "list-sockets"
                },
                {
                    "value": "list-timers"
                },
                {
                    "value": "list-units"
                },
                {
                    "value": "mask"
                },
                {
                    "value": "mount-image"
                },
                {
                    "value": "reenable"
                },
                {
                    "value": "reload"
                },
                {
                    "value": "reload-or-restart"
                },
                {
                    "value": "restart"
                },
                {
                    "value": "set-property"
                },
                {
                    "value": "show"
                },
                {
                    "value": "start"
                },
                {
                    "value": "status"
                },
                {
                    "value": "stop"
                },
                {
                    "value": "thaw"
                },
                {
                    "value": "try-reload-or-restart"
                },
                {
                    "value": "try-restart"
                },
                {
                    "value": "unmask"
                }
            ]
        },
        "kubernetes-the-hard-way:tools:SystemctlOpts": {
            "description": "Abstraction over the `systemctl` utility on a remote system.",
            "properties": {
                "command": {
                    "$ref": "#/types/kubernetes-the-hard-way:tools:SystemctlCommand",
                    "plain": true,
                    "description": "Corresponds to the COMMAND argument."
                },
                "pattern": {
                    "type": "string",
                    "description": "Corresponds to the [PATTERN] argument"
                },
                "unit": {
                    "type": "string",
                    "description": "Corresponds to the [UNIT...] argument."
                }
            },
            "type": "object",
            "required": [
                "command"
            ]
        },
        "kubernetes-the-hard-way:tools:TarOpts": {
            "description": "Abstraction over the `tar` utility on a remote system.",
            "properties": {
                "archive": {
                    "type": "string",
                    "description": "Corresponds to the [ARCHIVE] argument."
                },
                "directory": {
                    "type": "string",
                    "description": "Corresponds to the `--directory` option."
                },
                "extract": {
                    "type": "boolean",
                    "description": "Corresponds to the `--extract` option."
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Corresponds to the [FILE] argument."
                },
                "gzip": {
                    "type": "boolean",
                    "description": "Corresponds to the `--gzip` option."
                },
                "onDelete": {
                    "type": "boolean",
                    "description": "Whether rm should be run when the resource is created or deleted."
                },
                "recursive": {
                    "type": "boolean",
                    "description": "Corresponds to the `--recursive` option."
                },
                "stripComponents": {
                    "type": "integer",
                    "description": "Corresponds to the `--strip-components` option."
                }
            },
            "type": "object",
            "required": [
                "archive"
            ]
        },
        "kubernetes-the-hard-way:tools:TeeMode": {
            "type": "string",
            "enum": [
                {
                    "value": "warn"
                },
                {
                    "value": "warn-nopipe"
                },
                {
                    "value": "exit"
                },
                {
                    "value": "exit-nopipe"
                }
            ]
        },
        "kubernetes-the-hard-way:tools:TeeOpts": {
            "description": "Abstraction over the `rm` utility on a remote system.",
            "properties": {
                "append": {
                    "type": "boolean",
                    "description": "Append to the given FILEs, do not overwrite"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Corresponds to the [FILE] argument."
                },
                "ignoreInterrupts": {
                    "type": "boolean",
                    "description": "Ignore interrupt signals."
                },
                "outputError": {
                    "$ref": "#/types/kubernetes-the-hard-way:tools:TeeMode",
                    "description": "Set behavior on write error."
                },
                "pipe": {
                    "type": "boolean",
                    "description": "Operate in a more appropriate MODE with pipes."
                },
                "version": {
                    "type": "boolean",
                    "description": "Output version information and exit."
                }
            },
            "type": "object",
            "required": [
                "files"
            ]
        },
        "kubernetes-the-hard-way:tools:WgetOpts": {
            "description": "Abstraction over the `wget` utility on a remote system.",
            "properties": {
                "directoryPrefix": {
                    "type": "string",
                    "description": "The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory)."
                },
                "httpsOnly": {
                    "type": "boolean",
                    "description": "When in recursive mode, only HTTPS links are followed."
                },
                "noVerbose": {
                    "type": "boolean",
                    "description": "Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed."
                },
                "outputDocument": {
                    "type": "string",
                    "description": "The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file."
                },
                "quiet": {
                    "type": "boolean",
                    "description": "Turn off Wget's output."
                },
                "timestamping": {
                    "type": "boolean",
                    "description": "Turn on time-stamping."
                },
                "url": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Corresponds to the [URL...] argument."
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        }
    },
    "provider": {},
    "resources": {
        "kubernetes-the-hard-way:config:KubeVipManifest": {
            "description": "Pseudo resource for generating the kube-vip manifest.",
            "properties": {
                "result": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:PodManifest"
                },
                "yaml": {
                    "type": "string",
                    "description": "The yaml representation of the manifest"
                }
            },
            "required": [
                "result",
                "yaml"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "TODO"
                },
                "bgpAs": {
                    "type": "integer",
                    "description": "TODO"
                },
                "bgpEnable": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "bgpPeerAddress": {
                    "type": "string",
                    "description": "TODO"
                },
                "bgpPeerAs": {
                    "type": "integer",
                    "description": "TODO"
                },
                "bgpPeerPass": {
                    "type": "string",
                    "description": "TODO"
                },
                "bgpPeers": {
                    "type": "string",
                    "description": "TODO"
                },
                "bgpRouterId": {
                    "type": "string",
                    "description": "TODO"
                },
                "cpEnable": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "cpNamespace": {
                    "type": "string",
                    "description": "TODO"
                },
                "image": {
                    "type": "string",
                    "description": "Override the kube-vip image."
                },
                "kubeconfigPath": {
                    "type": "string",
                    "description": "Path to the kubeconfig on the remote host."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the static pod. Defaults to kube-vip.",
                    "default": "kube-vip"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace for the static pod. Defaults to kube-system.",
                    "default": "kube-system"
                },
                "port": {
                    "type": "integer",
                    "description": "TODO",
                    "default": 6443
                },
                "svcEnable": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "version": {
                    "type": "string",
                    "description": "Version of kube-vip to use."
                },
                "vipArp": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "vipCidr": {
                    "type": "integer",
                    "description": "TODO"
                },
                "vipDdns": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "vipInterface": {
                    "type": "string",
                    "description": "TODO"
                },
                "vipLeaderElection": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "vipLeaseDuration": {
                    "type": "integer",
                    "description": "TODO"
                },
                "vipRenewDeadline": {
                    "type": "integer",
                    "description": "TODO"
                },
                "vipRetryPeriod": {
                    "type": "integer",
                    "description": "TODO"
                }
            },
            "requiredInputs": [
                "address",
                "kubeconfigPath",
                "vipCidr"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:CniBridgePluginConfiguration": {
            "description": "The CNI bridge plugin configuration.",
            "properties": {
                "bridge": {
                    "type": "string",
                    "description": "Bridge name."
                },
                "cniVersion": {
                    "type": "string",
                    "description": "CNI version."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "file": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The file on the remote system."
                },
                "ipMasq": {
                    "type": "boolean",
                    "description": "IP masq."
                },
                "ipam": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:CniBridgeIpam",
                    "description": "IPAM"
                },
                "isGateway": {
                    "type": "boolean",
                    "description": "Is gateway."
                },
                "name": {
                    "type": "string",
                    "description": "CNI plugin name."
                },
                "path": {
                    "type": "string",
                    "description": "Path to put the configuration file on the remote system"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to use."
                },
                "type": {
                    "type": "string",
                    "description": "CNI plugin type."
                }
            },
            "required": [
                "connection",
                "bridge",
                "cniVersion",
                "isGateway",
                "ipMasq",
                "ipam",
                "name",
                "path",
                "type"
            ],
            "inputProperties": {
                "bridge": {
                    "type": "string",
                    "description": "Bridge name."
                },
                "cniVersion": {
                    "type": "string",
                    "description": "CNI version."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "ipMasq": {
                    "type": "boolean",
                    "description": "IP masq."
                },
                "ipam": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:CniBridgeIpam",
                    "description": "IPAM"
                },
                "isGateway": {
                    "type": "boolean",
                    "description": "Is gateway."
                },
                "name": {
                    "type": "string",
                    "description": "CNI plugin name."
                },
                "path": {
                    "type": "string",
                    "description": "Path to put the configuration file on the remote system"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to use."
                },
                "type": {
                    "type": "string",
                    "description": "CNI plugin type."
                }
            },
            "requiredInputs": [
                "connection"
            ]
        },
        "kubernetes-the-hard-way:remote:CniLoopbackPluginConfiguration": {
            "description": "The CNI loopback plugin configuration.",
            "properties": {
                "cniVersion": {
                    "type": "string",
                    "description": "CNI version."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "file": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The file on the remote system."
                },
                "name": {
                    "type": "string",
                    "description": "CNI plugin name."
                },
                "path": {
                    "type": "string",
                    "description": "Path to put the configuration file on the remote system"
                },
                "type": {
                    "type": "string",
                    "description": "CNI plugin type."
                }
            },
            "required": [
                "connection",
                "cniVersion",
                "name",
                "path",
                "type"
            ],
            "inputProperties": {
                "cniVersion": {
                    "type": "string",
                    "description": "CNI version."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "name": {
                    "type": "string",
                    "description": "CNI plugin name."
                },
                "path": {
                    "type": "string",
                    "description": "Path to put the configuration file on the remote system"
                },
                "type": {
                    "type": "string",
                    "description": "CNI plugin type."
                }
            },
            "requiredInputs": [
                "connection"
            ]
        },
        "kubernetes-the-hard-way:remote:CniPluginsInstall": {
            "description": "Installs cni-plugins on a remote system",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "archiveName": {
                    "type": "string",
                    "description": "The name of the downloaded archive."
                },
                "bandwidthMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The bandwidth mv operation."
                },
                "bandwidthPath": {
                    "type": "string",
                    "description": "The bandwidth path on the remote system"
                },
                "bridgeMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The bridge mv operation."
                },
                "bridgePath": {
                    "type": "string",
                    "description": "The bridge path on the remote system"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dhcpMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The dhcp mv operation."
                },
                "dhcpPath": {
                    "type": "string",
                    "description": "The dhcp path on the remote system"
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "dummyMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The dummy mv operation."
                },
                "dummyPath": {
                    "type": "string",
                    "description": "The dummy path on the remote system"
                },
                "firewallMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The firewall mv operation."
                },
                "firewallPath": {
                    "type": "string",
                    "description": "The firewall path on the remote system"
                },
                "hostDeviceMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The hostDevice mv operation."
                },
                "hostDevicePath": {
                    "type": "string",
                    "description": "The hostDevice path on the remote system"
                },
                "hostLocalMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The hostLocal mv operation."
                },
                "hostLocalPath": {
                    "type": "string",
                    "description": "The hostLocal path on the remote system"
                },
                "ipvlanMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The ipvlan mv operation."
                },
                "ipvlanPath": {
                    "type": "string",
                    "description": "The ipvlan path on the remote system"
                },
                "loopbackMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The loopback mv operation."
                },
                "loopbackPath": {
                    "type": "string",
                    "description": "The loopback path on the remote system"
                },
                "macvlanMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The macvlan mv operation."
                },
                "macvlanPath": {
                    "type": "string",
                    "description": "The macvlan path on the remote system"
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "portmapMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The portmap mv operation."
                },
                "portmapPath": {
                    "type": "string",
                    "description": "The portmap path on the remote system"
                },
                "ptpMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The ptp mv operation."
                },
                "ptpPath": {
                    "type": "string",
                    "description": "The ptp path on the remote system"
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "sbrMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The sbr mv operation."
                },
                "sbrPath": {
                    "type": "string",
                    "description": "The sbr path on the remote system"
                },
                "staticMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The static mv operation."
                },
                "staticPath": {
                    "type": "string",
                    "description": "The static path on the remote system"
                },
                "tapMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The tap mv operation."
                },
                "tapPath": {
                    "type": "string",
                    "description": "The tap path on the remote system"
                },
                "tar": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Tar",
                    "description": "The tar operation."
                },
                "tuningMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The tuning mv operation."
                },
                "tuningPath": {
                    "type": "string",
                    "description": "The tuning path on the remote system"
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                },
                "vlanMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The vlan mv operation."
                },
                "vlanPath": {
                    "type": "string",
                    "description": "The vlan path on the remote system"
                },
                "vrfMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The vrf mv operation."
                },
                "vrfPath": {
                    "type": "string",
                    "description": "The vrf path on the remote system"
                }
            },
            "required": [
                "architecture",
                "archiveName",
                "connection",
                "download",
                "directory",
                "mkdir",
                "mktemp",
                "rm",
                "tar",
                "url",
                "version",
                "bandwidthMv",
                "bandwidthPath",
                "bridgeMv",
                "bridgePath",
                "dhcpMv",
                "dhcpPath",
                "dummyMv",
                "dummyPath",
                "firewallMv",
                "firewallPath",
                "hostDeviceMv",
                "hostDevicePath",
                "hostLocalMv",
                "hostLocalPath",
                "ipvlanMv",
                "ipvlanPath",
                "loopbackMv",
                "loopbackPath",
                "macvlanMv",
                "macvlanPath",
                "portmapMv",
                "portmapPath",
                "ptpMv",
                "ptpPath",
                "sbrMv",
                "sbrPath",
                "staticMv",
                "staticPath",
                "tapMv",
                "tapPath",
                "tuningMv",
                "tuningPath",
                "vlanMv",
                "vlanPath",
                "vrfMv",
                "vrfPath"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:ContainerdInstall": {
            "description": "Installs containerd on a remote system",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "archiveName": {
                    "type": "string",
                    "description": "The name of the downloaded archive."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "containerdMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The containerd mv operation."
                },
                "containerdPath": {
                    "type": "string",
                    "description": "The containerd path on the remote system"
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "tar": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Tar",
                    "description": "The tar operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "architecture",
                "archiveName",
                "connection",
                "download",
                "directory",
                "mkdir",
                "mktemp",
                "rm",
                "tar",
                "url",
                "version",
                "containerdMv",
                "containerdPath"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:CrictlInstall": {
            "description": "Installs crictl on a remote system",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "archiveName": {
                    "type": "string",
                    "description": "The name of the downloaded archive."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "crictlMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The crictl mv operation."
                },
                "crictlPath": {
                    "type": "string",
                    "description": "The crictl path on the remote system"
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "tar": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Tar",
                    "description": "The tar operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "architecture",
                "archiveName",
                "connection",
                "download",
                "directory",
                "mkdir",
                "mktemp",
                "rm",
                "tar",
                "url",
                "version",
                "crictlMv",
                "crictlPath"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:Download": {
            "description": "Downloads the file specified by `url` onto a remote system.",
            "properties": {
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "destination": {
                    "type": "string",
                    "description": "The fully qualified path on the remote system where the file should be downloaded to."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "removeOnDelete": {
                    "type": "boolean",
                    "plain": true,
                    "description": "Remove the downloaded fiel when the resource is deleted."
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the file to be downloaded."
                },
                "wget": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Wget",
                    "description": "The wget operation."
                }
            },
            "required": [
                "connection",
                "destination",
                "mkdir",
                "removeOnDelete",
                "url",
                "wget"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "destination": {
                    "type": "string",
                    "description": "The fully qualified path on the remote system where the file should be downloaded to."
                },
                "removeOnDelete": {
                    "type": "boolean",
                    "plain": true,
                    "description": "Remove the downloaded fiel when the resource is deleted."
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the file to be downloaded."
                }
            },
            "requiredInputs": [
                "connection",
                "destination",
                "url"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:EtcdCluster": {
            "description": "Creates an etcd cluster from one or more remote systems.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "TODO"
                },
                "binaryDirectory": {
                    "type": "string",
                    "description": "TODO"
                },
                "bundle": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Bundle",
                    "description": "The TLS bundle."
                },
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdConfiguration"
                    },
                    "description": "Map of node name to etcd configuration."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd configuration."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd data."
                },
                "install": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdInstall"
                    },
                    "description": "Map of node name to etcd install."
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdNode",
                        "plain": true
                    },
                    "plain": true,
                    "description": "Etcd node configuration. The key should be a name used to identify the node."
                },
                "service": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdService"
                    },
                    "description": "Map of node name to etcd systemd service."
                },
                "start": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:remote:StartEtcd"
                    },
                    "description": "Map of node name to etcd start commands."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "bundle",
                "nodes",
                "configuration",
                "install",
                "service",
                "start"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "TODO"
                },
                "binaryDirectory": {
                    "type": "string",
                    "description": "TODO"
                },
                "bundle": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Bundle",
                    "description": "The TLS bundle."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd configuration."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd data."
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdNode",
                        "plain": true
                    },
                    "plain": true,
                    "description": "Etcd node configuration. The key should be a name used to identify the node."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "bundle",
                "nodes"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:EtcdConfiguration": {
            "description": "Configures etcd on a remote system.",
            "properties": {
                "caFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The remote certificate authority file."
                },
                "caPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate authority data."
                },
                "certFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The remote certificate file."
                },
                "certPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate data."
                },
                "configurationChmod": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Chmod",
                    "description": "The configuration chmod operation."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to store etcd configuration.",
                    "default": "/etc/etcd"
                },
                "configurationMkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The configuration mkdir operation."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory etcd will store its data.",
                    "default": "/var/lib/etcd"
                },
                "dataMkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The data mkdir operation."
                },
                "etcdPath": {
                    "type": "string",
                    "description": "The path to the `etcd` binary."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The IP used to serve client requests and communicate with etcd peers."
                },
                "keyFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The remote key file."
                },
                "keyPem": {
                    "type": "string",
                    "description": "The PEM encoded key data."
                },
                "value": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps",
                    "description": "A bag of properties to be consumed by other resources."
                }
            },
            "required": [
                "caPem",
                "certPem",
                "connection",
                "etcdPath",
                "internalIp",
                "keyPem",
                "caFile",
                "certFile",
                "configurationDirectory",
                "configurationMkdir",
                "dataDirectory",
                "dataMkdir",
                "keyFile",
                "value"
            ],
            "inputProperties": {
                "caPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate authority data."
                },
                "certPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate data."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to store etcd configuration.",
                    "default": "/etc/etcd"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory etcd will store its data.",
                    "default": "/var/lib/etcd"
                },
                "etcdPath": {
                    "type": "string",
                    "description": "The path to the `etcd` binary."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The IP used to serve client requests and communicate with etcd peers."
                },
                "keyPem": {
                    "type": "string",
                    "description": "The PEM encoded key data."
                }
            },
            "requiredInputs": [
                "caPem",
                "certPem",
                "connection",
                "etcdPath",
                "internalIp",
                "keyPem"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:EtcdInstall": {
            "description": "Installs etcd on a remote system",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "archiveName": {
                    "type": "string",
                    "description": "The name of the downloaded archive."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "etcdMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The etcd mv operation."
                },
                "etcdPath": {
                    "type": "string",
                    "description": "The etcd path on the remote system"
                },
                "etcdctlMv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The etcdctl mv operation."
                },
                "etcdctlPath": {
                    "type": "string",
                    "description": "The etcdctl path on the remote system"
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "tar": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Tar",
                    "description": "The tar operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "architecture",
                "archiveName",
                "connection",
                "download",
                "directory",
                "mkdir",
                "mktemp",
                "rm",
                "tar",
                "url",
                "version",
                "etcdMv",
                "etcdPath",
                "etcdctlMv",
                "etcdctlPath"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:EtcdService": {
            "description": "Etcd systemd service file. Will likely get replaced with a static function when https://github.com/pulumi/pulumi/issues/7583 gets resolved.",
            "properties": {
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps",
                    "description": "Etcd configuration."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps"
                    },
                    "description": "Etcd peer configuration."
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "service": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "The remote systemd service."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "required": [
                "configuration",
                "connection",
                "peers",
                "service"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps",
                    "description": "Etcd configuration."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps"
                    },
                    "description": "Etcd peer configuration."
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "requiredInputs": [
                "configuration",
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:File": {
            "properties": {
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The executed command."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "content": {
                    "type": "string",
                    "description": "The content of the file."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the file on the remote host."
                },
                "stderr": {
                    "type": "string",
                    "description": "The standard error of the command's process"
                },
                "stdin": {
                    "type": "string",
                    "description": "Pass a string to the command's process as standard in"
                },
                "stdout": {
                    "type": "string",
                    "description": "The standard output of the command's process"
                }
            },
            "required": [
                "command",
                "connection",
                "content",
                "path",
                "stderr",
                "stdin",
                "stdout"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "content": {
                    "type": "string",
                    "description": "The content of the file."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the file on the remote host."
                }
            },
            "requiredInputs": [
                "connection",
                "content",
                "path"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeApiServerInstall": {
            "description": "Installs kube-apiserver on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeControllerManagerInstall": {
            "description": "Installs kube-controller-manager on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeProxyInstall": {
            "description": "Installs kube-proxy on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeSchedulerInstall": {
            "description": "Installs kube-scheduler on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubectlInstall": {
            "description": "Installs kubectl on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeletInstall": {
            "description": "Installs kubelet on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:ProvisionEtcd": {
            "description": "Starts etcd on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "TODO"
                },
                "binaryDirectory": {
                    "type": "string",
                    "description": "TODO"
                },
                "bundle": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Bundle",
                    "description": "The TLS bundle."
                },
                "configuration": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdConfiguration",
                    "description": "Etcd configuration."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd configuration."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd data."
                },
                "install": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdInstall",
                    "description": "Install etcd."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The internal IP of the etcd node"
                },
                "service": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "Systemd service."
                },
                "start": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:StartEtcd",
                    "description": "Start etcd"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "bundle",
                "connection",
                "internalIp",
                "configuration",
                "install",
                "service",
                "start"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "TODO"
                },
                "binaryDirectory": {
                    "type": "string",
                    "description": "TODO"
                },
                "bundle": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Bundle",
                    "description": "The TLS bundle."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd configuration."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd data."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The internal IP of the etcd node"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "bundle",
                "connection",
                "internalIp"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:RuncInstall": {
            "description": "Installs runc on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:StartEtcd": {
            "description": "Starts etcd on a remote system.",
            "properties": {
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "daemonReload": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Systemctl",
                    "description": "The daemon-reload command."
                },
                "enable": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Systemctl",
                    "description": "The enable command."
                },
                "start": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Systemctl",
                    "description": "The start command."
                }
            },
            "required": [
                "connection",
                "daemonReload",
                "enable",
                "start"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:StaticPod": {
            "description": "Create a static pod manifest on a remote system.",
            "properties": {
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "file": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The remote manifest file."
                },
                "fileName": {
                    "type": "string",
                    "description": "The name of the file on the remote system."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation to ensure /etc/kubernetes/manifests exists."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the manifest on the remote system."
                },
                "pod": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:PodManifest",
                    "description": "The pod manifest."
                }
            },
            "required": [
                "connection",
                "file",
                "fileName",
                "mkdir",
                "path",
                "pod"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "fileName": {
                    "type": "string",
                    "description": "The name of the file on the remote system."
                },
                "pod": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:PodManifest",
                    "description": "The pod manifest."
                }
            },
            "requiredInputs": [
                "connection",
                "pod"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:SystemdService": {
            "description": "A systemd service on a remote system.",
            "properties": {
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file.",
                    "default": "/etc/systemd/system"
                },
                "file": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The service file on the remote machine."
                },
                "install": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdInstallSection",
                    "description": "Describes the [Install] section of a systemd service file."
                },
                "service": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceSection",
                    "description": "Describes the [Service] section of a systemd service file."
                },
                "unit": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdUnitSection",
                    "description": "Describes the [Unit] section of a systemd service file."
                },
                "unitName": {
                    "type": "string",
                    "description": "Name of the systemd unit."
                }
            },
            "required": [
                "connection",
                "directory",
                "file",
                "service"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file.",
                    "default": "/etc/systemd/system"
                },
                "install": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdInstallSection",
                    "description": "Describes the [Install] section of a systemd service file."
                },
                "service": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceSection",
                    "description": "Describes the [Service] section of a systemd service file."
                },
                "unit": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdUnitSection",
                    "description": "Describes the [Unit] section of a systemd service file."
                },
                "unitName": {
                    "type": "string",
                    "description": "Name of the systemd unit."
                }
            },
            "requiredInputs": [
                "connection",
                "service"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tls:Certificate": {
            "description": "A certificate key pair.",
            "properties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key."
                },
                "allowedUses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:tls:AllowedUsage"
                    },
                    "description": "List of key usages allowed for the issued certificate."
                },
                "caCertPem": {
                    "type": "string",
                    "description": "Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "caKeyAlgorithm": {
                    "type": "string",
                    "description": "Name of the algorithm used when generating the private key provided in `ca_private_key_pem`.\n"
                },
                "caPrivateKeyPem": {
                    "type": "string",
                    "description": "Private key of the Certificate Authority (CA) used to sign the certificate, in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "cert": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/locallySignedCert:LocallySignedCert",
                    "description": "The certificate."
                },
                "certPem": {
                    "type": "string",
                    "description": "Certificate data in PEM (RFC 1421).\n"
                },
                "certRequestPem": {
                    "type": "string",
                    "description": "Certificate request data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "csr": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/certRequest:CertRequest",
                    "description": "The certificate signing request."
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "earlyRenewalHours": {
                    "type": "integer",
                    "description": "The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This\ncan be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old\ncertificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate\nrevocation. Also, this advance update can only be performed should the Terraform configuration be applied during the\nearly renewal period. (default: `0`)\n"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "TODO"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "isCaCertificate": {
                    "type": "boolean",
                    "description": "Is the generated certificate representing a Certificate Authority (CA) (default: `false`).\n"
                },
                "key": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/privateKey:PrivateKey",
                    "description": "The private key"
                },
                "keyAlgorithm": {
                    "type": "string",
                    "description": "Name of the algorithm used when generating the private key provided in `private_key_pem`.\n"
                },
                "privateKeyOpenssh": {
                    "type": "string",
                    "description": "Private key data in [OpenSSH PEM (RFC 4716)](https://datatracker.ietf.org/doc/html/rfc4716) format.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "Private key data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "privateKeyPemPkcs8": {
                    "type": "string",
                    "description": "Private key data in [PKCS#8 PEM (RFC 5208)](https://datatracker.ietf.org/doc/html/rfc5208) format.\n"
                },
                "publicKeyFingerprintMd5": {
                    "type": "string",
                    "description": "The fingerprint of the public key data in OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the selected private key format is compatible, similarly to `public_key_openssh` and the ECDSA P224 limitations.\n"
                },
                "publicKeyFingerprintSha256": {
                    "type": "string",
                    "description": "The fingerprint of the public key data in OpenSSH SHA256 hash format, e.g. `SHA256:...`. Only available if the selected private key format is compatible, similarly to `public_key_openssh` and the ECDSA P224 limitations.\n"
                },
                "publicKeyOpenssh": {
                    "type": "string",
                    "description": "The public key data in \"Authorized Keys\".\n"
                },
                "publicKeyPem": {
                    "type": "string",
                    "description": "Public key data in PEM (RFC 1421).\n"
                },
                "readyForRenewal": {
                    "type": "boolean",
                    "description": "Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within the `early_renewal_hours`)?\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).\n"
                },
                "setSubjectKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "subject": {
                    "$ref": "/tls/v5.0.2/schema.json#/types/tls:index/CertRequestSubject:CertRequestSubject",
                    "description": "TODO"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "validityEndTime": {
                    "type": "string",
                    "description": "The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid for.\n"
                },
                "validityStartTime": {
                    "type": "string",
                    "description": "The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.\n"
                }
            },
            "required": [
                "certRequestPem",
                "keyAlgorithm",
                "privateKeyPem",
                "allowedUses",
                "caCertPem",
                "caKeyAlgorithm",
                "caPrivateKeyPem",
                "certPem",
                "certRequestPem",
                "earlyRenewalHours",
                "isCaCertificate",
                "readyForRenewal",
                "setSubjectKeyId",
                "validityEndTime",
                "validityPeriodHours",
                "validityStartTime",
                "algorithm",
                "ecdsaCurve",
                "privateKeyOpenssh",
                "privateKeyPem",
                "privateKeyPemPkcs8",
                "publicKeyFingerprintMd5",
                "publicKeyFingerprintSha256",
                "publicKeyOpenssh",
                "publicKeyPem",
                "rsaBits",
                "cert",
                "csr",
                "key"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key."
                },
                "allowedUses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:tls:AllowedUsage"
                    },
                    "description": "List of key usages allowed for the issued certificate."
                },
                "caCertPem": {
                    "type": "string",
                    "description": "Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "caPrivateKeyPem": {
                    "type": "string",
                    "description": "Private key of the Certificate Authority (CA) used to sign the certificate, in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n",
                    "secret": true
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "earlyRenewalHours": {
                    "type": "integer",
                    "description": "The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This\ncan be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old\ncertificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate\nrevocation. Also, this advance update can only be performed should the Terraform configuration be applied during the\nearly renewal period. (default: `0`)\n"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "TODO"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "isCaCertificate": {
                    "type": "boolean",
                    "description": "Is the generated certificate representing a Certificate Authority (CA) (default: `false`).\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).\n"
                },
                "setSubjectKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "subject": {
                    "$ref": "/tls/v5.0.2/schema.json#/types/tls:index/CertRequestSubject:CertRequestSubject",
                    "description": "TODO"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid for.\n"
                }
            },
            "requiredInputs": [
                "algorithm",
                "allowedUses",
                "caCertPem",
                "caPrivateKeyPem",
                "validityPeriodHours"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tls:ClusterPki": {
            "description": "The private key infrastructure for a cluster",
            "properties": {
                "admin": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The admin certificate."
                },
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key.",
                    "default": "RSA"
                },
                "ca": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:RootCa",
                    "description": "The cluster certificate authority."
                },
                "clusterName": {
                    "type": "string",
                    "description": "A name to use for the cluster"
                },
                "controllerManager": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The controller manager certificate."
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "When `algorithm` is `ECDSA`, the name of the elliptic curve to use."
                },
                "kubeProxy": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The kube proxy certificate."
                },
                "kubeScheduler": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The kube scheduler certificate."
                },
                "kubelet": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate"
                    },
                    "description": "Map of node name to kubelet certificate."
                },
                "kubernetes": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The kubernetes certificate."
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/kubernetes-the-hard-way:tls:ClusterPkiNode"
                    },
                    "description": "Map of node name to node configuration"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Publicly accessible IP address."
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits.",
                    "default": 2048
                },
                "serviceAccounts": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The service accounts certificate"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid.",
                    "default": 8076
                }
            },
            "required": [
                "admin",
                "ca",
                "controllerManager",
                "kubelet",
                "kubeProxy",
                "kubernetes",
                "kubeScheduler",
                "publicIp",
                "serviceAccounts",
                "validityPeriodHours",
                "clusterName",
                "nodes",
                "publicIp"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key.",
                    "default": "RSA"
                },
                "clusterName": {
                    "type": "string",
                    "description": "A name to use for the cluster"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "When `algorithm` is `ECDSA`, the name of the elliptic curve to use."
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/kubernetes-the-hard-way:tls:ClusterPkiNode"
                    },
                    "description": "Map of node name to node configuration"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Publicly accessible IP address."
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits.",
                    "default": 2048
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid.",
                    "default": 8076
                }
            },
            "requiredInputs": [
                "clusterName",
                "nodes",
                "publicIp"
            ],
            "isComponent": true,
            "methods": {
                "getKubeconfig": "kubernetes-the-hard-way:tls:ClusterPki/getKubeconfig"
            }
        },
        "kubernetes-the-hard-way:tls:EncryptionKey": {
            "description": "A cluster encryption key.",
            "properties": {
                "bytes": {
                    "type": "integer",
                    "description": "The number of bytes requested. The minimum value for length is 1.\n"
                },
                "config": {
                    "type": "string",
                    "description": "The generated `v1/EncryptionConfig`."
                },
                "key": {
                    "$ref": "/random/v4.16.1/schema.json#/resources/random:index/randomBytes:RandomBytes",
                    "description": "The generated random key."
                }
            },
            "required": [
                "bytes",
                "config",
                "key"
            ],
            "inputProperties": {
                "bytes": {
                    "type": "integer",
                    "description": "The number of bytes requested. The minimum value for length is 1.\n"
                }
            },
            "requiredInputs": [
                "bytes"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tls:RootCa": {
            "description": "Root certificate authority for a cluster.",
            "properties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key."
                },
                "allowedUses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.\n"
                },
                "cert": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/selfSignedCert:SelfSignedCert",
                    "description": "The certificate authority certificate."
                },
                "certPem": {
                    "type": "string",
                    "description": "Certificate data in PEM (RFC 1421).\n"
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "earlyRenewalHours": {
                    "type": "integer",
                    "description": "The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This\ncan be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old\ncertificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate\nrevocation. Also, this advance update can only be performed should the Terraform configuration be applied during the\nearly renewal period. (default: `0`)\n"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "TODO"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "isCaCertificate": {
                    "type": "boolean",
                    "description": "Is the generated certificate representing a Certificate Authority (CA) (default: `false`).\n"
                },
                "key": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/privateKey:PrivateKey",
                    "description": "The certificate authority key."
                },
                "keyAlgorithm": {
                    "type": "string",
                    "description": "Name of the algorithm used when generating the private key provided in `private_key_pem`.\n"
                },
                "privateKeyOpenssh": {
                    "type": "string",
                    "description": "Private key data in [OpenSSH PEM (RFC 4716)](https://datatracker.ietf.org/doc/html/rfc4716) format.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "Private key data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "privateKeyPemPkcs8": {
                    "type": "string",
                    "description": "Private key data in [PKCS#8 PEM (RFC 5208)](https://datatracker.ietf.org/doc/html/rfc5208) format.\n"
                },
                "publicKeyFingerprintMd5": {
                    "type": "string",
                    "description": "The fingerprint of the public key data in OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the selected private key format is compatible, similarly to `public_key_openssh` and the ECDSA P224 limitations.\n"
                },
                "publicKeyFingerprintSha256": {
                    "type": "string",
                    "description": "The fingerprint of the public key data in OpenSSH SHA256 hash format, e.g. `SHA256:...`. Only available if the selected private key format is compatible, similarly to `public_key_openssh` and the ECDSA P224 limitations.\n"
                },
                "publicKeyOpenssh": {
                    "type": "string",
                    "description": "The public key data in \"Authorized Keys\".\n"
                },
                "publicKeyPem": {
                    "type": "string",
                    "description": "Public key data in PEM (RFC 1421).\n"
                },
                "readyForRenewal": {
                    "type": "boolean",
                    "description": "Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within the `early_renewal_hours`)?\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).\n"
                },
                "setAuthorityKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include an [authority key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1): for self-signed certificates this is the same value as the [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "setSubjectKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "subject": {
                    "$ref": "/tls/v5.0.2/schema.json#/types/tls:index/SelfSignedCertSubject:SelfSignedCertSubject",
                    "description": "TODO"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "validityEndTime": {
                    "type": "string",
                    "description": "The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid for.\n"
                },
                "validityStartTime": {
                    "type": "string",
                    "description": "The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.\n"
                }
            },
            "required": [
                "allowedUses",
                "certPem",
                "earlyRenewalHours",
                "isCaCertificate",
                "keyAlgorithm",
                "privateKeyPem",
                "readyForRenewal",
                "setAuthorityKeyId",
                "setSubjectKeyId",
                "validityEndTime",
                "validityPeriodHours",
                "validityStartTime",
                "algorithm",
                "ecdsaCurve",
                "privateKeyOpenssh",
                "privateKeyPem",
                "privateKeyPemPkcs8",
                "publicKeyFingerprintMd5",
                "publicKeyFingerprintSha256",
                "publicKeyOpenssh",
                "publicKeyPem",
                "rsaBits",
                "cert",
                "key"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key."
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "earlyRenewalHours": {
                    "type": "integer",
                    "description": "The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This\ncan be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old\ncertificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate\nrevocation. Also, this advance update can only be performed should the Terraform configuration be applied during the\nearly renewal period. (default: `0`)\n"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "TODO"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).\n"
                },
                "setAuthorityKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include an [authority key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1): for self-signed certificates this is the same value as the [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "setSubjectKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "subject": {
                    "$ref": "/tls/v5.0.2/schema.json#/types/tls:index/SelfSignedCertSubject:SelfSignedCertSubject",
                    "description": "TODO"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid for.\n"
                }
            },
            "requiredInputs": [
                "validityPeriodHours"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Chmod": {
            "description": "Abstraction over the `chmod` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:ChmodOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:ChmodOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:ChmodOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:ChmodOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:ChmodOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:ChmodOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Curl": {
            "description": "Abstraction over the `curl` utility on a remote system. Transfer a URL.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:CurlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:CurlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:CurlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:CurlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:CurlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:CurlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Etcdctl": {
            "description": "Abstraction over the `etcdctl` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:EtcdctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:EtcdctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:EtcdctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:EtcdctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:EtcdctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:EtcdctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Hostnamectl": {
            "description": "Abstraction over the `hostnamectl` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:HostnamectlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:HostnamectlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:HostnamectlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:HostnamectlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:HostnamectlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:HostnamectlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Mkdir": {
            "description": "Abstraction over the `mkdir` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MkdirOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MkdirOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MkdirOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MkdirOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MkdirOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MkdirOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Mktemp": {
            "description": "Abstraction over the `mktemp` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MktempOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MktempOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MktempOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MktempOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MktempOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MktempOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Mv": {
            "description": "Abstraction over the `mv` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MvOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MvOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MvOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MvOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MvOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:MvOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Rm": {
            "description": "Abstraction over the `rm` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:RmOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:RmOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:RmOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:RmOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:RmOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:RmOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Sed": {
            "description": "Abstraction over the `sed` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SedOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SedOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SedOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SedOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SedOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SedOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Systemctl": {
            "description": "Abstraction over the `systemctl` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SystemctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SystemctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SystemctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SystemctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SystemctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:SystemctlOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Tar": {
            "description": "Abstraction over the `tar` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TarOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TarOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TarOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TarOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TarOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TarOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Tee": {
            "description": "Abstraction over the `rm` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TeeOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TeeOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TeeOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TeeOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TeeOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:TeeOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tools:Wget": {
            "description": "Abstraction over the `wget` utility on a remote system.",
            "properties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "command": {
                    "$ref": "/command/v0.10.0/schema.json#/resources/command:remote:Command",
                    "description": "The underlying command"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:WgetOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:WgetOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stderr": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "stdout": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:WgetOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "required": [
                "binaryPath",
                "command",
                "connection",
                "environment",
                "stderr",
                "stdout",
                "triggers"
            ],
            "inputProperties": {
                "binaryPath": {
                    "type": "string",
                    "description": "Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH"
                },
                "connection": {
                    "$ref": "/command/v0.10.0/schema.json#/types/command:remote:Connection",
                    "description": "Connection details for the remote system"
                },
                "create": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:WgetOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on create."
                },
                "delete": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:WgetOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT\nand PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the\nCommand resource from previous create or update steps."
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables"
                },
                "stdin": {
                    "type": "string",
                    "description": "TODO"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "TODO"
                },
                "update": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/types/kubernetes-the-hard-way:tools:WgetOpts",
                            "plain": true
                        }
                    ],
                    "plain": true,
                    "description": "The command to run on update, if empty, create will \nrun again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR \nare set to the stdout and stderr properties of the Command resource from previous \ncreate or update steps."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        }
    },
    "functions": {
        "kubernetes-the-hard-way:config:getKubeVipManifest": {
            "description": "Gets the static pod manifests for KubeVip.",
            "inputs": {
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "bgpAs": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "bgpEnable": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "bgpPeerAddress": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "bgpPeerAs": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "bgpPeerPass": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "bgpPeers": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "bgpRouterId": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "cpEnable": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "cpNamespace": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "image": {
                        "type": "string",
                        "description": "Override the kube-vip image."
                    },
                    "kubeconfigPath": {
                        "type": "string",
                        "description": "Path to the kubeconfig on the remote host."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the static pod. Defaults to kube-vip.",
                        "default": "kube-vip"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace for the static pod. Defaults to kube-system.",
                        "default": "kube-system"
                    },
                    "port": {
                        "type": "integer",
                        "description": "TODO",
                        "default": 6443
                    },
                    "svcEnable": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of kube-vip to use."
                    },
                    "vipArp": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "vipCidr": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "vipDdns": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "vipInterface": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "vipLeaderElection": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "vipLeaseDuration": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "vipRenewDeadline": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "vipRetryPeriod": {
                        "type": "integer",
                        "description": "TODO"
                    }
                },
                "required": [
                    "address",
                    "kubeconfigPath",
                    "vipCidr"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:PodManifest"
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        "kubernetes-the-hard-way:config:getKubeconfig": {
            "inputs": {
                "properties": {
                    "caPem": {
                        "type": "string",
                        "description": "Certificate authority data."
                    },
                    "options": {
                        "oneOf": [
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigAdminOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigWorkerOptions"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "admin": "#/types/kubernetes-the-hard-way:config:KubeconfigAdminOptions",
                                "kube-controller-manager": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions",
                                "kube-proxy": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions",
                                "kube-scheduler": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions",
                                "worker": "#/types/kubernetes-the-hard-way:config:KubeconfigWorkerOptions"
                            }
                        },
                        "plain": true,
                        "description": "Options for creating the kubeconfig."
                    }
                },
                "required": [
                    "caPem",
                    "options"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:Kubeconfig"
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        "kubernetes-the-hard-way:tls:ClusterPki/getKubeconfig": {
            "description": "Get a kubeconfig configured from this PKI.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "$ref": "#/resources/kubernetes-the-hard-way:tls:ClusterPki",
                        "description": "The PKI to use certificate data from."
                    },
                    "options": {
                        "oneOf": [
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigAdminOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigWorkerOptions"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "admin": "#/types/kubernetes-the-hard-way:config:KubeconfigAdminOptions",
                                "kube-controller-manager": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions",
                                "kube-proxy": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions",
                                "kube-scheduler": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions",
                                "worker": "#/types/kubernetes-the-hard-way:config:KubeconfigWorkerOptions"
                            }
                        },
                        "plain": true,
                        "description": "Options for creating the kubeconfig."
                    }
                },
                "required": [
                    "__self__",
                    "options"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:Kubeconfig"
                    }
                },
                "required": [
                    "result"
                ]
            }
        }
    }
}