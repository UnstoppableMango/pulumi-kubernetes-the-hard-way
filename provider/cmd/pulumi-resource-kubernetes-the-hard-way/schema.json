{
    "name": "kubernetes-the-hard-way",
    "description": "A Pulumi implementation of Kelsey Hightower's Kubernetes the Hard Way",
    "keywords": [
        "pulumi",
        "command",
        "tls",
        "kubernetes",
        "category/utility",
        "kind/component"
    ],
    "license": "Apache-2.0",
    "attribution": "https://github.com/kelseyhightower/kubernetes-the-hard-way",
    "repository": "https://github.com/UnstoppableMango/pulumi-kubernetes-the-hard-way",
    "pluginDownloadURL": "github://api.github.com/UnstoppableMango",
    "publisher": "UnstoppableMango",
    "language": {
        "csharp": {
            "dictionaryConstructors": true,
            "liftSingleValueMethodReturns": true,
            "packageReferences": {
                "Pulumi": "3.*",
                "Pulumi.Command": "0.9.*",
                "Pulumi.Kubernetes": "4.*",
                "Pulumi.Random": "4.*",
                "Pulumi.Tls": "5.*",
                "UnMango.Pulumi.Commandx": "0.1.*"
            },
            "rootNamespace": "UnMango"
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way",
            "liftSingleValueMethodReturns": true,
            "packageImportAliases": {
                "github.com/pulumi/pulumi-command/sdk/go/command/remote": "pulumiCommand",
                "github.com/unstoppablemango/pulumi-kubernetes-the-hard-way/sdk/go/kubernetes-the-hard-way": "kthw"
            }
        },
        "java": {
            "basePackage": "com.unmango",
            "buildFiles": "gradle",
            "dependencies": {
                "com.google.code.findbugs:jsr305": "3.0.2",
                "com.google.code.gson:gson": "2.8.9",
                "com.pulumi:command": "1.0.0",
                "com.pulumi:kubernetes": "4.14.0",
                "com.pulumi:pulumi": "0.9.9",
                "com.pulumi:random": "4.16.2",
                "com.pulumi:tls": "5.0.2",
                "com.unmango.pulumi:commandx": "0.1.2"
            },
            "gradleNexusPublishPluginVersion": "1.1.0",
            "liftSingleValueMethodReturns": true
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/command": "^1.0.0",
                "@pulumi/kubernetes": "^4.14.0",
                "@pulumi/pulumi": "^3.0.0",
                "@pulumi/random": "^4.16.2",
                "@pulumi/tls": "^5.0.2",
                "@unmango/pulumi-commandx": "^0.1.2"
            },
            "devDependencies": {
                "@types/node": "^18",
                "typescript": "^4.6.2"
            },
            "liftSingleValueMethodReturns": true,
            "packageName": "@unmango/pulumi-kubernetes-the-hard-way"
        },
        "python": {
            "liftSingleValueMethodReturns": true,
            "pyproject": {
                "enabled": true
            },
            "requires": {
                "pulumi": "\u003e=3.91.1,\u003c4.0.0",
                "pulumi-command": "\u003e=1.0.0,\u003c2.0.0",
                "pulumi-kubernetes": "\u003e=4.14.0,\u003c5.0.0",
                "pulumi-random": "\u003e=4.16.2,\u003c5.0.0",
                "pulumi-tls": "\u003e=5.0.2,\u003c6.0.0",
                "unmango-pulumi-commandx": "\u003e=0.1.2,\u003c1.0.0"
            }
        }
    },
    "config": {},
    "types": {
        "kubernetes-the-hard-way:config:Cluster": {
            "properties": {
                "certificateAuthorityData": {
                    "type": "string",
                    "description": "TODO"
                },
                "server": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "certificateAuthorityData",
                "server"
            ]
        },
        "kubernetes-the-hard-way:config:CniBridgeIpam": {
            "description": "The CNI plugins IPAM",
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "IPAM ranges."
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "IPAM routes."
                },
                "type": {
                    "type": "string",
                    "description": "CNI bridge IPAM type"
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:config:CniBridgePluginConfiguration": {
            "description": "TODO",
            "properties": {
                "bridge": {
                    "type": "string",
                    "description": "Bridge name."
                },
                "cniVersion": {
                    "type": "string",
                    "description": "The version of the bridge plugin."
                },
                "ipMasq": {
                    "type": "boolean",
                    "description": "IP masq."
                },
                "ipam": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:CniBridgeIpam",
                    "description": "IPAM."
                },
                "isGateway": {
                    "type": "boolean",
                    "description": "Is gateway."
                },
                "name": {
                    "type": "string",
                    "description": "Plugin name."
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to use."
                },
                "type": {
                    "type": "string",
                    "description": "Plugin type."
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "bridge",
                "subnet",
                "isGateway",
                "ipMasq",
                "ipam"
            ]
        },
        "kubernetes-the-hard-way:config:CniLoopbackPluginConfiguration": {
            "description": "CNI loopback plugin configuration.",
            "properties": {
                "cniVersion": {
                    "type": "string",
                    "description": "The plugin CNI version."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the plugin."
                },
                "type": {
                    "type": "string",
                    "description": "The type of the plugin."
                }
            },
            "type": "object",
            "required": [
                "cniVersion",
                "name",
                "type"
            ]
        },
        "kubernetes-the-hard-way:config:ContainerdConfiguration": {
            "description": "The containerd configuration.",
            "properties": {
                "cri": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdCriPluginConfiguration",
                    "description": "The cri configuration."
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:config:ContainerdCriPluginConfiguration": {
            "description": "containerd cri plugin configuration.",
            "properties": {
                "cni": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdCriPluginConfigurationCni",
                    "plain": true,
                    "description": "cni configuration."
                },
                "containerd": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdCriPluginConfigurationContainerd",
                    "plain": true,
                    "description": "containerd configuration."
                }
            },
            "type": "object",
            "required": [
                "containerd",
                "cni"
            ]
        },
        "kubernetes-the-hard-way:config:ContainerdCriPluginConfigurationCni": {
            "description": "containerd cri plugin configuration.",
            "properties": {
                "binDir": {
                    "type": "string",
                    "description": "bin_dir"
                },
                "confDir": {
                    "type": "string",
                    "description": "conf_dir"
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:config:ContainerdCriPluginConfigurationContainerd": {
            "description": "containerd cri plugin configuration.",
            "properties": {
                "defaultRuntimeName": {
                    "type": "string",
                    "description": "default_runtime_name"
                },
                "runtimes": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdCriPluginConfigurationContainerdRunc",
                    "plain": true,
                    "description": "The containerd runtime configuration."
                },
                "snapshotter": {
                    "type": "string",
                    "description": "snapshotter"
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:config:ContainerdCriPluginConfigurationContainerdRunc": {
            "description": "containerd cri runc plugin configuration.",
            "properties": {
                "options": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdCriPluginConfigurationContainerdRuncOptions",
                    "plain": true,
                    "description": "runc options."
                },
                "runtimeType": {
                    "type": "string",
                    "description": "runtime_type"
                }
            },
            "type": "object",
            "required": [
                "options"
            ]
        },
        "kubernetes-the-hard-way:config:ContainerdCriPluginConfigurationContainerdRuncOptions": {
            "description": "containerd cri runc plugin configuration.",
            "properties": {
                "systemdCgroup": {
                    "type": "boolean",
                    "description": "SystemdCgroup"
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:config:Context": {
            "properties": {
                "cluster": {
                    "type": "string",
                    "description": "TODO"
                },
                "user": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "cluster",
                "user"
            ]
        },
        "kubernetes-the-hard-way:config:KubeProxyConfiguration": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "const": "kubeproxy.config.k8s.io/v1alpha1"
                },
                "clientConnection": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:KubeProxyConfigurationClientConnection"
                },
                "clusterCIDR": {
                    "type": "string",
                    "description": "TODO"
                },
                "kind": {
                    "type": "string",
                    "const": "KubeProxyConfiguration"
                },
                "mode": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "clusterCIDR"
            ]
        },
        "kubernetes-the-hard-way:config:KubeProxyConfigurationClientConnection": {
            "properties": {
                "kubeconfig": {
                    "type": "string",
                    "description": "Path to the kubeconfig."
                }
            },
            "type": "object",
            "required": [
                "kubeconfig"
            ]
        },
        "kubernetes-the-hard-way:config:Kubeconfig": {
            "properties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:Cluster"
                    }
                },
                "contexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:Context"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:User"
                    }
                }
            },
            "type": "object",
            "required": [
                "clusters",
                "contexts",
                "users"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigAdminOptions": {
            "properties": {
                "publicIp": {
                    "type": "string",
                    "description": "TODO"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "admin"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigCluster": {
            "properties": {
                "cluster": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:Cluster"
                },
                "name": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "cluster",
                "name"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigContext": {
            "properties": {
                "context": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:Context"
                },
                "name": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "context",
                "name"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions": {
            "properties": {
                "publicIp": {
                    "type": "string",
                    "description": "TODO"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "kube-controller-manager"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions": {
            "properties": {
                "publicIp": {
                    "type": "string",
                    "description": "TODO"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "kube-proxy"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions": {
            "properties": {
                "publicIp": {
                    "type": "string",
                    "description": "TODO"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "kube-scheduler"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigType": {
            "type": "string",
            "enum": [
                {
                    "value": "worker"
                },
                {
                    "value": "kube-proxy"
                },
                {
                    "value": "kube-controller-manager"
                },
                {
                    "value": "kube-scheduler"
                },
                {
                    "value": "admin"
                }
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "TODO"
                },
                "user": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:User"
                }
            },
            "type": "object",
            "required": [
                "name",
                "user"
            ]
        },
        "kubernetes-the-hard-way:config:KubeconfigWorkerOptions": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "TODO"
                },
                "publicIp": {
                    "type": "string",
                    "description": "TODO"
                },
                "type": {
                    "type": "string",
                    "plain": true,
                    "const": "worker"
                }
            },
            "type": "object",
            "required": [
                "name",
                "publicIp"
            ]
        },
        "kubernetes-the-hard-way:config:KubeletConfiguration": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "const": "kubelet.config.k8s.io/v1beta1"
                },
                "authentication": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:KubeletConfigurationAuthentication"
                },
                "authorization": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:KubeletConfigurationAuthorization"
                },
                "cgroupDriver": {
                    "type": "string",
                    "description": "TODO"
                },
                "clusterDNS": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TODO"
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "TODO"
                },
                "containerRuntimeEndpoint": {
                    "type": "string",
                    "description": "TODO"
                },
                "kind": {
                    "type": "string",
                    "const": "KubeletConfiguration"
                },
                "podCIDR": {
                    "type": "string",
                    "description": "TODO"
                },
                "resolvConf": {
                    "type": "string",
                    "description": "TODO"
                },
                "runtimeRequestTimeout": {
                    "type": "string",
                    "description": "TODO"
                },
                "tlsCertFile": {
                    "type": "string",
                    "description": "TODO"
                },
                "tlsPrivateKeyFile": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "apiVersion",
                "authentication",
                "authorization",
                "clusterDomain",
                "clusterDNS",
                "cgroupDriver",
                "containerRuntimeEndpoint",
                "podCIDR",
                "resolvConf",
                "runtimeRequestTimeout",
                "tlsCertFile",
                "tlsPrivateKeyFile"
            ]
        },
        "kubernetes-the-hard-way:config:KubeletConfigurationAuthentication": {
            "properties": {
                "anonymous": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:KubeletConfigurationAuthenticationAnonymous"
                },
                "webhook": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:KubeletConfigurationAuthenticationWebhook"
                },
                "x509": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:KubeletConfigurationAuthenticationx509"
                }
            },
            "type": "object",
            "required": [
                "anonymous",
                "webhook",
                "x509"
            ]
        },
        "kubernetes-the-hard-way:config:KubeletConfigurationAuthenticationAnonymous": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "kubernetes-the-hard-way:config:KubeletConfigurationAuthenticationWebhook": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "kubernetes-the-hard-way:config:KubeletConfigurationAuthenticationx509": {
            "properties": {
                "clientCAFile": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "clientCAFile"
            ]
        },
        "kubernetes-the-hard-way:config:KubeletConfigurationAuthorization": {
            "properties": {
                "mode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "kubernetes-the-hard-way:config:PodManifest": {
            "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.\n\nThis resource waits until its status is ready before registering success\nfor create/update, and populating output properties from the current state of the resource.\nThe following conditions are used to determine whether the resource creation has\nsucceeded or failed:\n\n1. The Pod is scheduled (\"PodScheduled\"\" '.status.condition' is true).\n2. The Pod is initialized (\"Initialized\" '.status.condition' is true).\n3. The Pod is ready (\"Ready\" '.status.condition' is true) and the '.status.phase' is\n   set to \"Running\".\nOr (for Jobs): The Pod succeeded ('.status.phase' set to \"Succeeded\").\n\nIf the Pod has not reached a Ready state after 10 minutes, it will\ntime out and mark the resource update as Failed. You can override the default timeout value\nby setting the 'customTimeouts' option on the resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create a Pod with auto-naming\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kubernetes from \"@pulumi/kubernetes\";\n\nconst pod = new kubernetes.core.v1.Pod(\"pod\", {spec: {\n    containers: [{\n        image: \"nginx:1.14.2\",\n        name: \"nginx\",\n        ports: [{\n            containerPort: 80,\n        }],\n    }],\n}});\n```\n```python\nimport pulumi\nimport pulumi_kubernetes as kubernetes\n\npod = kubernetes.core.v1.Pod(\"pod\", spec=kubernetes.core.v1.PodSpecArgs(\n    containers=[kubernetes.core.v1.ContainerArgs(\n        image=\"nginx:1.14.2\",\n        name=\"nginx\",\n        ports=[kubernetes.core.v1.ContainerPortArgs(\n            container_port=80,\n        )],\n    )],\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Kubernetes = Pulumi.Kubernetes;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pod = new Kubernetes.Core.V1.Pod(\"pod\", new()\n    {\n        Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs\n        {\n            Containers = new[]\n            {\n                new Kubernetes.Types.Inputs.Core.V1.ContainerArgs\n                {\n                    Image = \"nginx:1.14.2\",\n                    Name = \"nginx\",\n                    Ports = new[]\n                    {\n                        new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs\n                        {\n                            ContainerPortValue = 80,\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n\n```\n```go\npackage main\n\nimport (\n\tcorev1 \"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := corev1.NewPod(ctx, \"pod\", \u0026corev1.PodArgs{\n\t\t\tSpec: \u0026corev1.PodSpecArgs{\n\t\t\t\tContainers: corev1.ContainerArray{\n\t\t\t\t\t\u0026corev1.ContainerArgs{\n\t\t\t\t\t\tImage: pulumi.String(\"nginx:1.14.2\"),\n\t\t\t\t\t\tName:  pulumi.String(\"nginx\"),\n\t\t\t\t\t\tPorts: corev1.ContainerPortArray{\n\t\t\t\t\t\t\t\u0026corev1.ContainerPortArgs{\n\t\t\t\t\t\t\t\tContainerPort: pulumi.Int(80),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.kubernetes.core_v1.Pod;\nimport com.pulumi.kubernetes.core_v1.PodArgs;\nimport com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pod = new Pod(\"pod\", PodArgs.builder()        \n            .spec(PodSpecArgs.builder()\n                .containers(ContainerArgs.builder()\n                    .image(\"nginx:1.14.2\")\n                    .name(\"nginx\")\n                    .ports(ContainerPortArgs.builder()\n                        .containerPort(80)\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\ndescription: Create a Pod with auto-naming\nname: yaml-example\nresources:\n    pod:\n        properties:\n            spec:\n                containers:\n                    - image: nginx:1.14.2\n                      name: nginx\n                      ports:\n                        - containerPort: 80\n        type: kubernetes:core/v1:Pod\nruntime: yaml\n```\n{{% /example %}}\n{{% example %}}\n### Create a Pod with a user-specified name\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kubernetes from \"@pulumi/kubernetes\";\n\nconst pod = new kubernetes.core.v1.Pod(\"pod\", {\n    metadata: {\n        name: \"nginx\",\n    },\n    spec: {\n        containers: [{\n            image: \"nginx:1.14.2\",\n            name: \"nginx\",\n            ports: [{\n                containerPort: 80,\n            }],\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_kubernetes as kubernetes\n\npod = kubernetes.core.v1.Pod(\"pod\",\n    metadata=kubernetes.meta.v1.ObjectMetaArgs(\n        name=\"nginx\",\n    ),\n    spec=kubernetes.core.v1.PodSpecArgs(\n        containers=[kubernetes.core.v1.ContainerArgs(\n            image=\"nginx:1.14.2\",\n            name=\"nginx\",\n            ports=[kubernetes.core.v1.ContainerPortArgs(\n                container_port=80,\n            )],\n        )],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Kubernetes = Pulumi.Kubernetes;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pod = new Kubernetes.Core.V1.Pod(\"pod\", new()\n    {\n        Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs\n        {\n            Name = \"nginx\",\n        },\n        Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs\n        {\n            Containers = new[]\n            {\n                new Kubernetes.Types.Inputs.Core.V1.ContainerArgs\n                {\n                    Image = \"nginx:1.14.2\",\n                    Name = \"nginx\",\n                    Ports = new[]\n                    {\n                        new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs\n                        {\n                            ContainerPortValue = 80,\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n\n```\n```go\npackage main\n\nimport (\n\tcorev1 \"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1\"\n\tmetav1 \"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := corev1.NewPod(ctx, \"pod\", \u0026corev1.PodArgs{\n\t\t\tMetadata: \u0026metav1.ObjectMetaArgs{\n\t\t\t\tName: pulumi.String(\"nginx\"),\n\t\t\t},\n\t\t\tSpec: \u0026corev1.PodSpecArgs{\n\t\t\t\tContainers: corev1.ContainerArray{\n\t\t\t\t\t\u0026corev1.ContainerArgs{\n\t\t\t\t\t\tImage: pulumi.String(\"nginx:1.14.2\"),\n\t\t\t\t\t\tName:  pulumi.String(\"nginx\"),\n\t\t\t\t\t\tPorts: corev1.ContainerPortArray{\n\t\t\t\t\t\t\t\u0026corev1.ContainerPortArgs{\n\t\t\t\t\t\t\t\tContainerPort: pulumi.Int(80),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.kubernetes.core_v1.Pod;\nimport com.pulumi.kubernetes.core_v1.PodArgs;\nimport com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;\nimport com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pod = new Pod(\"pod\", PodArgs.builder()        \n            .metadata(ObjectMetaArgs.builder()\n                .name(\"nginx\")\n                .build())\n            .spec(PodSpecArgs.builder()\n                .containers(ContainerArgs.builder()\n                    .image(\"nginx:1.14.2\")\n                    .name(\"nginx\")\n                    .ports(ContainerPortArgs.builder()\n                        .containerPort(80)\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\ndescription: Create a Pod with a user-specified name\nname: yaml-example\nresources:\n    pod:\n        properties:\n            metadata:\n                name: nginx\n            spec:\n                containers:\n                    - image: nginx:1.14.2\n                      name: nginx\n                      ports:\n                        - containerPort: 80\n        type: kubernetes:core/v1:Pod\nruntime: yaml\n```\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "const": "v1"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "const": "Pod"
                },
                "metadata": {
                    "$ref": "/kubernetes/v4.14.0/schema.json#/types/kubernetes:meta/v1:ObjectMeta",
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "spec": {
                    "$ref": "/kubernetes/v4.14.0/schema.json#/types/kubernetes:core/v1:PodSpec",
                    "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                },
                "status": {
                    "$ref": "/kubernetes/v4.14.0/schema.json#/types/kubernetes:core/v1:PodStatus",
                    "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:config:User": {
            "properties": {
                "clientCertificateData": {
                    "type": "string",
                    "description": "TODO"
                },
                "clientKeyData": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "type": "object",
            "required": [
                "clientCertificateData",
                "clientKeyData"
            ]
        },
        "kubernetes-the-hard-way:remote:Architecture": {
            "description": "CPU architecture",
            "type": "string",
            "enum": [
                {
                    "value": "amd64"
                },
                {
                    "value": "arm64"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:EtcdConfigurationProps": {
            "description": "Props for resources that consume etcd configuration.",
            "properties": {
                "caFilePath": {
                    "type": "string",
                    "description": "Path to the certificate authority file on the remote system."
                },
                "certFilePath": {
                    "type": "string",
                    "description": "Path to the certificate file on the remote system."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "Etcd's data directory."
                },
                "etcdPath": {
                    "type": "string",
                    "description": "Path to the etcd binary."
                },
                "internalIp": {
                    "type": "string",
                    "description": "Internal IP of the etcd node."
                },
                "keyFilePath": {
                    "type": "string",
                    "description": "Path to the private key file on the remote system."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the etcd node."
                }
            },
            "type": "object",
            "required": [
                "caFilePath",
                "certFilePath",
                "dataDirectory",
                "etcdPath",
                "internalIp",
                "keyFilePath",
                "name"
            ]
        },
        "kubernetes-the-hard-way:remote:EtcdNode": {
            "description": "Etcd node description.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture of the node."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The internal IP of the node."
                }
            },
            "type": "object",
            "required": [
                "connection",
                "internalIp"
            ]
        },
        "kubernetes-the-hard-way:remote:KubeProxyConfigurationProps": {
            "description": "Props for resources that consume kube-proxy configuration.",
            "properties": {
                "configurationFilePath": {
                    "type": "string",
                    "description": "Path to the kube proxy configuration file"
                },
                "kubeProxyPath": {
                    "type": "string",
                    "description": "Path to the kube-proxy binary."
                }
            },
            "type": "object",
            "required": [
                "configurationFilePath",
                "kubeProxyPath"
            ]
        },
        "kubernetes-the-hard-way:remote:KubeletConfigurationProps": {
            "description": "Props for resources that consume kubelet configuration.",
            "properties": {
                "configurationFilePath": {
                    "type": "string",
                    "description": "Path to the kubelet configuration."
                },
                "kubeconfigPath": {
                    "type": "string",
                    "description": "Path to the kubeconfig the kubelet will use"
                },
                "kubeletPath": {
                    "type": "string",
                    "description": "Path to the kubelet binary."
                },
                "registerNode": {
                    "type": "boolean",
                    "description": "Whether to register the node. Defaults to `true`."
                },
                "v": {
                    "type": "integer",
                    "description": "Verbosity. Defaults to `2`."
                }
            },
            "type": "object",
            "required": [
                "configurationFilePath",
                "kubeconfigPath",
                "kubeletPath",
                "registerNode",
                "v"
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdDelegate": {
            "description": "https://www.man7.org/linux/man-pages/man5/systemd.resource-control.5.html",
            "type": "string",
            "enum": [
                {
                    "value": "yes"
                },
                {
                    "value": "no"
                },
                {
                    "value": "cpu"
                },
                {
                    "value": "cpuacct"
                },
                {
                    "value": "cpuset"
                },
                {
                    "value": "io"
                },
                {
                    "value": "blkio"
                },
                {
                    "value": "memory"
                },
                {
                    "value": "devices"
                },
                {
                    "value": "pids"
                },
                {
                    "value": "bpf-firewall"
                },
                {
                    "value": "bpf-devices"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdInstallSection": {
            "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BInstall%5D%20Section%20Options",
            "properties": {
                "wantedBy": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable."
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:remote:SystemdKillMode": {
            "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.kill.html#Description",
            "type": "string",
            "enum": [
                {
                    "value": "control-group"
                },
                {
                    "value": "mixed"
                },
                {
                    "value": "process"
                },
                {
                    "value": "none"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdServiceExitType": {
            "description": "Systemd service exit type.",
            "type": "string",
            "enum": [
                {
                    "value": "main"
                },
                {
                    "value": "cgroup"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdServiceRestart": {
            "description": "Systemd service restart behavior.",
            "type": "string",
            "enum": [
                {
                    "value": "no"
                },
                {
                    "value": "on-success"
                },
                {
                    "value": "on-failure"
                },
                {
                    "value": "on-abnormal"
                },
                {
                    "value": "on-watchdog"
                },
                {
                    "value": "on-abort"
                },
                {
                    "value": "always"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdServiceSection": {
            "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#",
            "properties": {
                "delegate": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdDelegate",
                    "description": "Turns on delegation of further resource control partitioning to processes of the unit."
                },
                "environment": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "execStart": {
                    "type": "string",
                    "description": "Commands that are executed when this service is started."
                },
                "execStartPre": {
                    "type": "string",
                    "description": "Additional commands that are executed before the command in ExecStart=."
                },
                "exitType": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceExitType",
                    "description": "Specifies when the manager should consider the service to be finished."
                },
                "killMode": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdKillMode",
                    "description": "Specifies how processes of this unit shall be killed."
                },
                "limitCore": {
                    "type": "string",
                    "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#Process%20Properties"
                },
                "limitNProc": {
                    "type": "string",
                    "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#Process%20Properties"
                },
                "limitNoFile": {
                    "type": "integer",
                    "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#Process%20Properties"
                },
                "oomScoreAdjust": {
                    "type": "integer",
                    "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#OOMScoreAdjust="
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Configures the time to sleep before restarting a service (as configured with Restart=)."
                },
                "type": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceType",
                    "description": "Configures the mechanism via which the service notifies the manager that the service start-up has finished."
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:remote:SystemdServiceType": {
            "description": "Systemd service type.",
            "type": "string",
            "enum": [
                {
                    "value": "simple"
                },
                {
                    "value": "exec"
                },
                {
                    "value": "forking"
                },
                {
                    "value": "oneshot"
                },
                {
                    "value": "dbus"
                },
                {
                    "value": "notify"
                },
                {
                    "value": "notify-reload"
                },
                {
                    "value": "idle"
                }
            ]
        },
        "kubernetes-the-hard-way:remote:SystemdUnitSection": {
            "description": "https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#",
            "properties": {
                "after": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Those two settings configure ordering dependencies between units."
                },
                "before": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Those two settings configure ordering dependencies between units."
                },
                "bindsTo": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configures requirement dependencies, very similar in style to Requires=."
                },
                "description": {
                    "type": "string",
                    "description": "A short human readable title of the unit."
                },
                "documentation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A space-separated list of URIs referencing documentation for this unit or its configuration."
                },
                "requires": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Similar to Wants=, but declares a stronger requirement dependency."
                },
                "requisite": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately."
                },
                "wants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configures (weak) requirement dependencies on other units."
                }
            },
            "type": "object"
        },
        "kubernetes-the-hard-way:tls:Algorithm": {
            "description": "Private key algorithm.",
            "type": "string",
            "enum": [
                {
                    "value": "RSA"
                },
                {
                    "value": "ECDSA"
                },
                {
                    "value": "ED25519"
                }
            ]
        },
        "kubernetes-the-hard-way:tls:AllowedUsage": {
            "description": "Certificate allowed usage",
            "type": "string",
            "enum": [
                {
                    "name": "certSigning",
                    "value": "cert_signing"
                },
                {
                    "name": "clientAuth",
                    "value": "client_auth"
                },
                {
                    "name": "crlSigning",
                    "value": "crl_signing"
                },
                {
                    "name": "digitalSignature",
                    "value": "digital_signature"
                },
                {
                    "name": "keyEncipherment",
                    "value": "key_encipherment"
                },
                {
                    "name": "serverAuth",
                    "value": "server_auth"
                }
            ]
        },
        "kubernetes-the-hard-way:tls:Bundle": {
            "description": "A CA + Cert + Key bundle",
            "properties": {
                "caPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate authority data."
                },
                "certPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate data."
                },
                "keyPem": {
                    "type": "string",
                    "description": "The PEM encoded private key data"
                }
            },
            "type": "object",
            "required": [
                "caPem",
                "certPem",
                "keyPem"
            ]
        },
        "kubernetes-the-hard-way:tls:ClusterPkiNode": {
            "description": "TODO",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The IP address of the node"
                },
                "role": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:NodeRole",
                    "description": "The role a node should be configured for"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "role"
            ]
        },
        "kubernetes-the-hard-way:tls:EcdsaCurve": {
            "description": "ECDSA algorithm curve",
            "type": "string",
            "enum": [
                {
                    "value": "P224"
                },
                {
                    "value": "P256"
                },
                {
                    "value": "P384"
                },
                {
                    "value": "P521"
                }
            ]
        },
        "kubernetes-the-hard-way:tls:KeyPair": {
            "description": "A certificate and key pair",
            "properties": {
                "cert": {
                    "oneOf": [
                        {
                            "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/locallySignedCert:LocallySignedCert"
                        },
                        {
                            "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/selfSignedCert:SelfSignedCert"
                        }
                    ],
                    "description": "The certificate resource."
                },
                "certPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate data."
                },
                "key": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/privateKey:PrivateKey",
                    "description": "The private key resource."
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "The PEM encoded private key data."
                },
                "publicKeyPem": {
                    "type": "string",
                    "description": "The PEM encoded public key data."
                }
            },
            "type": "object",
            "required": [
                "cert",
                "certPem",
                "key",
                "privateKeyPem",
                "publicKeyPem"
            ]
        },
        "kubernetes-the-hard-way:tls:NodeRole": {
            "description": "The role a node will play in the final cluster",
            "type": "string",
            "enum": [
                {
                    "value": "controlplane"
                },
                {
                    "value": "worker"
                }
            ]
        }
    },
    "provider": {},
    "resources": {
        "kubernetes-the-hard-way:config:CniBridgePluginConfiguration": {
            "description": "Get the `bridge` configuration.",
            "properties": {
                "result": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:CniBridgePluginConfiguration"
                },
                "yaml": {
                    "type": "string",
                    "description": "The yaml representation of the manifest."
                }
            },
            "required": [
                "result",
                "yaml"
            ],
            "inputProperties": {
                "bridge": {
                    "type": "string",
                    "description": "Bridge name."
                },
                "cniVersion": {
                    "type": "string",
                    "description": "CNI version."
                },
                "ipMasq": {
                    "type": "boolean",
                    "description": "IP masq."
                },
                "ipam": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:CniBridgeIpam",
                    "description": "IPAM"
                },
                "isGateway": {
                    "type": "boolean",
                    "description": "Is gateway."
                },
                "name": {
                    "type": "string",
                    "description": "CNI plugin name."
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to use."
                },
                "type": {
                    "type": "string",
                    "description": "CNI plugin type."
                }
            },
            "requiredInputs": [
                "subnet"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:config:CniLoopbackPluginConfiguration": {
            "description": "Get the `loopback` configuration.",
            "properties": {
                "result": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:CniLoopbackPluginConfiguration"
                },
                "yaml": {
                    "type": "string",
                    "description": "The yaml representation of the manifest."
                }
            },
            "required": [
                "result",
                "yaml"
            ],
            "inputProperties": {
                "cniVersion": {
                    "type": "string",
                    "description": "CNI version."
                },
                "name": {
                    "type": "string",
                    "description": "CNI plugin name."
                },
                "type": {
                    "type": "string",
                    "description": "CNI plugin type."
                }
            },
            "isComponent": true
        },
        "kubernetes-the-hard-way:config:ContainerdConfiguration": {
            "description": "Get the containerd configuration.",
            "properties": {
                "result": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdConfiguration"
                },
                "toml": {
                    "type": "string",
                    "description": "The toml representation of the configuration."
                }
            },
            "required": [
                "result",
                "toml"
            ],
            "inputProperties": {
                "cri": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdCriPluginConfiguration",
                    "plain": true,
                    "description": "The cri configuration."
                }
            },
            "isComponent": true
        },
        "kubernetes-the-hard-way:config:KubeProxyConfiguration": {
            "description": "kube-proxy configuration.",
            "properties": {
                "result": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:KubeProxyConfiguration"
                },
                "yaml": {
                    "type": "string",
                    "description": "The yaml representation of the manifest."
                }
            },
            "required": [
                "result",
                "yaml"
            ],
            "inputProperties": {
                "clusterCIDR": {
                    "type": "string",
                    "description": "Cluster CIDR."
                },
                "kubeconfig": {
                    "type": "string",
                    "description": "Path to the kubeconfig."
                },
                "mode": {
                    "type": "string",
                    "description": "TODO"
                }
            },
            "requiredInputs": [
                "kubeconfig",
                "clusterCIDR"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:config:KubeVipManifest": {
            "description": "Gets the static pod manifests for KubeVip.",
            "properties": {
                "result": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:PodManifest"
                },
                "yaml": {
                    "type": "string",
                    "description": "The yaml representation of the manifest."
                }
            },
            "required": [
                "result",
                "yaml"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "TODO"
                },
                "bgpAs": {
                    "type": "integer",
                    "description": "TODO"
                },
                "bgpEnable": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "bgpPeerAddress": {
                    "type": "string",
                    "description": "TODO"
                },
                "bgpPeerAs": {
                    "type": "integer",
                    "description": "TODO"
                },
                "bgpPeerPass": {
                    "type": "string",
                    "description": "TODO"
                },
                "bgpPeers": {
                    "type": "string",
                    "description": "TODO"
                },
                "bgpRouterId": {
                    "type": "string",
                    "description": "TODO"
                },
                "cpEnable": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "cpNamespace": {
                    "type": "string",
                    "description": "TODO"
                },
                "image": {
                    "type": "string",
                    "description": "Override the kube-vip image."
                },
                "kubeconfigPath": {
                    "type": "string",
                    "description": "Path to the kubeconfig on the remote host."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the static pod. Defaults to kube-vip.",
                    "default": "kube-vip"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace for the static pod. Defaults to kube-system.",
                    "default": "kube-system"
                },
                "port": {
                    "type": "integer",
                    "description": "TODO",
                    "default": 6443
                },
                "svcEnable": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "version": {
                    "type": "string",
                    "description": "Version of kube-vip to use."
                },
                "vipArp": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "vipCidr": {
                    "type": "integer",
                    "description": "TODO"
                },
                "vipDdns": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "vipInterface": {
                    "type": "string",
                    "description": "TODO"
                },
                "vipLeaderElection": {
                    "type": "boolean",
                    "description": "TODO"
                },
                "vipLeaseDuration": {
                    "type": "integer",
                    "description": "TODO"
                },
                "vipRenewDeadline": {
                    "type": "integer",
                    "description": "TODO"
                },
                "vipRetryPeriod": {
                    "type": "integer",
                    "description": "TODO"
                }
            },
            "requiredInputs": [
                "address",
                "kubeconfigPath",
                "vipCidr"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:config:KubeletConfiguration": {
            "description": "Get the kubelet configuration.",
            "properties": {
                "result": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:KubeletConfiguration"
                },
                "yaml": {
                    "type": "string",
                    "description": "The yaml representation of the manifest."
                }
            },
            "required": [
                "result",
                "yaml"
            ],
            "inputProperties": {
                "anonymous": {
                    "type": "boolean"
                },
                "authorizationMode": {
                    "type": "string"
                },
                "cgroupDriver": {
                    "type": "string"
                },
                "clientCAFile": {
                    "type": "string"
                },
                "clusterDNS": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clusterDomain": {
                    "type": "string"
                },
                "containerRuntimeEndpoint": {
                    "type": "string"
                },
                "podCIDR": {
                    "type": "string"
                },
                "resolvConf": {
                    "type": "string"
                },
                "runtimeRequestTimeout": {
                    "type": "string"
                },
                "tlsCertFile": {
                    "type": "string"
                },
                "tlsPrivateKeyFile": {
                    "type": "string"
                },
                "webhook": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "podCIDR"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:CniPluginsInstall": {
            "description": "Installs cni-plugins on a remote system",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "archiveName": {
                    "type": "string",
                    "description": "The name of the downloaded archive."
                },
                "bandwidthMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The bandwidth mv operation."
                },
                "bandwidthPath": {
                    "type": "string",
                    "description": "The bandwidth path on the remote system"
                },
                "bridgeMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The bridge mv operation."
                },
                "bridgePath": {
                    "type": "string",
                    "description": "The bridge path on the remote system"
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dhcpMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The dhcp mv operation."
                },
                "dhcpPath": {
                    "type": "string",
                    "description": "The dhcp path on the remote system"
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/opt/cni/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "dummyMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The dummy mv operation."
                },
                "dummyPath": {
                    "type": "string",
                    "description": "The dummy path on the remote system"
                },
                "firewallMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The firewall mv operation."
                },
                "firewallPath": {
                    "type": "string",
                    "description": "The firewall path on the remote system"
                },
                "hostDeviceMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The hostDevice mv operation."
                },
                "hostDevicePath": {
                    "type": "string",
                    "description": "The hostDevice path on the remote system"
                },
                "hostLocalMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The hostLocal mv operation."
                },
                "hostLocalPath": {
                    "type": "string",
                    "description": "The hostLocal path on the remote system"
                },
                "ipvlanMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The ipvlan mv operation."
                },
                "ipvlanPath": {
                    "type": "string",
                    "description": "The ipvlan path on the remote system"
                },
                "loopbackMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The loopback mv operation."
                },
                "loopbackPath": {
                    "type": "string",
                    "description": "The loopback path on the remote system"
                },
                "macvlanMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The macvlan mv operation."
                },
                "macvlanPath": {
                    "type": "string",
                    "description": "The macvlan path on the remote system"
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "portmapMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The portmap mv operation."
                },
                "portmapPath": {
                    "type": "string",
                    "description": "The portmap path on the remote system"
                },
                "ptpMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The ptp mv operation."
                },
                "ptpPath": {
                    "type": "string",
                    "description": "The ptp path on the remote system"
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "sbrMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The sbr mv operation."
                },
                "sbrPath": {
                    "type": "string",
                    "description": "The sbr path on the remote system"
                },
                "staticMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The static mv operation."
                },
                "staticPath": {
                    "type": "string",
                    "description": "The static path on the remote system"
                },
                "tapMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The tap mv operation."
                },
                "tapPath": {
                    "type": "string",
                    "description": "The tap path on the remote system"
                },
                "tar": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Tar",
                    "description": "The tar operation."
                },
                "tuningMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The tuning mv operation."
                },
                "tuningPath": {
                    "type": "string",
                    "description": "The tuning path on the remote system"
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                },
                "vlanMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The vlan mv operation."
                },
                "vlanPath": {
                    "type": "string",
                    "description": "The vlan path on the remote system"
                },
                "vrfMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The vrf mv operation."
                },
                "vrfPath": {
                    "type": "string",
                    "description": "The vrf path on the remote system"
                }
            },
            "required": [
                "architecture",
                "archiveName",
                "connection",
                "download",
                "directory",
                "mkdir",
                "mktemp",
                "rm",
                "tar",
                "url",
                "version",
                "bandwidthMv",
                "bandwidthPath",
                "bridgeMv",
                "bridgePath",
                "dhcpMv",
                "dhcpPath",
                "dummyMv",
                "dummyPath",
                "firewallMv",
                "firewallPath",
                "hostDeviceMv",
                "hostDevicePath",
                "hostLocalMv",
                "hostLocalPath",
                "ipvlanMv",
                "ipvlanPath",
                "loopbackMv",
                "loopbackPath",
                "macvlanMv",
                "macvlanPath",
                "portmapMv",
                "portmapPath",
                "ptpMv",
                "ptpPath",
                "sbrMv",
                "sbrPath",
                "staticMv",
                "staticPath",
                "tapMv",
                "tapPath",
                "tuningMv",
                "tuningPath",
                "vlanMv",
                "vlanPath",
                "vrfMv",
                "vrfPath"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/opt/cni/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:ContainerdInstall": {
            "description": "Installs containerd on a remote system",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "archiveName": {
                    "type": "string",
                    "description": "The name of the downloaded archive."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "containerdMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The containerd mv operation."
                },
                "containerdPath": {
                    "type": "string",
                    "description": "The containerd path on the remote system"
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "tar": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Tar",
                    "description": "The tar operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "architecture",
                "archiveName",
                "connection",
                "download",
                "directory",
                "mkdir",
                "mktemp",
                "rm",
                "tar",
                "url",
                "version",
                "containerdMv",
                "containerdPath"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:ContainerdService": {
            "description": "Containerd systemd service file. Will likely get replaced with a static function when https://github.com/pulumi/pulumi/issues/7583 gets resolved.",
            "properties": {
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdConfiguration",
                    "description": "Containerd configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "containerdPath": {
                    "type": "string",
                    "description": "Path to the containerd binary"
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "service": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "The remote systemd service."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "required": [
                "configuration",
                "connection",
                "service"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdConfiguration",
                    "description": "Containerd configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "containerdPath": {
                    "type": "string",
                    "description": "Path to the containerd binary"
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "requiredInputs": [
                "configuration",
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:ControlPlaneNode": {
            "description": "A kubernetes control plane node.",
            "properties": {
                "apiServerCount": {
                    "type": "integer",
                    "description": "The number of kube-apiserver instance."
                },
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The node's CPU architecture."
                },
                "audiLogPath": {
                    "type": "string",
                    "description": "The path to store the audit log file."
                },
                "caCertificatePath": {
                    "type": "string",
                    "description": "The path to the root certificate authority certificate."
                },
                "caPrivateKeyPath": {
                    "type": "string",
                    "description": "The path to the root certificate authority private key."
                },
                "clusterCIDR": {
                    "type": "string",
                    "description": "The cluster CIDR."
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster name."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "encryptionConfigFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The remote encryption config file."
                },
                "encryptionConfigYaml": {
                    "type": "string",
                    "description": "The v1/EncryptionConfig yaml."
                },
                "kubeApiServerCertificatePath": {
                    "type": "string",
                    "description": "The path to the kube-apiserver certificate."
                },
                "kubeApiServerInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:KubeApiServerInstall",
                    "description": "The kube-apiserver install."
                },
                "kubeApiServerInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kube-apiserver binary."
                },
                "kubeApiServerPrivateKeyPath": {
                    "type": "string",
                    "description": "The path to the kube-apiserver private key."
                },
                "kubeApiServerService": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "The kube-apiserver systemd service."
                },
                "kubeControllerManagerInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:KubeControllerManagerInstall",
                    "description": "The kube-controller-manager install."
                },
                "kubeControllerManagerInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kube-controller-manager binary."
                },
                "kubeControllerManagerKubeconfigPath": {
                    "type": "string",
                    "description": "The path to the kube-controller-manager kubeconfig file."
                },
                "kubeControllerManagerService": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "The kube-controller-manager systemd service."
                },
                "kubeSchedulerConfigYaml": {
                    "type": "string",
                    "description": "The kube-scheduler config yaml."
                },
                "kubeSchedulerInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:KubeSchedulerInstall",
                    "description": "The kube-scheduler isntall."
                },
                "kubeSchedulerInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kube-scheduler binary."
                },
                "kubeSchedulerKubeconfigPath": {
                    "type": "string",
                    "description": "The path to the kube-scheduler kubeconfig file."
                },
                "kubeSchedulerService": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "The kube-scheduler systemd service."
                },
                "kubectlInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:KubectlInstall",
                    "description": "The kubectl install."
                },
                "kubectlInstallDirectory": {
                    "type": "string",
                    "description": "The path to store the kubectl binary."
                },
                "kubernetesConfigurationMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The kubernetes configuration mkdir operation."
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of kubernetes to use."
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node."
                },
                "serviceAccountsCertificatePath": {
                    "type": "string",
                    "description": "The path to the service accounts certificate."
                },
                "serviceAccountsPrivateKeyPath": {
                    "type": "string",
                    "description": "The path to the service accounts private key."
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "The IP range to use for cluster services."
                },
                "varLibKubernetesMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The /var/lib/kubernetes mkdir operation."
                }
            },
            "required": [
                "apiServerCount",
                "architecture",
                "connection",
                "caCertificatePath",
                "caPrivateKeyPath",
                "encryptionConfigYaml",
                "kubeApiServerCertificatePath",
                "kubeApiServerPrivateKeyPath",
                "kubeControllerManagerKubeconfigPath",
                "kubeSchedulerConfigYaml",
                "kubeSchedulerKubeconfigPath",
                "serviceAccountsCertificatePath",
                "serviceAccountsPrivateKeyPath",
                "kubeApiServerInstall",
                "kubeControllerManagerInstall",
                "kubectlInstall",
                "kubernetesConfigurationMkdir",
                "kubeSchedulerInstall",
                "varLibKubernetesMkdir"
            ],
            "inputProperties": {
                "apiServerCount": {
                    "type": "integer",
                    "description": "The number of kube-apiserver instance."
                },
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The node's CPU architecture."
                },
                "audiLogPath": {
                    "type": "string",
                    "description": "The path to store the audit log file."
                },
                "caCertificatePath": {
                    "type": "string",
                    "description": "The path to the root certificate authority certificate."
                },
                "caPrivateKeyPath": {
                    "type": "string",
                    "description": "The path to the root certificate authority private key."
                },
                "clusterCIDR": {
                    "type": "string",
                    "description": "The cluster CIDR."
                },
                "clusterName": {
                    "type": "string",
                    "description": "The cluster name."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "encryptionConfigYaml": {
                    "type": "string",
                    "description": "The v1/EncryptionConfig yaml."
                },
                "kubeApiServerCertificatePath": {
                    "type": "string",
                    "description": "The path to the kube-apiserver certificate."
                },
                "kubeApiServerInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kube-apiserver binary."
                },
                "kubeApiServerPrivateKeyPath": {
                    "type": "string",
                    "description": "The path to the kube-apiserver private key."
                },
                "kubeControllerManagerInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kube-controller-manager binary."
                },
                "kubeControllerManagerKubeconfigPath": {
                    "type": "string",
                    "description": "The path to the kube-controller-manager kubeconfig file."
                },
                "kubeSchedulerConfigYaml": {
                    "type": "string",
                    "description": "The kube-scheduler config yaml."
                },
                "kubeSchedulerInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kube-scheduler binary."
                },
                "kubeSchedulerKubeconfigPath": {
                    "type": "string",
                    "description": "The path to the kube-scheduler kubeconfig file."
                },
                "kubectlInstallDirectory": {
                    "type": "string",
                    "description": "The path to store the kubectl binary."
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of kubernetes to use."
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node."
                },
                "serviceAccountsCertificatePath": {
                    "type": "string",
                    "description": "The path to the service accounts certificate."
                },
                "serviceAccountsPrivateKeyPath": {
                    "type": "string",
                    "description": "The path to the service accounts private key."
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "The IP range to use for cluster services."
                }
            },
            "requiredInputs": [
                "apiServerCount",
                "architecture",
                "connection",
                "caCertificatePath",
                "caPrivateKeyPath",
                "encryptionConfigYaml",
                "kubeApiServerCertificatePath",
                "kubeApiServerPrivateKeyPath",
                "kubeControllerManagerKubeconfigPath",
                "kubeSchedulerConfigYaml",
                "kubeSchedulerKubeconfigPath",
                "serviceAccountsCertificatePath",
                "serviceAccountsPrivateKeyPath"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:CrictlInstall": {
            "description": "Installs crictl on a remote system",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "archiveName": {
                    "type": "string",
                    "description": "The name of the downloaded archive."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "crictlMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The crictl mv operation."
                },
                "crictlPath": {
                    "type": "string",
                    "description": "The crictl path on the remote system"
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "tar": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Tar",
                    "description": "The tar operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "architecture",
                "archiveName",
                "connection",
                "download",
                "directory",
                "mkdir",
                "mktemp",
                "rm",
                "tar",
                "url",
                "version",
                "crictlMv",
                "crictlPath"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:Download": {
            "description": "Downloads the file specified by `url` onto a remote system.",
            "properties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "destination": {
                    "type": "string",
                    "description": "The fully qualified path on the remote system where the file should be downloaded to."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "removeOnDelete": {
                    "type": "boolean",
                    "plain": true,
                    "description": "Remove the downloaded fiel when the resource is deleted."
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the file to be downloaded."
                },
                "wget": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Wget",
                    "description": "The wget operation."
                }
            },
            "required": [
                "connection",
                "destination",
                "mkdir",
                "removeOnDelete",
                "url",
                "wget"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "destination": {
                    "type": "string",
                    "description": "The fully qualified path on the remote system where the file should be downloaded to."
                },
                "removeOnDelete": {
                    "type": "boolean",
                    "plain": true,
                    "description": "Remove the downloaded fiel when the resource is deleted."
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the file to be downloaded."
                }
            },
            "requiredInputs": [
                "connection",
                "destination",
                "url"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:EtcdCluster": {
            "description": "Creates an etcd cluster from one or more remote systems.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "TODO"
                },
                "binaryDirectory": {
                    "type": "string",
                    "description": "TODO"
                },
                "bundle": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Bundle",
                    "description": "The TLS bundle."
                },
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdConfiguration"
                    },
                    "description": "Map of node name to etcd configuration."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd configuration."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd data."
                },
                "install": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdInstall"
                    },
                    "description": "Map of node name to etcd install."
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdNode",
                        "plain": true
                    },
                    "plain": true,
                    "description": "Etcd node configuration. The key should be a name used to identify the node."
                },
                "service": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdService"
                    },
                    "description": "Map of node name to etcd systemd service."
                },
                "start": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:remote:StartEtcd"
                    },
                    "description": "Map of node name to etcd start commands."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "bundle",
                "nodes",
                "configuration",
                "install",
                "service",
                "start"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "TODO"
                },
                "binaryDirectory": {
                    "type": "string",
                    "description": "TODO"
                },
                "bundle": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Bundle",
                    "description": "The TLS bundle."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd configuration."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd data."
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdNode",
                        "plain": true
                    },
                    "plain": true,
                    "description": "Etcd node configuration. The key should be a name used to identify the node."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "bundle",
                "nodes"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:EtcdConfiguration": {
            "description": "Configures etcd on a remote system.",
            "properties": {
                "caFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The remote certificate authority file."
                },
                "caPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate authority data."
                },
                "certFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The remote certificate file."
                },
                "certPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate data."
                },
                "configurationChmod": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Chmod",
                    "description": "The configuration chmod operation."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to store etcd configuration.",
                    "default": "/etc/etcd"
                },
                "configurationMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The configuration mkdir operation."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory etcd will store its data.",
                    "default": "/var/lib/etcd"
                },
                "dataMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The data mkdir operation."
                },
                "etcdPath": {
                    "type": "string",
                    "description": "The path to the `etcd` binary."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The IP used to serve client requests and communicate with etcd peers."
                },
                "keyFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The remote key file."
                },
                "keyPem": {
                    "type": "string",
                    "description": "The PEM encoded key data."
                },
                "value": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps",
                    "description": "A bag of properties to be consumed by other resources."
                }
            },
            "required": [
                "caPem",
                "certPem",
                "connection",
                "etcdPath",
                "internalIp",
                "keyPem",
                "caFile",
                "certFile",
                "configurationDirectory",
                "configurationMkdir",
                "dataDirectory",
                "dataMkdir",
                "keyFile",
                "value"
            ],
            "inputProperties": {
                "caPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate authority data."
                },
                "certPem": {
                    "type": "string",
                    "description": "The PEM encoded certificate data."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to store etcd configuration.",
                    "default": "/etc/etcd"
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory etcd will store its data.",
                    "default": "/var/lib/etcd"
                },
                "etcdPath": {
                    "type": "string",
                    "description": "The path to the `etcd` binary."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The IP used to serve client requests and communicate with etcd peers."
                },
                "keyPem": {
                    "type": "string",
                    "description": "The PEM encoded key data."
                }
            },
            "requiredInputs": [
                "caPem",
                "certPem",
                "connection",
                "etcdPath",
                "internalIp",
                "keyPem"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:EtcdInstall": {
            "description": "Installs etcd on a remote system",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "archiveName": {
                    "type": "string",
                    "description": "The name of the downloaded archive."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "etcdMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The etcd mv operation."
                },
                "etcdPath": {
                    "type": "string",
                    "description": "The etcd path on the remote system"
                },
                "etcdctlMv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The etcdctl mv operation."
                },
                "etcdctlPath": {
                    "type": "string",
                    "description": "The etcdctl path on the remote system"
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "tar": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Tar",
                    "description": "The tar operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "architecture",
                "archiveName",
                "connection",
                "download",
                "directory",
                "mkdir",
                "mktemp",
                "rm",
                "tar",
                "url",
                "version",
                "etcdMv",
                "etcdPath",
                "etcdctlMv",
                "etcdctlPath"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:EtcdService": {
            "description": "Etcd systemd service file. Will likely get replaced with a static function when https://github.com/pulumi/pulumi/issues/7583 gets resolved.",
            "properties": {
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps",
                    "description": "Etcd configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps"
                    },
                    "description": "Etcd peer configuration."
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "service": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "The remote systemd service."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "required": [
                "configuration",
                "connection",
                "peers",
                "service"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps",
                    "description": "Etcd configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:remote:EtcdConfigurationProps"
                    },
                    "description": "Etcd peer configuration."
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "requiredInputs": [
                "configuration",
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:File": {
            "properties": {
                "command": {
                    "$ref": "/command/v1.0.0/schema.json#/resources/command:remote:Command",
                    "description": "The executed command."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "content": {
                    "type": "string",
                    "description": "The content of the file."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the file on the remote host."
                },
                "stderr": {
                    "type": "string",
                    "description": "The standard error of the command's process"
                },
                "stdin": {
                    "type": "string",
                    "description": "Pass a string to the command's process as standard in"
                },
                "stdout": {
                    "type": "string",
                    "description": "The standard output of the command's process"
                }
            },
            "required": [
                "command",
                "connection",
                "content",
                "path",
                "stderr",
                "stdin",
                "stdout"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "content": {
                    "type": "string",
                    "description": "The content of the file."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the file on the remote host."
                }
            },
            "requiredInputs": [
                "connection",
                "content",
                "path"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeApiServerInstall": {
            "description": "Installs kube-apiserver on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeControllerManagerInstall": {
            "description": "Installs kube-controller-manager on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeProxyInstall": {
            "description": "Installs kube-proxy on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeProxyService": {
            "description": "Kubelet systemd service file. Will likely get replaced with a static function when https://github.com/pulumi/pulumi/issues/7583 gets resolved.",
            "properties": {
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:KubeProxyConfigurationProps",
                    "description": "Kubelet configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "service": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "The remote systemd service."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "required": [
                "configuration",
                "connection",
                "service"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:KubeProxyConfigurationProps",
                    "description": "Kubelet configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "requiredInputs": [
                "configuration",
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeSchedulerInstall": {
            "description": "Installs kube-scheduler on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeadmInstall": {
            "description": "Installs kubeadm on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tools:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubectlInstall": {
            "description": "Installs kubectl on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeletInstall": {
            "description": "Installs kubelet on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:KubeletService": {
            "description": "Kubelet systemd service file. Will likely get replaced with a static function when https://github.com/pulumi/pulumi/issues/7583 gets resolved.",
            "properties": {
                "after": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Waits for any units defined here."
                },
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:KubeletConfigurationProps",
                    "description": "Kubelet configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "requires": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires any units defined here."
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "service": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "The remote systemd service."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "required": [
                "after",
                "configuration",
                "connection",
                "requires",
                "service"
            ],
            "inputProperties": {
                "after": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Waits for any units defined here."
                },
                "configuration": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:KubeletConfigurationProps",
                    "description": "Kubelet configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "description": {
                    "type": "string",
                    "description": "Optional systemd unit description."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file."
                },
                "documentation": {
                    "type": "string",
                    "description": "Optional systemd unit documentation"
                },
                "requires": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires any units defined here."
                },
                "restart": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceRestart",
                    "description": "Optionally override the systemd service restart behaviour. Defaults to `on-failure`."
                },
                "restartSec": {
                    "type": "string",
                    "description": "Optionally override the systemd service RestartSec. Defaults to `5`."
                },
                "wantedBy": {
                    "type": "string",
                    "description": "Optionally override the systemd service wanted-by. Defaults to `multi-user.target`."
                }
            },
            "requiredInputs": [
                "after",
                "configuration",
                "connection",
                "requires"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:ProvisionEtcd": {
            "description": "Starts etcd on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "TODO"
                },
                "binaryDirectory": {
                    "type": "string",
                    "description": "TODO"
                },
                "bundle": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Bundle",
                    "description": "The TLS bundle."
                },
                "configuration": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdConfiguration",
                    "description": "Etcd configuration."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd data."
                },
                "install": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:EtcdInstall",
                    "description": "Install etcd."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The internal IP of the etcd node"
                },
                "service": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:SystemdService",
                    "description": "Systemd service."
                },
                "start": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:StartEtcd",
                    "description": "Start etcd"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "bundle",
                "connection",
                "internalIp",
                "configuration",
                "install",
                "service",
                "start"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "TODO"
                },
                "binaryDirectory": {
                    "type": "string",
                    "description": "TODO"
                },
                "bundle": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Bundle",
                    "description": "The TLS bundle."
                },
                "configurationDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd configuration."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "dataDirectory": {
                    "type": "string",
                    "description": "The directory to use for etcd data."
                },
                "internalIp": {
                    "type": "string",
                    "description": "The internal IP of the etcd node"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "bundle",
                "connection",
                "internalIp"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:RuncInstall": {
            "description": "Installs runc on a remote system.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "binName": {
                    "type": "string",
                    "description": "The name of the installed binary."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "download": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:Download",
                    "description": "The download operation."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation."
                },
                "mktemp": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mktemp",
                    "description": "The mktemp operation."
                },
                "mv": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mv",
                    "description": "The mv operation."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the installed binary."
                },
                "rm": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Rm",
                    "description": "The rm operation."
                },
                "url": {
                    "type": "string",
                    "description": "The url used to download the binary."
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "required": [
                "connection",
                "architecture",
                "directory",
                "download",
                "mkdir",
                "mktemp",
                "mv",
                "path",
                "rm",
                "url",
                "version"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture to install."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The directory to install the binary to.",
                    "default": "/usr/local/bin"
                },
                "version": {
                    "type": "string",
                    "description": "The version to install."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:StartContainerd": {
            "description": "Starts `containerd` on a remote system",
            "properties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "daemonReload": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The daemon-reload command."
                },
                "enable": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The enable command."
                },
                "start": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The start command."
                }
            },
            "required": [
                "connection",
                "daemonReload",
                "enable",
                "start"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:StartEtcd": {
            "description": "Starts `etcd` on a remote system",
            "properties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "daemonReload": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The daemon-reload command."
                },
                "enable": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The enable command."
                },
                "start": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The start command."
                }
            },
            "required": [
                "connection",
                "daemonReload",
                "enable",
                "start"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:StartKubeProxy": {
            "description": "Starts `kube-proxy` on a remote system",
            "properties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "daemonReload": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The daemon-reload command."
                },
                "enable": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The enable command."
                },
                "start": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The start command."
                }
            },
            "required": [
                "connection",
                "daemonReload",
                "enable",
                "start"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:StartKubelet": {
            "description": "Starts `kubelet` on a remote system",
            "properties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "daemonReload": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The daemon-reload command."
                },
                "enable": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The enable command."
                },
                "start": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Systemctl",
                    "description": "The start command."
                }
            },
            "required": [
                "connection",
                "daemonReload",
                "enable",
                "start"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:StaticPod": {
            "description": "Create a static pod manifest on a remote system.",
            "properties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "file": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The remote manifest file."
                },
                "fileName": {
                    "type": "string",
                    "description": "The name of the file on the remote system."
                },
                "mkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The mkdir operation to ensure /etc/kubernetes/manifests exists."
                },
                "path": {
                    "type": "string",
                    "description": "The path to the manifest on the remote system."
                },
                "pod": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:PodManifest",
                    "description": "The pod manifest."
                }
            },
            "required": [
                "connection",
                "file",
                "fileName",
                "mkdir",
                "path",
                "pod"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "fileName": {
                    "type": "string",
                    "description": "The name of the file on the remote system."
                },
                "pod": {
                    "$ref": "#/types/kubernetes-the-hard-way:config:PodManifest",
                    "description": "The pod manifest."
                }
            },
            "requiredInputs": [
                "connection",
                "pod"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:SystemdService": {
            "description": "A systemd service on a remote system.",
            "properties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file.",
                    "default": "/etc/systemd/system"
                },
                "file": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The service file on the remote machine."
                },
                "install": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdInstallSection",
                    "description": "Describes the [Install] section of a systemd service file."
                },
                "service": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceSection",
                    "description": "Describes the [Service] section of a systemd service file."
                },
                "unit": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdUnitSection",
                    "description": "Describes the [Unit] section of a systemd service file."
                },
                "unitName": {
                    "type": "string",
                    "description": "Name of the systemd unit."
                }
            },
            "required": [
                "connection",
                "directory",
                "file",
                "service"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "directory": {
                    "type": "string",
                    "description": "The location to create the service file.",
                    "default": "/etc/systemd/system"
                },
                "install": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdInstallSection",
                    "description": "Describes the [Install] section of a systemd service file."
                },
                "service": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdServiceSection",
                    "description": "Describes the [Service] section of a systemd service file."
                },
                "unit": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:SystemdUnitSection",
                    "description": "Describes the [Unit] section of a systemd service file."
                },
                "unitName": {
                    "type": "string",
                    "description": "Name of the systemd unit."
                }
            },
            "requiredInputs": [
                "connection",
                "service"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:WorkerNode": {
            "description": "A Kubernetes worker node.",
            "properties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture of the node."
                },
                "caPath": {
                    "type": "string",
                    "description": "The path to the cluster certificate authority file."
                },
                "clusterCIDR": {
                    "type": "string",
                    "description": "The CIDR to use for the cluster."
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "The domain for the cluster to use. Defaults to cluster.local."
                },
                "cniBridgeConfiguration": {
                    "$ref": "#/resources/kubernetes-the-hard-way:config:CniBridgePluginConfiguration",
                    "description": "The CNI bridge plugin configuration."
                },
                "cniBridgeConfigurationFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The CNI bridge plugin configuration file."
                },
                "cniConfigurationDirectory": {
                    "type": "string",
                    "description": "The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d."
                },
                "cniInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store CNI plugin binaries. Defaults to /opt/cni/bin."
                },
                "cniLoopbackConfiguration": {
                    "$ref": "#/resources/kubernetes-the-hard-way:config:CniLoopbackPluginConfiguration",
                    "description": "The CNI loopback plugin configuration."
                },
                "cniLoopbackConfigurationFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The CNI loopback plugin configuration file."
                },
                "cniMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The CNI configuration mkdir operation."
                },
                "cniPluginsInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:CniPluginsInstall",
                    "description": "The CNI plugin install."
                },
                "cniVersion": {
                    "type": "string",
                    "description": "The CNI version to use."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "containerdConfiguration": {
                    "$ref": "#/resources/kubernetes-the-hard-way:config:ContainerdConfiguration",
                    "description": "The containerd configuration."
                },
                "containerdConfigurationDirectory": {
                    "type": "string",
                    "description": "The directory to store containerd configuration files. Defaults to /etc/containerd."
                },
                "containerdConfigurationFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The containerd configuration file."
                },
                "containerdInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:ContainerdInstall",
                    "description": "The containerd install."
                },
                "containerdInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the containerd binary. Defaults to /bin."
                },
                "containerdMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The containerd configuration mkdir operation."
                },
                "containerdService": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:ContainerdService",
                    "description": "The containerd systemd service."
                },
                "containerdVersion": {
                    "type": "string",
                    "description": "The containerd version to use."
                },
                "crictlInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:CrictlInstall",
                    "description": "The crictl install."
                },
                "crictlInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the crictl binary. Defaults to /usr/local/bin."
                },
                "kubeProxyConfiguration": {
                    "$ref": "#/resources/kubernetes-the-hard-way:config:KubeProxyConfiguration",
                    "description": "The kube-proxy configuration"
                },
                "kubeProxyConfigurationDirectory": {
                    "type": "string",
                    "description": "The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy."
                },
                "kubeProxyConfigurationFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The kube-proxy configuration file."
                },
                "kubeProxyInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:KubeProxyInstall",
                    "description": "The kube-proxy install."
                },
                "kubeProxyInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kube-proxy binary. Defaults to /usr/local/bin."
                },
                "kubeProxyKubeconfigPath": {
                    "type": "string",
                    "description": "The path to the kube-proxy's kubeconfig file."
                },
                "kubeProxyMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The kube-proxy configuration mkdir operation."
                },
                "kubeProxyService": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:KubeProxyService",
                    "description": "The kubelet systemd service."
                },
                "kubectlInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:KubectlInstall",
                    "description": "The kubectl install."
                },
                "kubectlInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kubectl binary. Defaults to /usr/local/bin."
                },
                "kubeletCertificatePath": {
                    "type": "string",
                    "description": "The path to the kubelet certificate."
                },
                "kubeletConfiguration": {
                    "$ref": "#/resources/kubernetes-the-hard-way:config:KubeletConfiguration",
                    "description": "The kubelet configuration"
                },
                "kubeletConfigurationDirectory": {
                    "type": "string",
                    "description": "The directory to store kubelet configuration files. Defaults to /var/lib/kubelet."
                },
                "kubeletConfigurationFile": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:File",
                    "description": "The kubelet configuration file."
                },
                "kubeletInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:KubeletInstall",
                    "description": "The kubelet install."
                },
                "kubeletInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kubelet binary. Defaults to /usr/local/bin."
                },
                "kubeletKubeconfigPath": {
                    "type": "string",
                    "description": "The path to the kubelet's kubeconfig file."
                },
                "kubeletMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The kubelet configuration mkdir operation."
                },
                "kubeletPrivateKeyPath": {
                    "type": "string",
                    "description": "The path to the kubelet private key file."
                },
                "kubeletService": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:KubeletService",
                    "description": "The kubelet systemd service."
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The kubernetes version to use."
                },
                "runcInstall": {
                    "$ref": "#/resources/kubernetes-the-hard-way:remote:RuncInstall",
                    "description": "The runc install."
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet for the cluster."
                },
                "varLibKubernetesMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The /var/lib/kubernetes mkdir operation."
                },
                "varRunKubernetesMkdir": {
                    "$ref": "/commandx/v0.1.2/schema.json#/resources/commandx:remote:Mkdir",
                    "description": "The /var/run/kubernetes mkdir operation."
                }
            },
            "required": [
                "architecture",
                "caPath",
                "connection",
                "kubeletCertificatePath",
                "kubeletPrivateKeyPath",
                "subnet",
                "cniMkdir",
                "cniBridgeConfiguration",
                "cniBridgeConfigurationFile",
                "cniLoopbackConfiguration",
                "cniLoopbackConfigurationFile",
                "containerdConfiguration",
                "containerdConfigurationFile",
                "containerdMkdir",
                "containerdInstall",
                "containerdService",
                "crictlInstall",
                "kubectlInstall",
                "kubeletConfiguration",
                "kubeletConfigurationFile",
                "kubeletInstall",
                "kubeletMkdir",
                "kubeletService",
                "kubeProxyConfiguration",
                "kubeProxyConfigurationFile",
                "kubeProxyMkdir",
                "kubeProxyService",
                "varLibKubernetesMkdir",
                "varRunKubernetesMkdir"
            ],
            "inputProperties": {
                "architecture": {
                    "$ref": "#/types/kubernetes-the-hard-way:remote:Architecture",
                    "description": "The CPU architecture of the node."
                },
                "caPath": {
                    "type": "string",
                    "description": "The path to the cluster certificate authority file."
                },
                "clusterCIDR": {
                    "type": "string",
                    "description": "The CIDR to use for the cluster."
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "The domain for the cluster to use. Defaults to cluster.local."
                },
                "cniConfigurationDirectory": {
                    "type": "string",
                    "description": "The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d."
                },
                "cniInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store CNI plugin binaries. Defaults to /opt/cni/bin."
                },
                "cniVersion": {
                    "type": "string",
                    "description": "The CNI version to use."
                },
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "containerdConfigurationDirectory": {
                    "type": "string",
                    "description": "The directory to store containerd configuration files. Defaults to /etc/containerd."
                },
                "containerdInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the containerd binary. Defaults to /bin."
                },
                "containerdVersion": {
                    "type": "string",
                    "description": "The containerd version to use."
                },
                "crictlInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the crictl binary. Defaults to /usr/local/bin."
                },
                "kubeProxyConfigurationDirectory": {
                    "type": "string",
                    "description": "The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy."
                },
                "kubeProxyInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kube-proxy binary. Defaults to /usr/local/bin."
                },
                "kubeProxyKubeconfigPath": {
                    "type": "string",
                    "description": "The path to the kube-proxy's kubeconfig file."
                },
                "kubectlInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kubectl binary. Defaults to /usr/local/bin."
                },
                "kubeletCertificatePath": {
                    "type": "string",
                    "description": "The path to the kubelet certificate."
                },
                "kubeletConfigurationDirectory": {
                    "type": "string",
                    "description": "The directory to store kubelet configuration files. Defaults to /var/lib/kubelet."
                },
                "kubeletInstallDirectory": {
                    "type": "string",
                    "description": "The directory to store the kubelet binary. Defaults to /usr/local/bin."
                },
                "kubeletKubeconfigPath": {
                    "type": "string",
                    "description": "The path to the kubelet's kubeconfig file."
                },
                "kubeletPrivateKeyPath": {
                    "type": "string",
                    "description": "The path to the kubelet private key file."
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The kubernetes version to use."
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet for the cluster."
                }
            },
            "requiredInputs": [
                "architecture",
                "caPath",
                "connection",
                "kubeletCertificatePath",
                "kubeletPrivateKeyPath",
                "subnet"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:remote:WorkerPreRequisites": {
            "description": "Verifies that all worker node pre-requisites have been met.",
            "properties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "conntrack": {
                    "$ref": "/command/v1.0.0/schema.json#/resources/command:remote:Command",
                    "description": "Verifies that the conntrack binary exists."
                },
                "ipset": {
                    "$ref": "/command/v1.0.0/schema.json#/resources/command:remote:Command",
                    "description": "Verifies that the ipset binary exists."
                },
                "socat": {
                    "$ref": "/command/v1.0.0/schema.json#/resources/command:remote:Command",
                    "description": "Verifies that the socat binary exists."
                },
                "swap": {
                    "$ref": "/command/v1.0.0/schema.json#/resources/command:remote:Command",
                    "description": "Verifies that swap is disabled."
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Trigger recheck on changes to this input."
                }
            },
            "required": [
                "connection",
                "conntrack",
                "ipset",
                "socat",
                "swap"
            ],
            "inputProperties": {
                "connection": {
                    "$ref": "/command/v1.0.0/schema.json#/types/command:remote:Connection",
                    "description": "The parameters with which to connect to the remote host."
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Trigger recheck on changes to this input."
                }
            },
            "requiredInputs": [
                "connection"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tls:Certificate": {
            "description": "A certificate key pair.",
            "properties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key."
                },
                "allowedUses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:tls:AllowedUsage"
                    },
                    "description": "List of key usages allowed for the issued certificate."
                },
                "caCertPem": {
                    "type": "string",
                    "description": "Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "caKeyAlgorithm": {
                    "type": "string",
                    "description": "Name of the algorithm used when generating the private key provided in `ca_private_key_pem`.\n"
                },
                "caPrivateKeyPem": {
                    "type": "string",
                    "description": "Private key of the Certificate Authority (CA) used to sign the certificate, in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "cert": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/locallySignedCert:LocallySignedCert",
                    "description": "The certificate."
                },
                "certPem": {
                    "type": "string",
                    "description": "Certificate data in PEM (RFC 1421).\n"
                },
                "certRequestPem": {
                    "type": "string",
                    "description": "Certificate request data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "csr": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/certRequest:CertRequest",
                    "description": "The certificate signing request."
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "earlyRenewalHours": {
                    "type": "integer",
                    "description": "The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This\ncan be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old\ncertificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate\nrevocation. Also, this advance update can only be performed should the Terraform configuration be applied during the\nearly renewal period. (default: `0`)\n"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "TODO"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "isCaCertificate": {
                    "type": "boolean",
                    "description": "Is the generated certificate representing a Certificate Authority (CA) (default: `false`).\n"
                },
                "key": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/privateKey:PrivateKey",
                    "description": "The private key"
                },
                "keyAlgorithm": {
                    "type": "string",
                    "description": "Name of the algorithm used when generating the private key provided in `private_key_pem`.\n"
                },
                "privateKeyOpenssh": {
                    "type": "string",
                    "description": "Private key data in [OpenSSH PEM (RFC 4716)](https://datatracker.ietf.org/doc/html/rfc4716) format.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "Private key data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "privateKeyPemPkcs8": {
                    "type": "string",
                    "description": "Private key data in [PKCS#8 PEM (RFC 5208)](https://datatracker.ietf.org/doc/html/rfc5208) format.\n"
                },
                "publicKeyFingerprintMd5": {
                    "type": "string",
                    "description": "The fingerprint of the public key data in OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the selected private key format is compatible, similarly to `public_key_openssh` and the ECDSA P224 limitations.\n"
                },
                "publicKeyFingerprintSha256": {
                    "type": "string",
                    "description": "The fingerprint of the public key data in OpenSSH SHA256 hash format, e.g. `SHA256:...`. Only available if the selected private key format is compatible, similarly to `public_key_openssh` and the ECDSA P224 limitations.\n"
                },
                "publicKeyOpenssh": {
                    "type": "string",
                    "description": "The public key data in \"Authorized Keys\".\n"
                },
                "publicKeyPem": {
                    "type": "string",
                    "description": "Public key data in PEM (RFC 1421).\n"
                },
                "readyForRenewal": {
                    "type": "boolean",
                    "description": "Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within the `early_renewal_hours`)?\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).\n"
                },
                "setSubjectKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "subject": {
                    "$ref": "/tls/v5.0.2/schema.json#/types/tls:index/CertRequestSubject:CertRequestSubject",
                    "description": "TODO"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "validityEndTime": {
                    "type": "string",
                    "description": "The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid for.\n"
                },
                "validityStartTime": {
                    "type": "string",
                    "description": "The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.\n"
                }
            },
            "required": [
                "certRequestPem",
                "keyAlgorithm",
                "privateKeyPem",
                "allowedUses",
                "caCertPem",
                "caKeyAlgorithm",
                "caPrivateKeyPem",
                "certPem",
                "certRequestPem",
                "earlyRenewalHours",
                "isCaCertificate",
                "readyForRenewal",
                "setSubjectKeyId",
                "validityEndTime",
                "validityPeriodHours",
                "validityStartTime",
                "algorithm",
                "ecdsaCurve",
                "privateKeyOpenssh",
                "privateKeyPem",
                "privateKeyPemPkcs8",
                "publicKeyFingerprintMd5",
                "publicKeyFingerprintSha256",
                "publicKeyOpenssh",
                "publicKeyPem",
                "rsaBits",
                "cert",
                "csr",
                "key"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key."
                },
                "allowedUses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kubernetes-the-hard-way:tls:AllowedUsage"
                    },
                    "description": "List of key usages allowed for the issued certificate."
                },
                "caCertPem": {
                    "type": "string",
                    "description": "Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "caPrivateKeyPem": {
                    "type": "string",
                    "description": "Private key of the Certificate Authority (CA) used to sign the certificate, in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n",
                    "secret": true
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "earlyRenewalHours": {
                    "type": "integer",
                    "description": "The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This\ncan be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old\ncertificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate\nrevocation. Also, this advance update can only be performed should the Terraform configuration be applied during the\nearly renewal period. (default: `0`)\n"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "TODO"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "isCaCertificate": {
                    "type": "boolean",
                    "description": "Is the generated certificate representing a Certificate Authority (CA) (default: `false`).\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).\n"
                },
                "setSubjectKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "subject": {
                    "$ref": "/tls/v5.0.2/schema.json#/types/tls:index/CertRequestSubject:CertRequestSubject",
                    "description": "TODO"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid for.\n"
                }
            },
            "requiredInputs": [
                "algorithm",
                "allowedUses",
                "caCertPem",
                "caPrivateKeyPem",
                "validityPeriodHours"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tls:ClusterPki": {
            "description": "The private key infrastructure for a cluster",
            "properties": {
                "admin": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The admin certificate."
                },
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key.",
                    "default": "RSA"
                },
                "ca": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:RootCa",
                    "description": "The cluster certificate authority."
                },
                "clusterName": {
                    "type": "string",
                    "description": "A name to use for the cluster"
                },
                "controllerManager": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The controller manager certificate."
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "When `algorithm` is `ECDSA`, the name of the elliptic curve to use."
                },
                "kubeProxy": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The kube proxy certificate."
                },
                "kubeScheduler": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The kube scheduler certificate."
                },
                "kubelet": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate"
                    },
                    "description": "Map of node name to kubelet certificate."
                },
                "kubernetes": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The kubernetes certificate."
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/kubernetes-the-hard-way:tls:ClusterPkiNode"
                    },
                    "description": "Map of node name to node configuration"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Publicly accessible IP address."
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits.",
                    "default": 2048
                },
                "serviceAccounts": {
                    "$ref": "#/resources/kubernetes-the-hard-way:tls:Certificate",
                    "description": "The service accounts certificate"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid.",
                    "default": 8076
                }
            },
            "required": [
                "admin",
                "ca",
                "controllerManager",
                "kubelet",
                "kubeProxy",
                "kubernetes",
                "kubeScheduler",
                "publicIp",
                "serviceAccounts",
                "validityPeriodHours",
                "clusterName",
                "nodes",
                "publicIp"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key.",
                    "default": "RSA"
                },
                "clusterName": {
                    "type": "string",
                    "description": "A name to use for the cluster"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "When `algorithm` is `ECDSA`, the name of the elliptic curve to use."
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/kubernetes-the-hard-way:tls:ClusterPkiNode"
                    },
                    "description": "Map of node name to node configuration"
                },
                "publicIp": {
                    "type": "string",
                    "description": "Publicly accessible IP address."
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits.",
                    "default": 2048
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid.",
                    "default": 8076
                }
            },
            "requiredInputs": [
                "clusterName",
                "nodes",
                "publicIp"
            ],
            "isComponent": true,
            "methods": {
                "getKubeconfig": "kubernetes-the-hard-way:tls:ClusterPki/getKubeconfig"
            }
        },
        "kubernetes-the-hard-way:tls:EncryptionKey": {
            "description": "A cluster encryption key.",
            "properties": {
                "bytes": {
                    "type": "integer",
                    "description": "The number of bytes requested. The minimum value for length is 1.\n"
                },
                "config": {
                    "type": "string",
                    "description": "The generated `v1/EncryptionConfig`."
                },
                "key": {
                    "$ref": "/random/v4.16.2/schema.json#/resources/random:index/randomBytes:RandomBytes",
                    "description": "The generated random key."
                }
            },
            "required": [
                "bytes",
                "config",
                "key"
            ],
            "inputProperties": {
                "bytes": {
                    "type": "integer",
                    "description": "The number of bytes requested. The minimum value for length is 1.\n"
                }
            },
            "requiredInputs": [
                "bytes"
            ],
            "isComponent": true
        },
        "kubernetes-the-hard-way:tls:RootCa": {
            "description": "Root certificate authority for a cluster.",
            "properties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key."
                },
                "allowedUses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.\n"
                },
                "cert": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/selfSignedCert:SelfSignedCert",
                    "description": "The certificate authority certificate."
                },
                "certPem": {
                    "type": "string",
                    "description": "Certificate data in PEM (RFC 1421).\n"
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "earlyRenewalHours": {
                    "type": "integer",
                    "description": "The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This\ncan be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old\ncertificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate\nrevocation. Also, this advance update can only be performed should the Terraform configuration be applied during the\nearly renewal period. (default: `0`)\n"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "TODO"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "isCaCertificate": {
                    "type": "boolean",
                    "description": "Is the generated certificate representing a Certificate Authority (CA) (default: `false`).\n"
                },
                "key": {
                    "$ref": "/tls/v5.0.2/schema.json#/resources/tls:index/privateKey:PrivateKey",
                    "description": "The certificate authority key."
                },
                "keyAlgorithm": {
                    "type": "string",
                    "description": "Name of the algorithm used when generating the private key provided in `private_key_pem`.\n"
                },
                "privateKeyOpenssh": {
                    "type": "string",
                    "description": "Private key data in [OpenSSH PEM (RFC 4716)](https://datatracker.ietf.org/doc/html/rfc4716) format.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "Private key data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.\n"
                },
                "privateKeyPemPkcs8": {
                    "type": "string",
                    "description": "Private key data in [PKCS#8 PEM (RFC 5208)](https://datatracker.ietf.org/doc/html/rfc5208) format.\n"
                },
                "publicKeyFingerprintMd5": {
                    "type": "string",
                    "description": "The fingerprint of the public key data in OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the selected private key format is compatible, similarly to `public_key_openssh` and the ECDSA P224 limitations.\n"
                },
                "publicKeyFingerprintSha256": {
                    "type": "string",
                    "description": "The fingerprint of the public key data in OpenSSH SHA256 hash format, e.g. `SHA256:...`. Only available if the selected private key format is compatible, similarly to `public_key_openssh` and the ECDSA P224 limitations.\n"
                },
                "publicKeyOpenssh": {
                    "type": "string",
                    "description": "The public key data in \"Authorized Keys\".\n"
                },
                "publicKeyPem": {
                    "type": "string",
                    "description": "Public key data in PEM (RFC 1421).\n"
                },
                "readyForRenewal": {
                    "type": "boolean",
                    "description": "Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within the `early_renewal_hours`)?\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).\n"
                },
                "setAuthorityKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include an [authority key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1): for self-signed certificates this is the same value as the [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "setSubjectKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "subject": {
                    "$ref": "/tls/v5.0.2/schema.json#/types/tls:index/SelfSignedCertSubject:SelfSignedCertSubject",
                    "description": "TODO"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "validityEndTime": {
                    "type": "string",
                    "description": "The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid for.\n"
                },
                "validityStartTime": {
                    "type": "string",
                    "description": "The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.\n"
                }
            },
            "required": [
                "allowedUses",
                "certPem",
                "earlyRenewalHours",
                "isCaCertificate",
                "keyAlgorithm",
                "privateKeyPem",
                "readyForRenewal",
                "setAuthorityKeyId",
                "setSubjectKeyId",
                "validityEndTime",
                "validityPeriodHours",
                "validityStartTime",
                "algorithm",
                "ecdsaCurve",
                "privateKeyOpenssh",
                "privateKeyPem",
                "privateKeyPemPkcs8",
                "publicKeyFingerprintMd5",
                "publicKeyFingerprintSha256",
                "publicKeyOpenssh",
                "publicKeyPem",
                "rsaBits",
                "cert",
                "key"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:Algorithm",
                    "description": "Name of the algorithm to use when generating the private key."
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS names for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "earlyRenewalHours": {
                    "type": "integer",
                    "description": "The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This\ncan be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old\ncertificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate\nrevocation. Also, this advance update can only be performed should the Terraform configuration be applied during the\nearly renewal period. (default: `0`)\n"
                },
                "ecdsaCurve": {
                    "$ref": "#/types/kubernetes-the-hard-way:tls:EcdsaCurve",
                    "description": "TODO"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "rsaBits": {
                    "type": "integer",
                    "description": "When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).\n"
                },
                "setAuthorityKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include an [authority key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1): for self-signed certificates this is the same value as the [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "setSubjectKeyId": {
                    "type": "boolean",
                    "description": "Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).\n"
                },
                "subject": {
                    "$ref": "/tls/v5.0.2/schema.json#/types/tls:index/SelfSignedCertSubject:SelfSignedCertSubject",
                    "description": "TODO"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URIs for which a certificate is being requested (i.e. certificate subjects).\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "Number of hours, after initial issuing, that the certificate will remain valid for.\n"
                }
            },
            "requiredInputs": [
                "validityPeriodHours"
            ],
            "isComponent": true
        }
    },
    "functions": {
        "kubernetes-the-hard-way:config:getCniBridgePluginConfiguration": {
            "description": "Get the `bridge` configuration.",
            "inputs": {
                "properties": {
                    "bridge": {
                        "type": "string",
                        "description": "Bridge name."
                    },
                    "cniVersion": {
                        "type": "string",
                        "description": "CNI version."
                    },
                    "ipMasq": {
                        "type": "boolean",
                        "description": "IP masq."
                    },
                    "ipam": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:CniBridgeIpam",
                        "description": "IPAM"
                    },
                    "isGateway": {
                        "type": "boolean",
                        "description": "Is gateway."
                    },
                    "name": {
                        "type": "string",
                        "description": "CNI plugin name."
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The subnet to use."
                    },
                    "type": {
                        "type": "string",
                        "description": "CNI plugin type."
                    }
                },
                "required": [
                    "subnet"
                ]
            },
            "outputs": {
                "description": "Get the `bridge` configuration.",
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:CniBridgePluginConfiguration"
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        "kubernetes-the-hard-way:config:getCniLoopbackPluginConfiguration": {
            "description": "Get the `loopback` configuration.",
            "inputs": {
                "properties": {
                    "cniVersion": {
                        "type": "string",
                        "description": "CNI version."
                    },
                    "name": {
                        "type": "string",
                        "description": "CNI plugin name."
                    },
                    "type": {
                        "type": "string",
                        "description": "CNI plugin type."
                    }
                }
            },
            "outputs": {
                "description": "Get the `loopback` configuration.",
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:CniLoopbackPluginConfiguration"
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        "kubernetes-the-hard-way:config:getContainerdConfiguration": {
            "description": "Get the containerd configuration.",
            "inputs": {
                "properties": {
                    "cri": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdCriPluginConfiguration",
                        "plain": true,
                        "description": "The cri configuration."
                    }
                }
            },
            "outputs": {
                "description": "Get the containerd configuration.",
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:ContainerdConfiguration"
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        "kubernetes-the-hard-way:config:getKubeProxyConfiguration": {
            "description": "kube-proxy configuration.",
            "inputs": {
                "properties": {
                    "clusterCIDR": {
                        "type": "string",
                        "description": "Cluster CIDR."
                    },
                    "kubeconfig": {
                        "type": "string",
                        "description": "Path to the kubeconfig."
                    },
                    "mode": {
                        "type": "string",
                        "description": "TODO"
                    }
                },
                "required": [
                    "kubeconfig",
                    "clusterCIDR"
                ]
            },
            "outputs": {
                "description": "kube-proxy configuration.",
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:KubeProxyConfiguration"
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        "kubernetes-the-hard-way:config:getKubeVipManifest": {
            "description": "Gets the static pod manifests for KubeVip.",
            "inputs": {
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "bgpAs": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "bgpEnable": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "bgpPeerAddress": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "bgpPeerAs": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "bgpPeerPass": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "bgpPeers": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "bgpRouterId": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "cpEnable": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "cpNamespace": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "image": {
                        "type": "string",
                        "description": "Override the kube-vip image."
                    },
                    "kubeconfigPath": {
                        "type": "string",
                        "description": "Path to the kubeconfig on the remote host."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the static pod. Defaults to kube-vip.",
                        "default": "kube-vip"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace for the static pod. Defaults to kube-system.",
                        "default": "kube-system"
                    },
                    "port": {
                        "type": "integer",
                        "description": "TODO",
                        "default": 6443
                    },
                    "svcEnable": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of kube-vip to use."
                    },
                    "vipArp": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "vipCidr": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "vipDdns": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "vipInterface": {
                        "type": "string",
                        "description": "TODO"
                    },
                    "vipLeaderElection": {
                        "type": "boolean",
                        "description": "TODO"
                    },
                    "vipLeaseDuration": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "vipRenewDeadline": {
                        "type": "integer",
                        "description": "TODO"
                    },
                    "vipRetryPeriod": {
                        "type": "integer",
                        "description": "TODO"
                    }
                },
                "required": [
                    "address",
                    "kubeconfigPath",
                    "vipCidr"
                ]
            },
            "outputs": {
                "description": "Gets the static pod manifests for KubeVip.",
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:PodManifest"
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        "kubernetes-the-hard-way:config:getKubeconfig": {
            "inputs": {
                "properties": {
                    "caPem": {
                        "type": "string",
                        "description": "Certificate authority data."
                    },
                    "options": {
                        "oneOf": [
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigAdminOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigWorkerOptions"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "admin": "#/types/kubernetes-the-hard-way:config:KubeconfigAdminOptions",
                                "kube-controller-manager": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions",
                                "kube-proxy": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions",
                                "kube-scheduler": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions",
                                "worker": "#/types/kubernetes-the-hard-way:config:KubeconfigWorkerOptions"
                            }
                        },
                        "plain": true,
                        "description": "Options for creating the kubeconfig."
                    }
                },
                "required": [
                    "caPem",
                    "options"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:Kubeconfig"
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        "kubernetes-the-hard-way:config:getKubeletConfiguration": {
            "description": "Get the kubelet configuration.",
            "inputs": {
                "properties": {
                    "anonymous": {
                        "type": "boolean"
                    },
                    "authorizationMode": {
                        "type": "string"
                    },
                    "cgroupDriver": {
                        "type": "string"
                    },
                    "clientCAFile": {
                        "type": "string"
                    },
                    "clusterDNS": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "clusterDomain": {
                        "type": "string"
                    },
                    "containerRuntimeEndpoint": {
                        "type": "string"
                    },
                    "podCIDR": {
                        "type": "string"
                    },
                    "resolvConf": {
                        "type": "string"
                    },
                    "runtimeRequestTimeout": {
                        "type": "string"
                    },
                    "tlsCertFile": {
                        "type": "string"
                    },
                    "tlsPrivateKeyFile": {
                        "type": "string"
                    },
                    "webhook": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "podCIDR"
                ]
            },
            "outputs": {
                "description": "Get the kubelet configuration.",
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:KubeletConfiguration"
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        "kubernetes-the-hard-way:tls:ClusterPki/getKubeconfig": {
            "description": "Get a kubeconfig configured from this PKI.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "$ref": "#/resources/kubernetes-the-hard-way:tls:ClusterPki",
                        "description": "The PKI to use certificate data from."
                    },
                    "options": {
                        "oneOf": [
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigAdminOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions"
                            },
                            {
                                "$ref": "#/types/kubernetes-the-hard-way:config:KubeconfigWorkerOptions"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "admin": "#/types/kubernetes-the-hard-way:config:KubeconfigAdminOptions",
                                "kube-controller-manager": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeControllerManagerOptions",
                                "kube-proxy": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeProxyOptions",
                                "kube-scheduler": "#/types/kubernetes-the-hard-way:config:KubeconfigKubeSchedulerOptions",
                                "worker": "#/types/kubernetes-the-hard-way:config:KubeconfigWorkerOptions"
                            }
                        },
                        "plain": true,
                        "description": "Options for creating the kubeconfig."
                    }
                },
                "required": [
                    "__self__",
                    "options"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "$ref": "#/types/kubernetes-the-hard-way:config:Kubeconfig"
                    }
                },
                "required": [
                    "result"
                ]
            }
        }
    }
}