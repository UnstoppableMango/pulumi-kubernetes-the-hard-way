/* tslint:disable */
/**
 * This file was automatically generated by pulumi-provider-scripts.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source Pulumi Schema file,
 * and run "pulumi-provider-scripts gen-provider-types" to regenerate this file. */
import * as pulumi from "@pulumi/pulumi";
export type ConstructComponent<T extends pulumi.ComponentResource = pulumi.ComponentResource> = (name: string, inputs: any, options: pulumi.ComponentResourceOptions) => T;
export type ResourceConstructor = {
    readonly "kubernetes-the-hard-way:config:CniBridgePluginConfiguration": ConstructComponent<CniBridgePluginConfiguration>;
    readonly "kubernetes-the-hard-way:config:CniLoopbackPluginConfiguration": ConstructComponent<CniLoopbackPluginConfiguration>;
    readonly "kubernetes-the-hard-way:config:ContainerdConfiguration": ConstructComponent<ContainerdConfiguration>;
    readonly "kubernetes-the-hard-way:config:KubeProxyConfiguration": ConstructComponent<KubeProxyConfiguration>;
    readonly "kubernetes-the-hard-way:config:KubeVipManifest": ConstructComponent<KubeVipManifest>;
    readonly "kubernetes-the-hard-way:config:KubeletConfiguration": ConstructComponent<KubeletConfiguration>;
    readonly "kubernetes-the-hard-way:remote:CniPluginsInstall": ConstructComponent<CniPluginsInstall>;
    readonly "kubernetes-the-hard-way:remote:ContainerdInstall": ConstructComponent<ContainerdInstall>;
    readonly "kubernetes-the-hard-way:remote:ContainerdService": ConstructComponent<ContainerdService>;
    readonly "kubernetes-the-hard-way:remote:ControlPlaneNode": ConstructComponent<ControlPlaneNode>;
    readonly "kubernetes-the-hard-way:remote:CrictlInstall": ConstructComponent<CrictlInstall>;
    readonly "kubernetes-the-hard-way:remote:Download": ConstructComponent<Download>;
    readonly "kubernetes-the-hard-way:remote:EtcdCluster": ConstructComponent<EtcdCluster>;
    readonly "kubernetes-the-hard-way:remote:EtcdConfiguration": ConstructComponent<EtcdConfiguration>;
    readonly "kubernetes-the-hard-way:remote:EtcdInstall": ConstructComponent<EtcdInstall>;
    readonly "kubernetes-the-hard-way:remote:EtcdService": ConstructComponent<EtcdService>;
    readonly "kubernetes-the-hard-way:remote:File": ConstructComponent<File>;
    readonly "kubernetes-the-hard-way:remote:KubeApiServerInstall": ConstructComponent<KubeApiServerInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeControllerManagerInstall": ConstructComponent<KubeControllerManagerInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeProxyInstall": ConstructComponent<KubeProxyInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeProxyService": ConstructComponent<KubeProxyService>;
    readonly "kubernetes-the-hard-way:remote:KubeSchedulerInstall": ConstructComponent<KubeSchedulerInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeadmInstall": ConstructComponent<KubeadmInstall>;
    readonly "kubernetes-the-hard-way:remote:KubectlInstall": ConstructComponent<KubectlInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeletInstall": ConstructComponent<KubeletInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeletService": ConstructComponent<KubeletService>;
    readonly "kubernetes-the-hard-way:remote:ProvisionEtcd": ConstructComponent<ProvisionEtcd>;
    readonly "kubernetes-the-hard-way:remote:RuncInstall": ConstructComponent<RuncInstall>;
    readonly "kubernetes-the-hard-way:remote:StartContainerd": ConstructComponent<StartContainerd>;
    readonly "kubernetes-the-hard-way:remote:StartEtcd": ConstructComponent<StartEtcd>;
    readonly "kubernetes-the-hard-way:remote:StartKubeProxy": ConstructComponent<StartKubeProxy>;
    readonly "kubernetes-the-hard-way:remote:StartKubelet": ConstructComponent<StartKubelet>;
    readonly "kubernetes-the-hard-way:remote:StaticPod": ConstructComponent<StaticPod>;
    readonly "kubernetes-the-hard-way:remote:SystemdService": ConstructComponent<SystemdService>;
    readonly "kubernetes-the-hard-way:remote:WorkerNode": ConstructComponent<WorkerNode>;
    readonly "kubernetes-the-hard-way:remote:WorkerPreRequisites": ConstructComponent<WorkerPreRequisites>;
    readonly "kubernetes-the-hard-way:tls:Certificate": ConstructComponent<Certificate>;
    readonly "kubernetes-the-hard-way:tls:ClusterPki": ConstructComponent<ClusterPki>;
    readonly "kubernetes-the-hard-way:tls:EncryptionKey": ConstructComponent<EncryptionKey>;
    readonly "kubernetes-the-hard-way:tls:RootCa": ConstructComponent<RootCa>;
};
export type Functions = {
    "kubernetes-the-hard-way:config:getCniBridgePluginConfiguration": (inputs: getCniBridgePluginConfigurationInputs) => Promise<getCniBridgePluginConfigurationOutputs>;
    "kubernetes-the-hard-way:config:getCniLoopbackPluginConfiguration": (inputs: getCniLoopbackPluginConfigurationInputs) => Promise<getCniLoopbackPluginConfigurationOutputs>;
    "kubernetes-the-hard-way:config:getContainerdConfiguration": (inputs: getContainerdConfigurationInputs) => Promise<getContainerdConfigurationOutputs>;
    "kubernetes-the-hard-way:config:getKubeProxyConfiguration": (inputs: getKubeProxyConfigurationInputs) => Promise<getKubeProxyConfigurationOutputs>;
    "kubernetes-the-hard-way:config:getKubeVipManifest": (inputs: getKubeVipManifestInputs) => Promise<getKubeVipManifestOutputs>;
    "kubernetes-the-hard-way:config:getKubeconfig": (inputs: getKubeconfigInputs) => Promise<getKubeconfigOutputs>;
    "kubernetes-the-hard-way:config:getKubeletConfiguration": (inputs: getKubeletConfigurationInputs) => Promise<getKubeletConfigurationOutputs>;
    "kubernetes-the-hard-way:tls:ClusterPki/getKubeconfig": (inputs: ClusterPki_getKubeconfigInputs) => Promise<ClusterPki_getKubeconfigOutputs>;
};
import * as command from "@pulumi/command";
import * as kubernetes from "@pulumi/kubernetes";
import * as random from "@pulumi/random";
import * as tls from "@pulumi/tls";
import * as commandx from "@unmango/pulumi-commandx";
export abstract class CniBridgePluginConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public result!: CniBridgePluginConfigurationOutputs | pulumi.Output<CniBridgePluginConfigurationOutputs>;
    public yaml!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:config:CniBridgePluginConfiguration", name, opts.urn ? { result: undefined, yaml: undefined } : { name, args, opts }, opts);
    }
}
export interface CniBridgePluginConfigurationArgs {
    readonly bridge?: pulumi.Input<string>;
    readonly cniVersion?: pulumi.Input<string>;
    readonly ipMasq?: pulumi.Input<boolean>;
    readonly ipam?: pulumi.Input<CniBridgeIpamInputs>;
    readonly isGateway?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly subnet: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
}
export abstract class CniLoopbackPluginConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public result!: CniLoopbackPluginConfigurationOutputs | pulumi.Output<CniLoopbackPluginConfigurationOutputs>;
    public yaml!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:config:CniLoopbackPluginConfiguration", name, opts.urn ? { result: undefined, yaml: undefined } : { name, args, opts }, opts);
    }
}
export interface CniLoopbackPluginConfigurationArgs {
    readonly cniVersion?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
}
export abstract class ContainerdConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public result!: ContainerdConfigurationOutputs | pulumi.Output<ContainerdConfigurationOutputs>;
    public toml!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:config:ContainerdConfiguration", name, opts.urn ? { result: undefined, toml: undefined } : { name, args, opts }, opts);
    }
}
export interface ContainerdConfigurationArgs {
    readonly cri?: ContainerdCriPluginConfigurationInputs;
}
export abstract class KubeProxyConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public result!: KubeProxyConfigurationOutputs | pulumi.Output<KubeProxyConfigurationOutputs>;
    public yaml!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:config:KubeProxyConfiguration", name, opts.urn ? { result: undefined, yaml: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeProxyConfigurationArgs {
    readonly clusterCIDR: pulumi.Input<string>;
    readonly kubeconfig: pulumi.Input<string>;
    readonly mode?: pulumi.Input<string>;
}
export abstract class KubeVipManifest<TData = any> extends (pulumi.ComponentResource)<TData> {
    public result!: PodManifestOutputs | pulumi.Output<PodManifestOutputs>;
    public yaml!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:config:KubeVipManifest", name, opts.urn ? { result: undefined, yaml: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeVipManifestArgs {
    readonly address: pulumi.Input<string>;
    readonly bgpAs?: pulumi.Input<number>;
    readonly bgpEnable?: pulumi.Input<boolean>;
    readonly bgpPeerAddress?: pulumi.Input<string>;
    readonly bgpPeerAs?: pulumi.Input<number>;
    readonly bgpPeerPass?: pulumi.Input<string>;
    readonly bgpPeers?: pulumi.Input<string>;
    readonly bgpRouterId?: pulumi.Input<string>;
    readonly cpEnable?: pulumi.Input<boolean>;
    readonly cpNamespace?: pulumi.Input<string>;
    readonly image?: pulumi.Input<string>;
    readonly kubeconfigPath: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly namespace?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly svcEnable?: pulumi.Input<boolean>;
    readonly version?: pulumi.Input<string>;
    readonly vipArp?: pulumi.Input<boolean>;
    readonly vipCidr: pulumi.Input<number>;
    readonly vipDdns?: pulumi.Input<boolean>;
    readonly vipInterface?: pulumi.Input<string>;
    readonly vipLeaderElection?: pulumi.Input<boolean>;
    readonly vipLeaseDuration?: pulumi.Input<number>;
    readonly vipRenewDeadline?: pulumi.Input<number>;
    readonly vipRetryPeriod?: pulumi.Input<number>;
}
export abstract class KubeletConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public result!: KubeletConfigurationOutputs | pulumi.Output<KubeletConfigurationOutputs>;
    public yaml!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:config:KubeletConfiguration", name, opts.urn ? { result: undefined, yaml: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeletConfigurationArgs {
    readonly anonymous?: pulumi.Input<boolean>;
    readonly authorizationMode?: pulumi.Input<string>;
    readonly cgroupDriver?: pulumi.Input<string>;
    readonly clientCAFile?: pulumi.Input<string>;
    readonly clusterDNS?: pulumi.Input<pulumi.Input<string>[]>;
    readonly clusterDomain?: pulumi.Input<string>;
    readonly containerRuntimeEndpoint?: pulumi.Input<string>;
    readonly podCIDR: pulumi.Input<string>;
    readonly resolvConf?: pulumi.Input<string>;
    readonly runtimeRequestTimeout?: pulumi.Input<string>;
    readonly tlsCertFile?: pulumi.Input<string>;
    readonly tlsPrivateKeyFile?: pulumi.Input<string>;
    readonly webhook?: pulumi.Input<boolean>;
}
export abstract class CniBridgePluginConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public bridge!: string | pulumi.Output<string>;
    public cniVersion!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public file?: File | pulumi.Output<File>;
    public ipMasq!: boolean | pulumi.Output<boolean>;
    public ipam!: CniBridgeIpamOutputs | pulumi.Output<CniBridgeIpamOutputs>;
    public isGateway!: boolean | pulumi.Output<boolean>;
    public name!: string | pulumi.Output<string>;
    public path!: string | pulumi.Output<string>;
    public subnet?: string | pulumi.Output<string>;
    public type!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:CniBridgePluginConfiguration", name, opts.urn ? { bridge: undefined, cniVersion: undefined, connection: undefined, file: undefined, ipMasq: undefined, ipam: undefined, isGateway: undefined, name: undefined, path: undefined, subnet: undefined, type: undefined } : { name, args, opts }, opts);
    }
}
export interface CniBridgePluginConfigurationArgs {
    readonly bridge?: pulumi.Input<string>;
    readonly cniVersion?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly ipMasq?: pulumi.Input<boolean>;
    readonly ipam?: pulumi.Input<CniBridgeIpamInputs>;
    readonly isGateway?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly path?: pulumi.Input<string>;
    readonly subnet?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
}
export abstract class CniLoopbackPluginConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public cniVersion!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public file?: File | pulumi.Output<File>;
    public name!: string | pulumi.Output<string>;
    public path!: string | pulumi.Output<string>;
    public type!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:CniLoopbackPluginConfiguration", name, opts.urn ? { cniVersion: undefined, connection: undefined, file: undefined, name: undefined, path: undefined, type: undefined } : { name, args, opts }, opts);
    }
}
export interface CniLoopbackPluginConfigurationArgs {
    readonly cniVersion?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly name?: pulumi.Input<string>;
    readonly path?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
}
export abstract class CniPluginConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public bridge!: CniBridgePluginConfiguration | pulumi.Output<CniBridgePluginConfiguration>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public loopback!: CniLoopbackPluginConfiguration | pulumi.Output<CniLoopbackPluginConfiguration>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public subnet!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:CniPluginConfiguration", name, opts.urn ? { bridge: undefined, connection: undefined, directory: undefined, loopback: undefined, mkdir: undefined, subnet: undefined } : { name, args, opts }, opts);
    }
}
export interface CniPluginConfigurationArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly subnet: pulumi.Input<string>;
}
export abstract class CniPluginsInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public bandwidthMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public bandwidthPath!: string | pulumi.Output<string>;
    public bridgeMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public bridgePath!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public dhcpMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public dhcpPath!: string | pulumi.Output<string>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public dummyMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public dummyPath!: string | pulumi.Output<string>;
    public firewallMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public firewallPath!: string | pulumi.Output<string>;
    public hostDeviceMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public hostDevicePath!: string | pulumi.Output<string>;
    public hostLocalMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public hostLocalPath!: string | pulumi.Output<string>;
    public ipvlanMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public ipvlanPath!: string | pulumi.Output<string>;
    public loopbackMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public loopbackPath!: string | pulumi.Output<string>;
    public macvlanMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public macvlanPath!: string | pulumi.Output<string>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public path?: string | pulumi.Output<string>;
    public portmapMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public portmapPath!: string | pulumi.Output<string>;
    public ptpMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public ptpPath!: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public sbrMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public sbrPath!: string | pulumi.Output<string>;
    public staticMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public staticPath!: string | pulumi.Output<string>;
    public tapMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public tapPath!: string | pulumi.Output<string>;
    public tar!: commandx.remote.Tar | pulumi.Output<commandx.remote.Tar>;
    public tuningMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public tuningPath!: string | pulumi.Output<string>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    public vlanMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public vlanPath!: string | pulumi.Output<string>;
    public vrfMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public vrfPath!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:CniPluginsInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, bandwidthMv: undefined, bandwidthPath: undefined, bridgeMv: undefined, bridgePath: undefined, connection: undefined, dhcpMv: undefined, dhcpPath: undefined, directory: undefined, download: undefined, dummyMv: undefined, dummyPath: undefined, firewallMv: undefined, firewallPath: undefined, hostDeviceMv: undefined, hostDevicePath: undefined, hostLocalMv: undefined, hostLocalPath: undefined, ipvlanMv: undefined, ipvlanPath: undefined, loopbackMv: undefined, loopbackPath: undefined, macvlanMv: undefined, macvlanPath: undefined, mkdir: undefined, mktemp: undefined, path: undefined, portmapMv: undefined, portmapPath: undefined, ptpMv: undefined, ptpPath: undefined, rm: undefined, sbrMv: undefined, sbrPath: undefined, staticMv: undefined, staticPath: undefined, tapMv: undefined, tapPath: undefined, tar: undefined, tuningMv: undefined, tuningPath: undefined, url: undefined, version: undefined, vlanMv: undefined, vlanPath: undefined, vrfMv: undefined, vrfPath: undefined } : { name, args, opts }, opts);
    }
}
export interface CniPluginsInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class ContainerdInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public containerdMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public containerdPath!: string | pulumi.Output<string>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public path?: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public tar!: commandx.remote.Tar | pulumi.Output<commandx.remote.Tar>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:ContainerdInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, connection: undefined, containerdMv: undefined, containerdPath: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, path: undefined, rm: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface ContainerdInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class ContainerdService<TData = any> extends (pulumi.ComponentResource)<TData> {
    public configuration!: ContainerdConfigurationOutputs | pulumi.Output<ContainerdConfigurationOutputs>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public containerdPath?: string | pulumi.Output<string>;
    public description?: string | pulumi.Output<string>;
    public directory?: string | pulumi.Output<string>;
    public documentation?: string | pulumi.Output<string>;
    public restart?: SystemdServiceRestartOutputs | pulumi.Output<SystemdServiceRestartOutputs>;
    public restartSec?: string | pulumi.Output<string>;
    public service!: SystemdService | pulumi.Output<SystemdService>;
    public wantedBy?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:ContainerdService", name, opts.urn ? { configuration: undefined, connection: undefined, containerdPath: undefined, description: undefined, directory: undefined, documentation: undefined, restart: undefined, restartSec: undefined, service: undefined, wantedBy: undefined } : { name, args, opts }, opts);
    }
}
export interface ContainerdServiceArgs {
    readonly configuration: pulumi.Input<ContainerdConfigurationInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly containerdPath?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly directory?: pulumi.Input<string>;
    readonly documentation?: pulumi.Input<string>;
    readonly restart?: pulumi.Input<SystemdServiceRestartInputs>;
    readonly restartSec?: pulumi.Input<string>;
    readonly wantedBy?: pulumi.Input<string>;
}
export abstract class ControlPlaneNode<TData = any> extends (pulumi.ComponentResource)<TData> {
    public apiServerCount!: number | pulumi.Output<number>;
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public audiLogPath?: string | pulumi.Output<string>;
    public caCertificatePath!: string | pulumi.Output<string>;
    public caPrivateKeyPath!: string | pulumi.Output<string>;
    public clusterCIDR?: string | pulumi.Output<string>;
    public clusterName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public encryptionConfigFile?: File | pulumi.Output<File>;
    public encryptionConfigYaml!: string | pulumi.Output<string>;
    public kubeApiServerCertificatePath!: string | pulumi.Output<string>;
    public kubeApiServerInstall!: KubeApiServerInstall | pulumi.Output<KubeApiServerInstall>;
    public kubeApiServerInstallDirectory?: string | pulumi.Output<string>;
    public kubeApiServerPrivateKeyPath!: string | pulumi.Output<string>;
    public kubeApiServerService?: SystemdService | pulumi.Output<SystemdService>;
    public kubeControllerManagerInstall!: KubeControllerManagerInstall | pulumi.Output<KubeControllerManagerInstall>;
    public kubeControllerManagerInstallDirectory?: string | pulumi.Output<string>;
    public kubeControllerManagerKubeconfigPath!: string | pulumi.Output<string>;
    public kubeControllerManagerService?: SystemdService | pulumi.Output<SystemdService>;
    public kubeSchedulerConfigYaml!: string | pulumi.Output<string>;
    public kubeSchedulerInstall!: KubeSchedulerInstall | pulumi.Output<KubeSchedulerInstall>;
    public kubeSchedulerInstallDirectory?: string | pulumi.Output<string>;
    public kubeSchedulerKubeconfigPath!: string | pulumi.Output<string>;
    public kubeSchedulerService?: SystemdService | pulumi.Output<SystemdService>;
    public kubectlInstall!: KubectlInstall | pulumi.Output<KubectlInstall>;
    public kubectlInstallDirectory?: string | pulumi.Output<string>;
    public kubernetesConfigurationMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public kubernetesVersion?: string | pulumi.Output<string>;
    public nodeName?: string | pulumi.Output<string>;
    public serviceAccountsCertificatePath!: string | pulumi.Output<string>;
    public serviceAccountsPrivateKeyPath!: string | pulumi.Output<string>;
    public serviceClusterIpRange?: string | pulumi.Output<string>;
    public varLibKubernetesMkdir!: Mkdir | pulumi.Output<Mkdir>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:ControlPlaneNode", name, opts.urn ? { apiServerCount: undefined, architecture: undefined, audiLogPath: undefined, caCertificatePath: undefined, caPrivateKeyPath: undefined, clusterCIDR: undefined, clusterName: undefined, connection: undefined, encryptionConfigFile: undefined, encryptionConfigYaml: undefined, kubeApiServerCertificatePath: undefined, kubeApiServerInstall: undefined, kubeApiServerInstallDirectory: undefined, kubeApiServerPrivateKeyPath: undefined, kubeApiServerService: undefined, kubeControllerManagerInstall: undefined, kubeControllerManagerInstallDirectory: undefined, kubeControllerManagerKubeconfigPath: undefined, kubeControllerManagerService: undefined, kubeSchedulerConfigYaml: undefined, kubeSchedulerInstall: undefined, kubeSchedulerInstallDirectory: undefined, kubeSchedulerKubeconfigPath: undefined, kubeSchedulerService: undefined, kubectlInstall: undefined, kubectlInstallDirectory: undefined, kubernetesConfigurationMkdir: undefined, kubernetesVersion: undefined, nodeName: undefined, serviceAccountsCertificatePath: undefined, serviceAccountsPrivateKeyPath: undefined, serviceClusterIpRange: undefined, varLibKubernetesMkdir: undefined } : { name, args, opts }, opts);
    }
}
export interface ControlPlaneNodeArgs {
    readonly apiServerCount: pulumi.Input<number>;
    readonly architecture: pulumi.Input<ArchitectureInputs>;
    readonly audiLogPath?: pulumi.Input<string>;
    readonly caCertificatePath: pulumi.Input<string>;
    readonly caPrivateKeyPath: pulumi.Input<string>;
    readonly clusterCIDR?: pulumi.Input<string>;
    readonly clusterName?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly encryptionConfigYaml: pulumi.Input<string>;
    readonly kubeApiServerCertificatePath: pulumi.Input<string>;
    readonly kubeApiServerInstallDirectory?: pulumi.Input<string>;
    readonly kubeApiServerPrivateKeyPath: pulumi.Input<string>;
    readonly kubeControllerManagerInstallDirectory?: pulumi.Input<string>;
    readonly kubeControllerManagerKubeconfigPath: pulumi.Input<string>;
    readonly kubeSchedulerConfigYaml: pulumi.Input<string>;
    readonly kubeSchedulerInstallDirectory?: pulumi.Input<string>;
    readonly kubeSchedulerKubeconfigPath: pulumi.Input<string>;
    readonly kubectlInstallDirectory?: pulumi.Input<string>;
    readonly kubernetesVersion?: pulumi.Input<string>;
    readonly nodeName?: pulumi.Input<string>;
    readonly serviceAccountsCertificatePath: pulumi.Input<string>;
    readonly serviceAccountsPrivateKeyPath: pulumi.Input<string>;
    readonly serviceClusterIpRange?: pulumi.Input<string>;
}
export abstract class CrictlInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public crictlMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public crictlPath!: string | pulumi.Output<string>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public path?: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public tar!: commandx.remote.Tar | pulumi.Output<commandx.remote.Tar>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:CrictlInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, connection: undefined, crictlMv: undefined, crictlPath: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, path: undefined, rm: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface CrictlInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class Download<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public destination!: string | pulumi.Output<string>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public removeOnDelete!: boolean;
    public url!: string | pulumi.Output<string>;
    public wget!: commandx.remote.Wget | pulumi.Output<commandx.remote.Wget>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:Download", name, opts.urn ? { connection: undefined, destination: undefined, mkdir: undefined, removeOnDelete: undefined, url: undefined, wget: undefined } : { name, args, opts }, opts);
    }
}
export interface DownloadArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly destination: pulumi.Input<string>;
    readonly removeOnDelete?: boolean;
    readonly url: pulumi.Input<string>;
}
export abstract class EtcdCluster<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture?: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binaryDirectory?: string | pulumi.Output<string>;
    public bundle!: BundleOutputs | pulumi.Output<BundleOutputs>;
    public configuration!: Record<string, EtcdConfiguration> | pulumi.Output<Record<string, EtcdConfiguration>>;
    public configurationDirectory?: string | pulumi.Output<string>;
    public dataDirectory?: string | pulumi.Output<string>;
    public install!: Record<string, EtcdInstall> | pulumi.Output<Record<string, EtcdInstall>>;
    public nodes!: Record<string, EtcdNodeOutputs>;
    public service!: Record<string, EtcdService> | pulumi.Output<Record<string, EtcdService>>;
    public start!: Record<string, StartEtcd> | pulumi.Output<Record<string, StartEtcd>>;
    public version?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdCluster", name, opts.urn ? { architecture: undefined, binaryDirectory: undefined, bundle: undefined, configuration: undefined, configurationDirectory: undefined, dataDirectory: undefined, install: undefined, nodes: undefined, service: undefined, start: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdClusterArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly binaryDirectory?: pulumi.Input<string>;
    readonly bundle: pulumi.Input<BundleInputs>;
    readonly configurationDirectory?: pulumi.Input<string>;
    readonly dataDirectory?: pulumi.Input<string>;
    readonly nodes: Record<string, EtcdNodeInputs>;
    readonly version?: pulumi.Input<string>;
}
export abstract class EtcdConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public caFile!: File | pulumi.Output<File>;
    public caPem!: string | pulumi.Output<string>;
    public certFile!: File | pulumi.Output<File>;
    public certPem!: string | pulumi.Output<string>;
    public configurationChmod?: commandx.remote.Chmod | pulumi.Output<commandx.remote.Chmod>;
    public configurationDirectory!: string | pulumi.Output<string>;
    public configurationMkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public dataDirectory!: string | pulumi.Output<string>;
    public dataMkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public etcdPath!: string | pulumi.Output<string>;
    public internalIp!: string | pulumi.Output<string>;
    public keyFile!: File | pulumi.Output<File>;
    public keyPem!: string | pulumi.Output<string>;
    public value!: EtcdConfigurationPropsOutputs | pulumi.Output<EtcdConfigurationPropsOutputs>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdConfiguration", name, opts.urn ? { caFile: undefined, caPem: undefined, certFile: undefined, certPem: undefined, configurationChmod: undefined, configurationDirectory: undefined, configurationMkdir: undefined, connection: undefined, dataDirectory: undefined, dataMkdir: undefined, etcdPath: undefined, internalIp: undefined, keyFile: undefined, keyPem: undefined, value: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdConfigurationArgs {
    readonly caPem: pulumi.Input<string>;
    readonly certPem: pulumi.Input<string>;
    readonly configurationDirectory?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly dataDirectory?: pulumi.Input<string>;
    readonly etcdPath: pulumi.Input<string>;
    readonly internalIp: pulumi.Input<string>;
    readonly keyPem: pulumi.Input<string>;
}
export abstract class EtcdInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public etcdMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public etcdPath!: string | pulumi.Output<string>;
    public etcdctlMv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public etcdctlPath!: string | pulumi.Output<string>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public path?: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public tar!: commandx.remote.Tar | pulumi.Output<commandx.remote.Tar>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, connection: undefined, directory: undefined, download: undefined, etcdMv: undefined, etcdPath: undefined, etcdctlMv: undefined, etcdctlPath: undefined, mkdir: undefined, mktemp: undefined, path: undefined, rm: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class EtcdService<TData = any> extends (pulumi.ComponentResource)<TData> {
    public configuration!: EtcdConfigurationPropsOutputs | pulumi.Output<EtcdConfigurationPropsOutputs>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public description?: string | pulumi.Output<string>;
    public directory?: string | pulumi.Output<string>;
    public documentation?: string | pulumi.Output<string>;
    public peers!: EtcdConfigurationPropsOutputs[] | pulumi.Output<EtcdConfigurationPropsOutputs[]>;
    public restart?: SystemdServiceRestartOutputs | pulumi.Output<SystemdServiceRestartOutputs>;
    public restartSec?: string | pulumi.Output<string>;
    public service!: SystemdService | pulumi.Output<SystemdService>;
    public wantedBy?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdService", name, opts.urn ? { configuration: undefined, connection: undefined, description: undefined, directory: undefined, documentation: undefined, peers: undefined, restart: undefined, restartSec: undefined, service: undefined, wantedBy: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdServiceArgs {
    readonly configuration: pulumi.Input<EtcdConfigurationPropsInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly description?: pulumi.Input<string>;
    readonly directory?: pulumi.Input<string>;
    readonly documentation?: pulumi.Input<string>;
    readonly peers?: pulumi.Input<pulumi.Input<EtcdConfigurationPropsInputs>[]>;
    readonly restart?: pulumi.Input<SystemdServiceRestartInputs>;
    readonly restartSec?: pulumi.Input<string>;
    readonly wantedBy?: pulumi.Input<string>;
}
export abstract class File<TData = any> extends (pulumi.ComponentResource)<TData> {
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public content!: string | pulumi.Output<string>;
    public path!: string | pulumi.Output<string>;
    public stderr!: string | pulumi.Output<string>;
    public stdin!: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:File", name, opts.urn ? { command: undefined, connection: undefined, content: undefined, path: undefined, stderr: undefined, stdin: undefined, stdout: undefined } : { name, args, opts }, opts);
    }
}
export interface FileArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly content: pulumi.Input<string>;
    readonly path: pulumi.Input<string>;
}
export abstract class KubeApiServerInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public mv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeApiServerInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeApiServerInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeControllerManagerInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public mv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeControllerManagerInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeControllerManagerInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeProxyInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public mv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeProxyInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeProxyInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeProxyService<TData = any> extends (pulumi.ComponentResource)<TData> {
    public configuration!: KubeProxyConfigurationPropsOutputs | pulumi.Output<KubeProxyConfigurationPropsOutputs>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public description?: string | pulumi.Output<string>;
    public directory?: string | pulumi.Output<string>;
    public documentation?: string | pulumi.Output<string>;
    public restart?: SystemdServiceRestartOutputs | pulumi.Output<SystemdServiceRestartOutputs>;
    public restartSec?: string | pulumi.Output<string>;
    public service!: SystemdService | pulumi.Output<SystemdService>;
    public wantedBy?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeProxyService", name, opts.urn ? { configuration: undefined, connection: undefined, description: undefined, directory: undefined, documentation: undefined, restart: undefined, restartSec: undefined, service: undefined, wantedBy: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeProxyServiceArgs {
    readonly configuration: pulumi.Input<KubeProxyConfigurationPropsInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly description?: pulumi.Input<string>;
    readonly directory?: pulumi.Input<string>;
    readonly documentation?: pulumi.Input<string>;
    readonly restart?: pulumi.Input<SystemdServiceRestartInputs>;
    readonly restartSec?: pulumi.Input<string>;
    readonly wantedBy?: pulumi.Input<string>;
}
export abstract class KubeSchedulerInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public mv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeSchedulerInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeSchedulerInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeadmInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeadmInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeadmInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubectlInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public mv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubectlInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubectlInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeletInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public mv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeletInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeletInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeletService<TData = any> extends (pulumi.ComponentResource)<TData> {
    public after!: string[] | pulumi.Output<string[]>;
    public configuration!: KubeletConfigurationPropsOutputs | pulumi.Output<KubeletConfigurationPropsOutputs>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public description?: string | pulumi.Output<string>;
    public directory?: string | pulumi.Output<string>;
    public documentation?: string | pulumi.Output<string>;
    public requires!: string[] | pulumi.Output<string[]>;
    public restart?: SystemdServiceRestartOutputs | pulumi.Output<SystemdServiceRestartOutputs>;
    public restartSec?: string | pulumi.Output<string>;
    public service!: SystemdService | pulumi.Output<SystemdService>;
    public wantedBy?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeletService", name, opts.urn ? { after: undefined, configuration: undefined, connection: undefined, description: undefined, directory: undefined, documentation: undefined, requires: undefined, restart: undefined, restartSec: undefined, service: undefined, wantedBy: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeletServiceArgs {
    readonly after: pulumi.Input<pulumi.Input<string>[]>;
    readonly configuration: pulumi.Input<KubeletConfigurationPropsInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly description?: pulumi.Input<string>;
    readonly directory?: pulumi.Input<string>;
    readonly documentation?: pulumi.Input<string>;
    readonly requires: pulumi.Input<pulumi.Input<string>[]>;
    readonly restart?: pulumi.Input<SystemdServiceRestartInputs>;
    readonly restartSec?: pulumi.Input<string>;
    readonly wantedBy?: pulumi.Input<string>;
}
export abstract class ProvisionEtcd<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture?: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binaryDirectory?: string | pulumi.Output<string>;
    public bundle!: BundleOutputs | pulumi.Output<BundleOutputs>;
    public configuration!: EtcdConfiguration | pulumi.Output<EtcdConfiguration>;
    public configurationDirectory?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public dataDirectory?: string | pulumi.Output<string>;
    public install!: EtcdInstall | pulumi.Output<EtcdInstall>;
    public internalIp!: string | pulumi.Output<string>;
    public service!: SystemdService | pulumi.Output<SystemdService>;
    public start!: StartEtcd | pulumi.Output<StartEtcd>;
    public version?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:ProvisionEtcd", name, opts.urn ? { architecture: undefined, binaryDirectory: undefined, bundle: undefined, configuration: undefined, configurationDirectory: undefined, connection: undefined, dataDirectory: undefined, install: undefined, internalIp: undefined, service: undefined, start: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface ProvisionEtcdArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly binaryDirectory?: pulumi.Input<string>;
    readonly bundle: pulumi.Input<BundleInputs>;
    readonly configurationDirectory?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly dataDirectory?: pulumi.Input<string>;
    readonly internalIp: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class RuncInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public mktemp!: commandx.remote.Mktemp | pulumi.Output<commandx.remote.Mktemp>;
    public mv!: commandx.remote.Mv | pulumi.Output<commandx.remote.Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: commandx.remote.Rm | pulumi.Output<commandx.remote.Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:RuncInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface RuncInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class StartContainerd<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public daemonReload!: Systemctl | pulumi.Output<Systemctl>;
    public enable!: Systemctl | pulumi.Output<Systemctl>;
    public start!: Systemctl | pulumi.Output<Systemctl>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:StartContainerd", name, opts.urn ? { connection: undefined, daemonReload: undefined, enable: undefined, start: undefined } : { name, args, opts }, opts);
    }
}
export interface StartContainerdArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
}
export abstract class StartEtcd<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public daemonReload!: commandx.remote.Systemctl | pulumi.Output<commandx.remote.Systemctl>;
    public enable!: commandx.remote.Systemctl | pulumi.Output<commandx.remote.Systemctl>;
    public start!: commandx.remote.Systemctl | pulumi.Output<commandx.remote.Systemctl>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:StartEtcd", name, opts.urn ? { connection: undefined, daemonReload: undefined, enable: undefined, start: undefined } : { name, args, opts }, opts);
    }
}
export interface StartEtcdArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
}
export abstract class StartKubeProxy<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public daemonReload!: Systemctl | pulumi.Output<Systemctl>;
    public enable!: Systemctl | pulumi.Output<Systemctl>;
    public start!: Systemctl | pulumi.Output<Systemctl>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:StartKubeProxy", name, opts.urn ? { connection: undefined, daemonReload: undefined, enable: undefined, start: undefined } : { name, args, opts }, opts);
    }
}
export interface StartKubeProxyArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
}
export abstract class StartKubelet<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public daemonReload!: Systemctl | pulumi.Output<Systemctl>;
    public enable!: Systemctl | pulumi.Output<Systemctl>;
    public start!: Systemctl | pulumi.Output<Systemctl>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:StartKubelet", name, opts.urn ? { connection: undefined, daemonReload: undefined, enable: undefined, start: undefined } : { name, args, opts }, opts);
    }
}
export interface StartKubeletArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
}
export abstract class StaticPod<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public file!: File | pulumi.Output<File>;
    public fileName!: string | pulumi.Output<string>;
    public mkdir!: commandx.remote.Mkdir | pulumi.Output<commandx.remote.Mkdir>;
    public path!: string | pulumi.Output<string>;
    public pod!: PodManifestOutputs | pulumi.Output<PodManifestOutputs>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:StaticPod", name, opts.urn ? { connection: undefined, file: undefined, fileName: undefined, mkdir: undefined, path: undefined, pod: undefined } : { name, args, opts }, opts);
    }
}
export interface StaticPodArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly fileName?: pulumi.Input<string>;
    readonly pod: pulumi.Input<PodManifestInputs>;
}
export abstract class SystemdService<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public file!: File | pulumi.Output<File>;
    public install?: SystemdInstallSectionOutputs | pulumi.Output<SystemdInstallSectionOutputs>;
    public service!: SystemdServiceSectionOutputs | pulumi.Output<SystemdServiceSectionOutputs>;
    public unit?: SystemdUnitSectionOutputs | pulumi.Output<SystemdUnitSectionOutputs>;
    public unitName?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:SystemdService", name, opts.urn ? { connection: undefined, directory: undefined, file: undefined, install: undefined, service: undefined, unit: undefined, unitName: undefined } : { name, args, opts }, opts);
    }
}
export interface SystemdServiceArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly install?: pulumi.Input<SystemdInstallSectionInputs>;
    readonly service: pulumi.Input<SystemdServiceSectionInputs>;
    readonly unit?: pulumi.Input<SystemdUnitSectionInputs>;
    readonly unitName?: pulumi.Input<string>;
}
export abstract class WorkerNode<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public caPath!: string | pulumi.Output<string>;
    public clusterCIDR?: string | pulumi.Output<string>;
    public clusterDomain?: string | pulumi.Output<string>;
    public cniBridgeConfiguration!: CniBridgePluginConfiguration | pulumi.Output<CniBridgePluginConfiguration>;
    public cniBridgeConfigurationFile!: File | pulumi.Output<File>;
    public cniConfigurationDirectory?: string | pulumi.Output<string>;
    public cniInstallDirectory?: string | pulumi.Output<string>;
    public cniLoopbackConfiguration!: CniLoopbackPluginConfiguration | pulumi.Output<CniLoopbackPluginConfiguration>;
    public cniLoopbackConfigurationFile!: File | pulumi.Output<File>;
    public cniMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public cniPluginsInstall?: CniPluginsInstall | pulumi.Output<CniPluginsInstall>;
    public cniVersion?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public containerdConfiguration!: ContainerdConfiguration | pulumi.Output<ContainerdConfiguration>;
    public containerdConfigurationDirectory?: string | pulumi.Output<string>;
    public containerdConfigurationFile!: File | pulumi.Output<File>;
    public containerdInstall!: ContainerdInstall | pulumi.Output<ContainerdInstall>;
    public containerdInstallDirectory?: string | pulumi.Output<string>;
    public containerdMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public containerdService!: ContainerdService | pulumi.Output<ContainerdService>;
    public containerdVersion?: string | pulumi.Output<string>;
    public crictlInstall!: CrictlInstall | pulumi.Output<CrictlInstall>;
    public crictlInstallDirectory?: string | pulumi.Output<string>;
    public kubeProxyConfiguration!: KubeProxyConfiguration | pulumi.Output<KubeProxyConfiguration>;
    public kubeProxyConfigurationDirectory?: string | pulumi.Output<string>;
    public kubeProxyConfigurationFile!: File | pulumi.Output<File>;
    public kubeProxyInstall?: KubeProxyInstall | pulumi.Output<KubeProxyInstall>;
    public kubeProxyInstallDirectory?: string | pulumi.Output<string>;
    public kubeProxyKubeconfigPath?: string | pulumi.Output<string>;
    public kubeProxyMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public kubeProxyService!: KubeProxyService | pulumi.Output<KubeProxyService>;
    public kubectlInstall!: KubectlInstall | pulumi.Output<KubectlInstall>;
    public kubectlInstallDirectory?: string | pulumi.Output<string>;
    public kubeletCertificatePath!: string | pulumi.Output<string>;
    public kubeletConfiguration!: KubeletConfiguration | pulumi.Output<KubeletConfiguration>;
    public kubeletConfigurationDirectory?: string | pulumi.Output<string>;
    public kubeletConfigurationFile!: File | pulumi.Output<File>;
    public kubeletInstall!: KubeletInstall | pulumi.Output<KubeletInstall>;
    public kubeletInstallDirectory?: string | pulumi.Output<string>;
    public kubeletKubeconfigPath?: string | pulumi.Output<string>;
    public kubeletMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public kubeletPrivateKeyPath!: string | pulumi.Output<string>;
    public kubeletService!: KubeletService | pulumi.Output<KubeletService>;
    public kubernetesVersion?: string | pulumi.Output<string>;
    public runcInstall?: RuncInstall | pulumi.Output<RuncInstall>;
    public subnet!: string | pulumi.Output<string>;
    public varLibKubernetesMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public varRunKubernetesMkdir!: Mkdir | pulumi.Output<Mkdir>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:WorkerNode", name, opts.urn ? { architecture: undefined, caPath: undefined, clusterCIDR: undefined, clusterDomain: undefined, cniBridgeConfiguration: undefined, cniBridgeConfigurationFile: undefined, cniConfigurationDirectory: undefined, cniInstallDirectory: undefined, cniLoopbackConfiguration: undefined, cniLoopbackConfigurationFile: undefined, cniMkdir: undefined, cniPluginsInstall: undefined, cniVersion: undefined, connection: undefined, containerdConfiguration: undefined, containerdConfigurationDirectory: undefined, containerdConfigurationFile: undefined, containerdInstall: undefined, containerdInstallDirectory: undefined, containerdMkdir: undefined, containerdService: undefined, containerdVersion: undefined, crictlInstall: undefined, crictlInstallDirectory: undefined, kubeProxyConfiguration: undefined, kubeProxyConfigurationDirectory: undefined, kubeProxyConfigurationFile: undefined, kubeProxyInstall: undefined, kubeProxyInstallDirectory: undefined, kubeProxyKubeconfigPath: undefined, kubeProxyMkdir: undefined, kubeProxyService: undefined, kubectlInstall: undefined, kubectlInstallDirectory: undefined, kubeletCertificatePath: undefined, kubeletConfiguration: undefined, kubeletConfigurationDirectory: undefined, kubeletConfigurationFile: undefined, kubeletInstall: undefined, kubeletInstallDirectory: undefined, kubeletKubeconfigPath: undefined, kubeletMkdir: undefined, kubeletPrivateKeyPath: undefined, kubeletService: undefined, kubernetesVersion: undefined, runcInstall: undefined, subnet: undefined, varLibKubernetesMkdir: undefined, varRunKubernetesMkdir: undefined } : { name, args, opts }, opts);
    }
}
export interface WorkerNodeArgs {
    readonly architecture: pulumi.Input<ArchitectureInputs>;
    readonly caPath: pulumi.Input<string>;
    readonly clusterCIDR?: pulumi.Input<string>;
    readonly clusterDomain?: pulumi.Input<string>;
    readonly cniConfigurationDirectory?: pulumi.Input<string>;
    readonly cniInstallDirectory?: pulumi.Input<string>;
    readonly cniVersion?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly containerdConfigurationDirectory?: pulumi.Input<string>;
    readonly containerdInstallDirectory?: pulumi.Input<string>;
    readonly containerdVersion?: pulumi.Input<string>;
    readonly crictlInstallDirectory?: pulumi.Input<string>;
    readonly kubeProxyConfigurationDirectory?: pulumi.Input<string>;
    readonly kubeProxyInstallDirectory?: pulumi.Input<string>;
    readonly kubeProxyKubeconfigPath?: pulumi.Input<string>;
    readonly kubectlInstallDirectory?: pulumi.Input<string>;
    readonly kubeletCertificatePath: pulumi.Input<string>;
    readonly kubeletConfigurationDirectory?: pulumi.Input<string>;
    readonly kubeletInstallDirectory?: pulumi.Input<string>;
    readonly kubeletKubeconfigPath?: pulumi.Input<string>;
    readonly kubeletPrivateKeyPath: pulumi.Input<string>;
    readonly kubernetesVersion?: pulumi.Input<string>;
    readonly subnet: pulumi.Input<string>;
}
export abstract class WorkerPreRequisites<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public conntrack!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public ipset!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public socat!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public swap!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public triggers?: any[] | pulumi.Output<any[]>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:WorkerPreRequisites", name, opts.urn ? { connection: undefined, conntrack: undefined, ipset: undefined, socat: undefined, swap: undefined, triggers: undefined } : { name, args, opts }, opts);
    }
}
export interface WorkerPreRequisitesArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
}
export abstract class Certificate<TData = any> extends (pulumi.ComponentResource)<TData> {
    public algorithm!: AlgorithmOutputs | pulumi.Output<AlgorithmOutputs>;
    public allowedUses!: AllowedUsageOutputs[] | pulumi.Output<AllowedUsageOutputs[]>;
    public caCertPem!: string | pulumi.Output<string>;
    public caKeyAlgorithm!: string | pulumi.Output<string>;
    public caPrivateKeyPem!: string | pulumi.Output<string>;
    public cert!: tls.LocallySignedCert | pulumi.Output<tls.LocallySignedCert>;
    public certPem!: string | pulumi.Output<string>;
    public certRequestPem!: string | pulumi.Output<string>;
    public csr!: tls.CertRequest | pulumi.Output<tls.CertRequest>;
    public dnsNames?: string[] | pulumi.Output<string[]>;
    public earlyRenewalHours!: number | pulumi.Output<number>;
    public ecdsaCurve!: EcdsaCurveOutputs | pulumi.Output<EcdsaCurveOutputs>;
    public ipAddresses?: string[] | pulumi.Output<string[]>;
    public isCaCertificate!: boolean | pulumi.Output<boolean>;
    public key!: tls.PrivateKey | pulumi.Output<tls.PrivateKey>;
    public keyAlgorithm!: string | pulumi.Output<string>;
    public privateKeyOpenssh!: string | pulumi.Output<string>;
    public privateKeyPem!: string | pulumi.Output<string>;
    public privateKeyPemPkcs8!: string | pulumi.Output<string>;
    public publicKeyFingerprintMd5!: string | pulumi.Output<string>;
    public publicKeyFingerprintSha256!: string | pulumi.Output<string>;
    public publicKeyOpenssh!: string | pulumi.Output<string>;
    public publicKeyPem!: string | pulumi.Output<string>;
    public readyForRenewal!: boolean | pulumi.Output<boolean>;
    public rsaBits!: number | pulumi.Output<number>;
    public setSubjectKeyId!: boolean | pulumi.Output<boolean>;
    public subject?: tls.types.output.CertRequestSubject | pulumi.Output<tls.types.output.CertRequestSubject>;
    public uris?: string[] | pulumi.Output<string[]>;
    public validityEndTime!: string | pulumi.Output<string>;
    public validityPeriodHours!: number | pulumi.Output<number>;
    public validityStartTime!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:Certificate", name, opts.urn ? { algorithm: undefined, allowedUses: undefined, caCertPem: undefined, caKeyAlgorithm: undefined, caPrivateKeyPem: undefined, cert: undefined, certPem: undefined, certRequestPem: undefined, csr: undefined, dnsNames: undefined, earlyRenewalHours: undefined, ecdsaCurve: undefined, ipAddresses: undefined, isCaCertificate: undefined, key: undefined, keyAlgorithm: undefined, privateKeyOpenssh: undefined, privateKeyPem: undefined, privateKeyPemPkcs8: undefined, publicKeyFingerprintMd5: undefined, publicKeyFingerprintSha256: undefined, publicKeyOpenssh: undefined, publicKeyPem: undefined, readyForRenewal: undefined, rsaBits: undefined, setSubjectKeyId: undefined, subject: undefined, uris: undefined, validityEndTime: undefined, validityPeriodHours: undefined, validityStartTime: undefined } : { name, args, opts }, opts);
    }
}
export interface CertificateArgs {
    readonly algorithm: pulumi.Input<AlgorithmInputs>;
    readonly allowedUses: pulumi.Input<pulumi.Input<AllowedUsageInputs>[]>;
    readonly caCertPem: pulumi.Input<string>;
    readonly caPrivateKeyPem: pulumi.Input<string>;
    readonly dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly earlyRenewalHours?: pulumi.Input<number>;
    readonly ecdsaCurve?: pulumi.Input<EcdsaCurveInputs>;
    readonly ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly isCaCertificate?: pulumi.Input<boolean>;
    readonly rsaBits?: pulumi.Input<number>;
    readonly setSubjectKeyId?: pulumi.Input<boolean>;
    readonly subject?: pulumi.Input<tls.types.input.CertRequestSubject>;
    readonly uris?: pulumi.Input<pulumi.Input<string>[]>;
    readonly validityPeriodHours: pulumi.Input<number>;
}
export abstract class ClusterPki<TData = any> extends (pulumi.ComponentResource)<TData> {
    public admin!: Certificate | pulumi.Output<Certificate>;
    public algorithm?: AlgorithmOutputs | pulumi.Output<AlgorithmOutputs>;
    public ca!: RootCa | pulumi.Output<RootCa>;
    public clusterName!: string | pulumi.Output<string>;
    public controllerManager!: Certificate | pulumi.Output<Certificate>;
    public ecdsaCurve?: EcdsaCurveOutputs | pulumi.Output<EcdsaCurveOutputs>;
    public kubeProxy!: Certificate | pulumi.Output<Certificate>;
    public kubeScheduler!: Certificate | pulumi.Output<Certificate>;
    public kubelet!: Record<string, Certificate> | pulumi.Output<Record<string, Certificate>>;
    public kubernetes!: Certificate | pulumi.Output<Certificate>;
    public nodes!: Record<string, ClusterPkiNodeOutputs> | pulumi.Output<Record<string, ClusterPkiNodeOutputs>>;
    public publicIp!: string | pulumi.Output<string>;
    public rsaBits?: number | pulumi.Output<number>;
    public serviceAccounts!: Certificate | pulumi.Output<Certificate>;
    public validityPeriodHours!: number | pulumi.Output<number>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:ClusterPki", name, opts.urn ? { admin: undefined, algorithm: undefined, ca: undefined, clusterName: undefined, controllerManager: undefined, ecdsaCurve: undefined, kubeProxy: undefined, kubeScheduler: undefined, kubelet: undefined, kubernetes: undefined, nodes: undefined, publicIp: undefined, rsaBits: undefined, serviceAccounts: undefined, validityPeriodHours: undefined } : { name, args, opts }, opts);
    }
}
export interface ClusterPkiArgs {
    readonly algorithm?: pulumi.Input<AlgorithmInputs>;
    readonly clusterName: pulumi.Input<string>;
    readonly ecdsaCurve?: pulumi.Input<EcdsaCurveInputs>;
    readonly nodes: pulumi.Input<Record<string, pulumi.Input<ClusterPkiNodeInputs>>>;
    readonly publicIp: pulumi.Input<string>;
    readonly rsaBits?: pulumi.Input<number>;
    readonly validityPeriodHours?: pulumi.Input<number>;
}
export abstract class EncryptionKey<TData = any> extends (pulumi.ComponentResource)<TData> {
    public bytes!: number | pulumi.Output<number>;
    public config!: string | pulumi.Output<string>;
    public key!: random.RandomBytes | pulumi.Output<random.RandomBytes>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:EncryptionKey", name, opts.urn ? { bytes: undefined, config: undefined, key: undefined } : { name, args, opts }, opts);
    }
}
export interface EncryptionKeyArgs {
    readonly bytes: pulumi.Input<number>;
}
export abstract class RootCa<TData = any> extends (pulumi.ComponentResource)<TData> {
    public algorithm!: AlgorithmOutputs | pulumi.Output<AlgorithmOutputs>;
    public allowedUses!: string[] | pulumi.Output<string[]>;
    public cert!: tls.SelfSignedCert | pulumi.Output<tls.SelfSignedCert>;
    public certPem!: string | pulumi.Output<string>;
    public dnsNames?: string[] | pulumi.Output<string[]>;
    public earlyRenewalHours!: number | pulumi.Output<number>;
    public ecdsaCurve!: EcdsaCurveOutputs | pulumi.Output<EcdsaCurveOutputs>;
    public ipAddresses?: string[] | pulumi.Output<string[]>;
    public isCaCertificate!: boolean | pulumi.Output<boolean>;
    public key!: tls.PrivateKey | pulumi.Output<tls.PrivateKey>;
    public keyAlgorithm!: string | pulumi.Output<string>;
    public privateKeyOpenssh!: string | pulumi.Output<string>;
    public privateKeyPem!: string | pulumi.Output<string>;
    public privateKeyPemPkcs8!: string | pulumi.Output<string>;
    public publicKeyFingerprintMd5!: string | pulumi.Output<string>;
    public publicKeyFingerprintSha256!: string | pulumi.Output<string>;
    public publicKeyOpenssh!: string | pulumi.Output<string>;
    public publicKeyPem!: string | pulumi.Output<string>;
    public readyForRenewal!: boolean | pulumi.Output<boolean>;
    public rsaBits!: number | pulumi.Output<number>;
    public setAuthorityKeyId!: boolean | pulumi.Output<boolean>;
    public setSubjectKeyId!: boolean | pulumi.Output<boolean>;
    public subject?: tls.types.output.SelfSignedCertSubject | pulumi.Output<tls.types.output.SelfSignedCertSubject>;
    public uris?: string[] | pulumi.Output<string[]>;
    public validityEndTime!: string | pulumi.Output<string>;
    public validityPeriodHours!: number | pulumi.Output<number>;
    public validityStartTime!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:RootCa", name, opts.urn ? { algorithm: undefined, allowedUses: undefined, cert: undefined, certPem: undefined, dnsNames: undefined, earlyRenewalHours: undefined, ecdsaCurve: undefined, ipAddresses: undefined, isCaCertificate: undefined, key: undefined, keyAlgorithm: undefined, privateKeyOpenssh: undefined, privateKeyPem: undefined, privateKeyPemPkcs8: undefined, publicKeyFingerprintMd5: undefined, publicKeyFingerprintSha256: undefined, publicKeyOpenssh: undefined, publicKeyPem: undefined, readyForRenewal: undefined, rsaBits: undefined, setAuthorityKeyId: undefined, setSubjectKeyId: undefined, subject: undefined, uris: undefined, validityEndTime: undefined, validityPeriodHours: undefined, validityStartTime: undefined } : { name, args, opts }, opts);
    }
}
export interface RootCaArgs {
    readonly algorithm?: pulumi.Input<AlgorithmInputs>;
    readonly dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly earlyRenewalHours?: pulumi.Input<number>;
    readonly ecdsaCurve?: pulumi.Input<EcdsaCurveInputs>;
    readonly ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly rsaBits?: pulumi.Input<number>;
    readonly setAuthorityKeyId?: pulumi.Input<boolean>;
    readonly setSubjectKeyId?: pulumi.Input<boolean>;
    readonly subject?: pulumi.Input<tls.types.input.SelfSignedCertSubject>;
    readonly uris?: pulumi.Input<pulumi.Input<string>[]>;
    readonly validityPeriodHours: pulumi.Input<number>;
}
export interface ClusterInputs {
    readonly certificateAuthorityData: pulumi.Input<string>;
    readonly server: pulumi.Input<string>;
}
export interface ClusterOutputs {
    readonly certificateAuthorityData: pulumi.Output<string>;
    readonly server: pulumi.Output<string>;
}
export interface CniBridgeIpamInputs {
    readonly ranges?: pulumi.Input<pulumi.Input<Record<string, pulumi.Input<string>>>[]>;
    readonly routes?: pulumi.Input<pulumi.Input<Record<string, pulumi.Input<string>>>[]>;
    readonly type?: pulumi.Input<string>;
}
export interface CniBridgeIpamOutputs {
    readonly ranges?: pulumi.Output<Record<string, string>[]>;
    readonly routes?: pulumi.Output<Record<string, string>[]>;
    readonly type?: pulumi.Output<string>;
}
export interface CniBridgePluginConfigurationInputs {
    readonly bridge: pulumi.Input<string>;
    readonly cniVersion?: pulumi.Input<string>;
    readonly ipMasq: pulumi.Input<boolean>;
    readonly ipam: pulumi.Input<CniBridgeIpamInputs>;
    readonly isGateway: pulumi.Input<boolean>;
    readonly name: pulumi.Input<string>;
    readonly subnet: pulumi.Input<string>;
    readonly type: pulumi.Input<string>;
}
export interface CniBridgePluginConfigurationOutputs {
    readonly bridge: pulumi.Output<string>;
    readonly cniVersion?: pulumi.Output<string>;
    readonly ipMasq: pulumi.Output<boolean>;
    readonly ipam: pulumi.Output<CniBridgeIpamOutputs>;
    readonly isGateway: pulumi.Output<boolean>;
    readonly name: pulumi.Output<string>;
    readonly subnet: pulumi.Output<string>;
    readonly type: pulumi.Output<string>;
}
export interface CniLoopbackPluginConfigurationInputs {
    readonly cniVersion: pulumi.Input<string>;
    readonly name: pulumi.Input<string>;
    readonly type: pulumi.Input<string>;
}
export interface CniLoopbackPluginConfigurationOutputs {
    readonly cniVersion: pulumi.Output<string>;
    readonly name: pulumi.Output<string>;
    readonly type: pulumi.Output<string>;
}
export interface ContainerdConfigurationInputs {
    readonly cri?: pulumi.Input<ContainerdCriPluginConfigurationInputs>;
}
export interface ContainerdConfigurationOutputs {
    readonly cri?: pulumi.Output<ContainerdCriPluginConfigurationOutputs>;
}
export interface ContainerdCriPluginConfigurationInputs {
    readonly cni: ContainerdCriPluginConfigurationCniInputs;
    readonly containerd: ContainerdCriPluginConfigurationContainerdInputs;
}
export interface ContainerdCriPluginConfigurationOutputs {
    readonly cni: ContainerdCriPluginConfigurationCniOutputs;
    readonly containerd: ContainerdCriPluginConfigurationContainerdOutputs;
}
export interface ContainerdCriPluginConfigurationCniInputs {
    readonly binDir?: pulumi.Input<string>;
    readonly confDir?: pulumi.Input<string>;
}
export interface ContainerdCriPluginConfigurationCniOutputs {
    readonly binDir?: pulumi.Output<string>;
    readonly confDir?: pulumi.Output<string>;
}
export interface ContainerdCriPluginConfigurationContainerdInputs {
    readonly defaultRuntimeName?: pulumi.Input<string>;
    readonly runtimes?: ContainerdCriPluginConfigurationContainerdRuncInputs;
    readonly snapshotter?: pulumi.Input<string>;
}
export interface ContainerdCriPluginConfigurationContainerdOutputs {
    readonly defaultRuntimeName?: pulumi.Output<string>;
    readonly runtimes?: ContainerdCriPluginConfigurationContainerdRuncOutputs;
    readonly snapshotter?: pulumi.Output<string>;
}
export interface ContainerdCriPluginConfigurationContainerdRuncInputs {
    readonly options: ContainerdCriPluginConfigurationContainerdRuncOptionsInputs;
    readonly runtimeType?: pulumi.Input<string>;
}
export interface ContainerdCriPluginConfigurationContainerdRuncOutputs {
    readonly options: ContainerdCriPluginConfigurationContainerdRuncOptionsOutputs;
    readonly runtimeType?: pulumi.Output<string>;
}
export interface ContainerdCriPluginConfigurationContainerdRuncOptionsInputs {
    readonly systemdCgroup?: pulumi.Input<boolean>;
}
export interface ContainerdCriPluginConfigurationContainerdRuncOptionsOutputs {
    readonly systemdCgroup?: pulumi.Output<boolean>;
}
export interface ContextInputs {
    readonly cluster: pulumi.Input<string>;
    readonly user: pulumi.Input<string>;
}
export interface ContextOutputs {
    readonly cluster: pulumi.Output<string>;
    readonly user: pulumi.Output<string>;
}
export interface KubeProxyConfigurationInputs {
    readonly apiVersion?: pulumi.Input<string>;
    readonly clientConnection?: pulumi.Input<KubeProxyConfigurationClientConnectionInputs>;
    readonly clusterCIDR: pulumi.Input<string>;
    readonly kind?: pulumi.Input<string>;
    readonly mode?: pulumi.Input<string>;
}
export interface KubeProxyConfigurationOutputs {
    readonly apiVersion?: pulumi.Output<string>;
    readonly clientConnection?: pulumi.Output<KubeProxyConfigurationClientConnectionOutputs>;
    readonly clusterCIDR: pulumi.Output<string>;
    readonly kind?: pulumi.Output<string>;
    readonly mode?: pulumi.Output<string>;
}
export interface KubeProxyConfigurationClientConnectionInputs {
    readonly kubeconfig: pulumi.Input<string>;
}
export interface KubeProxyConfigurationClientConnectionOutputs {
    readonly kubeconfig: pulumi.Output<string>;
}
export interface KubeconfigInputs {
    readonly clusters: pulumi.Input<pulumi.Input<ClusterInputs>[]>;
    readonly contexts: pulumi.Input<pulumi.Input<ContextInputs>[]>;
    readonly users: pulumi.Input<pulumi.Input<UserInputs>[]>;
}
export interface KubeconfigOutputs {
    readonly clusters: pulumi.Output<ClusterOutputs[]>;
    readonly contexts: pulumi.Output<ContextOutputs[]>;
    readonly users: pulumi.Output<UserOutputs[]>;
}
export interface KubeconfigAdminOptionsInputs {
    readonly publicIp?: pulumi.Input<string>;
    readonly type: string;
}
export interface KubeconfigAdminOptionsOutputs {
    readonly publicIp?: pulumi.Output<string>;
    readonly type: string;
}
export interface KubeconfigClusterInputs {
    readonly cluster: pulumi.Input<ClusterInputs>;
    readonly name: pulumi.Input<string>;
}
export interface KubeconfigClusterOutputs {
    readonly cluster: pulumi.Output<ClusterOutputs>;
    readonly name: pulumi.Output<string>;
}
export interface KubeconfigContextInputs {
    readonly context: pulumi.Input<ContextInputs>;
    readonly name: pulumi.Input<string>;
}
export interface KubeconfigContextOutputs {
    readonly context: pulumi.Output<ContextOutputs>;
    readonly name: pulumi.Output<string>;
}
export interface KubeconfigKubeControllerManagerOptionsInputs {
    readonly publicIp?: pulumi.Input<string>;
    readonly type: string;
}
export interface KubeconfigKubeControllerManagerOptionsOutputs {
    readonly publicIp?: pulumi.Output<string>;
    readonly type: string;
}
export interface KubeconfigKubeProxyOptionsInputs {
    readonly publicIp?: pulumi.Input<string>;
    readonly type: string;
}
export interface KubeconfigKubeProxyOptionsOutputs {
    readonly publicIp?: pulumi.Output<string>;
    readonly type: string;
}
export interface KubeconfigKubeSchedulerOptionsInputs {
    readonly publicIp?: pulumi.Input<string>;
    readonly type: string;
}
export interface KubeconfigKubeSchedulerOptionsOutputs {
    readonly publicIp?: pulumi.Output<string>;
    readonly type: string;
}
export type KubeconfigTypeInputs = "worker" | "kube-proxy" | "kube-controller-manager" | "kube-scheduler" | "admin";
export type KubeconfigTypeOutputs = "worker" | "kube-proxy" | "kube-controller-manager" | "kube-scheduler" | "admin";
export interface KubeconfigUserInputs {
    readonly name: pulumi.Input<string>;
    readonly user: pulumi.Input<UserInputs>;
}
export interface KubeconfigUserOutputs {
    readonly name: pulumi.Output<string>;
    readonly user: pulumi.Output<UserOutputs>;
}
export interface KubeconfigWorkerOptionsInputs {
    readonly name: pulumi.Input<string>;
    readonly publicIp: pulumi.Input<string>;
    readonly type?: string;
}
export interface KubeconfigWorkerOptionsOutputs {
    readonly name: pulumi.Output<string>;
    readonly publicIp: pulumi.Output<string>;
    readonly type?: string;
}
export interface KubeletConfigurationInputs {
    readonly apiVersion: pulumi.Input<string>;
    readonly authentication: pulumi.Input<KubeletConfigurationAuthenticationInputs>;
    readonly authorization: pulumi.Input<KubeletConfigurationAuthorizationInputs>;
    readonly cgroupDriver: pulumi.Input<string>;
    readonly clusterDNS: pulumi.Input<pulumi.Input<string>[]>;
    readonly clusterDomain: pulumi.Input<string>;
    readonly containerRuntimeEndpoint: pulumi.Input<string>;
    readonly kind: pulumi.Input<string>;
    readonly podCIDR: pulumi.Input<string>;
    readonly resolvConf: pulumi.Input<string>;
    readonly runtimeRequestTimeout: pulumi.Input<string>;
    readonly tlsCertFile: pulumi.Input<string>;
    readonly tlsPrivateKeyFile: pulumi.Input<string>;
}
export interface KubeletConfigurationOutputs {
    readonly apiVersion: pulumi.Output<string>;
    readonly authentication: pulumi.Output<KubeletConfigurationAuthenticationOutputs>;
    readonly authorization: pulumi.Output<KubeletConfigurationAuthorizationOutputs>;
    readonly cgroupDriver: pulumi.Output<string>;
    readonly clusterDNS: pulumi.Output<string[]>;
    readonly clusterDomain: pulumi.Output<string>;
    readonly containerRuntimeEndpoint: pulumi.Output<string>;
    readonly kind: pulumi.Output<string>;
    readonly podCIDR: pulumi.Output<string>;
    readonly resolvConf: pulumi.Output<string>;
    readonly runtimeRequestTimeout: pulumi.Output<string>;
    readonly tlsCertFile: pulumi.Output<string>;
    readonly tlsPrivateKeyFile: pulumi.Output<string>;
}
export interface KubeletConfigurationAuthenticationInputs {
    readonly anonymous: pulumi.Input<KubeletConfigurationAuthenticationAnonymousInputs>;
    readonly webhook: pulumi.Input<KubeletConfigurationAuthenticationWebhookInputs>;
    readonly x509: pulumi.Input<KubeletConfigurationAuthenticationx509Inputs>;
}
export interface KubeletConfigurationAuthenticationOutputs {
    readonly anonymous: pulumi.Output<KubeletConfigurationAuthenticationAnonymousOutputs>;
    readonly webhook: pulumi.Output<KubeletConfigurationAuthenticationWebhookOutputs>;
    readonly x509: pulumi.Output<KubeletConfigurationAuthenticationx509Outputs>;
}
export interface KubeletConfigurationAuthenticationAnonymousInputs {
    readonly enabled: pulumi.Input<boolean>;
}
export interface KubeletConfigurationAuthenticationAnonymousOutputs {
    readonly enabled: pulumi.Output<boolean>;
}
export interface KubeletConfigurationAuthenticationWebhookInputs {
    readonly enabled: pulumi.Input<boolean>;
}
export interface KubeletConfigurationAuthenticationWebhookOutputs {
    readonly enabled: pulumi.Output<boolean>;
}
export interface KubeletConfigurationAuthenticationx509Inputs {
    readonly clientCAFile: pulumi.Input<string>;
}
export interface KubeletConfigurationAuthenticationx509Outputs {
    readonly clientCAFile: pulumi.Output<string>;
}
export interface KubeletConfigurationAuthorizationInputs {
    readonly mode: pulumi.Input<string>;
}
export interface KubeletConfigurationAuthorizationOutputs {
    readonly mode: pulumi.Output<string>;
}
export interface PodManifestInputs {
    readonly apiVersion?: pulumi.Input<string>;
    readonly kind?: pulumi.Input<string>;
    readonly metadata?: pulumi.Input<kubernetes.types.input.meta.v1.ObjectMeta>;
    readonly spec?: pulumi.Input<kubernetes.types.input.core.v1.PodSpec>;
    readonly status?: pulumi.Input<kubernetes.types.input.core.v1.PodStatus>;
}
export interface PodManifestOutputs {
    readonly apiVersion?: pulumi.Output<string>;
    readonly kind?: pulumi.Output<string>;
    readonly metadata?: pulumi.Output<kubernetes.types.output.meta.v1.ObjectMeta>;
    readonly spec?: pulumi.Output<kubernetes.types.output.core.v1.PodSpec>;
    readonly status?: pulumi.Output<kubernetes.types.output.core.v1.PodStatus>;
}
export interface UserInputs {
    readonly clientCertificateData: pulumi.Input<string>;
    readonly clientKeyData: pulumi.Input<string>;
}
export interface UserOutputs {
    readonly clientCertificateData: pulumi.Output<string>;
    readonly clientKeyData: pulumi.Output<string>;
}
export type ArchitectureInputs = "amd64" | "arm64";
export type ArchitectureOutputs = "amd64" | "arm64";
export interface EtcdConfigurationPropsInputs {
    readonly caFilePath: pulumi.Input<string>;
    readonly certFilePath: pulumi.Input<string>;
    readonly dataDirectory: pulumi.Input<string>;
    readonly etcdPath: pulumi.Input<string>;
    readonly internalIp: pulumi.Input<string>;
    readonly keyFilePath: pulumi.Input<string>;
    readonly name: pulumi.Input<string>;
}
export interface EtcdConfigurationPropsOutputs {
    readonly caFilePath: pulumi.Output<string>;
    readonly certFilePath: pulumi.Output<string>;
    readonly dataDirectory: pulumi.Output<string>;
    readonly etcdPath: pulumi.Output<string>;
    readonly internalIp: pulumi.Output<string>;
    readonly keyFilePath: pulumi.Output<string>;
    readonly name: pulumi.Output<string>;
}
export interface EtcdNodeInputs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly internalIp: pulumi.Input<string>;
}
export interface EtcdNodeOutputs {
    readonly architecture?: pulumi.Output<ArchitectureOutputs>;
    readonly connection: pulumi.Output<command.types.output.remote.Connection>;
    readonly internalIp: pulumi.Output<string>;
}
export interface KubeProxyConfigurationPropsInputs {
    readonly configurationFilePath: pulumi.Input<string>;
    readonly kubeProxyPath: pulumi.Input<string>;
}
export interface KubeProxyConfigurationPropsOutputs {
    readonly configurationFilePath: pulumi.Output<string>;
    readonly kubeProxyPath: pulumi.Output<string>;
}
export interface KubeletConfigurationPropsInputs {
    readonly configurationFilePath: pulumi.Input<string>;
    readonly kubeconfigPath: pulumi.Input<string>;
    readonly kubeletPath: pulumi.Input<string>;
    readonly registerNode: pulumi.Input<boolean>;
    readonly v: pulumi.Input<number>;
}
export interface KubeletConfigurationPropsOutputs {
    readonly configurationFilePath: pulumi.Output<string>;
    readonly kubeconfigPath: pulumi.Output<string>;
    readonly kubeletPath: pulumi.Output<string>;
    readonly registerNode: pulumi.Output<boolean>;
    readonly v: pulumi.Output<number>;
}
export type SystemdDelegateInputs = "yes" | "no" | "cpu" | "cpuacct" | "cpuset" | "io" | "blkio" | "memory" | "devices" | "pids" | "bpf-firewall" | "bpf-devices";
export type SystemdDelegateOutputs = "yes" | "no" | "cpu" | "cpuacct" | "cpuset" | "io" | "blkio" | "memory" | "devices" | "pids" | "bpf-firewall" | "bpf-devices";
export interface SystemdInstallSectionInputs {
    readonly wantedBy?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface SystemdInstallSectionOutputs {
    readonly wantedBy?: pulumi.Output<string[]>;
}
export type SystemdKillModeInputs = "control-group" | "mixed" | "process" | "none";
export type SystemdKillModeOutputs = "control-group" | "mixed" | "process" | "none";
export type SystemdServiceExitTypeInputs = "main" | "cgroup";
export type SystemdServiceExitTypeOutputs = "main" | "cgroup";
export type SystemdServiceRestartInputs = "no" | "on-success" | "on-failure" | "on-abnormal" | "on-watchdog" | "on-abort" | "always";
export type SystemdServiceRestartOutputs = "no" | "on-success" | "on-failure" | "on-abnormal" | "on-watchdog" | "on-abort" | "always";
export interface SystemdServiceSectionInputs {
    readonly delegate?: pulumi.Input<SystemdDelegateInputs>;
    readonly environment?: pulumi.Input<pulumi.Input<string>[]>;
    readonly execStart?: pulumi.Input<string>;
    readonly execStartPre?: pulumi.Input<string>;
    readonly exitType?: pulumi.Input<SystemdServiceExitTypeInputs>;
    readonly killMode?: pulumi.Input<SystemdKillModeInputs>;
    readonly limitCore?: pulumi.Input<string>;
    readonly limitNProc?: pulumi.Input<string>;
    readonly limitNoFile?: pulumi.Input<number>;
    readonly oomScoreAdjust?: pulumi.Input<number>;
    readonly restart?: pulumi.Input<SystemdServiceRestartInputs>;
    readonly restartSec?: pulumi.Input<string>;
    readonly type?: pulumi.Input<SystemdServiceTypeInputs>;
}
export interface SystemdServiceSectionOutputs {
    readonly delegate?: pulumi.Output<SystemdDelegateOutputs>;
    readonly environment?: pulumi.Output<string[]>;
    readonly execStart?: pulumi.Output<string>;
    readonly execStartPre?: pulumi.Output<string>;
    readonly exitType?: pulumi.Output<SystemdServiceExitTypeOutputs>;
    readonly killMode?: pulumi.Output<SystemdKillModeOutputs>;
    readonly limitCore?: pulumi.Output<string>;
    readonly limitNProc?: pulumi.Output<string>;
    readonly limitNoFile?: pulumi.Output<number>;
    readonly oomScoreAdjust?: pulumi.Output<number>;
    readonly restart?: pulumi.Output<SystemdServiceRestartOutputs>;
    readonly restartSec?: pulumi.Output<string>;
    readonly type?: pulumi.Output<SystemdServiceTypeOutputs>;
}
export type SystemdServiceTypeInputs = "simple" | "exec" | "forking" | "oneshot" | "dbus" | "notify" | "notify-reload" | "idle";
export type SystemdServiceTypeOutputs = "simple" | "exec" | "forking" | "oneshot" | "dbus" | "notify" | "notify-reload" | "idle";
export interface SystemdUnitSectionInputs {
    readonly after?: pulumi.Input<pulumi.Input<string>[]>;
    readonly before?: pulumi.Input<pulumi.Input<string>[]>;
    readonly bindsTo?: pulumi.Input<pulumi.Input<string>[]>;
    readonly description?: pulumi.Input<string>;
    readonly documentation?: pulumi.Input<pulumi.Input<string>[]>;
    readonly requires?: pulumi.Input<pulumi.Input<string>[]>;
    readonly requisite?: pulumi.Input<pulumi.Input<string>[]>;
    readonly wants?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface SystemdUnitSectionOutputs {
    readonly after?: pulumi.Output<string[]>;
    readonly before?: pulumi.Output<string[]>;
    readonly bindsTo?: pulumi.Output<string[]>;
    readonly description?: pulumi.Output<string>;
    readonly documentation?: pulumi.Output<string[]>;
    readonly requires?: pulumi.Output<string[]>;
    readonly requisite?: pulumi.Output<string[]>;
    readonly wants?: pulumi.Output<string[]>;
}
export type AlgorithmInputs = "RSA" | "ECDSA" | "ED25519";
export type AlgorithmOutputs = "RSA" | "ECDSA" | "ED25519";
export type AllowedUsageInputs = "cert_signing" | "client_auth" | "crl_signing" | "digital_signature" | "key_encipherment" | "server_auth";
export type AllowedUsageOutputs = "cert_signing" | "client_auth" | "crl_signing" | "digital_signature" | "key_encipherment" | "server_auth";
export interface BundleInputs {
    readonly caPem: pulumi.Input<string>;
    readonly certPem: pulumi.Input<string>;
    readonly keyPem: pulumi.Input<string>;
}
export interface BundleOutputs {
    readonly caPem: pulumi.Output<string>;
    readonly certPem: pulumi.Output<string>;
    readonly keyPem: pulumi.Output<string>;
}
export interface ClusterPkiNodeInputs {
    readonly ip: pulumi.Input<string>;
    readonly role: pulumi.Input<NodeRoleInputs>;
}
export interface ClusterPkiNodeOutputs {
    readonly ip: pulumi.Output<string>;
    readonly role: pulumi.Output<NodeRoleOutputs>;
}
export type EcdsaCurveInputs = "P224" | "P256" | "P384" | "P521";
export type EcdsaCurveOutputs = "P224" | "P256" | "P384" | "P521";
export interface KeyPairInputs {
    readonly cert: pulumi.Input<pulumi.Input<tls.LocallySignedCert> | pulumi.Input<tls.SelfSignedCert>>;
    readonly certPem: pulumi.Input<string>;
    readonly key: pulumi.Input<tls.PrivateKey>;
    readonly privateKeyPem: pulumi.Input<string>;
    readonly publicKeyPem: pulumi.Input<string>;
}
export interface KeyPairOutputs {
    readonly cert: pulumi.Output<pulumi.Output<tls.LocallySignedCert> | pulumi.Output<tls.SelfSignedCert>>;
    readonly certPem: pulumi.Output<string>;
    readonly key: pulumi.Output<tls.PrivateKey>;
    readonly privateKeyPem: pulumi.Output<string>;
    readonly publicKeyPem: pulumi.Output<string>;
}
export type NodeRoleInputs = "controlplane" | "worker";
export type NodeRoleOutputs = "controlplane" | "worker";
export interface getKubeVipManifestInputs {
    readonly address: pulumi.Input<string>;
    readonly bgpAs?: pulumi.Input<number>;
    readonly bgpEnable?: pulumi.Input<boolean>;
    readonly bgpPeerAddress?: pulumi.Input<string>;
    readonly bgpPeerAs?: pulumi.Input<number>;
    readonly bgpPeerPass?: pulumi.Input<string>;
    readonly bgpPeers?: pulumi.Input<string>;
    readonly bgpRouterId?: pulumi.Input<string>;
    readonly cpEnable?: pulumi.Input<boolean>;
    readonly cpNamespace?: pulumi.Input<string>;
    readonly image?: pulumi.Input<string>;
    readonly kubeconfigPath: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly namespace?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly svcEnable?: pulumi.Input<boolean>;
    readonly version?: pulumi.Input<string>;
    readonly vipArp?: pulumi.Input<boolean>;
    readonly vipCidr: pulumi.Input<number>;
    readonly vipDdns?: pulumi.Input<boolean>;
    readonly vipInterface?: pulumi.Input<string>;
    readonly vipLeaderElection?: pulumi.Input<boolean>;
    readonly vipLeaseDuration?: pulumi.Input<number>;
    readonly vipRenewDeadline?: pulumi.Input<number>;
    readonly vipRetryPeriod?: pulumi.Input<number>;
}
export interface getKubeVipManifestOutputs {
    readonly result: pulumi.Output<PodManifestOutputs>;
}
export interface getKubeconfigInputs {
    readonly caPem: pulumi.Input<string>;
    readonly options: pulumi.Input<KubeconfigAdminOptionsInputs> | pulumi.Input<KubeconfigKubeControllerManagerOptionsInputs> | pulumi.Input<KubeconfigKubeProxyOptionsInputs> | pulumi.Input<KubeconfigKubeSchedulerOptionsInputs> | pulumi.Input<KubeconfigWorkerOptionsInputs>;
}
export interface getKubeconfigOutputs {
    readonly result: pulumi.Output<KubeconfigOutputs>;
}
export interface getKubeletConfigurationInputs {
    readonly anonymous?: pulumi.Input<boolean>;
    readonly authorizationMode?: pulumi.Input<string>;
    readonly cgroupDriver?: pulumi.Input<string>;
    readonly clientCAFile?: pulumi.Input<string>;
    readonly clusterDNS?: pulumi.Input<pulumi.Input<string>[]>;
    readonly clusterDomain?: pulumi.Input<string>;
    readonly containerRuntimeEndpoint?: pulumi.Input<string>;
    readonly podCIDR: pulumi.Input<string>;
    readonly resolvConf?: pulumi.Input<string>;
    readonly runtimeRequestTimeout?: pulumi.Input<string>;
    readonly tlsCertFile?: pulumi.Input<string>;
    readonly tlsPrivateKeyFile?: pulumi.Input<string>;
    readonly webhook?: pulumi.Input<boolean>;
}
export interface getKubeletConfigurationOutputs {
    readonly result: pulumi.Output<KubeletConfigurationOutputs>;
}
export interface ClusterPki_getKubeconfigInputs {
    readonly __self__: pulumi.Input<ClusterPki>;
    readonly options: pulumi.Input<KubeconfigAdminOptionsInputs> | pulumi.Input<KubeconfigKubeControllerManagerOptionsInputs> | pulumi.Input<KubeconfigKubeProxyOptionsInputs> | pulumi.Input<KubeconfigKubeSchedulerOptionsInputs> | pulumi.Input<KubeconfigWorkerOptionsInputs>;
}
export interface ClusterPki_getKubeconfigOutputs {
    readonly result: pulumi.Output<KubeconfigOutputs>;
}
