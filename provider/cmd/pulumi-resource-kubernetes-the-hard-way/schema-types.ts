/* tslint:disable */
/**
 * This file was automatically generated by pulumi-provider-scripts.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source Pulumi Schema file,
 * and run "pulumi-provider-scripts gen-provider-types" to regenerate this file. */
import * as pulumi from "@pulumi/pulumi";
export type ConstructComponent<T extends pulumi.ComponentResource = pulumi.ComponentResource> = (name: string, inputs: any, options: pulumi.ComponentResourceOptions) => T;
export type ResourceConstructor = {
    readonly "kubernetes-the-hard-way:remote:CniPluginsInstall": ConstructComponent<CniPluginsInstall>;
    readonly "kubernetes-the-hard-way:remote:ContainerdInstall": ConstructComponent<ContainerdInstall>;
    readonly "kubernetes-the-hard-way:remote:CrictlInstall": ConstructComponent<CrictlInstall>;
    readonly "kubernetes-the-hard-way:remote:EtcdConfiguration": ConstructComponent<EtcdConfiguration>;
    readonly "kubernetes-the-hard-way:remote:EtcdInstall": ConstructComponent<EtcdInstall>;
    readonly "kubernetes-the-hard-way:remote:Download": ConstructComponent<Download>;
    readonly "kubernetes-the-hard-way:remote:File": ConstructComponent<File>;
    readonly "kubernetes-the-hard-way:remote:KubeApiServerInstall": ConstructComponent<KubeApiServerInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeControllerManagerInstall": ConstructComponent<KubeControllerManagerInstall>;
    readonly "kubernetes-the-hard-way:remote:KubectlInstall": ConstructComponent<KubectlInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeletInstall": ConstructComponent<KubeletInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeProxyInstall": ConstructComponent<KubeProxyInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeSchedulerInstall": ConstructComponent<KubeSchedulerInstall>;
    readonly "kubernetes-the-hard-way:remote:RuncInstall": ConstructComponent<RuncInstall>;
    readonly "kubernetes-the-hard-way:remote:SystemdService": ConstructComponent<SystemdService>;
    readonly "kubernetes-the-hard-way:tls:Certificate": ConstructComponent<Certificate>;
    readonly "kubernetes-the-hard-way:tls:ClusterPki": ConstructComponent<ClusterPki>;
    readonly "kubernetes-the-hard-way:tls:EncryptionKey": ConstructComponent<EncryptionKey>;
    readonly "kubernetes-the-hard-way:tls:RootCa": ConstructComponent<RootCa>;
    readonly "kubernetes-the-hard-way:tools:Etcdctl": ConstructComponent<Etcdctl>;
    readonly "kubernetes-the-hard-way:tools:Mkdir": ConstructComponent<Mkdir>;
    readonly "kubernetes-the-hard-way:tools:Mktemp": ConstructComponent<Mktemp>;
    readonly "kubernetes-the-hard-way:tools:Mv": ConstructComponent<Mv>;
    readonly "kubernetes-the-hard-way:tools:Rm": ConstructComponent<Rm>;
    readonly "kubernetes-the-hard-way:tools:Systemctl": ConstructComponent<Systemctl>;
    readonly "kubernetes-the-hard-way:tools:Tar": ConstructComponent<Tar>;
    readonly "kubernetes-the-hard-way:tools:Tee": ConstructComponent<Tee>;
    readonly "kubernetes-the-hard-way:tools:Wget": ConstructComponent<Wget>;
};
export type Functions = {
    "kubernetes-the-hard-way:tls:ClusterPki/getKubeconfig": (inputs: ClusterPki_getKubeconfigInputs) => Promise<ClusterPki_getKubeconfigOutputs>;
    "kubernetes-the-hard-way:remote:EtcdInstall/etcdctl": (inputs: EtcdInstall_etcdctlInputs) => Promise<EtcdInstall_etcdctlOutputs>;
    "kubernetes-the-hard-way:remote:SystemdService/disable": (inputs: SystemdService_disableInputs) => Promise<SystemdService_disableOutputs>;
    "kubernetes-the-hard-way:remote:SystemdService/enable": (inputs: SystemdService_enableInputs) => Promise<SystemdService_enableOutputs>;
    "kubernetes-the-hard-way:remote:SystemdService/start": (inputs: SystemdService_startInputs) => Promise<SystemdService_startOutputs>;
};
import * as command from "@pulumi/command";
import * as random from "@pulumi/random";
import * as tls from "@pulumi/tls";
export abstract class CniPluginsInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public download!: Download | pulumi.Output<Download>;
    public directory!: string | pulumi.Output<string>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public tar!: Tar | pulumi.Output<Tar>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:CniPluginsInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, connection: undefined, download: undefined, directory: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface CniPluginsInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class ContainerdInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public download!: Download | pulumi.Output<Download>;
    public directory!: string | pulumi.Output<string>;
    public mkdir?: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public tar?: Tar | pulumi.Output<Tar>;
    public url?: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:ContainerdInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, connection: undefined, download: undefined, directory: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface ContainerdInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class CrictlInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public download!: Download | pulumi.Output<Download>;
    public directory!: string | pulumi.Output<string>;
    public mkdir?: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public tar?: Tar | pulumi.Output<Tar>;
    public url?: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:CrictlInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, connection: undefined, download: undefined, directory: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface CrictlInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class EtcdConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public caFile?: File | pulumi.Output<File>;
    public certFile?: File | pulumi.Output<File>;
    public configurationDirectory!: string | pulumi.Output<string>;
    public configurationMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public dataDirectory!: string | pulumi.Output<string>;
    public dataMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public internalIp!: string | pulumi.Output<string>;
    public keyFile?: File | pulumi.Output<File>;
    public systemdService!: SystemdService | pulumi.Output<SystemdService>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdConfiguration", name, opts.urn ? { caFile: undefined, certFile: undefined, configurationDirectory: undefined, configurationMkdir: undefined, dataDirectory: undefined, dataMkdir: undefined, internalIp: undefined, keyFile: undefined, systemdService: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdConfigurationArgs {
    readonly caPem: pulumi.Input<string>;
    readonly certPem: pulumi.Input<string>;
    readonly configurationDirectory?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly dataDirectory?: pulumi.Input<string>;
    readonly etcdPath: pulumi.Input<string>;
    readonly internalIp: pulumi.Input<string>;
    readonly keyPem: pulumi.Input<string>;
    readonly systemdDirectory?: pulumi.Input<string>;
}
export abstract class EtcdInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public etcdPath!: string | pulumi.Output<string>;
    public etcdctlPath!: string | pulumi.Output<string>;
    public directory!: string | pulumi.Output<string>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mvEtcd!: Mv | pulumi.Output<Mv>;
    public mvEtcdctl!: Mv | pulumi.Output<Mv>;
    public name!: string | pulumi.Output<string>;
    public tar!: Tar | pulumi.Output<Tar>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, download: undefined, etcdPath: undefined, etcdctlPath: undefined, directory: undefined, mkdir: undefined, mvEtcd: undefined, mvEtcdctl: undefined, name: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class Download<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public destination!: string | pulumi.Output<string>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public url!: string | pulumi.Output<string>;
    public wget!: Wget | pulumi.Output<Wget>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:Download", name, opts.urn ? { connection: undefined, destination: undefined, mkdir: undefined, url: undefined, wget: undefined } : { name, args, opts }, opts);
    }
}
export interface DownloadArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly destination: pulumi.Input<string>;
    readonly removeOnDelete?: pulumi.Input<boolean>;
    readonly url: pulumi.Input<string>;
}
export abstract class File<TData = any> extends (pulumi.ComponentResource)<TData> {
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public content!: string | pulumi.Output<string>;
    public path!: string | pulumi.Output<string>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:File", name, opts.urn ? { command: undefined, content: undefined, path: undefined, stderr: undefined, stdin: undefined, stdout: undefined } : { name, args, opts }, opts);
    }
}
export interface FileArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly content: pulumi.Input<string>;
    readonly path: pulumi.Input<string>;
}
export abstract class KubeApiServerInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public mkdir?: Mkdir | pulumi.Output<Mkdir>;
    public path?: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeApiServerInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, mkdir: undefined, path: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeApiServerInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeControllerManagerInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeControllerManagerInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, mkdir: undefined, mv: undefined, path: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeControllerManagerInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubectlInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public download!: Download | pulumi.Output<Download>;
    public directory!: string | pulumi.Output<string>;
    public mkdir?: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubectlInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, download: undefined, directory: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubectlInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeletInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public download!: Download | pulumi.Output<Download>;
    public directory!: string | pulumi.Output<string>;
    public mkdir?: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeletInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, download: undefined, directory: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeletInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeProxyInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public download!: Download | pulumi.Output<Download>;
    public directory!: string | pulumi.Output<string>;
    public mkdir?: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeProxyInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, download: undefined, directory: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeProxyInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeSchedulerInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download?: Download | pulumi.Output<Download>;
    public mkdir?: Mkdir | pulumi.Output<Mkdir>;
    public mktemp?: Mktemp | pulumi.Output<Mktemp>;
    public mv?: Mv | pulumi.Output<Mv>;
    public path?: string | pulumi.Output<string>;
    public rm?: Rm | pulumi.Output<Rm>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeSchedulerInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeSchedulerInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class RuncInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public download!: Download | pulumi.Output<Download>;
    public directory!: string | pulumi.Output<string>;
    public mkdir?: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:RuncInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, download: undefined, directory: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface RuncInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class SystemdService<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public file!: File | pulumi.Output<File>;
    public install?: SystemdInstallSectionOutputs | pulumi.Output<SystemdInstallSectionOutputs>;
    public service!: SystemdServiceSectionOutputs | pulumi.Output<SystemdServiceSectionOutputs>;
    public unit?: SystemdUnitSectionOutputs | pulumi.Output<SystemdUnitSectionOutputs>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:SystemdService", name, opts.urn ? { connection: undefined, directory: undefined, file: undefined, install: undefined, service: undefined, unit: undefined } : { name, args, opts }, opts);
    }
}
export interface SystemdServiceArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly install?: pulumi.Input<SystemdInstallSectionInputs>;
    readonly service: pulumi.Input<SystemdServiceSectionInputs>;
    readonly unit?: pulumi.Input<SystemdUnitSectionInputs>;
}
export abstract class Certificate<TData = any> extends (pulumi.ComponentResource)<TData> {
    public allowedUses?: AllowedUsageOutputs[] | pulumi.Output<AllowedUsageOutputs[]>;
    public cert!: tls.LocallySignedCert | pulumi.Output<tls.LocallySignedCert>;
    public certPem!: string | pulumi.Output<string>;
    public csr!: tls.CertRequest | pulumi.Output<tls.CertRequest>;
    public key!: tls.PrivateKey | pulumi.Output<tls.PrivateKey>;
    public privateKeyPem!: string | pulumi.Output<string>;
    public publicKeyPem!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:Certificate", name, opts.urn ? { allowedUses: undefined, cert: undefined, certPem: undefined, csr: undefined, key: undefined, privateKeyPem: undefined, publicKeyPem: undefined } : { name, args, opts }, opts);
    }
}
export interface CertificateArgs {
    readonly algorithm: pulumi.Input<AlgorithmInputs>;
    readonly allowedUses: pulumi.Input<pulumi.Input<AllowedUsageInputs>[]>;
    readonly caCertPem: pulumi.Input<string>;
    readonly caPrivateKeyPem: pulumi.Input<string>;
    readonly ecdsaCurve?: pulumi.Input<EcdsaCurveInputs>;
    readonly rsaBits?: pulumi.Input<number>;
    readonly dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly earlyRenewalHours?: pulumi.Input<number>;
    readonly ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly isCaCertificate?: pulumi.Input<boolean>;
    readonly setAuthorityKeyId?: pulumi.Input<boolean>;
    readonly setSubjectKeyId?: pulumi.Input<boolean>;
    readonly subject?: pulumi.Input<tls.types.input.CertRequestSubject>;
    readonly uris?: pulumi.Input<pulumi.Input<string>[]>;
    readonly validityPeriodHours: pulumi.Input<number>;
}
export abstract class ClusterPki<TData = any> extends (pulumi.ComponentResource)<TData> {
    public admin!: Certificate | pulumi.Output<Certificate>;
    public algorithm!: AlgorithmOutputs | pulumi.Output<AlgorithmOutputs>;
    public ca!: RootCa | pulumi.Output<RootCa>;
    public clusterName!: string | pulumi.Output<string>;
    public controllerManager!: Certificate | pulumi.Output<Certificate>;
    public kubelet!: Record<string, Certificate> | pulumi.Output<Record<string, Certificate>>;
    public kubeProxy!: Certificate | pulumi.Output<Certificate>;
    public kubernetes!: Certificate | pulumi.Output<Certificate>;
    public kubeScheduler!: Certificate | pulumi.Output<Certificate>;
    public publicIp!: string | pulumi.Output<string>;
    public rsaBits!: number | pulumi.Output<number>;
    public serviceAccounts!: Certificate | pulumi.Output<Certificate>;
    public validityPeriodHours!: number | pulumi.Output<number>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:ClusterPki", name, opts.urn ? { admin: undefined, algorithm: undefined, ca: undefined, clusterName: undefined, controllerManager: undefined, kubelet: undefined, kubeProxy: undefined, kubernetes: undefined, kubeScheduler: undefined, publicIp: undefined, rsaBits: undefined, serviceAccounts: undefined, validityPeriodHours: undefined } : { name, args, opts }, opts);
    }
}
export interface ClusterPkiArgs {
    readonly algorithm?: pulumi.Input<AlgorithmInputs>;
    readonly clusterName: pulumi.Input<string>;
    readonly ecdsaCurve?: pulumi.Input<EcdsaCurveInputs>;
    readonly nodes: pulumi.Input<Record<string, pulumi.Input<ClusterPkiNodeInputs>>>;
    readonly publicIp: pulumi.Input<string>;
    readonly rsaBits?: pulumi.Input<number>;
    readonly validityPeriodHours?: pulumi.Input<number>;
}
export abstract class EncryptionKey<TData = any> extends (pulumi.ComponentResource)<TData> {
    public config!: string | pulumi.Output<string>;
    public key!: random.RandomBytes | pulumi.Output<random.RandomBytes>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:EncryptionKey", name, opts.urn ? { config: undefined, key: undefined } : { name, args, opts }, opts);
    }
}
export interface EncryptionKeyArgs {
    readonly bytes?: pulumi.Input<number>;
}
export abstract class RootCa<TData = any> extends (pulumi.ComponentResource)<TData> {
    public allowedUses!: AllowedUsageOutputs[] | pulumi.Output<AllowedUsageOutputs[]>;
    public cert!: tls.SelfSignedCert | pulumi.Output<tls.SelfSignedCert>;
    public certPem!: string | pulumi.Output<string>;
    public key!: tls.PrivateKey | pulumi.Output<tls.PrivateKey>;
    public privateKeyPem!: string | pulumi.Output<string>;
    public publicKeyPem!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:RootCa", name, opts.urn ? { allowedUses: undefined, cert: undefined, certPem: undefined, key: undefined, privateKeyPem: undefined, publicKeyPem: undefined } : { name, args, opts }, opts);
    }
}
export interface RootCaArgs {
    readonly algorithm?: pulumi.Input<AlgorithmInputs>;
    readonly ecdsaCurve?: pulumi.Input<EcdsaCurveInputs>;
    readonly rsaBits?: pulumi.Input<number>;
    readonly dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly earlyRenewalHours?: pulumi.Input<number>;
    readonly ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly setAuthorityKeyId?: pulumi.Input<boolean>;
    readonly setSubjectKeyId?: pulumi.Input<boolean>;
    readonly uris?: pulumi.Input<pulumi.Input<string>[]>;
    readonly validityPeriodHours: pulumi.Input<number>;
    readonly subject?: pulumi.Input<tls.types.input.SelfSignedCertSubject>;
}
export abstract class Etcdctl<TData = any> extends (pulumi.ComponentResource)<TData> {
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Etcdctl", name, opts.urn ? { binaryPath: undefined, command: undefined, connection: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdctlArgs {
    readonly binaryPath?: pulumi.Input<string>;
    readonly commands?: pulumi.Input<pulumi.Input<EtcdctlCommandInputs>[]>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly endpoints?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly caCert?: pulumi.Input<string>;
    readonly cert?: pulumi.Input<string>;
    readonly key?: pulumi.Input<string>;
}
export abstract class Mkdir<TData = any> extends (pulumi.ComponentResource)<TData> {
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public directory!: string | pulumi.Output<string>;
    public parents!: boolean | pulumi.Output<boolean>;
    public removeOnDelete!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Mkdir", name, opts.urn ? { command: undefined, directory: undefined, parents: undefined, removeOnDelete: undefined, stderr: undefined, stdout: undefined } : { name, args, opts }, opts);
    }
}
export interface MkdirArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly parents?: pulumi.Input<boolean>;
    readonly removeOnDelete?: pulumi.Input<boolean>;
}
export abstract class Mktemp<TData = any> extends (pulumi.ComponentResource)<TData> {
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public directory!: boolean | pulumi.Output<boolean>;
    public dryRun!: boolean | pulumi.Output<boolean>;
    public quiet!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public suffix?: string | pulumi.Output<string>;
    public template?: string | pulumi.Output<string>;
    public tmpdir?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Mktemp", name, opts.urn ? { command: undefined, directory: undefined, dryRun: undefined, quiet: undefined, stderr: undefined, stdout: undefined, suffix: undefined, template: undefined, tmpdir: undefined } : { name, args, opts }, opts);
    }
}
export interface MktempArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<boolean>;
    readonly dryRun?: pulumi.Input<boolean>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly quiet?: pulumi.Input<boolean>;
    readonly suffix?: pulumi.Input<string>;
    readonly template?: pulumi.Input<string>;
    readonly tmpdir?: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
}
export abstract class Mv<TData = any> extends (pulumi.ComponentResource)<TData> {
    public backup!: boolean | pulumi.Output<boolean>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public context!: boolean | pulumi.Output<boolean>;
    public control?: string | pulumi.Output<string>;
    public dest?: string | pulumi.Output<string>;
    public directory?: string | pulumi.Output<string>;
    public force!: boolean | pulumi.Output<boolean>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public noClobber!: boolean | pulumi.Output<boolean>;
    public noTargetDirectory!: boolean | pulumi.Output<boolean>;
    public source!: string[] | pulumi.Output<string[]>;
    public stripTrailingSlashes!: boolean | pulumi.Output<boolean>;
    public suffix?: string | pulumi.Output<string>;
    public targetDirectory?: string | pulumi.Output<string>;
    public update!: boolean | pulumi.Output<boolean>;
    public verbose!: boolean | pulumi.Output<boolean>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Mv", name, opts.urn ? { backup: undefined, command: undefined, context: undefined, control: undefined, dest: undefined, directory: undefined, force: undefined, lifecycle: undefined, noClobber: undefined, noTargetDirectory: undefined, source: undefined, stripTrailingSlashes: undefined, suffix: undefined, targetDirectory: undefined, update: undefined, verbose: undefined } : { name, args, opts }, opts);
    }
}
export interface MvArgs {
    readonly backup?: boolean;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly context?: pulumi.Input<boolean>;
    readonly control?: pulumi.Input<string>;
    readonly dest?: pulumi.Input<string>;
    readonly directory?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly force?: pulumi.Input<boolean>;
    readonly noClobber?: pulumi.Input<boolean>;
    readonly noTargetDirectory?: pulumi.Input<boolean>;
    readonly source: pulumi.Input<unknown>;
    readonly stripTrailingSlashes?: pulumi.Input<boolean>;
    readonly suffix?: pulumi.Input<string>;
    readonly targetDirectory?: pulumi.Input<string>;
    readonly update?: pulumi.Input<boolean>;
    readonly verbose?: pulumi.Input<boolean>;
}
export abstract class Rm<TData = any> extends (pulumi.ComponentResource)<TData> {
    public command?: command.remote.Command | pulumi.Output<command.remote.Command>;
    public dir!: boolean | pulumi.Output<boolean>;
    public files!: string[] | pulumi.Output<string[]>;
    public force!: boolean | pulumi.Output<boolean>;
    public onDelete!: boolean | pulumi.Output<boolean>;
    public recursive!: boolean | pulumi.Output<boolean>;
    public verbose!: boolean | pulumi.Output<boolean>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Rm", name, opts.urn ? { command: undefined, dir: undefined, files: undefined, force: undefined, onDelete: undefined, recursive: undefined, verbose: undefined } : { name, args, opts }, opts);
    }
}
export interface RmArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly dir?: pulumi.Input<boolean>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly files: pulumi.Input<unknown>;
    readonly force?: pulumi.Input<boolean>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly onDelete?: boolean;
    readonly recursive?: pulumi.Input<boolean>;
    readonly verbose?: pulumi.Input<boolean>;
}
export abstract class Systemctl<TData = any> extends (pulumi.ComponentResource)<TData> {
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public commands!: SystemctlCommandOutputs[] | pulumi.Output<SystemctlCommandOutputs[]>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public serviceName?: string | pulumi.Output<string>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Systemctl", name, opts.urn ? { command: undefined, commands: undefined, connection: undefined, serviceName: undefined, stderr: undefined, stdin: undefined, stdout: undefined } : { name, args, opts }, opts);
    }
}
export interface SystemctlArgs {
    readonly commands: pulumi.Input<pulumi.Input<SystemctlCommandInputs>[]>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly serviceName?: pulumi.Input<string>;
}
export abstract class Tar<TData = any> extends (pulumi.ComponentResource)<TData> {
    public archive!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public directory?: string | pulumi.Output<string>;
    public extract!: boolean | pulumi.Output<boolean>;
    public files!: string[] | pulumi.Output<string[]>;
    public gzip?: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public stripComponents?: number | pulumi.Output<number>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Tar", name, opts.urn ? { archive: undefined, command: undefined, directory: undefined, extract: undefined, files: undefined, gzip: undefined, stderr: undefined, stdin: undefined, stdout: undefined, stripComponents: undefined } : { name, args, opts }, opts);
    }
}
export interface TarArgs {
    readonly archive: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly extract?: pulumi.Input<boolean>;
    readonly files?: pulumi.Input<unknown>;
    readonly gzip?: pulumi.Input<boolean>;
    readonly stripComponents?: pulumi.Input<number>;
}
export abstract class Tee<TData = any> extends (pulumi.ComponentResource)<TData> {
    public append!: boolean | pulumi.Output<boolean>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public environment?: Record<string, string> | pulumi.Output<Record<string, string>>;
    public files!: unknown | pulumi.Output<unknown>;
    public ignoreInterrupts!: boolean | pulumi.Output<boolean>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public outputError?: TeeModeOutputs | pulumi.Output<TeeModeOutputs>;
    public pipe!: boolean | pulumi.Output<boolean>;
    public stderr?: string | pulumi.Output<string>;
    public stdin!: string | pulumi.Output<string>;
    public stdout?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Tee", name, opts.urn ? { append: undefined, command: undefined, connection: undefined, environment: undefined, files: undefined, ignoreInterrupts: undefined, lifecycle: undefined, outputError: undefined, pipe: undefined, stderr: undefined, stdin: undefined, stdout: undefined } : { name, args, opts }, opts);
    }
}
export interface TeeArgs {
    readonly append?: pulumi.Input<boolean>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly files: pulumi.Input<unknown>;
    readonly ignoreInterrupts?: pulumi.Input<boolean>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly outputError?: pulumi.Input<TeeModeInputs>;
    readonly pipe?: pulumi.Input<boolean>;
    readonly stdin: pulumi.Input<string>;
    readonly version?: pulumi.Input<boolean>;
}
export abstract class Wget<TData = any> extends (pulumi.ComponentResource)<TData> {
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public directoryPrefix?: string | pulumi.Output<string>;
    public environment?: Record<string, string> | pulumi.Output<Record<string, string>>;
    public httpsOnly!: boolean | pulumi.Output<boolean>;
    public noVerbose?: boolean | pulumi.Output<boolean>;
    public outputDocument?: string | pulumi.Output<string>;
    public quiet!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public timestamping!: boolean | pulumi.Output<boolean>;
    public url!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Wget", name, opts.urn ? { command: undefined, directoryPrefix: undefined, environment: undefined, httpsOnly: undefined, noVerbose: undefined, outputDocument: undefined, quiet: undefined, stderr: undefined, stdin: undefined, stdout: undefined, timestamping: undefined, url: undefined } : { name, args, opts }, opts);
    }
}
export interface WgetArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directoryPrefix?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly httpsOnly?: pulumi.Input<boolean>;
    readonly noVerbose?: pulumi.Input<boolean>;
    readonly outputDocument?: pulumi.Input<string>;
    readonly quiet?: pulumi.Input<boolean>;
    readonly timestamping?: pulumi.Input<boolean>;
    readonly url: pulumi.Input<string>;
}
export type AlgorithmInputs = "RSA" | "ECDSA" | "ED25519";
export type AlgorithmOutputs = "RSA" | "ECDSA" | "ED25519";
export type AllowedUsageInputs = "cert_signing" | "client_auth" | "crl_signing" | "digital_signature" | "key_encipherment" | "server_auth";
export type AllowedUsageOutputs = "cert_signing" | "client_auth" | "crl_signing" | "digital_signature" | "key_encipherment" | "server_auth";
export type ArchitectureInputs = "amd64" | "arm64";
export type ArchitectureOutputs = "amd64" | "arm64";
export interface CertRequestSubjectInputs {
    readonly commonName?: pulumi.Input<string>;
    readonly country?: pulumi.Input<string>;
    readonly locality?: pulumi.Input<string>;
    readonly organization?: pulumi.Input<string>;
    readonly organizationalUnit?: pulumi.Input<string>;
    readonly postalCode?: pulumi.Input<string>;
    readonly province?: pulumi.Input<string>;
    readonly serialNumber?: pulumi.Input<string>;
    readonly streetAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface CertRequestSubjectOutputs {
    readonly commonName?: pulumi.Output<string>;
    readonly country?: pulumi.Output<string>;
    readonly locality?: pulumi.Output<string>;
    readonly organization?: pulumi.Output<string>;
    readonly organizationalUnit?: pulumi.Output<string>;
    readonly postalCode?: pulumi.Output<string>;
    readonly province?: pulumi.Output<string>;
    readonly serialNumber?: pulumi.Output<string>;
    readonly streetAddresses?: pulumi.Output<string[]>;
}
export interface ConnectionInputs {
    readonly agentSocketPath?: pulumi.Input<string>;
    readonly dialErrorLimit?: pulumi.Input<number>;
    readonly host: pulumi.Input<string>;
    readonly password?: pulumi.Input<string>;
    readonly perDialTimeout?: pulumi.Input<number>;
    readonly port?: pulumi.Input<number>;
    readonly privateKey?: pulumi.Input<string>;
    readonly privateKeyPassword?: pulumi.Input<string>;
    readonly user?: pulumi.Input<string>;
}
export interface ConnectionOutputs {
    readonly agentSocketPath?: pulumi.Output<string>;
    readonly dialErrorLimit?: pulumi.Output<number>;
    readonly host: pulumi.Output<string>;
    readonly password?: pulumi.Output<string>;
    readonly perDialTimeout?: pulumi.Output<number>;
    readonly port?: pulumi.Output<number>;
    readonly privateKey?: pulumi.Output<string>;
    readonly privateKeyPassword?: pulumi.Output<string>;
    readonly user?: pulumi.Output<string>;
}
export interface KubeconfigClusterInputs {
    readonly cluster: pulumi.Input<ClusterInputs>;
    readonly name: pulumi.Input<string>;
}
export interface KubeconfigClusterOutputs {
    readonly cluster: pulumi.Output<ClusterOutputs>;
    readonly name: pulumi.Output<string>;
}
export interface ClusterInputs {
    readonly certificateAuthorityData: pulumi.Input<string>;
    readonly server: pulumi.Input<string>;
}
export interface ClusterOutputs {
    readonly certificateAuthorityData: pulumi.Output<string>;
    readonly server: pulumi.Output<string>;
}
export interface ClusterPkiNodeInputs {
    readonly ip?: pulumi.Input<string>;
    readonly role?: pulumi.Input<NodeRoleInputs>;
}
export interface ClusterPkiNodeOutputs {
    readonly ip?: pulumi.Output<string>;
    readonly role?: pulumi.Output<NodeRoleOutputs>;
}
export interface KubeconfigContextInputs {
    readonly context: pulumi.Input<ContextInputs>;
    readonly name: pulumi.Input<string>;
}
export interface KubeconfigContextOutputs {
    readonly context: pulumi.Output<ContextOutputs>;
    readonly name: pulumi.Output<string>;
}
export interface ContextInputs {
    readonly cluster: pulumi.Input<string>;
    readonly user: pulumi.Input<string>;
}
export interface ContextOutputs {
    readonly cluster: pulumi.Output<string>;
    readonly user: pulumi.Output<string>;
}
export type EcdsaCurveInputs = "P224" | "P256" | "P384" | "P521";
export type EcdsaCurveOutputs = "P224" | "P256" | "P384" | "P521";
export interface KeyPairInputs {
    readonly certPem?: pulumi.Input<string>;
    readonly key?: pulumi.Input<tls.PrivateKey>;
    readonly privateKeyPem?: pulumi.Input<string>;
    readonly publicKeyPem?: pulumi.Input<string>;
}
export interface KeyPairOutputs {
    readonly certPem?: pulumi.Output<string>;
    readonly key?: pulumi.Output<tls.PrivateKey>;
    readonly privateKeyPem?: pulumi.Output<string>;
    readonly publicKeyPem?: pulumi.Output<string>;
}
export interface KubeconfigInputs {
    readonly clusters: pulumi.Input<pulumi.Input<ClusterInputs>[]>;
    readonly contexts: pulumi.Input<pulumi.Input<ContextInputs>[]>;
    readonly users: pulumi.Input<pulumi.Input<UserInputs>[]>;
}
export interface KubeconfigOutputs {
    readonly clusters: pulumi.Output<ClusterOutputs[]>;
    readonly contexts: pulumi.Output<ContextOutputs[]>;
    readonly users: pulumi.Output<UserOutputs[]>;
}
export type KubeconfigTypeInputs = "worker" | "kube-proxy" | "kube-controller-manager" | "kube-scheduler" | "admin";
export type KubeconfigTypeOutputs = "worker" | "kube-proxy" | "kube-controller-manager" | "kube-scheduler" | "admin";
export interface KubeconfigAdminOptionsInputs {
    readonly type: string;
    readonly publicIp?: pulumi.Input<string>;
}
export interface KubeconfigAdminOptionsOutputs {
    readonly type: string;
    readonly publicIp?: pulumi.Output<string>;
}
export interface KubeconfigKubeControllerManagerOptionsInputs {
    readonly type: string;
    readonly publicIp?: pulumi.Input<string>;
}
export interface KubeconfigKubeControllerManagerOptionsOutputs {
    readonly type: string;
    readonly publicIp?: pulumi.Output<string>;
}
export interface KubeconfigKubeProxyOptionsInputs {
    readonly type: string;
    readonly publicIp?: pulumi.Input<string>;
}
export interface KubeconfigKubeProxyOptionsOutputs {
    readonly type: string;
    readonly publicIp?: pulumi.Output<string>;
}
export interface KubeconfigKubeSchedulerOptionsInputs {
    readonly type: string;
    readonly publicIp?: pulumi.Input<string>;
}
export interface KubeconfigKubeSchedulerOptionsOutputs {
    readonly type: string;
    readonly publicIp?: pulumi.Output<string>;
}
export interface KubeconfigWorkerOptionsInputs {
    readonly type?: string;
    readonly name: pulumi.Input<string>;
    readonly publicIp: pulumi.Input<string>;
}
export interface KubeconfigWorkerOptionsOutputs {
    readonly type?: string;
    readonly name: pulumi.Output<string>;
    readonly publicIp: pulumi.Output<string>;
}
export type NodeRoleInputs = "controlplane" | "worker";
export type NodeRoleOutputs = "controlplane" | "worker";
export interface ResourceOptionsInputs {
    readonly parent?: pulumi.Input<any>;
}
export interface ResourceOptionsOutputs {
    readonly parent?: pulumi.Output<any>;
}
export interface KubeconfigUserInputs {
    readonly name: pulumi.Input<string>;
    readonly user: pulumi.Input<UserInputs>;
}
export interface KubeconfigUserOutputs {
    readonly name: pulumi.Output<string>;
    readonly user: pulumi.Output<UserOutputs>;
}
export interface UserInputs {
    readonly clientCertificateData: pulumi.Input<string>;
    readonly clientKeyData: pulumi.Input<string>;
}
export interface UserOutputs {
    readonly clientCertificateData: pulumi.Output<string>;
    readonly clientKeyData: pulumi.Output<string>;
}
export interface SystemdInstallSectionInputs {
    readonly wantedBy?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface SystemdInstallSectionOutputs {
    readonly wantedBy?: pulumi.Output<string[]>;
}
export type SystemdServiceExitTypeInputs = "main" | "cgroup";
export type SystemdServiceExitTypeOutputs = "main" | "cgroup";
export type SystemdServiceRestartInputs = "no" | "on-success" | "on-failure" | "on-abnormal" | "on-watchdog" | "on-abort" | "always";
export type SystemdServiceRestartOutputs = "no" | "on-success" | "on-failure" | "on-abnormal" | "on-watchdog" | "on-abort" | "always";
export type SystemdServiceTypeInputs = "simple" | "exec" | "forking" | "oneshot" | "dbus" | "notify" | "notify-reload" | "idle";
export type SystemdServiceTypeOutputs = "simple" | "exec" | "forking" | "oneshot" | "dbus" | "notify" | "notify-reload" | "idle";
export interface SystemdServiceSectionInputs {
    readonly execStart?: pulumi.Input<string>;
    readonly exitType?: pulumi.Input<SystemdServiceExitTypeInputs>;
    readonly restart?: pulumi.Input<SystemdServiceRestartInputs>;
    readonly restartSec?: pulumi.Input<string>;
    readonly type?: pulumi.Input<SystemdServiceTypeInputs>;
}
export interface SystemdServiceSectionOutputs {
    readonly execStart?: pulumi.Output<string>;
    readonly exitType?: pulumi.Output<SystemdServiceExitTypeOutputs>;
    readonly restart?: pulumi.Output<SystemdServiceRestartOutputs>;
    readonly restartSec?: pulumi.Output<string>;
    readonly type?: pulumi.Output<SystemdServiceTypeOutputs>;
}
export interface SystemdUnitSectionInputs {
    readonly bindsTo?: pulumi.Input<pulumi.Input<string>[]>;
    readonly description?: pulumi.Input<string>;
    readonly documentation?: pulumi.Input<pulumi.Input<string>[]>;
    readonly requires?: pulumi.Input<pulumi.Input<string>[]>;
    readonly requisite?: pulumi.Input<pulumi.Input<string>[]>;
    readonly wants?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface SystemdUnitSectionOutputs {
    readonly bindsTo?: pulumi.Output<string[]>;
    readonly description?: pulumi.Output<string>;
    readonly documentation?: pulumi.Output<string[]>;
    readonly requires?: pulumi.Output<string[]>;
    readonly requisite?: pulumi.Output<string[]>;
    readonly wants?: pulumi.Output<string[]>;
}
export type EtcdctlCommandInputs = "member" | "list";
export type EtcdctlCommandOutputs = "member" | "list";
export interface BundleInputs {
    readonly caPem: pulumi.Input<string>;
    readonly certPem: pulumi.Input<string>;
    readonly keyPem: pulumi.Input<string>;
}
export interface BundleOutputs {
    readonly caPem: pulumi.Output<string>;
    readonly certPem: pulumi.Output<string>;
    readonly keyPem: pulumi.Output<string>;
}
export type SystemctlCommandInputs = "daemon-reload" | "disable" | "enable" | "start" | "stop";
export type SystemctlCommandOutputs = "daemon-reload" | "disable" | "enable" | "start" | "stop";
export type TeeModeInputs = "warn" | "warn-nopipe" | "exit" | "exit-nopipe";
export type TeeModeOutputs = "warn" | "warn-nopipe" | "exit" | "exit-nopipe";
export type CommandLifecycleInputs = "create" | "update" | "delete";
export type CommandLifecycleOutputs = "create" | "update" | "delete";
export interface KubeApiServerCommandOptionsInputs {
    readonly advertiseAddress?: pulumi.Input<string>;
    readonly allowPrivileged?: pulumi.Input<boolean>;
    readonly apiServerCount?: pulumi.Input<number>;
    readonly auditLogMaxAge?: pulumi.Input<number>;
    readonly auditLogMaxBackup?: pulumi.Input<number>;
    readonly auditLogMaxSize?: pulumi.Input<number>;
    readonly auditLogPath?: pulumi.Input<string>;
    readonly authorizationMode?: pulumi.Input<pulumi.Input<string>[]>;
    readonly bindAddress?: pulumi.Input<string>;
    readonly clientCaFile?: pulumi.Input<string>;
    readonly enableAdmissionPlugins?: pulumi.Input<pulumi.Input<string>[]>;
    readonly etcdCaFile?: pulumi.Input<string>;
    readonly etcdCertFile?: pulumi.Input<string>;
    readonly etcdServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly eventTtl?: pulumi.Input<string>;
    readonly encryptionProviderConfig?: pulumi.Input<string>;
    readonly kubeletCertificateAuthority?: pulumi.Input<string>;
    readonly kubeletClientCertificate?: pulumi.Input<string>;
    readonly kubeletClientKey?: pulumi.Input<string>;
    readonly runtimeConfig?: pulumi.Input<string>;
    readonly serviceAccountKeyFile?: pulumi.Input<string>;
    readonly serviceAccountSigningKeyFile?: pulumi.Input<string>;
    readonly serviceAccountIssuer?: pulumi.Input<string>;
    readonly serviceClusterIpRange?: pulumi.Input<string>;
    readonly serviceNodePortRange?: pulumi.Input<string>;
    readonly tlsCertFile?: pulumi.Input<string>;
    readonly tlsPrivateKeyFile?: pulumi.Input<string>;
    readonly v?: pulumi.Input<number>;
}
export interface KubeApiServerCommandOptionsOutputs {
    readonly advertiseAddress?: pulumi.Output<string>;
    readonly allowPrivileged?: pulumi.Output<boolean>;
    readonly apiServerCount?: pulumi.Output<number>;
    readonly auditLogMaxAge?: pulumi.Output<number>;
    readonly auditLogMaxBackup?: pulumi.Output<number>;
    readonly auditLogMaxSize?: pulumi.Output<number>;
    readonly auditLogPath?: pulumi.Output<string>;
    readonly authorizationMode?: pulumi.Output<string[]>;
    readonly bindAddress?: pulumi.Output<string>;
    readonly clientCaFile?: pulumi.Output<string>;
    readonly enableAdmissionPlugins?: pulumi.Output<string[]>;
    readonly etcdCaFile?: pulumi.Output<string>;
    readonly etcdCertFile?: pulumi.Output<string>;
    readonly etcdServers?: pulumi.Output<string[]>;
    readonly eventTtl?: pulumi.Output<string>;
    readonly encryptionProviderConfig?: pulumi.Output<string>;
    readonly kubeletCertificateAuthority?: pulumi.Output<string>;
    readonly kubeletClientCertificate?: pulumi.Output<string>;
    readonly kubeletClientKey?: pulumi.Output<string>;
    readonly runtimeConfig?: pulumi.Output<string>;
    readonly serviceAccountKeyFile?: pulumi.Output<string>;
    readonly serviceAccountSigningKeyFile?: pulumi.Output<string>;
    readonly serviceAccountIssuer?: pulumi.Output<string>;
    readonly serviceClusterIpRange?: pulumi.Output<string>;
    readonly serviceNodePortRange?: pulumi.Output<string>;
    readonly tlsCertFile?: pulumi.Output<string>;
    readonly tlsPrivateKeyFile?: pulumi.Output<string>;
    readonly v?: pulumi.Output<number>;
}
export interface KubeApiServerConfigurationInputs {
    readonly caPem?: pulumi.Input<string>;
    readonly caKeyPem?: pulumi.Input<string>;
    readonly keyPem?: pulumi.Input<string>;
    readonly certPem?: pulumi.Input<string>;
    readonly saKeyPem?: pulumi.Input<string>;
    readonly saPem?: pulumi.Input<string>;
    readonly encryptionConfig?: pulumi.Input<string>;
}
export interface KubeApiServerConfigurationOutputs {
    readonly caPem?: pulumi.Output<string>;
    readonly caKeyPem?: pulumi.Output<string>;
    readonly keyPem?: pulumi.Output<string>;
    readonly certPem?: pulumi.Output<string>;
    readonly saKeyPem?: pulumi.Output<string>;
    readonly saPem?: pulumi.Output<string>;
    readonly encryptionConfig?: pulumi.Output<string>;
}
export interface KubeControllerManagerCommandOptionsInputs {
    readonly bindAddress?: pulumi.Input<string>;
    readonly clusterCidr?: pulumi.Input<string>;
    readonly clusterName?: pulumi.Input<string>;
    readonly clusterSigningCertFile?: pulumi.Input<string>;
    readonly clusterSigningKeyFile?: pulumi.Input<string>;
    readonly kubeconfig?: pulumi.Input<string>;
    readonly leaderElect?: pulumi.Input<boolean>;
    readonly rootCaFile?: pulumi.Input<string>;
    readonly serviceAccountPrivateKeyFile?: pulumi.Input<string>;
    readonly serviceClusterIpRange?: pulumi.Input<string>;
    readonly useServiceAccountCredentials?: pulumi.Input<boolean>;
    readonly v?: pulumi.Input<number>;
}
export interface KubeControllerManagerCommandOptionsOutputs {
    readonly bindAddress?: pulumi.Output<string>;
    readonly clusterCidr?: pulumi.Output<string>;
    readonly clusterName?: pulumi.Output<string>;
    readonly clusterSigningCertFile?: pulumi.Output<string>;
    readonly clusterSigningKeyFile?: pulumi.Output<string>;
    readonly kubeconfig?: pulumi.Output<string>;
    readonly leaderElect?: pulumi.Output<boolean>;
    readonly rootCaFile?: pulumi.Output<string>;
    readonly serviceAccountPrivateKeyFile?: pulumi.Output<string>;
    readonly serviceClusterIpRange?: pulumi.Output<string>;
    readonly useServiceAccountCredentials?: pulumi.Output<boolean>;
    readonly v?: pulumi.Output<number>;
}
export interface KubeSchedulerCommandOptionsInputs {
    readonly config?: pulumi.Input<string>;
    readonly v?: pulumi.Input<number>;
}
export interface KubeSchedulerCommandOptionsOutputs {
    readonly config?: pulumi.Output<string>;
    readonly v?: pulumi.Output<number>;
}
export interface ClusterPki_getKubeconfigInputs {
    readonly __self__: pulumi.Input<ClusterPki>;
    readonly options: unknown;
}
export interface ClusterPki_getKubeconfigOutputs {
    readonly result: pulumi.Output<KubeconfigOutputs>;
}
export interface EtcdInstall_etcdctlInputs {
    readonly __self__: pulumi.Input<EtcdInstall>;
}
export interface EtcdInstall_etcdctlOutputs {
    readonly result: pulumi.Output<Etcdctl>;
}
export interface SystemdService_disableInputs {
    readonly __self__: pulumi.Input<SystemdService>;
}
export interface SystemdService_disableOutputs {
    readonly result: pulumi.Output<Systemctl>;
}
export interface SystemdService_enableInputs {
    readonly __self__: pulumi.Input<SystemdService>;
}
export interface SystemdService_enableOutputs {
    readonly result: pulumi.Output<Systemctl>;
}
export interface SystemdService_startInputs {
    readonly __self__: pulumi.Input<SystemdService>;
}
export interface SystemdService_startOutputs {
    readonly result: pulumi.Output<Systemctl>;
}
