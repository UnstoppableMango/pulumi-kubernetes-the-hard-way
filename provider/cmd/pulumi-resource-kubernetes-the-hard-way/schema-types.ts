/* tslint:disable */
/**
 * This file was automatically generated by pulumi-provider-scripts.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source Pulumi Schema file,
 * and run "pulumi-provider-scripts gen-provider-types" to regenerate this file. */
import * as pulumi from "@pulumi/pulumi";
export type ConstructComponent<T extends pulumi.ComponentResource = pulumi.ComponentResource> = (name: string, inputs: any, options: pulumi.ComponentResourceOptions) => T;
export type ResourceConstructor = {
    readonly "kubernetes-the-hard-way:config:KubeVipManifest": ConstructComponent<KubeVipManifest>;
    readonly "kubernetes-the-hard-way:remote:CniPluginsInstall": ConstructComponent<CniPluginsInstall>;
    readonly "kubernetes-the-hard-way:remote:ContainerdInstall": ConstructComponent<ContainerdInstall>;
    readonly "kubernetes-the-hard-way:remote:CrictlInstall": ConstructComponent<CrictlInstall>;
    readonly "kubernetes-the-hard-way:remote:Download": ConstructComponent<Download>;
    readonly "kubernetes-the-hard-way:remote:EtcdCluster": ConstructComponent<EtcdCluster>;
    readonly "kubernetes-the-hard-way:remote:EtcdConfiguration": ConstructComponent<EtcdConfiguration>;
    readonly "kubernetes-the-hard-way:remote:EtcdInstall": ConstructComponent<EtcdInstall>;
    readonly "kubernetes-the-hard-way:remote:EtcdService": ConstructComponent<EtcdService>;
    readonly "kubernetes-the-hard-way:remote:File": ConstructComponent<File>;
    readonly "kubernetes-the-hard-way:remote:KubeApiServerInstall": ConstructComponent<KubeApiServerInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeControllerManagerInstall": ConstructComponent<KubeControllerManagerInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeProxyInstall": ConstructComponent<KubeProxyInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeSchedulerInstall": ConstructComponent<KubeSchedulerInstall>;
    readonly "kubernetes-the-hard-way:remote:KubectlInstall": ConstructComponent<KubectlInstall>;
    readonly "kubernetes-the-hard-way:remote:KubeletInstall": ConstructComponent<KubeletInstall>;
    readonly "kubernetes-the-hard-way:remote:ProvisionEtcd": ConstructComponent<ProvisionEtcd>;
    readonly "kubernetes-the-hard-way:remote:RuncInstall": ConstructComponent<RuncInstall>;
    readonly "kubernetes-the-hard-way:remote:StartEtcd": ConstructComponent<StartEtcd>;
    readonly "kubernetes-the-hard-way:remote:StaticPod": ConstructComponent<StaticPod>;
    readonly "kubernetes-the-hard-way:remote:SystemdService": ConstructComponent<SystemdService>;
    readonly "kubernetes-the-hard-way:tls:Certificate": ConstructComponent<Certificate>;
    readonly "kubernetes-the-hard-way:tls:ClusterPki": ConstructComponent<ClusterPki>;
    readonly "kubernetes-the-hard-way:tls:EncryptionKey": ConstructComponent<EncryptionKey>;
    readonly "kubernetes-the-hard-way:tls:RootCa": ConstructComponent<RootCa>;
    readonly "kubernetes-the-hard-way:tools:Chmod": ConstructComponent<Chmod>;
    readonly "kubernetes-the-hard-way:tools:Curl": ConstructComponent<Curl>;
    readonly "kubernetes-the-hard-way:tools:Etcdctl": ConstructComponent<Etcdctl>;
    readonly "kubernetes-the-hard-way:tools:Hostnamectl": ConstructComponent<Hostnamectl>;
    readonly "kubernetes-the-hard-way:tools:Mkdir": ConstructComponent<Mkdir>;
    readonly "kubernetes-the-hard-way:tools:Mktemp": ConstructComponent<Mktemp>;
    readonly "kubernetes-the-hard-way:tools:Mv": ConstructComponent<Mv>;
    readonly "kubernetes-the-hard-way:tools:Rm": ConstructComponent<Rm>;
    readonly "kubernetes-the-hard-way:tools:Sed": ConstructComponent<Sed>;
    readonly "kubernetes-the-hard-way:tools:Systemctl": ConstructComponent<Systemctl>;
    readonly "kubernetes-the-hard-way:tools:Tar": ConstructComponent<Tar>;
    readonly "kubernetes-the-hard-way:tools:Tee": ConstructComponent<Tee>;
    readonly "kubernetes-the-hard-way:tools:Wget": ConstructComponent<Wget>;
};
export type Functions = {
    "kubernetes-the-hard-way:config:getKubeVipManifest": (inputs: getKubeVipManifestInputs) => Promise<getKubeVipManifestOutputs>;
    "kubernetes-the-hard-way:config:getKubeconfig": (inputs: getKubeconfigInputs) => Promise<getKubeconfigOutputs>;
    "kubernetes-the-hard-way:tls:ClusterPki/getKubeconfig": (inputs: ClusterPki_getKubeconfigInputs) => Promise<ClusterPki_getKubeconfigOutputs>;
};
import * as command from "@pulumi/command";
import * as kubernetes from "@pulumi/kubernetes";
import * as random from "@pulumi/random";
import * as tls from "@pulumi/tls";
export abstract class KubeVipManifest<TData = any> extends (pulumi.ComponentResource)<TData> {
    public result!: PodManifestOutputs | pulumi.Output<PodManifestOutputs>;
    public yaml!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:config:KubeVipManifest", name, opts.urn ? { result: undefined, yaml: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeVipManifestArgs {
    readonly address: pulumi.Input<string>;
    readonly bgpAs?: pulumi.Input<number>;
    readonly bgpEnable?: pulumi.Input<boolean>;
    readonly bgpPeerAddress?: pulumi.Input<string>;
    readonly bgpPeerAs?: pulumi.Input<number>;
    readonly bgpPeerPass?: pulumi.Input<string>;
    readonly bgpPeers?: pulumi.Input<string>;
    readonly bgpRouterId?: pulumi.Input<string>;
    readonly cpEnable?: pulumi.Input<boolean>;
    readonly cpNamespace?: pulumi.Input<string>;
    readonly image?: pulumi.Input<string>;
    readonly kubeconfigPath: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly namespace?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly svcEnable?: pulumi.Input<boolean>;
    readonly version?: pulumi.Input<string>;
    readonly vipArp?: pulumi.Input<boolean>;
    readonly vipCidr: pulumi.Input<number>;
    readonly vipDdns?: pulumi.Input<boolean>;
    readonly vipInterface?: pulumi.Input<string>;
    readonly vipLeaderElection?: pulumi.Input<boolean>;
    readonly vipLeaseDuration?: pulumi.Input<number>;
    readonly vipRenewDeadline?: pulumi.Input<number>;
    readonly vipRetryPeriod?: pulumi.Input<number>;
}
export abstract class CniPluginsInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public bandwidthMv!: Mv | pulumi.Output<Mv>;
    public bandwidthPath!: string | pulumi.Output<string>;
    public bridgeMv!: Mv | pulumi.Output<Mv>;
    public bridgePath!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public dhcpMv!: Mv | pulumi.Output<Mv>;
    public dhcpPath!: string | pulumi.Output<string>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public dummyMv!: Mv | pulumi.Output<Mv>;
    public dummyPath!: string | pulumi.Output<string>;
    public firewallMv!: Mv | pulumi.Output<Mv>;
    public firewallPath!: string | pulumi.Output<string>;
    public hostDeviceMv!: Mv | pulumi.Output<Mv>;
    public hostDevicePath!: string | pulumi.Output<string>;
    public hostLocalMv!: Mv | pulumi.Output<Mv>;
    public hostLocalPath!: string | pulumi.Output<string>;
    public ipvlanMv!: Mv | pulumi.Output<Mv>;
    public ipvlanPath!: string | pulumi.Output<string>;
    public loopbackMv!: Mv | pulumi.Output<Mv>;
    public loopbackPath!: string | pulumi.Output<string>;
    public macvlanMv!: Mv | pulumi.Output<Mv>;
    public macvlanPath!: string | pulumi.Output<string>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public path?: string | pulumi.Output<string>;
    public portmapMv!: Mv | pulumi.Output<Mv>;
    public portmapPath!: string | pulumi.Output<string>;
    public ptpMv!: Mv | pulumi.Output<Mv>;
    public ptpPath!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public sbrMv!: Mv | pulumi.Output<Mv>;
    public sbrPath!: string | pulumi.Output<string>;
    public staticMv!: Mv | pulumi.Output<Mv>;
    public staticPath!: string | pulumi.Output<string>;
    public tapMv!: Mv | pulumi.Output<Mv>;
    public tapPath!: string | pulumi.Output<string>;
    public tar!: Tar | pulumi.Output<Tar>;
    public tuningMv!: Mv | pulumi.Output<Mv>;
    public tuningPath!: string | pulumi.Output<string>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    public vlanMv!: Mv | pulumi.Output<Mv>;
    public vlanPath!: string | pulumi.Output<string>;
    public vrfMv!: Mv | pulumi.Output<Mv>;
    public vrfPath!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:CniPluginsInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, bandwidthMv: undefined, bandwidthPath: undefined, bridgeMv: undefined, bridgePath: undefined, connection: undefined, dhcpMv: undefined, dhcpPath: undefined, directory: undefined, download: undefined, dummyMv: undefined, dummyPath: undefined, firewallMv: undefined, firewallPath: undefined, hostDeviceMv: undefined, hostDevicePath: undefined, hostLocalMv: undefined, hostLocalPath: undefined, ipvlanMv: undefined, ipvlanPath: undefined, loopbackMv: undefined, loopbackPath: undefined, macvlanMv: undefined, macvlanPath: undefined, mkdir: undefined, mktemp: undefined, path: undefined, portmapMv: undefined, portmapPath: undefined, ptpMv: undefined, ptpPath: undefined, rm: undefined, sbrMv: undefined, sbrPath: undefined, staticMv: undefined, staticPath: undefined, tapMv: undefined, tapPath: undefined, tar: undefined, tuningMv: undefined, tuningPath: undefined, url: undefined, version: undefined, vlanMv: undefined, vlanPath: undefined, vrfMv: undefined, vrfPath: undefined } : { name, args, opts }, opts);
    }
}
export interface CniPluginsInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class ContainerdInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public containerdMv!: Mv | pulumi.Output<Mv>;
    public containerdPath!: string | pulumi.Output<string>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public path?: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public tar!: Tar | pulumi.Output<Tar>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:ContainerdInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, connection: undefined, containerdMv: undefined, containerdPath: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, path: undefined, rm: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface ContainerdInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class CrictlInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public crictlMv!: Mv | pulumi.Output<Mv>;
    public crictlPath!: string | pulumi.Output<string>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public path?: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public tar!: Tar | pulumi.Output<Tar>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:CrictlInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, connection: undefined, crictlMv: undefined, crictlPath: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, path: undefined, rm: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface CrictlInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class Download<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public destination!: string | pulumi.Output<string>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public removeOnDelete!: boolean | pulumi.Output<boolean>;
    public url!: string | pulumi.Output<string>;
    public wget!: Wget | pulumi.Output<Wget>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:Download", name, opts.urn ? { connection: undefined, destination: undefined, mkdir: undefined, removeOnDelete: undefined, url: undefined, wget: undefined } : { name, args, opts }, opts);
    }
}
export interface DownloadArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly destination: pulumi.Input<string>;
    readonly removeOnDelete?: pulumi.Input<boolean>;
    readonly url: pulumi.Input<string>;
}
export abstract class EtcdCluster<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture?: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binaryDirectory?: string | pulumi.Output<string>;
    public bundle!: BundleOutputs | pulumi.Output<BundleOutputs>;
    public configuration!: Record<string, EtcdConfiguration> | pulumi.Output<Record<string, EtcdConfiguration>>;
    public configurationDirectory?: string | pulumi.Output<string>;
    public dataDirectory?: string | pulumi.Output<string>;
    public install!: Record<string, EtcdInstall> | pulumi.Output<Record<string, EtcdInstall>>;
    public nodes!: Record<string, EtcdNodeOutputs> | Record<string, EtcdNodeOutputs>;
    public service!: Record<string, EtcdService> | pulumi.Output<Record<string, EtcdService>>;
    public start!: Record<string, StartEtcd> | pulumi.Output<Record<string, StartEtcd>>;
    public version?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdCluster", name, opts.urn ? { architecture: undefined, binaryDirectory: undefined, bundle: undefined, configuration: undefined, configurationDirectory: undefined, dataDirectory: undefined, install: undefined, nodes: undefined, service: undefined, start: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdClusterArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly binaryDirectory?: pulumi.Input<string>;
    readonly bundle: pulumi.Input<BundleInputs>;
    readonly configurationDirectory?: pulumi.Input<string>;
    readonly dataDirectory?: pulumi.Input<string>;
    readonly nodes: Record<string, EtcdNodeInputs>;
    readonly version?: pulumi.Input<string>;
}
export abstract class EtcdConfiguration<TData = any> extends (pulumi.ComponentResource)<TData> {
    public caFile!: File | pulumi.Output<File>;
    public caPem!: string | pulumi.Output<string>;
    public certFile!: File | pulumi.Output<File>;
    public certPem!: string | pulumi.Output<string>;
    public configurationChmod?: Chmod | pulumi.Output<Chmod>;
    public configurationDirectory!: string | pulumi.Output<string>;
    public configurationMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public dataDirectory!: string | pulumi.Output<string>;
    public dataMkdir!: Mkdir | pulumi.Output<Mkdir>;
    public etcdPath!: string | pulumi.Output<string>;
    public internalIp!: string | pulumi.Output<string>;
    public keyFile!: File | pulumi.Output<File>;
    public keyPem!: string | pulumi.Output<string>;
    public value!: EtcdConfigurationPropsOutputs | pulumi.Output<EtcdConfigurationPropsOutputs>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdConfiguration", name, opts.urn ? { caFile: undefined, caPem: undefined, certFile: undefined, certPem: undefined, configurationChmod: undefined, configurationDirectory: undefined, configurationMkdir: undefined, connection: undefined, dataDirectory: undefined, dataMkdir: undefined, etcdPath: undefined, internalIp: undefined, keyFile: undefined, keyPem: undefined, value: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdConfigurationArgs {
    readonly caPem: pulumi.Input<string>;
    readonly certPem: pulumi.Input<string>;
    readonly configurationDirectory?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly dataDirectory?: pulumi.Input<string>;
    readonly etcdPath: pulumi.Input<string>;
    readonly internalIp: pulumi.Input<string>;
    readonly keyPem: pulumi.Input<string>;
}
export abstract class EtcdInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public archiveName!: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public etcdMv!: Mv | pulumi.Output<Mv>;
    public etcdPath!: string | pulumi.Output<string>;
    public etcdctlMv!: Mv | pulumi.Output<Mv>;
    public etcdctlPath!: string | pulumi.Output<string>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public path?: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public tar!: Tar | pulumi.Output<Tar>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdInstall", name, opts.urn ? { architecture: undefined, archiveName: undefined, connection: undefined, directory: undefined, download: undefined, etcdMv: undefined, etcdPath: undefined, etcdctlMv: undefined, etcdctlPath: undefined, mkdir: undefined, mktemp: undefined, path: undefined, rm: undefined, tar: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class EtcdService<TData = any> extends (pulumi.ComponentResource)<TData> {
    public configuration!: EtcdConfigurationPropsOutputs | pulumi.Output<EtcdConfigurationPropsOutputs>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public description?: string | pulumi.Output<string>;
    public directory?: string | pulumi.Output<string>;
    public documentation?: string | pulumi.Output<string>;
    public peers!: EtcdConfigurationPropsOutputs[] | pulumi.Output<EtcdConfigurationPropsOutputs[]>;
    public restart?: SystemdServiceRestartOutputs | pulumi.Output<SystemdServiceRestartOutputs>;
    public restartSec?: string | pulumi.Output<string>;
    public service!: SystemdService | pulumi.Output<SystemdService>;
    public wantedBy?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:EtcdService", name, opts.urn ? { configuration: undefined, connection: undefined, description: undefined, directory: undefined, documentation: undefined, peers: undefined, restart: undefined, restartSec: undefined, service: undefined, wantedBy: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdServiceArgs {
    readonly configuration: pulumi.Input<EtcdConfigurationPropsInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly description?: pulumi.Input<string>;
    readonly directory?: pulumi.Input<string>;
    readonly documentation?: pulumi.Input<string>;
    readonly peers?: pulumi.Input<pulumi.Input<EtcdConfigurationPropsInputs>[]>;
    readonly restart?: pulumi.Input<SystemdServiceRestartInputs>;
    readonly restartSec?: pulumi.Input<string>;
    readonly wantedBy?: pulumi.Input<string>;
}
export abstract class File<TData = any> extends (pulumi.ComponentResource)<TData> {
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public content!: string | pulumi.Output<string>;
    public path!: string | pulumi.Output<string>;
    public stderr!: string | pulumi.Output<string>;
    public stdin!: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:File", name, opts.urn ? { command: undefined, connection: undefined, content: undefined, path: undefined, stderr: undefined, stdin: undefined, stdout: undefined } : { name, args, opts }, opts);
    }
}
export interface FileArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly content: pulumi.Input<string>;
    readonly path: pulumi.Input<string>;
}
export abstract class KubeApiServerInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeApiServerInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeApiServerInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeControllerManagerInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeControllerManagerInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeControllerManagerInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeProxyInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeProxyInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeProxyInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeSchedulerInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeSchedulerInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeSchedulerInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubectlInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubectlInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubectlInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class KubeletInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:KubeletInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface KubeletInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class ProvisionEtcd<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture?: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binaryDirectory?: string | pulumi.Output<string>;
    public bundle!: BundleOutputs | pulumi.Output<BundleOutputs>;
    public configuration!: EtcdConfiguration | pulumi.Output<EtcdConfiguration>;
    public configurationDirectory?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public dataDirectory?: string | pulumi.Output<string>;
    public install!: EtcdInstall | pulumi.Output<EtcdInstall>;
    public internalIp!: string | pulumi.Output<string>;
    public service!: SystemdService | pulumi.Output<SystemdService>;
    public start!: StartEtcd | pulumi.Output<StartEtcd>;
    public version?: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:ProvisionEtcd", name, opts.urn ? { architecture: undefined, binaryDirectory: undefined, bundle: undefined, configuration: undefined, configurationDirectory: undefined, connection: undefined, dataDirectory: undefined, install: undefined, internalIp: undefined, service: undefined, start: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface ProvisionEtcdArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly binaryDirectory?: pulumi.Input<string>;
    readonly bundle: pulumi.Input<BundleInputs>;
    readonly configurationDirectory?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly dataDirectory?: pulumi.Input<string>;
    readonly internalIp: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class RuncInstall<TData = any> extends (pulumi.ComponentResource)<TData> {
    public architecture!: ArchitectureOutputs | pulumi.Output<ArchitectureOutputs>;
    public binName?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public download!: Download | pulumi.Output<Download>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public mktemp!: Mktemp | pulumi.Output<Mktemp>;
    public mv!: Mv | pulumi.Output<Mv>;
    public path!: string | pulumi.Output<string>;
    public rm!: Rm | pulumi.Output<Rm>;
    public url!: string | pulumi.Output<string>;
    public version!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:RuncInstall", name, opts.urn ? { architecture: undefined, binName: undefined, connection: undefined, directory: undefined, download: undefined, mkdir: undefined, mktemp: undefined, mv: undefined, path: undefined, rm: undefined, url: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface RuncInstallArgs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly version?: pulumi.Input<string>;
}
export abstract class StartEtcd<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public daemonReload!: Systemctl | pulumi.Output<Systemctl>;
    public enable!: Systemctl | pulumi.Output<Systemctl>;
    public start!: Systemctl | pulumi.Output<Systemctl>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:StartEtcd", name, opts.urn ? { connection: undefined, daemonReload: undefined, enable: undefined, start: undefined } : { name, args, opts }, opts);
    }
}
export interface StartEtcdArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
}
export abstract class StaticPod<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public file!: File | pulumi.Output<File>;
    public fileName!: string | pulumi.Output<string>;
    public mkdir!: Mkdir | pulumi.Output<Mkdir>;
    public path!: string | pulumi.Output<string>;
    public pod!: PodManifestOutputs | pulumi.Output<PodManifestOutputs>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:StaticPod", name, opts.urn ? { connection: undefined, file: undefined, fileName: undefined, mkdir: undefined, path: undefined, pod: undefined } : { name, args, opts }, opts);
    }
}
export interface StaticPodArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly fileName?: pulumi.Input<string>;
    readonly pod: pulumi.Input<PodManifestInputs>;
}
export abstract class SystemdService<TData = any> extends (pulumi.ComponentResource)<TData> {
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public file!: File | pulumi.Output<File>;
    public install?: SystemdInstallSectionOutputs | pulumi.Output<SystemdInstallSectionOutputs>;
    public service!: SystemdServiceSectionOutputs | pulumi.Output<SystemdServiceSectionOutputs>;
    public unit?: SystemdUnitSectionOutputs | pulumi.Output<SystemdUnitSectionOutputs>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:remote:SystemdService", name, opts.urn ? { connection: undefined, directory: undefined, file: undefined, install: undefined, service: undefined, unit: undefined } : { name, args, opts }, opts);
    }
}
export interface SystemdServiceArgs {
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly install?: pulumi.Input<SystemdInstallSectionInputs>;
    readonly service: pulumi.Input<SystemdServiceSectionInputs>;
    readonly unit?: pulumi.Input<SystemdUnitSectionInputs>;
}
export abstract class Certificate<TData = any> extends (pulumi.ComponentResource)<TData> {
    public algorithm!: AlgorithmOutputs | pulumi.Output<AlgorithmOutputs>;
    public allowedUses!: AllowedUsageOutputs[] | pulumi.Output<AllowedUsageOutputs[]>;
    public caCertPem!: string | pulumi.Output<string>;
    public caKeyAlgorithm!: string | pulumi.Output<string>;
    public caPrivateKeyPem!: string | pulumi.Output<string>;
    public cert!: tls.LocallySignedCert | pulumi.Output<tls.LocallySignedCert>;
    public certPem!: string | pulumi.Output<string>;
    public certRequestPem!: string | pulumi.Output<string>;
    public csr!: tls.CertRequest | pulumi.Output<tls.CertRequest>;
    public dnsNames?: string[] | pulumi.Output<string[]>;
    public earlyRenewalHours!: number | pulumi.Output<number>;
    public ecdsaCurve!: string | pulumi.Output<string>;
    public ipAddresses?: string[] | pulumi.Output<string[]>;
    public isCaCertificate!: boolean | pulumi.Output<boolean>;
    public key!: tls.PrivateKey | pulumi.Output<tls.PrivateKey>;
    public keyAlgorithm!: string | pulumi.Output<string>;
    public privateKeyOpenssh!: string | pulumi.Output<string>;
    public privateKeyPem!: string | pulumi.Output<string>;
    public privateKeyPemPkcs8!: string | pulumi.Output<string>;
    public publicKeyFingerprintMd5!: string | pulumi.Output<string>;
    public publicKeyFingerprintSha256!: string | pulumi.Output<string>;
    public publicKeyOpenssh!: string | pulumi.Output<string>;
    public publicKeyPem!: string | pulumi.Output<string>;
    public readyForRenewal!: boolean | pulumi.Output<boolean>;
    public rsaBits!: number | pulumi.Output<number>;
    public setSubjectKeyId!: boolean | pulumi.Output<boolean>;
    public subject?: tls.types.output.CertRequestSubject | pulumi.Output<tls.types.output.CertRequestSubject>;
    public uris?: string[] | pulumi.Output<string[]>;
    public validityEndTime!: string | pulumi.Output<string>;
    public validityPeriodHours!: number | pulumi.Output<number>;
    public validityStartTime!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:Certificate", name, opts.urn ? { algorithm: undefined, allowedUses: undefined, caCertPem: undefined, caKeyAlgorithm: undefined, caPrivateKeyPem: undefined, cert: undefined, certPem: undefined, certRequestPem: undefined, csr: undefined, dnsNames: undefined, earlyRenewalHours: undefined, ecdsaCurve: undefined, ipAddresses: undefined, isCaCertificate: undefined, key: undefined, keyAlgorithm: undefined, privateKeyOpenssh: undefined, privateKeyPem: undefined, privateKeyPemPkcs8: undefined, publicKeyFingerprintMd5: undefined, publicKeyFingerprintSha256: undefined, publicKeyOpenssh: undefined, publicKeyPem: undefined, readyForRenewal: undefined, rsaBits: undefined, setSubjectKeyId: undefined, subject: undefined, uris: undefined, validityEndTime: undefined, validityPeriodHours: undefined, validityStartTime: undefined } : { name, args, opts }, opts);
    }
}
export interface CertificateArgs {
    readonly algorithm: pulumi.Input<AlgorithmInputs>;
    readonly allowedUses: pulumi.Input<pulumi.Input<AllowedUsageInputs>[]>;
    readonly caCertPem: pulumi.Input<string>;
    readonly caPrivateKeyPem: pulumi.Input<string>;
    readonly dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly earlyRenewalHours?: pulumi.Input<number>;
    readonly ecdsaCurve?: pulumi.Input<string>;
    readonly ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly isCaCertificate?: pulumi.Input<boolean>;
    readonly rsaBits?: pulumi.Input<number>;
    readonly setSubjectKeyId?: pulumi.Input<boolean>;
    readonly subject?: pulumi.Input<tls.types.input.CertRequestSubject>;
    readonly uris?: pulumi.Input<pulumi.Input<string>[]>;
    readonly validityPeriodHours: pulumi.Input<number>;
}
export abstract class ClusterPki<TData = any> extends (pulumi.ComponentResource)<TData> {
    public admin!: Certificate | pulumi.Output<Certificate>;
    public algorithm?: AlgorithmOutputs | pulumi.Output<AlgorithmOutputs>;
    public ca!: RootCa | pulumi.Output<RootCa>;
    public clusterName!: string | pulumi.Output<string>;
    public controllerManager!: Certificate | pulumi.Output<Certificate>;
    public ecdsaCurve?: EcdsaCurveOutputs | pulumi.Output<EcdsaCurveOutputs>;
    public kubeProxy!: Certificate | pulumi.Output<Certificate>;
    public kubeScheduler!: Certificate | pulumi.Output<Certificate>;
    public kubelet!: Record<string, Certificate> | pulumi.Output<Record<string, Certificate>>;
    public kubernetes!: Certificate | pulumi.Output<Certificate>;
    public nodes!: Record<string, ClusterPkiNodeOutputs> | pulumi.Output<Record<string, ClusterPkiNodeOutputs>>;
    public publicIp!: string | pulumi.Output<string>;
    public rsaBits?: number | pulumi.Output<number>;
    public serviceAccounts!: Certificate | pulumi.Output<Certificate>;
    public validityPeriodHours!: number | pulumi.Output<number>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:ClusterPki", name, opts.urn ? { admin: undefined, algorithm: undefined, ca: undefined, clusterName: undefined, controllerManager: undefined, ecdsaCurve: undefined, kubeProxy: undefined, kubeScheduler: undefined, kubelet: undefined, kubernetes: undefined, nodes: undefined, publicIp: undefined, rsaBits: undefined, serviceAccounts: undefined, validityPeriodHours: undefined } : { name, args, opts }, opts);
    }
}
export interface ClusterPkiArgs {
    readonly algorithm?: pulumi.Input<AlgorithmInputs>;
    readonly clusterName: pulumi.Input<string>;
    readonly ecdsaCurve?: pulumi.Input<EcdsaCurveInputs>;
    readonly nodes: pulumi.Input<Record<string, pulumi.Input<ClusterPkiNodeInputs>>>;
    readonly publicIp: pulumi.Input<string>;
    readonly rsaBits?: pulumi.Input<number>;
    readonly validityPeriodHours?: pulumi.Input<number>;
}
export abstract class EncryptionKey<TData = any> extends (pulumi.ComponentResource)<TData> {
    public bytes!: number | pulumi.Output<number>;
    public config!: string | pulumi.Output<string>;
    public key!: random.RandomBytes | pulumi.Output<random.RandomBytes>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:EncryptionKey", name, opts.urn ? { bytes: undefined, config: undefined, key: undefined } : { name, args, opts }, opts);
    }
}
export interface EncryptionKeyArgs {
    readonly bytes: pulumi.Input<number>;
}
export abstract class RootCa<TData = any> extends (pulumi.ComponentResource)<TData> {
    public algorithm!: AlgorithmOutputs | pulumi.Output<AlgorithmOutputs>;
    public allowedUses!: string[] | pulumi.Output<string[]>;
    public cert!: tls.SelfSignedCert | pulumi.Output<tls.SelfSignedCert>;
    public certPem!: string | pulumi.Output<string>;
    public dnsNames?: string[] | pulumi.Output<string[]>;
    public earlyRenewalHours!: number | pulumi.Output<number>;
    public ecdsaCurve!: string | pulumi.Output<string>;
    public ipAddresses?: string[] | pulumi.Output<string[]>;
    public isCaCertificate!: boolean | pulumi.Output<boolean>;
    public key!: tls.PrivateKey | pulumi.Output<tls.PrivateKey>;
    public keyAlgorithm!: string | pulumi.Output<string>;
    public privateKeyOpenssh!: string | pulumi.Output<string>;
    public privateKeyPem!: string | pulumi.Output<string>;
    public privateKeyPemPkcs8!: string | pulumi.Output<string>;
    public publicKeyFingerprintMd5!: string | pulumi.Output<string>;
    public publicKeyFingerprintSha256!: string | pulumi.Output<string>;
    public publicKeyOpenssh!: string | pulumi.Output<string>;
    public publicKeyPem!: string | pulumi.Output<string>;
    public readyForRenewal!: boolean | pulumi.Output<boolean>;
    public rsaBits!: number | pulumi.Output<number>;
    public setAuthorityKeyId!: boolean | pulumi.Output<boolean>;
    public setSubjectKeyId!: boolean | pulumi.Output<boolean>;
    public subject?: tls.types.output.SelfSignedCertSubject | pulumi.Output<tls.types.output.SelfSignedCertSubject>;
    public uris?: string[] | pulumi.Output<string[]>;
    public validityEndTime!: string | pulumi.Output<string>;
    public validityPeriodHours!: number | pulumi.Output<number>;
    public validityStartTime!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tls:RootCa", name, opts.urn ? { algorithm: undefined, allowedUses: undefined, cert: undefined, certPem: undefined, dnsNames: undefined, earlyRenewalHours: undefined, ecdsaCurve: undefined, ipAddresses: undefined, isCaCertificate: undefined, key: undefined, keyAlgorithm: undefined, privateKeyOpenssh: undefined, privateKeyPem: undefined, privateKeyPemPkcs8: undefined, publicKeyFingerprintMd5: undefined, publicKeyFingerprintSha256: undefined, publicKeyOpenssh: undefined, publicKeyPem: undefined, readyForRenewal: undefined, rsaBits: undefined, setAuthorityKeyId: undefined, setSubjectKeyId: undefined, subject: undefined, uris: undefined, validityEndTime: undefined, validityPeriodHours: undefined, validityStartTime: undefined } : { name, args, opts }, opts);
    }
}
export interface RootCaArgs {
    readonly algorithm?: pulumi.Input<AlgorithmInputs>;
    readonly dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly earlyRenewalHours?: pulumi.Input<number>;
    readonly ecdsaCurve?: pulumi.Input<string>;
    readonly ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly rsaBits?: pulumi.Input<number>;
    readonly setAuthorityKeyId?: pulumi.Input<boolean>;
    readonly setSubjectKeyId?: pulumi.Input<boolean>;
    readonly subject?: pulumi.Input<tls.types.input.SelfSignedCertSubject>;
    readonly uris?: pulumi.Input<pulumi.Input<string>[]>;
    readonly validityPeriodHours: pulumi.Input<number>;
}
export abstract class Chmod<TData = any> extends (pulumi.ComponentResource)<TData> {
    public binaryPath!: string | pulumi.Output<string>;
    public changes!: boolean | pulumi.Output<boolean>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public files!: unknown | pulumi.Output<unknown>;
    public help!: boolean | pulumi.Output<boolean>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public mode!: string | pulumi.Output<string>;
    public noPreserveRoot!: boolean | pulumi.Output<boolean>;
    public preserveRoot!: boolean | pulumi.Output<boolean>;
    public quiet!: boolean | pulumi.Output<boolean>;
    public recursive!: boolean | pulumi.Output<boolean>;
    public reference?: string | pulumi.Output<string>;
    public silent!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public triggers!: any[] | pulumi.Output<any[]>;
    public version!: boolean | pulumi.Output<boolean>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Chmod", name, opts.urn ? { binaryPath: undefined, changes: undefined, command: undefined, connection: undefined, environment: undefined, files: undefined, help: undefined, lifecycle: undefined, mode: undefined, noPreserveRoot: undefined, preserveRoot: undefined, quiet: undefined, recursive: undefined, reference: undefined, silent: undefined, stderr: undefined, stdin: undefined, stdout: undefined, triggers: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface ChmodArgs {
    readonly binaryPath?: pulumi.Input<string>;
    readonly changes?: pulumi.Input<boolean>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly files: pulumi.Input<unknown>;
    readonly help?: pulumi.Input<boolean>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly mode: pulumi.Input<string>;
    readonly noPreserveRoot?: pulumi.Input<boolean>;
    readonly preserveRoot?: pulumi.Input<boolean>;
    readonly quiet?: pulumi.Input<boolean>;
    readonly recursive?: pulumi.Input<boolean>;
    readonly reference?: pulumi.Input<string>;
    readonly silent?: pulumi.Input<boolean>;
    readonly stdin?: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
    readonly version?: pulumi.Input<boolean>;
}
export abstract class Curl<TData = any> extends (pulumi.ComponentResource)<TData> {
    public abstractUnixSocket?: string | pulumi.Output<string>;
    public altSvc?: string | pulumi.Output<string>;
    public anyAuth?: boolean | pulumi.Output<boolean>;
    public append?: boolean | pulumi.Output<boolean>;
    public awsSigv4?: string | pulumi.Output<string>;
    public basic?: boolean | pulumi.Output<boolean>;
    public binaryPath!: string | pulumi.Output<string>;
    public cacert?: string | pulumi.Output<string>;
    public capath?: string | pulumi.Output<string>;
    public cert?: string | pulumi.Output<string>;
    public certStatus?: boolean | pulumi.Output<boolean>;
    public certType?: CurlCertTypeOutputs | pulumi.Output<CurlCertTypeOutputs>;
    public ciphers?: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public compressed?: boolean | pulumi.Output<boolean>;
    public compressedSsh?: boolean | pulumi.Output<boolean>;
    public config?: string | pulumi.Output<string>;
    public connectTimeout?: number | pulumi.Output<number>;
    public connectTo?: string | pulumi.Output<string>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public continueAt?: string | pulumi.Output<string>;
    public cookie?: string | pulumi.Output<string>;
    public cookieJar?: string | pulumi.Output<string>;
    public createDirs?: boolean | pulumi.Output<boolean>;
    public createFileMode?: string | pulumi.Output<string>;
    public crlf?: boolean | pulumi.Output<boolean>;
    public crlfFile?: string | pulumi.Output<string>;
    public curves?: string | pulumi.Output<string>;
    public data?: string | pulumi.Output<string>;
    public dataAscii?: string | pulumi.Output<string>;
    public dataBinary?: string | pulumi.Output<string>;
    public dataRaw?: string | pulumi.Output<string>;
    public dataUrlEncode?: string | pulumi.Output<string>;
    public delegation?: CurlDelegationLevelOutputs | pulumi.Output<CurlDelegationLevelOutputs>;
    public digest?: boolean | pulumi.Output<boolean>;
    public disable?: boolean | pulumi.Output<boolean>;
    public disableEprt?: boolean | pulumi.Output<boolean>;
    public disableEpsv?: boolean | pulumi.Output<boolean>;
    public disallowUsernameInUrl?: boolean | pulumi.Output<boolean>;
    public dnsInterface?: string | pulumi.Output<string>;
    public dnsIpv4Addr?: string | pulumi.Output<string>;
    public dnsIpv6Addr?: string | pulumi.Output<string>;
    public dnsServers?: string | pulumi.Output<string>;
    public dohCertStatus?: boolean | pulumi.Output<boolean>;
    public dohInsecure?: boolean | pulumi.Output<boolean>;
    public dohUrl?: string | pulumi.Output<string>;
    public dumpHeader?: string | pulumi.Output<string>;
    public egdFile?: string | pulumi.Output<string>;
    public engine?: string | pulumi.Output<string>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public etagCompare?: string | pulumi.Output<string>;
    public etagSave?: string | pulumi.Output<string>;
    public expect100Timeout?: number | pulumi.Output<number>;
    public fail?: boolean | pulumi.Output<boolean>;
    public failEarly?: boolean | pulumi.Output<boolean>;
    public failWithBody?: boolean | pulumi.Output<boolean>;
    public falseStart?: boolean | pulumi.Output<boolean>;
    public form?: string | pulumi.Output<string>;
    public formEscape?: boolean | pulumi.Output<boolean>;
    public formName?: string | pulumi.Output<string>;
    public ftpAccount?: string | pulumi.Output<string>;
    public ftpAlternativeUser?: string | pulumi.Output<string>;
    public ftpCreateDirs?: boolean | pulumi.Output<boolean>;
    public ftpMethod?: string | pulumi.Output<string>;
    public ftpPasv?: boolean | pulumi.Output<boolean>;
    public ftpPort?: string | pulumi.Output<string>;
    public ftpPret?: boolean | pulumi.Output<boolean>;
    public ftpSkipPasvIp?: boolean | pulumi.Output<boolean>;
    public ftpSslCccMode?: string | pulumi.Output<string>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public triggers!: any[] | pulumi.Output<any[]>;
    public urls!: unknown | pulumi.Output<unknown>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Curl", name, opts.urn ? { abstractUnixSocket: undefined, altSvc: undefined, anyAuth: undefined, append: undefined, awsSigv4: undefined, basic: undefined, binaryPath: undefined, cacert: undefined, capath: undefined, cert: undefined, certStatus: undefined, certType: undefined, ciphers: undefined, command: undefined, compressed: undefined, compressedSsh: undefined, config: undefined, connectTimeout: undefined, connectTo: undefined, connection: undefined, continueAt: undefined, cookie: undefined, cookieJar: undefined, createDirs: undefined, createFileMode: undefined, crlf: undefined, crlfFile: undefined, curves: undefined, data: undefined, dataAscii: undefined, dataBinary: undefined, dataRaw: undefined, dataUrlEncode: undefined, delegation: undefined, digest: undefined, disable: undefined, disableEprt: undefined, disableEpsv: undefined, disallowUsernameInUrl: undefined, dnsInterface: undefined, dnsIpv4Addr: undefined, dnsIpv6Addr: undefined, dnsServers: undefined, dohCertStatus: undefined, dohInsecure: undefined, dohUrl: undefined, dumpHeader: undefined, egdFile: undefined, engine: undefined, environment: undefined, etagCompare: undefined, etagSave: undefined, expect100Timeout: undefined, fail: undefined, failEarly: undefined, failWithBody: undefined, falseStart: undefined, form: undefined, formEscape: undefined, formName: undefined, ftpAccount: undefined, ftpAlternativeUser: undefined, ftpCreateDirs: undefined, ftpMethod: undefined, ftpPasv: undefined, ftpPort: undefined, ftpPret: undefined, ftpSkipPasvIp: undefined, ftpSslCccMode: undefined, lifecycle: undefined, stderr: undefined, stdin: undefined, stdout: undefined, triggers: undefined, urls: undefined } : { name, args, opts }, opts);
    }
}
export interface CurlArgs {
    readonly abstractUnixSocket?: pulumi.Input<string>;
    readonly altSvc?: pulumi.Input<string>;
    readonly anyAuth?: pulumi.Input<boolean>;
    readonly append?: pulumi.Input<boolean>;
    readonly awsSigv4?: pulumi.Input<string>;
    readonly basic?: pulumi.Input<boolean>;
    readonly binaryPath?: pulumi.Input<string>;
    readonly cacert?: pulumi.Input<string>;
    readonly capath?: pulumi.Input<string>;
    readonly cert?: pulumi.Input<string>;
    readonly certStatus?: pulumi.Input<boolean>;
    readonly certType?: pulumi.Input<CurlCertTypeInputs>;
    readonly ciphers?: pulumi.Input<string>;
    readonly compressed?: pulumi.Input<boolean>;
    readonly compressedSsh?: pulumi.Input<boolean>;
    readonly config?: pulumi.Input<string>;
    readonly connectTimeout?: pulumi.Input<number>;
    readonly connectTo?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly continueAt?: pulumi.Input<string>;
    readonly cookie?: pulumi.Input<string>;
    readonly cookieJar?: pulumi.Input<string>;
    readonly createDirs?: pulumi.Input<boolean>;
    readonly createFileMode?: pulumi.Input<string>;
    readonly crlf?: pulumi.Input<boolean>;
    readonly crlfFile?: pulumi.Input<string>;
    readonly curves?: pulumi.Input<string>;
    readonly data?: pulumi.Input<string>;
    readonly dataAscii?: pulumi.Input<string>;
    readonly dataBinary?: pulumi.Input<string>;
    readonly dataRaw?: pulumi.Input<string>;
    readonly dataUrlEncode?: pulumi.Input<string>;
    readonly delegation?: pulumi.Input<CurlDelegationLevelInputs>;
    readonly digest?: pulumi.Input<boolean>;
    readonly disable?: pulumi.Input<boolean>;
    readonly disableEprt?: pulumi.Input<boolean>;
    readonly disableEpsv?: pulumi.Input<boolean>;
    readonly disallowUsernameInUrl?: pulumi.Input<boolean>;
    readonly dnsInterface?: pulumi.Input<string>;
    readonly dnsIpv4Addr?: pulumi.Input<string>;
    readonly dnsIpv6Addr?: pulumi.Input<string>;
    readonly dnsServers?: pulumi.Input<string>;
    readonly dohCertStatus?: pulumi.Input<boolean>;
    readonly dohInsecure?: pulumi.Input<boolean>;
    readonly dohUrl?: pulumi.Input<string>;
    readonly dumpHeader?: pulumi.Input<string>;
    readonly egdFile?: pulumi.Input<string>;
    readonly engine?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly etagCompare?: pulumi.Input<string>;
    readonly etagSave?: pulumi.Input<string>;
    readonly expect100Timeout?: pulumi.Input<number>;
    readonly fail?: pulumi.Input<boolean>;
    readonly failEarly?: pulumi.Input<boolean>;
    readonly failWithBody?: pulumi.Input<boolean>;
    readonly falseStart?: pulumi.Input<boolean>;
    readonly form?: pulumi.Input<string>;
    readonly formEscape?: pulumi.Input<boolean>;
    readonly formName?: pulumi.Input<string>;
    readonly ftpAccount?: pulumi.Input<string>;
    readonly ftpAlternativeUser?: pulumi.Input<string>;
    readonly ftpCreateDirs?: pulumi.Input<boolean>;
    readonly ftpMethod?: pulumi.Input<string>;
    readonly ftpPasv?: pulumi.Input<boolean>;
    readonly ftpPort?: pulumi.Input<string>;
    readonly ftpPret?: pulumi.Input<boolean>;
    readonly ftpSkipPasvIp?: pulumi.Input<boolean>;
    readonly ftpSslCccMode?: pulumi.Input<string>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly stdin?: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
    readonly urls: pulumi.Input<unknown>;
}
export abstract class Etcdctl<TData = any> extends (pulumi.ComponentResource)<TData> {
    public binaryPath!: string | pulumi.Output<string>;
    public caCert!: string | pulumi.Output<string>;
    public cert!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public commands!: EtcdctlCommandOutputs | pulumi.Output<EtcdctlCommandOutputs>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public endpoints!: string | pulumi.Output<string>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public key!: string | pulumi.Output<string>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public triggers!: any[] | pulumi.Output<any[]>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Etcdctl", name, opts.urn ? { binaryPath: undefined, caCert: undefined, cert: undefined, command: undefined, commands: undefined, connection: undefined, endpoints: undefined, environment: undefined, key: undefined, lifecycle: undefined, stderr: undefined, stdin: undefined, stdout: undefined, triggers: undefined } : { name, args, opts }, opts);
    }
}
export interface EtcdctlArgs {
    readonly binaryPath?: pulumi.Input<string>;
    readonly caCert: pulumi.Input<string>;
    readonly cert: pulumi.Input<string>;
    readonly commands: pulumi.Input<EtcdctlCommandInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly endpoints: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly key: pulumi.Input<string>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly stdin?: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
}
export abstract class Hostnamectl<TData = any> extends (pulumi.ComponentResource)<TData> {
    public arg?: string | pulumi.Output<string>;
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public help!: boolean | pulumi.Output<boolean>;
    public host?: string | pulumi.Output<string>;
    public hostnamectlCommand!: HostnamectlCommandOutputs | pulumi.Output<HostnamectlCommandOutputs>;
    public json?: HostnamectlJsonModeOutputs | pulumi.Output<HostnamectlJsonModeOutputs>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public machine?: string | pulumi.Output<string>;
    public noAskPassword!: boolean | pulumi.Output<boolean>;
    public pretty!: boolean | pulumi.Output<boolean>;
    public static!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public transient!: boolean | pulumi.Output<boolean>;
    public triggers!: any[] | pulumi.Output<any[]>;
    public version!: boolean | pulumi.Output<boolean>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Hostnamectl", name, opts.urn ? { arg: undefined, binaryPath: undefined, command: undefined, connection: undefined, environment: undefined, help: undefined, host: undefined, hostnamectlCommand: undefined, json: undefined, lifecycle: undefined, machine: undefined, noAskPassword: undefined, pretty: undefined, static: undefined, stderr: undefined, stdin: undefined, stdout: undefined, transient: undefined, triggers: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface HostnamectlArgs {
    readonly arg?: pulumi.Input<string>;
    readonly binaryPath?: pulumi.Input<string>;
    readonly command: pulumi.Input<HostnamectlCommandInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly help?: pulumi.Input<boolean>;
    readonly host?: pulumi.Input<string>;
    readonly json?: pulumi.Input<HostnamectlJsonModeInputs>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly machine?: pulumi.Input<string>;
    readonly noAskPassword?: pulumi.Input<boolean>;
    readonly pretty?: pulumi.Input<boolean>;
    readonly static?: pulumi.Input<boolean>;
    readonly stdin?: pulumi.Input<string>;
    readonly transient?: pulumi.Input<boolean>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
    readonly version?: pulumi.Input<boolean>;
}
export abstract class Mkdir<TData = any> extends (pulumi.ComponentResource)<TData> {
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory!: string | pulumi.Output<string>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public parents!: boolean | pulumi.Output<boolean>;
    public removeOnDelete!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public triggers!: any[] | pulumi.Output<any[]>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Mkdir", name, opts.urn ? { binaryPath: undefined, command: undefined, connection: undefined, directory: undefined, environment: undefined, lifecycle: undefined, parents: undefined, removeOnDelete: undefined, stderr: undefined, stdin: undefined, stdout: undefined, triggers: undefined } : { name, args, opts }, opts);
    }
}
export interface MkdirArgs {
    readonly binaryPath?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly parents?: pulumi.Input<boolean>;
    readonly removeOnDelete?: pulumi.Input<boolean>;
    readonly stdin?: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
}
export abstract class Mktemp<TData = any> extends (pulumi.ComponentResource)<TData> {
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory?: boolean | pulumi.Output<boolean>;
    public dryRun!: boolean | pulumi.Output<boolean>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public quiet!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public suffix?: string | pulumi.Output<string>;
    public template?: string | pulumi.Output<string>;
    public tmpdir?: string | pulumi.Output<string>;
    public triggers!: any[] | pulumi.Output<any[]>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Mktemp", name, opts.urn ? { binaryPath: undefined, command: undefined, connection: undefined, directory: undefined, dryRun: undefined, environment: undefined, lifecycle: undefined, quiet: undefined, stderr: undefined, stdin: undefined, stdout: undefined, suffix: undefined, template: undefined, tmpdir: undefined, triggers: undefined } : { name, args, opts }, opts);
    }
}
export interface MktempArgs {
    readonly binaryPath?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<boolean>;
    readonly dryRun?: pulumi.Input<boolean>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly quiet?: pulumi.Input<boolean>;
    readonly stdin?: pulumi.Input<string>;
    readonly suffix?: pulumi.Input<string>;
    readonly template?: pulumi.Input<string>;
    readonly tmpdir?: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
}
export abstract class Mv<TData = any> extends (pulumi.ComponentResource)<TData> {
    public backup!: boolean | boolean;
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public context!: boolean | pulumi.Output<boolean>;
    public control?: boolean | pulumi.Output<boolean>;
    public dest?: string | pulumi.Output<string>;
    public directory?: string | pulumi.Output<string>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public force!: boolean | pulumi.Output<boolean>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public noClobber!: boolean | pulumi.Output<boolean>;
    public noTargetDirectory!: boolean | pulumi.Output<boolean>;
    public source!: unknown | pulumi.Output<unknown>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public stripTrailingSlashes!: boolean | pulumi.Output<boolean>;
    public suffix?: string | pulumi.Output<string>;
    public targetDirectory?: boolean | pulumi.Output<boolean>;
    public triggers!: any[] | pulumi.Output<any[]>;
    public update!: boolean | pulumi.Output<boolean>;
    public verbose!: boolean | pulumi.Output<boolean>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Mv", name, opts.urn ? { backup: undefined, binaryPath: undefined, command: undefined, connection: undefined, context: undefined, control: undefined, dest: undefined, directory: undefined, environment: undefined, force: undefined, lifecycle: undefined, noClobber: undefined, noTargetDirectory: undefined, source: undefined, stderr: undefined, stdin: undefined, stdout: undefined, stripTrailingSlashes: undefined, suffix: undefined, targetDirectory: undefined, triggers: undefined, update: undefined, verbose: undefined } : { name, args, opts }, opts);
    }
}
export interface MvArgs {
    readonly backup?: boolean;
    readonly binaryPath?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly context?: pulumi.Input<boolean>;
    readonly control?: pulumi.Input<boolean>;
    readonly dest?: pulumi.Input<string>;
    readonly directory?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly force?: pulumi.Input<boolean>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly noClobber?: pulumi.Input<boolean>;
    readonly noTargetDirectory?: pulumi.Input<boolean>;
    readonly source: pulumi.Input<unknown>;
    readonly stdin?: pulumi.Input<string>;
    readonly stripTrailingSlashes?: pulumi.Input<boolean>;
    readonly suffix?: pulumi.Input<string>;
    readonly targetDirectory?: pulumi.Input<boolean>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
    readonly update?: pulumi.Input<boolean>;
    readonly verbose?: pulumi.Input<boolean>;
}
export abstract class Rm<TData = any> extends (pulumi.ComponentResource)<TData> {
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public dir!: boolean | pulumi.Output<boolean>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public files!: unknown | pulumi.Output<unknown>;
    public force!: boolean | pulumi.Output<boolean>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public onDelete!: boolean | pulumi.Output<boolean>;
    public recursive!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public triggers!: any[] | pulumi.Output<any[]>;
    public verbose!: boolean | pulumi.Output<boolean>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Rm", name, opts.urn ? { binaryPath: undefined, command: undefined, connection: undefined, dir: undefined, environment: undefined, files: undefined, force: undefined, lifecycle: undefined, onDelete: undefined, recursive: undefined, stderr: undefined, stdin: undefined, stdout: undefined, triggers: undefined, verbose: undefined } : { name, args, opts }, opts);
    }
}
export interface RmArgs {
    readonly binaryPath?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly dir?: pulumi.Input<boolean>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly files: pulumi.Input<unknown>;
    readonly force?: pulumi.Input<boolean>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly onDelete?: pulumi.Input<boolean>;
    readonly recursive?: pulumi.Input<boolean>;
    readonly stdin?: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
    readonly verbose?: pulumi.Input<boolean>;
}
export abstract class Sed<TData = any> extends (pulumi.ComponentResource)<TData> {
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public debug!: boolean | pulumi.Output<boolean>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public expressions!: unknown | pulumi.Output<unknown>;
    public files!: unknown | pulumi.Output<unknown>;
    public followSymlinks!: boolean | pulumi.Output<boolean>;
    public help!: boolean | pulumi.Output<boolean>;
    public inPlace?: string | pulumi.Output<string>;
    public inputFiles!: unknown | pulumi.Output<unknown>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public lineLength?: number | pulumi.Output<number>;
    public nullData!: boolean | pulumi.Output<boolean>;
    public posix!: boolean | pulumi.Output<boolean>;
    public quiet!: boolean | pulumi.Output<boolean>;
    public regexpExtended!: boolean | pulumi.Output<boolean>;
    public sandbox!: boolean | pulumi.Output<boolean>;
    public script?: string | pulumi.Output<string>;
    public separate!: boolean | pulumi.Output<boolean>;
    public silent!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public triggers!: any[] | pulumi.Output<any[]>;
    public unbuffered!: boolean | pulumi.Output<boolean>;
    public version!: boolean | pulumi.Output<boolean>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Sed", name, opts.urn ? { binaryPath: undefined, command: undefined, connection: undefined, debug: undefined, environment: undefined, expressions: undefined, files: undefined, followSymlinks: undefined, help: undefined, inPlace: undefined, inputFiles: undefined, lifecycle: undefined, lineLength: undefined, nullData: undefined, posix: undefined, quiet: undefined, regexpExtended: undefined, sandbox: undefined, script: undefined, separate: undefined, silent: undefined, stderr: undefined, stdin: undefined, stdout: undefined, triggers: undefined, unbuffered: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface SedArgs {
    readonly binaryPath?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly debug?: pulumi.Input<boolean>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly expressions?: pulumi.Input<unknown>;
    readonly files?: pulumi.Input<unknown>;
    readonly followSymlinks?: pulumi.Input<boolean>;
    readonly help?: pulumi.Input<boolean>;
    readonly inPlace?: pulumi.Input<string>;
    readonly inputFiles?: pulumi.Input<unknown>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly lineLength?: pulumi.Input<number>;
    readonly nullData?: pulumi.Input<boolean>;
    readonly posix?: pulumi.Input<boolean>;
    readonly quiet?: pulumi.Input<boolean>;
    readonly regexpExtended?: pulumi.Input<boolean>;
    readonly sandbox?: pulumi.Input<boolean>;
    readonly script?: pulumi.Input<string>;
    readonly separate?: pulumi.Input<boolean>;
    readonly silent?: pulumi.Input<boolean>;
    readonly stdin?: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
    readonly unbuffered?: pulumi.Input<boolean>;
    readonly version?: pulumi.Input<boolean>;
}
export abstract class Systemctl<TData = any> extends (pulumi.ComponentResource)<TData> {
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public pattern?: string | pulumi.Output<string>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public systemctlCommand!: SystemctlCommandOutputs | SystemctlCommandOutputs;
    public triggers!: any[] | pulumi.Output<any[]>;
    public unit!: string | pulumi.Output<string>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Systemctl", name, opts.urn ? { binaryPath: undefined, command: undefined, connection: undefined, environment: undefined, lifecycle: undefined, pattern: undefined, stderr: undefined, stdin: undefined, stdout: undefined, systemctlCommand: undefined, triggers: undefined, unit: undefined } : { name, args, opts }, opts);
    }
}
export interface SystemctlArgs {
    readonly binaryPath?: pulumi.Input<string>;
    readonly command: SystemctlCommandInputs;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly pattern?: pulumi.Input<string>;
    readonly stdin?: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
    readonly unit: pulumi.Input<string>;
}
export abstract class Tar<TData = any> extends (pulumi.ComponentResource)<TData> {
    public archive!: string | pulumi.Output<string>;
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directory?: string | pulumi.Output<string>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public extract!: boolean | pulumi.Output<boolean>;
    public files!: unknown | pulumi.Output<unknown>;
    public gzip?: boolean | pulumi.Output<boolean>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public onDelete?: boolean | pulumi.Output<boolean>;
    public recursive?: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public stripComponents?: number | pulumi.Output<number>;
    public triggers!: any[] | pulumi.Output<any[]>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Tar", name, opts.urn ? { archive: undefined, binaryPath: undefined, command: undefined, connection: undefined, directory: undefined, environment: undefined, extract: undefined, files: undefined, gzip: undefined, lifecycle: undefined, onDelete: undefined, recursive: undefined, stderr: undefined, stdin: undefined, stdout: undefined, stripComponents: undefined, triggers: undefined } : { name, args, opts }, opts);
    }
}
export interface TarArgs {
    readonly archive: pulumi.Input<string>;
    readonly binaryPath?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directory?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly extract?: pulumi.Input<boolean>;
    readonly files?: pulumi.Input<unknown>;
    readonly gzip?: pulumi.Input<boolean>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly onDelete?: pulumi.Input<boolean>;
    readonly recursive?: pulumi.Input<boolean>;
    readonly stdin?: pulumi.Input<string>;
    readonly stripComponents?: pulumi.Input<number>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
}
export abstract class Tee<TData = any> extends (pulumi.ComponentResource)<TData> {
    public append!: boolean | pulumi.Output<boolean>;
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public files!: unknown | pulumi.Output<unknown>;
    public ignoreInterrupts!: boolean | pulumi.Output<boolean>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public outputError?: TeeModeOutputs | pulumi.Output<TeeModeOutputs>;
    public pipe!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin!: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public triggers!: any[] | pulumi.Output<any[]>;
    public version!: boolean | pulumi.Output<boolean>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Tee", name, opts.urn ? { append: undefined, binaryPath: undefined, command: undefined, connection: undefined, environment: undefined, files: undefined, ignoreInterrupts: undefined, lifecycle: undefined, outputError: undefined, pipe: undefined, stderr: undefined, stdin: undefined, stdout: undefined, triggers: undefined, version: undefined } : { name, args, opts }, opts);
    }
}
export interface TeeArgs {
    readonly append?: pulumi.Input<boolean>;
    readonly binaryPath?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly files: pulumi.Input<unknown>;
    readonly ignoreInterrupts?: pulumi.Input<boolean>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly outputError?: pulumi.Input<TeeModeInputs>;
    readonly pipe?: pulumi.Input<boolean>;
    readonly stdin: pulumi.Input<string>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
    readonly version?: pulumi.Input<boolean>;
}
export abstract class Wget<TData = any> extends (pulumi.ComponentResource)<TData> {
    public binaryPath!: string | pulumi.Output<string>;
    public command!: command.remote.Command | pulumi.Output<command.remote.Command>;
    public connection!: command.types.output.remote.Connection | pulumi.Output<command.types.output.remote.Connection>;
    public directoryPrefix?: string | pulumi.Output<string>;
    public environment!: Record<string, string> | pulumi.Output<Record<string, string>>;
    public httpsOnly!: boolean | pulumi.Output<boolean>;
    public lifecycle?: CommandLifecycleOutputs | CommandLifecycleOutputs;
    public noVerbose!: boolean | pulumi.Output<boolean>;
    public outputDocument?: string | pulumi.Output<string>;
    public quiet!: boolean | pulumi.Output<boolean>;
    public stderr!: string | pulumi.Output<string>;
    public stdin?: string | pulumi.Output<string>;
    public stdout!: string | pulumi.Output<string>;
    public timestamping!: boolean | pulumi.Output<boolean>;
    public triggers!: any[] | pulumi.Output<any[]>;
    public url!: unknown | pulumi.Output<unknown>;
    constructor(name: string, args: pulumi.Inputs, opts: pulumi.ComponentResourceOptions = {}) {
        super("kubernetes-the-hard-way:tools:Wget", name, opts.urn ? { binaryPath: undefined, command: undefined, connection: undefined, directoryPrefix: undefined, environment: undefined, httpsOnly: undefined, lifecycle: undefined, noVerbose: undefined, outputDocument: undefined, quiet: undefined, stderr: undefined, stdin: undefined, stdout: undefined, timestamping: undefined, triggers: undefined, url: undefined } : { name, args, opts }, opts);
    }
}
export interface WgetArgs {
    readonly binaryPath?: pulumi.Input<string>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly directoryPrefix?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<Record<string, pulumi.Input<string>>>;
    readonly httpsOnly?: pulumi.Input<boolean>;
    readonly lifecycle?: CommandLifecycleInputs;
    readonly noVerbose?: pulumi.Input<boolean>;
    readonly outputDocument?: pulumi.Input<string>;
    readonly quiet?: pulumi.Input<boolean>;
    readonly stdin?: pulumi.Input<string>;
    readonly timestamping?: pulumi.Input<boolean>;
    readonly triggers?: pulumi.Input<pulumi.Input<any>[]>;
    readonly url: pulumi.Input<unknown>;
}
export interface ClusterInputs {
    readonly certificateAuthorityData: pulumi.Input<string>;
    readonly server: pulumi.Input<string>;
}
export interface ClusterOutputs {
    readonly certificateAuthorityData: pulumi.Output<string>;
    readonly server: pulumi.Output<string>;
}
export interface ContextInputs {
    readonly cluster: pulumi.Input<string>;
    readonly user: pulumi.Input<string>;
}
export interface ContextOutputs {
    readonly cluster: pulumi.Output<string>;
    readonly user: pulumi.Output<string>;
}
export interface KubeconfigInputs {
    readonly clusters: pulumi.Input<pulumi.Input<ClusterInputs>[]>;
    readonly contexts: pulumi.Input<pulumi.Input<ContextInputs>[]>;
    readonly users: pulumi.Input<pulumi.Input<UserInputs>[]>;
}
export interface KubeconfigOutputs {
    readonly clusters: pulumi.Output<ClusterOutputs[]>;
    readonly contexts: pulumi.Output<ContextOutputs[]>;
    readonly users: pulumi.Output<UserOutputs[]>;
}
export interface KubeconfigAdminOptionsInputs {
    readonly publicIp?: pulumi.Input<string>;
    readonly type: string;
}
export interface KubeconfigAdminOptionsOutputs {
    readonly publicIp?: pulumi.Output<string>;
    readonly type: string;
}
export interface KubeconfigClusterInputs {
    readonly cluster: pulumi.Input<ClusterInputs>;
    readonly name: pulumi.Input<string>;
}
export interface KubeconfigClusterOutputs {
    readonly cluster: pulumi.Output<ClusterOutputs>;
    readonly name: pulumi.Output<string>;
}
export interface KubeconfigContextInputs {
    readonly context: pulumi.Input<ContextInputs>;
    readonly name: pulumi.Input<string>;
}
export interface KubeconfigContextOutputs {
    readonly context: pulumi.Output<ContextOutputs>;
    readonly name: pulumi.Output<string>;
}
export interface KubeconfigKubeControllerManagerOptionsInputs {
    readonly publicIp?: pulumi.Input<string>;
    readonly type: string;
}
export interface KubeconfigKubeControllerManagerOptionsOutputs {
    readonly publicIp?: pulumi.Output<string>;
    readonly type: string;
}
export interface KubeconfigKubeProxyOptionsInputs {
    readonly publicIp?: pulumi.Input<string>;
    readonly type: string;
}
export interface KubeconfigKubeProxyOptionsOutputs {
    readonly publicIp?: pulumi.Output<string>;
    readonly type: string;
}
export interface KubeconfigKubeSchedulerOptionsInputs {
    readonly publicIp?: pulumi.Input<string>;
    readonly type: string;
}
export interface KubeconfigKubeSchedulerOptionsOutputs {
    readonly publicIp?: pulumi.Output<string>;
    readonly type: string;
}
export type KubeconfigTypeInputs = "worker" | "kube-proxy" | "kube-controller-manager" | "kube-scheduler" | "admin";
export type KubeconfigTypeOutputs = "worker" | "kube-proxy" | "kube-controller-manager" | "kube-scheduler" | "admin";
export interface KubeconfigUserInputs {
    readonly name: pulumi.Input<string>;
    readonly user: pulumi.Input<UserInputs>;
}
export interface KubeconfigUserOutputs {
    readonly name: pulumi.Output<string>;
    readonly user: pulumi.Output<UserOutputs>;
}
export interface KubeconfigWorkerOptionsInputs {
    readonly name: pulumi.Input<string>;
    readonly publicIp: pulumi.Input<string>;
    readonly type?: string;
}
export interface KubeconfigWorkerOptionsOutputs {
    readonly name: pulumi.Output<string>;
    readonly publicIp: pulumi.Output<string>;
    readonly type?: string;
}
export interface PodManifestInputs {
    readonly apiVersion?: pulumi.Input<string>;
    readonly kind?: pulumi.Input<string>;
    readonly metadata?: pulumi.Input<kubernetes.types.input.meta.v1.ObjectMeta>;
    readonly spec?: pulumi.Input<kubernetes.types.input.core.v1.PodSpec>;
    readonly status?: pulumi.Input<kubernetes.types.input.core.v1.PodStatus>;
}
export interface PodManifestOutputs {
    readonly apiVersion?: pulumi.Output<string>;
    readonly kind?: pulumi.Output<string>;
    readonly metadata?: pulumi.Output<kubernetes.types.output.meta.v1.ObjectMeta>;
    readonly spec?: pulumi.Output<kubernetes.types.output.core.v1.PodSpec>;
    readonly status?: pulumi.Output<kubernetes.types.output.core.v1.PodStatus>;
}
export interface UserInputs {
    readonly clientCertificateData: pulumi.Input<string>;
    readonly clientKeyData: pulumi.Input<string>;
}
export interface UserOutputs {
    readonly clientCertificateData: pulumi.Output<string>;
    readonly clientKeyData: pulumi.Output<string>;
}
export type ArchitectureInputs = "amd64" | "arm64";
export type ArchitectureOutputs = "amd64" | "arm64";
export interface EtcdConfigurationPropsInputs {
    readonly caFilePath: pulumi.Input<string>;
    readonly certFilePath: pulumi.Input<string>;
    readonly dataDirectory: pulumi.Input<string>;
    readonly etcdPath: pulumi.Input<string>;
    readonly internalIp: pulumi.Input<string>;
    readonly keyFilePath: pulumi.Input<string>;
    readonly name: pulumi.Input<string>;
}
export interface EtcdConfigurationPropsOutputs {
    readonly caFilePath: pulumi.Output<string>;
    readonly certFilePath: pulumi.Output<string>;
    readonly dataDirectory: pulumi.Output<string>;
    readonly etcdPath: pulumi.Output<string>;
    readonly internalIp: pulumi.Output<string>;
    readonly keyFilePath: pulumi.Output<string>;
    readonly name: pulumi.Output<string>;
}
export interface EtcdNodeInputs {
    readonly architecture?: pulumi.Input<ArchitectureInputs>;
    readonly connection: pulumi.Input<command.types.input.remote.ConnectionArgs>;
    readonly internalIp: pulumi.Input<string>;
}
export interface EtcdNodeOutputs {
    readonly architecture?: pulumi.Output<ArchitectureOutputs>;
    readonly connection: pulumi.Output<command.types.output.remote.Connection>;
    readonly internalIp: pulumi.Output<string>;
}
export interface SystemdInstallSectionInputs {
    readonly wantedBy?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface SystemdInstallSectionOutputs {
    readonly wantedBy?: pulumi.Output<string[]>;
}
export type SystemdServiceExitTypeInputs = "main" | "cgroup";
export type SystemdServiceExitTypeOutputs = "main" | "cgroup";
export type SystemdServiceRestartInputs = "no" | "on-success" | "on-failure" | "on-abnormal" | "on-watchdog" | "on-abort" | "always";
export type SystemdServiceRestartOutputs = "no" | "on-success" | "on-failure" | "on-abnormal" | "on-watchdog" | "on-abort" | "always";
export interface SystemdServiceSectionInputs {
    readonly execStart?: pulumi.Input<string>;
    readonly exitType?: pulumi.Input<SystemdServiceExitTypeInputs>;
    readonly restart?: pulumi.Input<SystemdServiceRestartInputs>;
    readonly restartSec?: pulumi.Input<string>;
    readonly type?: pulumi.Input<SystemdServiceTypeInputs>;
}
export interface SystemdServiceSectionOutputs {
    readonly execStart?: pulumi.Output<string>;
    readonly exitType?: pulumi.Output<SystemdServiceExitTypeOutputs>;
    readonly restart?: pulumi.Output<SystemdServiceRestartOutputs>;
    readonly restartSec?: pulumi.Output<string>;
    readonly type?: pulumi.Output<SystemdServiceTypeOutputs>;
}
export type SystemdServiceTypeInputs = "simple" | "exec" | "forking" | "oneshot" | "dbus" | "notify" | "notify-reload" | "idle";
export type SystemdServiceTypeOutputs = "simple" | "exec" | "forking" | "oneshot" | "dbus" | "notify" | "notify-reload" | "idle";
export interface SystemdUnitSectionInputs {
    readonly bindsTo?: pulumi.Input<pulumi.Input<string>[]>;
    readonly description?: pulumi.Input<string>;
    readonly documentation?: pulumi.Input<pulumi.Input<string>[]>;
    readonly requires?: pulumi.Input<pulumi.Input<string>[]>;
    readonly requisite?: pulumi.Input<pulumi.Input<string>[]>;
    readonly wants?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface SystemdUnitSectionOutputs {
    readonly bindsTo?: pulumi.Output<string[]>;
    readonly description?: pulumi.Output<string>;
    readonly documentation?: pulumi.Output<string[]>;
    readonly requires?: pulumi.Output<string[]>;
    readonly requisite?: pulumi.Output<string[]>;
    readonly wants?: pulumi.Output<string[]>;
}
export type AlgorithmInputs = "RSA" | "ECDSA" | "ED25519";
export type AlgorithmOutputs = "RSA" | "ECDSA" | "ED25519";
export type AllowedUsageInputs = "cert_signing" | "client_auth" | "crl_signing" | "digital_signature" | "key_encipherment" | "server_auth";
export type AllowedUsageOutputs = "cert_signing" | "client_auth" | "crl_signing" | "digital_signature" | "key_encipherment" | "server_auth";
export interface BundleInputs {
    readonly caPem: pulumi.Input<string>;
    readonly certPem: pulumi.Input<string>;
    readonly keyPem: pulumi.Input<string>;
}
export interface BundleOutputs {
    readonly caPem: pulumi.Output<string>;
    readonly certPem: pulumi.Output<string>;
    readonly keyPem: pulumi.Output<string>;
}
export interface ClusterPkiNodeInputs {
    readonly ip?: pulumi.Input<string>;
    readonly role?: pulumi.Input<NodeRoleInputs>;
}
export interface ClusterPkiNodeOutputs {
    readonly ip?: pulumi.Output<string>;
    readonly role?: pulumi.Output<NodeRoleOutputs>;
}
export type EcdsaCurveInputs = "P224" | "P256" | "P384" | "P521";
export type EcdsaCurveOutputs = "P224" | "P256" | "P384" | "P521";
export interface KeyPairInputs {
    readonly cert: pulumi.Input<unknown>;
    readonly certPem: pulumi.Input<string>;
    readonly key: pulumi.Input<tls.PrivateKey>;
    readonly privateKeyPem: pulumi.Input<string>;
    readonly publicKeyPem: pulumi.Input<string>;
}
export interface KeyPairOutputs {
    readonly cert: pulumi.Output<unknown>;
    readonly certPem: pulumi.Output<string>;
    readonly key: pulumi.Output<tls.PrivateKey>;
    readonly privateKeyPem: pulumi.Output<string>;
    readonly publicKeyPem: pulumi.Output<string>;
}
export type NodeRoleInputs = "controlplane" | "worker";
export type NodeRoleOutputs = "controlplane" | "worker";
export type CommandLifecycleInputs = "create" | "update" | "delete";
export type CommandLifecycleOutputs = "create" | "update" | "delete";
export type CurlCertTypeInputs = "PEM" | "DER" | "ENG" | "P12";
export type CurlCertTypeOutputs = "PEM" | "DER" | "ENG" | "P12";
export type CurlDelegationLevelInputs = "none" | "policy" | "always";
export type CurlDelegationLevelOutputs = "none" | "policy" | "always";
export type EtcdctlCommandInputs = "member" | "list";
export type EtcdctlCommandOutputs = "member" | "list";
export type HostnamectlCommandInputs = "status" | "hostname" | "icon-name" | "chassis" | "deployment" | "location";
export type HostnamectlCommandOutputs = "status" | "hostname" | "icon-name" | "chassis" | "deployment" | "location";
export type HostnamectlJsonModeInputs = "short" | "pretty" | "off";
export type HostnamectlJsonModeOutputs = "short" | "pretty" | "off";
export type SystemctlCommandInputs = "bind" | "cat" | "clean" | "daemon-reload" | "disable" | "enable" | "freeze" | "is-active" | "is-enabled" | "is-failed" | "isolate" | "kill" | "list-automounts" | "list-dependencies" | "list-paths" | "list-sockets" | "list-timers" | "list-units" | "mask" | "mount-image" | "reenable" | "reload" | "reload-or-restart" | "restart" | "set-property" | "show" | "start" | "status" | "stop" | "thaw" | "try-reload-or-restart" | "try-restart" | "unmask";
export type SystemctlCommandOutputs = "bind" | "cat" | "clean" | "daemon-reload" | "disable" | "enable" | "freeze" | "is-active" | "is-enabled" | "is-failed" | "isolate" | "kill" | "list-automounts" | "list-dependencies" | "list-paths" | "list-sockets" | "list-timers" | "list-units" | "mask" | "mount-image" | "reenable" | "reload" | "reload-or-restart" | "restart" | "set-property" | "show" | "start" | "status" | "stop" | "thaw" | "try-reload-or-restart" | "try-restart" | "unmask";
export type TeeModeInputs = "warn" | "warn-nopipe" | "exit" | "exit-nopipe";
export type TeeModeOutputs = "warn" | "warn-nopipe" | "exit" | "exit-nopipe";
export interface getKubeVipManifestInputs {
    readonly address: pulumi.Input<string>;
    readonly bgpAs?: pulumi.Input<number>;
    readonly bgpEnable?: pulumi.Input<boolean>;
    readonly bgpPeerAddress?: pulumi.Input<string>;
    readonly bgpPeerAs?: pulumi.Input<number>;
    readonly bgpPeerPass?: pulumi.Input<string>;
    readonly bgpPeers?: pulumi.Input<string>;
    readonly bgpRouterId?: pulumi.Input<string>;
    readonly cpEnable?: pulumi.Input<boolean>;
    readonly cpNamespace?: pulumi.Input<string>;
    readonly image?: pulumi.Input<string>;
    readonly kubeconfigPath: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly namespace?: pulumi.Input<string>;
    readonly port?: pulumi.Input<number>;
    readonly svcEnable?: pulumi.Input<boolean>;
    readonly version?: pulumi.Input<string>;
    readonly vipArp?: pulumi.Input<boolean>;
    readonly vipCidr: pulumi.Input<number>;
    readonly vipDdns?: pulumi.Input<boolean>;
    readonly vipInterface?: pulumi.Input<string>;
    readonly vipLeaderElection?: pulumi.Input<boolean>;
    readonly vipLeaseDuration?: pulumi.Input<number>;
    readonly vipRenewDeadline?: pulumi.Input<number>;
    readonly vipRetryPeriod?: pulumi.Input<number>;
}
export interface getKubeVipManifestOutputs {
    readonly result: pulumi.Output<PodManifestOutputs>;
}
export interface getKubeconfigInputs {
    readonly caPem: pulumi.Input<string>;
    readonly options: unknown;
}
export interface getKubeconfigOutputs {
    readonly result: pulumi.Output<KubeconfigOutputs>;
}
export interface ClusterPki_getKubeconfigInputs {
    readonly __self__: pulumi.Input<ClusterPki>;
    readonly options: unknown;
}
export interface ClusterPki_getKubeconfigOutputs {
    readonly result: pulumi.Output<KubeconfigOutputs>;
}
